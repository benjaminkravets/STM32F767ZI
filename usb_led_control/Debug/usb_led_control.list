
usb_led_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f8a0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000704  0800faa0  0800faa0  0001faa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080101a4  080101a4  000302a0  2**0
                  CONTENTS
  4 .ARM          00000008  080101a4  080101a4  000201a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080101ac  080101ac  000302a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080101ac  080101ac  000201ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080101b0  080101b0  000201b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  080101b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000160  08010314  00030160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000200  080103b4  00030200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00007264  200002a0  08010454  000302a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20007504  08010454  00037504  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000302a0  2**0
                  CONTENTS, READONLY
 14 .comment      00000086  00000000  00000000  000302ce  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002e76f  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005e69  00000000  00000000  0005eac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002358  00000000  00000000  00064930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001b48  00000000  00000000  00066c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0000a735  00000000  00000000  000687d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002a812  00000000  00000000  00072f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00117361  00000000  00000000  0009d717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00009a44  00000000  00000000  001b4a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000007c  00000000  00000000  001be4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002a0 	.word	0x200002a0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800fa88 	.word	0x0800fa88

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002a4 	.word	0x200002a4
 800023c:	0800fa88 	.word	0x0800fa88

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	200002bc 	.word	0x200002bc
	...

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8000682:	4b26      	ldr	r3, [pc, #152]	; (800071c <_DoInit+0xa0>)
 8000684:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8000686:	22a8      	movs	r2, #168	; 0xa8
 8000688:	2100      	movs	r1, #0
 800068a:	6838      	ldr	r0, [r7, #0]
 800068c:	f00e fdce 	bl	800f22c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	2203      	movs	r2, #3
 8000694:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	2203      	movs	r2, #3
 800069a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	4a20      	ldr	r2, [pc, #128]	; (8000720 <_DoInit+0xa4>)
 80006a0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	4a1f      	ldr	r2, [pc, #124]	; (8000724 <_DoInit+0xa8>)
 80006a6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ae:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	2200      	movs	r2, #0
 80006b4:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	2200      	movs	r2, #0
 80006ba:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	2200      	movs	r2, #0
 80006c0:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	4a16      	ldr	r2, [pc, #88]	; (8000720 <_DoInit+0xa4>)
 80006c6:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	4a17      	ldr	r2, [pc, #92]	; (8000728 <_DoInit+0xac>)
 80006cc:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	2210      	movs	r2, #16
 80006d2:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	2200      	movs	r2, #0
 80006d8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	2200      	movs	r2, #0
 80006de:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	2200      	movs	r2, #0
 80006e4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80006e6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	e00c      	b.n	800070a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f1c3 030f 	rsb	r3, r3, #15
 80006f6:	4a0d      	ldr	r2, [pc, #52]	; (800072c <_DoInit+0xb0>)
 80006f8:	5cd1      	ldrb	r1, [r2, r3]
 80006fa:	683a      	ldr	r2, [r7, #0]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4413      	add	r3, r2
 8000700:	460a      	mov	r2, r1
 8000702:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	3301      	adds	r3, #1
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b0f      	cmp	r3, #15
 800070e:	d9ef      	bls.n	80006f0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000710:	f3bf 8f5f 	dmb	sy
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200002bc 	.word	0x200002bc
 8000720:	0800faa0 	.word	0x0800faa0
 8000724:	20000364 	.word	0x20000364
 8000728:	20000764 	.word	0x20000764
 800072c:	0800fbc0 	.word	0x0800fbc0

08000730 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	; 0x30
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800073c:	4b3e      	ldr	r3, [pc, #248]	; (8000838 <SEGGER_RTT_ReadNoLock+0x108>)
 800073e:	623b      	str	r3, [r7, #32]
 8000740:	6a3b      	ldr	r3, [r7, #32]
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2b00      	cmp	r3, #0
 8000748:	d101      	bne.n	800074e <SEGGER_RTT_ReadNoLock+0x1e>
 800074a:	f7ff ff97 	bl	800067c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	4613      	mov	r3, r2
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	4413      	add	r3, r2
 8000756:	00db      	lsls	r3, r3, #3
 8000758:	3360      	adds	r3, #96	; 0x60
 800075a:	4a37      	ldr	r2, [pc, #220]	; (8000838 <SEGGER_RTT_ReadNoLock+0x108>)
 800075c:	4413      	add	r3, r2
 800075e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	691b      	ldr	r3, [r3, #16]
 8000768:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	68db      	ldr	r3, [r3, #12]
 800076e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8000770:	2300      	movs	r3, #0
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8000774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000776:	69bb      	ldr	r3, [r7, #24]
 8000778:	429a      	cmp	r2, r3
 800077a:	d92b      	bls.n	80007d4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	689a      	ldr	r2, [r3, #8]
 8000780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000782:	1ad3      	subs	r3, r2, r3
 8000784:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000786:	697a      	ldr	r2, [r7, #20]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4293      	cmp	r3, r2
 800078c:	bf28      	it	cs
 800078e:	4613      	movcs	r3, r2
 8000790:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	685a      	ldr	r2, [r3, #4]
 8000796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000798:	4413      	add	r3, r2
 800079a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800079c:	697a      	ldr	r2, [r7, #20]
 800079e:	6939      	ldr	r1, [r7, #16]
 80007a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80007a2:	f00e fddd 	bl	800f360 <memcpy>
    NumBytesRead += NumBytesRem;
 80007a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	4413      	add	r3, r2
 80007ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80007ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	4413      	add	r3, r2
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80007be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	4413      	add	r3, r2
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	689b      	ldr	r3, [r3, #8]
 80007ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d101      	bne.n	80007d4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80007d0:	2300      	movs	r3, #0
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80007d4:	69ba      	ldr	r2, [r7, #24]
 80007d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80007dc:	697a      	ldr	r2, [r7, #20]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4293      	cmp	r3, r2
 80007e2:	bf28      	it	cs
 80007e4:	4613      	movcs	r3, r2
 80007e6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d019      	beq.n	8000822 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	685a      	ldr	r2, [r3, #4]
 80007f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007f4:	4413      	add	r3, r2
 80007f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80007f8:	697a      	ldr	r2, [r7, #20]
 80007fa:	6939      	ldr	r1, [r7, #16]
 80007fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80007fe:	f00e fdaf 	bl	800f360 <memcpy>
    NumBytesRead += NumBytesRem;
 8000802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	4413      	add	r3, r2
 8000808:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800080a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	4413      	add	r3, r2
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800081a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	4413      	add	r3, r2
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8000822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000824:	2b00      	cmp	r3, #0
 8000826:	d002      	beq.n	800082e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800082c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800082e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000830:	4618      	mov	r0, r3
 8000832:	3730      	adds	r7, #48	; 0x30
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200002bc 	.word	0x200002bc

0800083c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
 8000848:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800084a:	4b3d      	ldr	r3, [pc, #244]	; (8000940 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800084c:	61bb      	str	r3, [r7, #24]
 800084e:	69bb      	ldr	r3, [r7, #24]
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2b00      	cmp	r3, #0
 8000856:	d101      	bne.n	800085c <SEGGER_RTT_AllocUpBuffer+0x20>
 8000858:	f7ff ff10 	bl	800067c <_DoInit>
  SEGGER_RTT_LOCK();
 800085c:	f3ef 8311 	mrs	r3, BASEPRI
 8000860:	f04f 0120 	mov.w	r1, #32
 8000864:	f381 8811 	msr	BASEPRI, r1
 8000868:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800086a:	4b35      	ldr	r3, [pc, #212]	; (8000940 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800086c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8000872:	6939      	ldr	r1, [r7, #16]
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	1c5a      	adds	r2, r3, #1
 8000878:	4613      	mov	r3, r2
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	4413      	add	r3, r2
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	440b      	add	r3, r1
 8000882:	3304      	adds	r3, #4
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d008      	beq.n	800089c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	3301      	adds	r3, #1
 800088e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	691b      	ldr	r3, [r3, #16]
 8000894:	69fa      	ldr	r2, [r7, #28]
 8000896:	429a      	cmp	r2, r3
 8000898:	dbeb      	blt.n	8000872 <SEGGER_RTT_AllocUpBuffer+0x36>
 800089a:	e000      	b.n	800089e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800089c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	691b      	ldr	r3, [r3, #16]
 80008a2:	69fa      	ldr	r2, [r7, #28]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	da3f      	bge.n	8000928 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80008a8:	6939      	ldr	r1, [r7, #16]
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	1c5a      	adds	r2, r3, #1
 80008ae:	4613      	mov	r3, r2
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	4413      	add	r3, r2
 80008b4:	00db      	lsls	r3, r3, #3
 80008b6:	440b      	add	r3, r1
 80008b8:	68fa      	ldr	r2, [r7, #12]
 80008ba:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80008bc:	6939      	ldr	r1, [r7, #16]
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	1c5a      	adds	r2, r3, #1
 80008c2:	4613      	mov	r3, r2
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	4413      	add	r3, r2
 80008c8:	00db      	lsls	r3, r3, #3
 80008ca:	440b      	add	r3, r1
 80008cc:	3304      	adds	r3, #4
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80008d2:	6939      	ldr	r1, [r7, #16]
 80008d4:	69fa      	ldr	r2, [r7, #28]
 80008d6:	4613      	mov	r3, r2
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	4413      	add	r3, r2
 80008dc:	00db      	lsls	r3, r3, #3
 80008de:	440b      	add	r3, r1
 80008e0:	3320      	adds	r3, #32
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80008e6:	6939      	ldr	r1, [r7, #16]
 80008e8:	69fa      	ldr	r2, [r7, #28]
 80008ea:	4613      	mov	r3, r2
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	4413      	add	r3, r2
 80008f0:	00db      	lsls	r3, r3, #3
 80008f2:	440b      	add	r3, r1
 80008f4:	3328      	adds	r3, #40	; 0x28
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80008fa:	6939      	ldr	r1, [r7, #16]
 80008fc:	69fa      	ldr	r2, [r7, #28]
 80008fe:	4613      	mov	r3, r2
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	4413      	add	r3, r2
 8000904:	00db      	lsls	r3, r3, #3
 8000906:	440b      	add	r3, r1
 8000908:	3324      	adds	r3, #36	; 0x24
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800090e:	6939      	ldr	r1, [r7, #16]
 8000910:	69fa      	ldr	r2, [r7, #28]
 8000912:	4613      	mov	r3, r2
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	4413      	add	r3, r2
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	440b      	add	r3, r1
 800091c:	332c      	adds	r3, #44	; 0x2c
 800091e:	683a      	ldr	r2, [r7, #0]
 8000920:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000922:	f3bf 8f5f 	dmb	sy
 8000926:	e002      	b.n	800092e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8000928:	f04f 33ff 	mov.w	r3, #4294967295
 800092c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8000934:	69fb      	ldr	r3, [r7, #28]
}
 8000936:	4618      	mov	r0, r3
 8000938:	3720      	adds	r7, #32
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200002bc 	.word	0x200002bc

08000944 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	; 0x28
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
 8000950:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8000952:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8000954:	623b      	str	r3, [r7, #32]
 8000956:	6a3b      	ldr	r3, [r7, #32]
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	b2db      	uxtb	r3, r3
 800095c:	2b00      	cmp	r3, #0
 800095e:	d101      	bne.n	8000964 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8000960:	f7ff fe8c 	bl	800067c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8000964:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8000966:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	2b02      	cmp	r3, #2
 800096c:	d82c      	bhi.n	80009c8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800096e:	f3ef 8311 	mrs	r3, BASEPRI
 8000972:	f04f 0120 	mov.w	r1, #32
 8000976:	f381 8811 	msr	BASEPRI, r1
 800097a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	4613      	mov	r3, r2
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	4413      	add	r3, r2
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	3360      	adds	r3, #96	; 0x60
 8000988:	69fa      	ldr	r2, [r7, #28]
 800098a:	4413      	add	r3, r2
 800098c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d00e      	beq.n	80009b2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009b6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80009b8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
 80009c6:	e002      	b.n	80009ce <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80009c8:	f04f 33ff 	mov.w	r3, #4294967295
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80009ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3728      	adds	r7, #40	; 0x28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	200002bc 	.word	0x200002bc

080009dc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80009dc:	b480      	push	{r7}
 80009de:	b087      	sub	sp, #28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	1c5a      	adds	r2, r3, #1
 80009f0:	60fa      	str	r2, [r7, #12]
 80009f2:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b80      	cmp	r3, #128	; 0x80
 80009f8:	d90a      	bls.n	8000a10 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80009fa:	2380      	movs	r3, #128	; 0x80
 80009fc:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80009fe:	e007      	b.n	8000a10 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8000a00:	68ba      	ldr	r2, [r7, #8]
 8000a02:	1c53      	adds	r3, r2, #1
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	1c59      	adds	r1, r3, #1
 8000a0a:	60f9      	str	r1, [r7, #12]
 8000a0c:	7812      	ldrb	r2, [r2, #0]
 8000a0e:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	1e5a      	subs	r2, r3, #1
 8000a14:	607a      	str	r2, [r7, #4]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d003      	beq.n	8000a22 <_EncodeStr+0x46>
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d1ee      	bne.n	8000a00 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	371c      	adds	r7, #28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3307      	adds	r3, #7
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a5a:	4b34      	ldr	r3, [pc, #208]	; (8000b2c <_HandleIncomingPacket+0xd8>)
 8000a5c:	7e1b      	ldrb	r3, [r3, #24]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	1cfb      	adds	r3, r7, #3
 8000a62:	2201      	movs	r2, #1
 8000a64:	4619      	mov	r1, r3
 8000a66:	f7ff fe63 	bl	8000730 <SEGGER_RTT_ReadNoLock>
 8000a6a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d057      	beq.n	8000b22 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8000a72:	78fb      	ldrb	r3, [r7, #3]
 8000a74:	2b80      	cmp	r3, #128	; 0x80
 8000a76:	d031      	beq.n	8000adc <_HandleIncomingPacket+0x88>
 8000a78:	2b80      	cmp	r3, #128	; 0x80
 8000a7a:	dc40      	bgt.n	8000afe <_HandleIncomingPacket+0xaa>
 8000a7c:	2b07      	cmp	r3, #7
 8000a7e:	dc15      	bgt.n	8000aac <_HandleIncomingPacket+0x58>
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	dd3c      	ble.n	8000afe <_HandleIncomingPacket+0xaa>
 8000a84:	3b01      	subs	r3, #1
 8000a86:	2b06      	cmp	r3, #6
 8000a88:	d839      	bhi.n	8000afe <_HandleIncomingPacket+0xaa>
 8000a8a:	a201      	add	r2, pc, #4	; (adr r2, 8000a90 <_HandleIncomingPacket+0x3c>)
 8000a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a90:	08000ab3 	.word	0x08000ab3
 8000a94:	08000ab9 	.word	0x08000ab9
 8000a98:	08000abf 	.word	0x08000abf
 8000a9c:	08000ac5 	.word	0x08000ac5
 8000aa0:	08000acb 	.word	0x08000acb
 8000aa4:	08000ad1 	.word	0x08000ad1
 8000aa8:	08000ad7 	.word	0x08000ad7
 8000aac:	2b7f      	cmp	r3, #127	; 0x7f
 8000aae:	d033      	beq.n	8000b18 <_HandleIncomingPacket+0xc4>
 8000ab0:	e025      	b.n	8000afe <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8000ab2:	f000 fbe3 	bl	800127c <SEGGER_SYSVIEW_Start>
      break;
 8000ab6:	e034      	b.n	8000b22 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8000ab8:	f000 fc9a 	bl	80013f0 <SEGGER_SYSVIEW_Stop>
      break;
 8000abc:	e031      	b.n	8000b22 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8000abe:	f000 fe73 	bl	80017a8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8000ac2:	e02e      	b.n	8000b22 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8000ac4:	f000 fe38 	bl	8001738 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8000ac8:	e02b      	b.n	8000b22 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8000aca:	f000 fcb7 	bl	800143c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8000ace:	e028      	b.n	8000b22 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8000ad0:	f000 ff44 	bl	800195c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8000ad4:	e025      	b.n	8000b22 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8000ad6:	f000 ff23 	bl	8001920 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8000ada:	e022      	b.n	8000b22 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <_HandleIncomingPacket+0xd8>)
 8000ade:	7e1b      	ldrb	r3, [r3, #24]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	1cfb      	adds	r3, r7, #3
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f7ff fe22 	bl	8000730 <SEGGER_RTT_ReadNoLock>
 8000aec:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d013      	beq.n	8000b1c <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8000af4:	78fb      	ldrb	r3, [r7, #3]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 fe88 	bl	800180c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8000afc:	e00e      	b.n	8000b1c <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8000afe:	78fb      	ldrb	r3, [r7, #3]
 8000b00:	b25b      	sxtb	r3, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	da0c      	bge.n	8000b20 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <_HandleIncomingPacket+0xd8>)
 8000b08:	7e1b      	ldrb	r3, [r3, #24]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	1cfb      	adds	r3, r7, #3
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4619      	mov	r1, r3
 8000b12:	f7ff fe0d 	bl	8000730 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8000b16:	e003      	b.n	8000b20 <_HandleIncomingPacket+0xcc>
      break;
 8000b18:	bf00      	nop
 8000b1a:	e002      	b.n	8000b22 <_HandleIncomingPacket+0xce>
      break;
 8000b1c:	bf00      	nop
 8000b1e:	e000      	b.n	8000b22 <_HandleIncomingPacket+0xce>
      break;
 8000b20:	bf00      	nop
    }
  }
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000b7c 	.word	0x20000b7c

08000b30 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	; 0x30
 8000b34:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8000b36:	2301      	movs	r3, #1
 8000b38:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b44:	4b31      	ldr	r3, [pc, #196]	; (8000c0c <_TrySendOverflowPacket+0xdc>)
 8000b46:	695b      	ldr	r3, [r3, #20]
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b4a:	e00b      	b.n	8000b64 <_TrySendOverflowPacket+0x34>
 8000b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b52:	1c59      	adds	r1, r3, #1
 8000b54:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000b56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	701a      	strb	r2, [r3, #0]
 8000b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b60:	09db      	lsrs	r3, r3, #7
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b66:	2b7f      	cmp	r3, #127	; 0x7f
 8000b68:	d8f0      	bhi.n	8000b4c <_TrySendOverflowPacket+0x1c>
 8000b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b6c:	1c5a      	adds	r2, r3, #1
 8000b6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b72:	b2d2      	uxtb	r2, r2
 8000b74:	701a      	strb	r2, [r3, #0]
 8000b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b78:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000b7a:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <_TrySendOverflowPacket+0xe0>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000b80:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <_TrySendOverflowPacket+0xdc>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	623b      	str	r3, [r7, #32]
 8000b92:	e00b      	b.n	8000bac <_TrySendOverflowPacket+0x7c>
 8000b94:	6a3b      	ldr	r3, [r7, #32]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9a:	1c59      	adds	r1, r3, #1
 8000b9c:	6279      	str	r1, [r7, #36]	; 0x24
 8000b9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000ba2:	b2d2      	uxtb	r2, r2
 8000ba4:	701a      	strb	r2, [r3, #0]
 8000ba6:	6a3b      	ldr	r3, [r7, #32]
 8000ba8:	09db      	lsrs	r3, r3, #7
 8000baa:	623b      	str	r3, [r7, #32]
 8000bac:	6a3b      	ldr	r3, [r7, #32]
 8000bae:	2b7f      	cmp	r3, #127	; 0x7f
 8000bb0:	d8f0      	bhi.n	8000b94 <_TrySendOverflowPacket+0x64>
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb4:	1c5a      	adds	r2, r3, #1
 8000bb6:	627a      	str	r2, [r7, #36]	; 0x24
 8000bb8:	6a3a      	ldr	r2, [r7, #32]
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	701a      	strb	r2, [r3, #0]
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8000bc2:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <_TrySendOverflowPacket+0xdc>)
 8000bc4:	785b      	ldrb	r3, [r3, #1]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	69fa      	ldr	r2, [r7, #28]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	461a      	mov	r2, r3
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	f7ff fb34 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d009      	beq.n	8000bf6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <_TrySendOverflowPacket+0xdc>)
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <_TrySendOverflowPacket+0xdc>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	3b01      	subs	r3, #1
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <_TrySendOverflowPacket+0xdc>)
 8000bf2:	701a      	strb	r2, [r3, #0]
 8000bf4:	e004      	b.n	8000c00 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8000bf6:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <_TrySendOverflowPacket+0xdc>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	4a03      	ldr	r2, [pc, #12]	; (8000c0c <_TrySendOverflowPacket+0xdc>)
 8000bfe:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8000c00:	693b      	ldr	r3, [r7, #16]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3730      	adds	r7, #48	; 0x30
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000b7c 	.word	0x20000b7c
 8000c10:	e0001004 	.word	0xe0001004

08000c14 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8000c20:	4b98      	ldr	r3, [pc, #608]	; (8000e84 <_SendPacket+0x270>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d010      	beq.n	8000c4a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8000c28:	4b96      	ldr	r3, [pc, #600]	; (8000e84 <_SendPacket+0x270>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	f000 812d 	beq.w	8000e8c <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8000c32:	4b94      	ldr	r3, [pc, #592]	; (8000e84 <_SendPacket+0x270>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d109      	bne.n	8000c4e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8000c3a:	f7ff ff79 	bl	8000b30 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8000c3e:	4b91      	ldr	r3, [pc, #580]	; (8000e84 <_SendPacket+0x270>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	f040 8124 	bne.w	8000e90 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8000c48:	e001      	b.n	8000c4e <_SendPacket+0x3a>
    goto Send;
 8000c4a:	bf00      	nop
 8000c4c:	e000      	b.n	8000c50 <_SendPacket+0x3c>
Send:
 8000c4e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b1f      	cmp	r3, #31
 8000c54:	d809      	bhi.n	8000c6a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8000c56:	4b8b      	ldr	r3, [pc, #556]	; (8000e84 <_SendPacket+0x270>)
 8000c58:	69da      	ldr	r2, [r3, #28]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f040 8115 	bne.w	8000e94 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b17      	cmp	r3, #23
 8000c6e:	d807      	bhi.n	8000c80 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	701a      	strb	r2, [r3, #0]
 8000c7e:	e0c4      	b.n	8000e0a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8000c80:	68ba      	ldr	r2, [r7, #8]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c8c:	d912      	bls.n	8000cb4 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	09da      	lsrs	r2, r3, #7
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	3b01      	subs	r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	3a01      	subs	r2, #1
 8000ca6:	60fa      	str	r2, [r7, #12]
 8000ca8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	701a      	strb	r2, [r3, #0]
 8000cb2:	e006      	b.n	8000cc2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b7e      	cmp	r3, #126	; 0x7e
 8000cc6:	d807      	bhi.n	8000cd8 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	701a      	strb	r2, [r3, #0]
 8000cd6:	e098      	b.n	8000e0a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000cde:	d212      	bcs.n	8000d06 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	09da      	lsrs	r2, r3, #7
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	3a01      	subs	r2, #1
 8000cf8:	60fa      	str	r2, [r7, #12]
 8000cfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	701a      	strb	r2, [r3, #0]
 8000d04:	e081      	b.n	8000e0a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000d0c:	d21d      	bcs.n	8000d4a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	0b9a      	lsrs	r2, r3, #14
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	09db      	lsrs	r3, r3, #7
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	3a01      	subs	r2, #1
 8000d28:	60fa      	str	r2, [r7, #12]
 8000d2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	68fa      	ldr	r2, [r7, #12]
 8000d3a:	3a01      	subs	r2, #1
 8000d3c:	60fa      	str	r2, [r7, #12]
 8000d3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	701a      	strb	r2, [r3, #0]
 8000d48:	e05f      	b.n	8000e0a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000d50:	d228      	bcs.n	8000da4 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	0d5a      	lsrs	r2, r3, #21
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	0b9b      	lsrs	r3, r3, #14
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	68fa      	ldr	r2, [r7, #12]
 8000d6a:	3a01      	subs	r2, #1
 8000d6c:	60fa      	str	r2, [r7, #12]
 8000d6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	09db      	lsrs	r3, r3, #7
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	3a01      	subs	r2, #1
 8000d82:	60fa      	str	r2, [r7, #12]
 8000d84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	3a01      	subs	r2, #1
 8000d96:	60fa      	str	r2, [r7, #12]
 8000d98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	701a      	strb	r2, [r3, #0]
 8000da2:	e032      	b.n	8000e0a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	0f1a      	lsrs	r2, r3, #28
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	0d5b      	lsrs	r3, r3, #21
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	3a01      	subs	r2, #1
 8000dbe:	60fa      	str	r2, [r7, #12]
 8000dc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	0b9b      	lsrs	r3, r3, #14
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	68fa      	ldr	r2, [r7, #12]
 8000dd2:	3a01      	subs	r2, #1
 8000dd4:	60fa      	str	r2, [r7, #12]
 8000dd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	09db      	lsrs	r3, r3, #7
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	3a01      	subs	r2, #1
 8000dea:	60fa      	str	r2, [r7, #12]
 8000dec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	3a01      	subs	r2, #1
 8000dfe:	60fa      	str	r2, [r7, #12]
 8000e00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <_SendPacket+0x274>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000e10:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <_SendPacket+0x270>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	623b      	str	r3, [r7, #32]
 8000e22:	e00b      	b.n	8000e3c <_SendPacket+0x228>
 8000e24:	6a3b      	ldr	r3, [r7, #32]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2a:	1c59      	adds	r1, r3, #1
 8000e2c:	6279      	str	r1, [r7, #36]	; 0x24
 8000e2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	701a      	strb	r2, [r3, #0]
 8000e36:	6a3b      	ldr	r3, [r7, #32]
 8000e38:	09db      	lsrs	r3, r3, #7
 8000e3a:	623b      	str	r3, [r7, #32]
 8000e3c:	6a3b      	ldr	r3, [r7, #32]
 8000e3e:	2b7f      	cmp	r3, #127	; 0x7f
 8000e40:	d8f0      	bhi.n	8000e24 <_SendPacket+0x210>
 8000e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e44:	1c5a      	adds	r2, r3, #1
 8000e46:	627a      	str	r2, [r7, #36]	; 0x24
 8000e48:	6a3a      	ldr	r2, [r7, #32]
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	701a      	strb	r2, [r3, #0]
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e50:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <_SendPacket+0x270>)
 8000e54:	785b      	ldrb	r3, [r3, #1]
 8000e56:	4618      	mov	r0, r3
 8000e58:	68ba      	ldr	r2, [r7, #8]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	461a      	mov	r2, r3
 8000e60:	68f9      	ldr	r1, [r7, #12]
 8000e62:	f7ff f9ed 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000e66:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <_SendPacket+0x270>)
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	60d3      	str	r3, [r2, #12]
 8000e74:	e00f      	b.n	8000e96 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8000e76:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <_SendPacket+0x270>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4b01      	ldr	r3, [pc, #4]	; (8000e84 <_SendPacket+0x270>)
 8000e80:	701a      	strb	r2, [r3, #0]
 8000e82:	e008      	b.n	8000e96 <_SendPacket+0x282>
 8000e84:	20000b7c 	.word	0x20000b7c
 8000e88:	e0001004 	.word	0xe0001004
    goto SendDone;
 8000e8c:	bf00      	nop
 8000e8e:	e002      	b.n	8000e96 <_SendPacket+0x282>
      goto SendDone;
 8000e90:	bf00      	nop
 8000e92:	e000      	b.n	8000e96 <_SendPacket+0x282>
      goto SendDone;
 8000e94:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8000e96:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <_SendPacket+0x2d4>)
 8000e98:	7e1b      	ldrb	r3, [r3, #24]
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4a13      	ldr	r2, [pc, #76]	; (8000eec <_SendPacket+0x2d8>)
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	440b      	add	r3, r1
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	4413      	add	r3, r2
 8000ea8:	336c      	adds	r3, #108	; 0x6c
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <_SendPacket+0x2d4>)
 8000eae:	7e1b      	ldrb	r3, [r3, #24]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	490e      	ldr	r1, [pc, #56]	; (8000eec <_SendPacket+0x2d8>)
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	4403      	add	r3, r0
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	440b      	add	r3, r1
 8000ebe:	3370      	adds	r3, #112	; 0x70
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d00b      	beq.n	8000ede <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <_SendPacket+0x2d4>)
 8000ec8:	789b      	ldrb	r3, [r3, #2]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d107      	bne.n	8000ede <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <_SendPacket+0x2d4>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8000ed4:	f7ff fdbe 	bl	8000a54 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <_SendPacket+0x2d4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	; 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000b7c 	.word	0x20000b7c
 8000eec:	200002bc 	.word	0x200002bc

08000ef0 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b0a2      	sub	sp, #136	; 0x88
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8000f06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8000f12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d01d      	beq.n	8000f56 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8000f1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f1e:	2b25      	cmp	r3, #37	; 0x25
 8000f20:	d1f1      	bne.n	8000f06 <_VPrintHost+0x16>
      c = *p;
 8000f22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	1d19      	adds	r1, r3, #4
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	6011      	str	r1, [r2, #0]
 8000f34:	6819      	ldr	r1, [r3, #0]
 8000f36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000f40:	460a      	mov	r2, r1
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	3388      	adds	r3, #136	; 0x88
 8000f46:	443b      	add	r3, r7
 8000f48:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8000f4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f50:	2b10      	cmp	r3, #16
 8000f52:	d002      	beq.n	8000f5a <_VPrintHost+0x6a>
    c = *p++;
 8000f54:	e7d7      	b.n	8000f06 <_VPrintHost+0x16>
      break;
 8000f56:	bf00      	nop
 8000f58:	e000      	b.n	8000f5c <_VPrintHost+0x6c>
        break;
 8000f5a:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8000f5c:	f3ef 8311 	mrs	r3, BASEPRI
 8000f60:	f04f 0120 	mov.w	r1, #32
 8000f64:	f381 8811 	msr	BASEPRI, r1
 8000f68:	65bb      	str	r3, [r7, #88]	; 0x58
 8000f6a:	483f      	ldr	r0, [pc, #252]	; (8001068 <_VPrintHost+0x178>)
 8000f6c:	f7ff fd66 	bl	8000a3c <_PreparePacket>
 8000f70:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8000f72:	2280      	movs	r2, #128	; 0x80
 8000f74:	68f9      	ldr	r1, [r7, #12]
 8000f76:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000f78:	f7ff fd30 	bl	80009dc <_EncodeStr>
 8000f7c:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8000f7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f80:	677b      	str	r3, [r7, #116]	; 0x74
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	673b      	str	r3, [r7, #112]	; 0x70
 8000f86:	e00b      	b.n	8000fa0 <_VPrintHost+0xb0>
 8000f88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f8e:	1c59      	adds	r1, r3, #1
 8000f90:	6779      	str	r1, [r7, #116]	; 0x74
 8000f92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	701a      	strb	r2, [r3, #0]
 8000f9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f9c:	09db      	lsrs	r3, r3, #7
 8000f9e:	673b      	str	r3, [r7, #112]	; 0x70
 8000fa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fa2:	2b7f      	cmp	r3, #127	; 0x7f
 8000fa4:	d8f0      	bhi.n	8000f88 <_VPrintHost+0x98>
 8000fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000fa8:	1c5a      	adds	r2, r3, #1
 8000faa:	677a      	str	r2, [r7, #116]	; 0x74
 8000fac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	701a      	strb	r2, [r3, #0]
 8000fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000fb4:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8000fb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000fb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000fba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000fbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8000fc0:	e00b      	b.n	8000fda <_VPrintHost+0xea>
 8000fc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fc8:	1c59      	adds	r1, r3, #1
 8000fca:	66f9      	str	r1, [r7, #108]	; 0x6c
 8000fcc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	701a      	strb	r2, [r3, #0]
 8000fd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fd6:	09db      	lsrs	r3, r3, #7
 8000fd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8000fda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fdc:	2b7f      	cmp	r3, #127	; 0x7f
 8000fde:	d8f0      	bhi.n	8000fc2 <_VPrintHost+0xd2>
 8000fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fe2:	1c5a      	adds	r2, r3, #1
 8000fe4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000fe6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	701a      	strb	r2, [r3, #0]
 8000fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fee:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000ff8:	e022      	b.n	8001040 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8000ffa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ffc:	667b      	str	r3, [r7, #100]	; 0x64
 8000ffe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	663b      	str	r3, [r7, #96]	; 0x60
 8001006:	e00b      	b.n	8001020 <_VPrintHost+0x130>
 8001008:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800100a:	b2da      	uxtb	r2, r3
 800100c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800100e:	1c59      	adds	r1, r3, #1
 8001010:	6679      	str	r1, [r7, #100]	; 0x64
 8001012:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	701a      	strb	r2, [r3, #0]
 800101a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800101c:	09db      	lsrs	r3, r3, #7
 800101e:	663b      	str	r3, [r7, #96]	; 0x60
 8001020:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001022:	2b7f      	cmp	r3, #127	; 0x7f
 8001024:	d8f0      	bhi.n	8001008 <_VPrintHost+0x118>
 8001026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001028:	1c5a      	adds	r2, r3, #1
 800102a:	667a      	str	r2, [r7, #100]	; 0x64
 800102c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	701a      	strb	r2, [r3, #0]
 8001032:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001034:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8001036:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800103a:	3304      	adds	r3, #4
 800103c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8001040:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001044:	1e5a      	subs	r2, r3, #1
 8001046:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1d5      	bne.n	8000ffa <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800104e:	221a      	movs	r2, #26
 8001050:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001052:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001054:	f7ff fdde 	bl	8000c14 <_SendPacket>
    RECORD_END();
 8001058:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800105a:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	3788      	adds	r7, #136	; 0x88
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000bac 	.word	0x20000bac

0800106c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af02      	add	r7, sp, #8
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800107a:	2300      	movs	r3, #0
 800107c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001080:	4917      	ldr	r1, [pc, #92]	; (80010e0 <SEGGER_SYSVIEW_Init+0x74>)
 8001082:	4818      	ldr	r0, [pc, #96]	; (80010e4 <SEGGER_SYSVIEW_Init+0x78>)
 8001084:	f7ff fbda 	bl	800083c <SEGGER_RTT_AllocUpBuffer>
 8001088:	4603      	mov	r3, r0
 800108a:	b2da      	uxtb	r2, r3
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <SEGGER_SYSVIEW_Init+0x7c>)
 800108e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8001090:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <SEGGER_SYSVIEW_Init+0x7c>)
 8001092:	785a      	ldrb	r2, [r3, #1]
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <SEGGER_SYSVIEW_Init+0x7c>)
 8001096:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <SEGGER_SYSVIEW_Init+0x7c>)
 800109a:	7e1b      	ldrb	r3, [r3, #24]
 800109c:	4618      	mov	r0, r3
 800109e:	2300      	movs	r3, #0
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2308      	movs	r3, #8
 80010a4:	4a11      	ldr	r2, [pc, #68]	; (80010ec <SEGGER_SYSVIEW_Init+0x80>)
 80010a6:	490f      	ldr	r1, [pc, #60]	; (80010e4 <SEGGER_SYSVIEW_Init+0x78>)
 80010a8:	f7ff fc4c 	bl	8000944 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <SEGGER_SYSVIEW_Init+0x84>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a0c      	ldr	r2, [pc, #48]	; (80010e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80010b8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80010ba:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80010c0:	4a09      	ldr	r2, [pc, #36]	; (80010e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80010c6:	4a08      	ldr	r2, [pc, #32]	; (80010e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80010d2:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000774 	.word	0x20000774
 80010e4:	0800fab4 	.word	0x0800fab4
 80010e8:	20000b7c 	.word	0x20000b7c
 80010ec:	20000b74 	.word	0x20000b74
 80010f0:	e0001004 	.word	0xe0001004

080010f4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80010fc:	4a04      	ldr	r2, [pc, #16]	; (8001110 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6113      	str	r3, [r2, #16]
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000b7c 	.word	0x20000b7c

08001114 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800111c:	f3ef 8311 	mrs	r3, BASEPRI
 8001120:	f04f 0120 	mov.w	r1, #32
 8001124:	f381 8811 	msr	BASEPRI, r1
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4808      	ldr	r0, [pc, #32]	; (800114c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800112c:	f7ff fc86 	bl	8000a3c <_PreparePacket>
 8001130:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	68b8      	ldr	r0, [r7, #8]
 8001138:	f7ff fd6c 	bl	8000c14 <_SendPacket>
  RECORD_END();
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f383 8811 	msr	BASEPRI, r3
}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000bac 	.word	0x20000bac

08001150 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800115a:	f3ef 8311 	mrs	r3, BASEPRI
 800115e:	f04f 0120 	mov.w	r1, #32
 8001162:	f381 8811 	msr	BASEPRI, r1
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	4816      	ldr	r0, [pc, #88]	; (80011c4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800116a:	f7ff fc67 	bl	8000a3c <_PreparePacket>
 800116e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	61fb      	str	r3, [r7, #28]
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	61bb      	str	r3, [r7, #24]
 800117c:	e00b      	b.n	8001196 <SEGGER_SYSVIEW_RecordU32+0x46>
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	1c59      	adds	r1, r3, #1
 8001186:	61f9      	str	r1, [r7, #28]
 8001188:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	09db      	lsrs	r3, r3, #7
 8001194:	61bb      	str	r3, [r7, #24]
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	2b7f      	cmp	r3, #127	; 0x7f
 800119a:	d8f0      	bhi.n	800117e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	61fa      	str	r2, [r7, #28]
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	701a      	strb	r2, [r3, #0]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	68f9      	ldr	r1, [r7, #12]
 80011b0:	6938      	ldr	r0, [r7, #16]
 80011b2:	f7ff fd2f 	bl	8000c14 <_SendPacket>
  RECORD_END();
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	f383 8811 	msr	BASEPRI, r3
}
 80011bc:	bf00      	nop
 80011be:	3720      	adds	r7, #32
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000bac 	.word	0x20000bac

080011c8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08c      	sub	sp, #48	; 0x30
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80011d4:	f3ef 8311 	mrs	r3, BASEPRI
 80011d8:	f04f 0120 	mov.w	r1, #32
 80011dc:	f381 8811 	msr	BASEPRI, r1
 80011e0:	61fb      	str	r3, [r7, #28]
 80011e2:	4825      	ldr	r0, [pc, #148]	; (8001278 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80011e4:	f7ff fc2a 	bl	8000a3c <_PreparePacket>
 80011e8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80011f6:	e00b      	b.n	8001210 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80011f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fe:	1c59      	adds	r1, r3, #1
 8001200:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001202:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	701a      	strb	r2, [r3, #0]
 800120a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800120c:	09db      	lsrs	r3, r3, #7
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001212:	2b7f      	cmp	r3, #127	; 0x7f
 8001214:	d8f0      	bhi.n	80011f8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8001216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001218:	1c5a      	adds	r2, r3, #1
 800121a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800121c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	701a      	strb	r2, [r3, #0]
 8001222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001224:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	623b      	str	r3, [r7, #32]
 800122e:	e00b      	b.n	8001248 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001236:	1c59      	adds	r1, r3, #1
 8001238:	6279      	str	r1, [r7, #36]	; 0x24
 800123a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	701a      	strb	r2, [r3, #0]
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	09db      	lsrs	r3, r3, #7
 8001246:	623b      	str	r3, [r7, #32]
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	2b7f      	cmp	r3, #127	; 0x7f
 800124c:	d8f0      	bhi.n	8001230 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	627a      	str	r2, [r7, #36]	; 0x24
 8001254:	6a3a      	ldr	r2, [r7, #32]
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	701a      	strb	r2, [r3, #0]
 800125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	6979      	ldr	r1, [r7, #20]
 8001262:	69b8      	ldr	r0, [r7, #24]
 8001264:	f7ff fcd6 	bl	8000c14 <_SendPacket>
  RECORD_END();
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f383 8811 	msr	BASEPRI, r3
}
 800126e:	bf00      	nop
 8001270:	3730      	adds	r7, #48	; 0x30
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000bac 	.word	0x20000bac

0800127c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b08c      	sub	sp, #48	; 0x30
 8001280:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8001282:	4b58      	ldr	r3, [pc, #352]	; (80013e4 <SEGGER_SYSVIEW_Start+0x168>)
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8001288:	f3ef 8311 	mrs	r3, BASEPRI
 800128c:	f04f 0120 	mov.w	r1, #32
 8001290:	f381 8811 	msr	BASEPRI, r1
 8001294:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8001296:	4b53      	ldr	r3, [pc, #332]	; (80013e4 <SEGGER_SYSVIEW_Start+0x168>)
 8001298:	785b      	ldrb	r3, [r3, #1]
 800129a:	220a      	movs	r2, #10
 800129c:	4952      	ldr	r1, [pc, #328]	; (80013e8 <SEGGER_SYSVIEW_Start+0x16c>)
 800129e:	4618      	mov	r0, r3
 80012a0:	f7fe ffce 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80012aa:	200a      	movs	r0, #10
 80012ac:	f7ff ff32 	bl	8001114 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80012b0:	f3ef 8311 	mrs	r3, BASEPRI
 80012b4:	f04f 0120 	mov.w	r1, #32
 80012b8:	f381 8811 	msr	BASEPRI, r1
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	484b      	ldr	r0, [pc, #300]	; (80013ec <SEGGER_SYSVIEW_Start+0x170>)
 80012c0:	f7ff fbbc 	bl	8000a3c <_PreparePacket>
 80012c4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012ce:	4b45      	ldr	r3, [pc, #276]	; (80013e4 <SEGGER_SYSVIEW_Start+0x168>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80012d4:	e00b      	b.n	80012ee <SEGGER_SYSVIEW_Start+0x72>
 80012d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012dc:	1c59      	adds	r1, r3, #1
 80012de:	62f9      	str	r1, [r7, #44]	; 0x2c
 80012e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ea:	09db      	lsrs	r3, r3, #7
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80012ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f0:	2b7f      	cmp	r3, #127	; 0x7f
 80012f2:	d8f0      	bhi.n	80012d6 <SEGGER_SYSVIEW_Start+0x5a>
 80012f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80012fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	701a      	strb	r2, [r3, #0]
 8001300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001302:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
 8001308:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <SEGGER_SYSVIEW_Start+0x168>)
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	623b      	str	r3, [r7, #32]
 800130e:	e00b      	b.n	8001328 <SEGGER_SYSVIEW_Start+0xac>
 8001310:	6a3b      	ldr	r3, [r7, #32]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001316:	1c59      	adds	r1, r3, #1
 8001318:	6279      	str	r1, [r7, #36]	; 0x24
 800131a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	701a      	strb	r2, [r3, #0]
 8001322:	6a3b      	ldr	r3, [r7, #32]
 8001324:	09db      	lsrs	r3, r3, #7
 8001326:	623b      	str	r3, [r7, #32]
 8001328:	6a3b      	ldr	r3, [r7, #32]
 800132a:	2b7f      	cmp	r3, #127	; 0x7f
 800132c:	d8f0      	bhi.n	8001310 <SEGGER_SYSVIEW_Start+0x94>
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	1c5a      	adds	r2, r3, #1
 8001332:	627a      	str	r2, [r7, #36]	; 0x24
 8001334:	6a3a      	ldr	r2, [r7, #32]
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	701a      	strb	r2, [r3, #0]
 800133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	61fb      	str	r3, [r7, #28]
 8001342:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <SEGGER_SYSVIEW_Start+0x168>)
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	61bb      	str	r3, [r7, #24]
 8001348:	e00b      	b.n	8001362 <SEGGER_SYSVIEW_Start+0xe6>
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	1c59      	adds	r1, r3, #1
 8001352:	61f9      	str	r1, [r7, #28]
 8001354:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	701a      	strb	r2, [r3, #0]
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	09db      	lsrs	r3, r3, #7
 8001360:	61bb      	str	r3, [r7, #24]
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	2b7f      	cmp	r3, #127	; 0x7f
 8001366:	d8f0      	bhi.n	800134a <SEGGER_SYSVIEW_Start+0xce>
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	1c5a      	adds	r2, r3, #1
 800136c:	61fa      	str	r2, [r7, #28]
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	701a      	strb	r2, [r3, #0]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	2300      	movs	r3, #0
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	e00b      	b.n	800139a <SEGGER_SYSVIEW_Start+0x11e>
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	b2da      	uxtb	r2, r3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	1c59      	adds	r1, r3, #1
 800138a:	6179      	str	r1, [r7, #20]
 800138c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	701a      	strb	r2, [r3, #0]
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	09db      	lsrs	r3, r3, #7
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	2b7f      	cmp	r3, #127	; 0x7f
 800139e:	d8f0      	bhi.n	8001382 <SEGGER_SYSVIEW_Start+0x106>
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	617a      	str	r2, [r7, #20]
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	701a      	strb	r2, [r3, #0]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80013b0:	2218      	movs	r2, #24
 80013b2:	6839      	ldr	r1, [r7, #0]
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff fc2d 	bl	8000c14 <_SendPacket>
      RECORD_END();
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <SEGGER_SYSVIEW_Start+0x168>)
 80013c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d002      	beq.n	80013ce <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <SEGGER_SYSVIEW_Start+0x168>)
 80013ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013cc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80013ce:	f000 f9eb 	bl	80017a8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80013d2:	f000 f9b1 	bl	8001738 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80013d6:	f000 fac1 	bl	800195c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80013da:	bf00      	nop
 80013dc:	3730      	adds	r7, #48	; 0x30
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000b7c 	.word	0x20000b7c
 80013e8:	0800fbd4 	.word	0x0800fbd4
 80013ec:	20000bac 	.word	0x20000bac

080013f0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80013f6:	f3ef 8311 	mrs	r3, BASEPRI
 80013fa:	f04f 0120 	mov.w	r1, #32
 80013fe:	f381 8811 	msr	BASEPRI, r1
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	480b      	ldr	r0, [pc, #44]	; (8001434 <SEGGER_SYSVIEW_Stop+0x44>)
 8001406:	f7ff fb19 	bl	8000a3c <_PreparePacket>
 800140a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <SEGGER_SYSVIEW_Stop+0x48>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d007      	beq.n	8001424 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8001414:	220b      	movs	r2, #11
 8001416:	6839      	ldr	r1, [r7, #0]
 8001418:	6838      	ldr	r0, [r7, #0]
 800141a:	f7ff fbfb 	bl	8000c14 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <SEGGER_SYSVIEW_Stop+0x48>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f383 8811 	msr	BASEPRI, r3
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000bac 	.word	0x20000bac
 8001438:	20000b7c 	.word	0x20000b7c

0800143c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b08c      	sub	sp, #48	; 0x30
 8001440:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001442:	f3ef 8311 	mrs	r3, BASEPRI
 8001446:	f04f 0120 	mov.w	r1, #32
 800144a:	f381 8811 	msr	BASEPRI, r1
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	4845      	ldr	r0, [pc, #276]	; (8001568 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8001452:	f7ff faf3 	bl	8000a3c <_PreparePacket>
 8001456:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001460:	4b42      	ldr	r3, [pc, #264]	; (800156c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
 8001466:	e00b      	b.n	8001480 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8001468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800146a:	b2da      	uxtb	r2, r3
 800146c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800146e:	1c59      	adds	r1, r3, #1
 8001470:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001472:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	701a      	strb	r2, [r3, #0]
 800147a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800147c:	09db      	lsrs	r3, r3, #7
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001482:	2b7f      	cmp	r3, #127	; 0x7f
 8001484:	d8f0      	bhi.n	8001468 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8001486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800148c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	701a      	strb	r2, [r3, #0]
 8001492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001494:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
 800149a:	4b34      	ldr	r3, [pc, #208]	; (800156c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	623b      	str	r3, [r7, #32]
 80014a0:	e00b      	b.n	80014ba <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	1c59      	adds	r1, r3, #1
 80014aa:	6279      	str	r1, [r7, #36]	; 0x24
 80014ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	701a      	strb	r2, [r3, #0]
 80014b4:	6a3b      	ldr	r3, [r7, #32]
 80014b6:	09db      	lsrs	r3, r3, #7
 80014b8:	623b      	str	r3, [r7, #32]
 80014ba:	6a3b      	ldr	r3, [r7, #32]
 80014bc:	2b7f      	cmp	r3, #127	; 0x7f
 80014be:	d8f0      	bhi.n	80014a2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	627a      	str	r2, [r7, #36]	; 0x24
 80014c6:	6a3a      	ldr	r2, [r7, #32]
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	701a      	strb	r2, [r3, #0]
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	61fb      	str	r3, [r7, #28]
 80014d4:	4b25      	ldr	r3, [pc, #148]	; (800156c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	61bb      	str	r3, [r7, #24]
 80014da:	e00b      	b.n	80014f4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	1c59      	adds	r1, r3, #1
 80014e4:	61f9      	str	r1, [r7, #28]
 80014e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	701a      	strb	r2, [r3, #0]
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	09db      	lsrs	r3, r3, #7
 80014f2:	61bb      	str	r3, [r7, #24]
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2b7f      	cmp	r3, #127	; 0x7f
 80014f8:	d8f0      	bhi.n	80014dc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	1c5a      	adds	r2, r3, #1
 80014fe:	61fa      	str	r2, [r7, #28]
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	701a      	strb	r2, [r3, #0]
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	e00b      	b.n	800152c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	b2da      	uxtb	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	1c59      	adds	r1, r3, #1
 800151c:	6179      	str	r1, [r7, #20]
 800151e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	701a      	strb	r2, [r3, #0]
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	09db      	lsrs	r3, r3, #7
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	2b7f      	cmp	r3, #127	; 0x7f
 8001530:	d8f0      	bhi.n	8001514 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	1c5a      	adds	r2, r3, #1
 8001536:	617a      	str	r2, [r7, #20]
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	701a      	strb	r2, [r3, #0]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001542:	2218      	movs	r2, #24
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	68b8      	ldr	r0, [r7, #8]
 8001548:	f7ff fb64 	bl	8000c14 <_SendPacket>
  RECORD_END();
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001556:	2b00      	cmp	r3, #0
 8001558:	d002      	beq.n	8001560 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800155a:	4b04      	ldr	r3, [pc, #16]	; (800156c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155e:	4798      	blx	r3
  }
}
 8001560:	bf00      	nop
 8001562:	3730      	adds	r7, #48	; 0x30
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000bac 	.word	0x20000bac
 800156c:	20000b7c 	.word	0x20000b7c

08001570 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b092      	sub	sp, #72	; 0x48
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8001578:	f3ef 8311 	mrs	r3, BASEPRI
 800157c:	f04f 0120 	mov.w	r1, #32
 8001580:	f381 8811 	msr	BASEPRI, r1
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	486a      	ldr	r0, [pc, #424]	; (8001730 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8001588:	f7ff fa58 	bl	8000a3c <_PreparePacket>
 800158c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	647b      	str	r3, [r7, #68]	; 0x44
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	4b66      	ldr	r3, [pc, #408]	; (8001734 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	643b      	str	r3, [r7, #64]	; 0x40
 80015a2:	e00b      	b.n	80015bc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80015a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015aa:	1c59      	adds	r1, r3, #1
 80015ac:	6479      	str	r1, [r7, #68]	; 0x44
 80015ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	701a      	strb	r2, [r3, #0]
 80015b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015b8:	09db      	lsrs	r3, r3, #7
 80015ba:	643b      	str	r3, [r7, #64]	; 0x40
 80015bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015be:	2b7f      	cmp	r3, #127	; 0x7f
 80015c0:	d8f0      	bhi.n	80015a4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80015c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015c4:	1c5a      	adds	r2, r3, #1
 80015c6:	647a      	str	r2, [r7, #68]	; 0x44
 80015c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	701a      	strb	r2, [r3, #0]
 80015ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	63bb      	str	r3, [r7, #56]	; 0x38
 80015dc:	e00b      	b.n	80015f6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80015de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015e4:	1c59      	adds	r1, r3, #1
 80015e6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80015e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	701a      	strb	r2, [r3, #0]
 80015f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015f2:	09db      	lsrs	r3, r3, #7
 80015f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80015f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015f8:	2b7f      	cmp	r3, #127	; 0x7f
 80015fa:	d8f0      	bhi.n	80015de <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80015fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001602:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	701a      	strb	r2, [r3, #0]
 8001608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800160a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2220      	movs	r2, #32
 8001612:	4619      	mov	r1, r3
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f7ff f9e1 	bl	80009dc <_EncodeStr>
 800161a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800161c:	2209      	movs	r2, #9
 800161e:	68f9      	ldr	r1, [r7, #12]
 8001620:	6938      	ldr	r0, [r7, #16]
 8001622:	f7ff faf7 	bl	8000c14 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	637b      	str	r3, [r7, #52]	; 0x34
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	4b40      	ldr	r3, [pc, #256]	; (8001734 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	633b      	str	r3, [r7, #48]	; 0x30
 800163a:	e00b      	b.n	8001654 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800163c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163e:	b2da      	uxtb	r2, r3
 8001640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001642:	1c59      	adds	r1, r3, #1
 8001644:	6379      	str	r1, [r7, #52]	; 0x34
 8001646:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	701a      	strb	r2, [r3, #0]
 800164e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001650:	09db      	lsrs	r3, r3, #7
 8001652:	633b      	str	r3, [r7, #48]	; 0x30
 8001654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001656:	2b7f      	cmp	r3, #127	; 0x7f
 8001658:	d8f0      	bhi.n	800163c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800165a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	637a      	str	r2, [r7, #52]	; 0x34
 8001660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	701a      	strb	r2, [r3, #0]
 8001666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001668:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
 8001674:	e00b      	b.n	800168e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8001676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001678:	b2da      	uxtb	r2, r3
 800167a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167c:	1c59      	adds	r1, r3, #1
 800167e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001680:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	701a      	strb	r2, [r3, #0]
 8001688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168a:	09db      	lsrs	r3, r3, #7
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
 800168e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001690:	2b7f      	cmp	r3, #127	; 0x7f
 8001692:	d8f0      	bhi.n	8001676 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8001694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	62fa      	str	r2, [r7, #44]	; 0x2c
 800169a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	701a      	strb	r2, [r3, #0]
 80016a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	623b      	str	r3, [r7, #32]
 80016ae:	e00b      	b.n	80016c8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80016b0:	6a3b      	ldr	r3, [r7, #32]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	1c59      	adds	r1, r3, #1
 80016b8:	6279      	str	r1, [r7, #36]	; 0x24
 80016ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	701a      	strb	r2, [r3, #0]
 80016c2:	6a3b      	ldr	r3, [r7, #32]
 80016c4:	09db      	lsrs	r3, r3, #7
 80016c6:	623b      	str	r3, [r7, #32]
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	2b7f      	cmp	r3, #127	; 0x7f
 80016cc:	d8f0      	bhi.n	80016b0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	1c5a      	adds	r2, r3, #1
 80016d2:	627a      	str	r2, [r7, #36]	; 0x24
 80016d4:	6a3a      	ldr	r2, [r7, #32]
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	701a      	strb	r2, [r3, #0]
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	61fb      	str	r3, [r7, #28]
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]
 80016e6:	e00b      	b.n	8001700 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	1c59      	adds	r1, r3, #1
 80016f0:	61f9      	str	r1, [r7, #28]
 80016f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	701a      	strb	r2, [r3, #0]
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	09db      	lsrs	r3, r3, #7
 80016fe:	61bb      	str	r3, [r7, #24]
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	2b7f      	cmp	r3, #127	; 0x7f
 8001704:	d8f0      	bhi.n	80016e8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	1c5a      	adds	r2, r3, #1
 800170a:	61fa      	str	r2, [r7, #28]
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	701a      	strb	r2, [r3, #0]
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8001716:	2215      	movs	r2, #21
 8001718:	68f9      	ldr	r1, [r7, #12]
 800171a:	6938      	ldr	r0, [r7, #16]
 800171c:	f7ff fa7a 	bl	8000c14 <_SendPacket>
  RECORD_END();
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f383 8811 	msr	BASEPRI, r3
}
 8001726:	bf00      	nop
 8001728:	3748      	adds	r7, #72	; 0x48
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000bac 	.word	0x20000bac
 8001734:	20000b7c 	.word	0x20000b7c

08001738 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d008      	beq.n	8001756 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800174e:	4b03      	ldr	r3, [pc, #12]	; (800175c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	4798      	blx	r3
  }
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000b7c 	.word	0x20000b7c

08001760 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001768:	f3ef 8311 	mrs	r3, BASEPRI
 800176c:	f04f 0120 	mov.w	r1, #32
 8001770:	f381 8811 	msr	BASEPRI, r1
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	480b      	ldr	r0, [pc, #44]	; (80017a4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8001778:	f7ff f960 	bl	8000a3c <_PreparePacket>
 800177c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800177e:	2280      	movs	r2, #128	; 0x80
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	6938      	ldr	r0, [r7, #16]
 8001784:	f7ff f92a 	bl	80009dc <_EncodeStr>
 8001788:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800178a:	220e      	movs	r2, #14
 800178c:	68f9      	ldr	r1, [r7, #12]
 800178e:	6938      	ldr	r0, [r7, #16]
 8001790:	f7ff fa40 	bl	8000c14 <_SendPacket>
  RECORD_END();
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	f383 8811 	msr	BASEPRI, r3
}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000bac 	.word	0x20000bac

080017a8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80017a8:	b590      	push	{r4, r7, lr}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d01a      	beq.n	80017ec <SEGGER_SYSVIEW_RecordSystime+0x44>
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d015      	beq.n	80017ec <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80017c0:	4b10      	ldr	r3, [pc, #64]	; (8001804 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4798      	blx	r3
 80017c8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80017cc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80017ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	000a      	movs	r2, r1
 80017dc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80017de:	4613      	mov	r3, r2
 80017e0:	461a      	mov	r2, r3
 80017e2:	4621      	mov	r1, r4
 80017e4:	200d      	movs	r0, #13
 80017e6:	f7ff fcef 	bl	80011c8 <SEGGER_SYSVIEW_RecordU32x2>
 80017ea:	e006      	b.n	80017fa <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4619      	mov	r1, r3
 80017f2:	200c      	movs	r0, #12
 80017f4:	f7ff fcac 	bl	8001150 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd90      	pop	{r4, r7, pc}
 8001802:	bf00      	nop
 8001804:	20000b7c 	.word	0x20000b7c
 8001808:	e0001004 	.word	0xe0001004

0800180c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b08c      	sub	sp, #48	; 0x30
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8001816:	4b40      	ldr	r3, [pc, #256]	; (8001918 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d077      	beq.n	800190e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800181e:	4b3e      	ldr	r3, [pc, #248]	; (8001918 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8001824:	2300      	movs	r3, #0
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
 8001828:	e008      	b.n	800183c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800182a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8001830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001832:	2b00      	cmp	r3, #0
 8001834:	d007      	beq.n	8001846 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8001836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001838:	3301      	adds	r3, #1
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001840:	429a      	cmp	r2, r3
 8001842:	d3f2      	bcc.n	800182a <SEGGER_SYSVIEW_SendModule+0x1e>
 8001844:	e000      	b.n	8001848 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8001846:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8001848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184a:	2b00      	cmp	r3, #0
 800184c:	d055      	beq.n	80018fa <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800184e:	f3ef 8311 	mrs	r3, BASEPRI
 8001852:	f04f 0120 	mov.w	r1, #32
 8001856:	f381 8811 	msr	BASEPRI, r1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	482f      	ldr	r0, [pc, #188]	; (800191c <SEGGER_SYSVIEW_SendModule+0x110>)
 800185e:	f7ff f8ed 	bl	8000a3c <_PreparePacket>
 8001862:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	623b      	str	r3, [r7, #32]
 8001870:	e00b      	b.n	800188a <SEGGER_SYSVIEW_SendModule+0x7e>
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	1c59      	adds	r1, r3, #1
 800187a:	6279      	str	r1, [r7, #36]	; 0x24
 800187c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	701a      	strb	r2, [r3, #0]
 8001884:	6a3b      	ldr	r3, [r7, #32]
 8001886:	09db      	lsrs	r3, r3, #7
 8001888:	623b      	str	r3, [r7, #32]
 800188a:	6a3b      	ldr	r3, [r7, #32]
 800188c:	2b7f      	cmp	r3, #127	; 0x7f
 800188e:	d8f0      	bhi.n	8001872 <SEGGER_SYSVIEW_SendModule+0x66>
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	1c5a      	adds	r2, r3, #1
 8001894:	627a      	str	r2, [r7, #36]	; 0x24
 8001896:	6a3a      	ldr	r2, [r7, #32]
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	701a      	strb	r2, [r3, #0]
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	61fb      	str	r3, [r7, #28]
 80018a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	61bb      	str	r3, [r7, #24]
 80018aa:	e00b      	b.n	80018c4 <SEGGER_SYSVIEW_SendModule+0xb8>
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	1c59      	adds	r1, r3, #1
 80018b4:	61f9      	str	r1, [r7, #28]
 80018b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	701a      	strb	r2, [r3, #0]
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	09db      	lsrs	r3, r3, #7
 80018c2:	61bb      	str	r3, [r7, #24]
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	2b7f      	cmp	r3, #127	; 0x7f
 80018c8:	d8f0      	bhi.n	80018ac <SEGGER_SYSVIEW_SendModule+0xa0>
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	1c5a      	adds	r2, r3, #1
 80018ce:	61fa      	str	r2, [r7, #28]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80018da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2280      	movs	r2, #128	; 0x80
 80018e0:	4619      	mov	r1, r3
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f7ff f87a 	bl	80009dc <_EncodeStr>
 80018e8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80018ea:	2216      	movs	r2, #22
 80018ec:	68f9      	ldr	r1, [r7, #12]
 80018ee:	6938      	ldr	r0, [r7, #16]
 80018f0:	f7ff f990 	bl	8000c14 <_SendPacket>
      RECORD_END();
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80018fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d006      	beq.n	800190e <SEGGER_SYSVIEW_SendModule+0x102>
 8001900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d002      	beq.n	800190e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8001908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	4798      	blx	r3
    }
  }
}
 800190e:	bf00      	nop
 8001910:	3730      	adds	r7, #48	; 0x30
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000ba4 	.word	0x20000ba4
 800191c:	20000bac 	.word	0x20000bac

08001920 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00f      	beq.n	800194e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d002      	beq.n	8001942 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f2      	bne.n	8001934 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000ba4 	.word	0x20000ba4

0800195c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8001962:	f3ef 8311 	mrs	r3, BASEPRI
 8001966:	f04f 0120 	mov.w	r1, #32
 800196a:	f381 8811 	msr	BASEPRI, r1
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	4817      	ldr	r0, [pc, #92]	; (80019d0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8001972:	f7ff f863 	bl	8000a3c <_PreparePacket>
 8001976:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	e00b      	b.n	80019a0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	1c59      	adds	r1, r3, #1
 8001990:	6179      	str	r1, [r7, #20]
 8001992:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	701a      	strb	r2, [r3, #0]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	09db      	lsrs	r3, r3, #7
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	2b7f      	cmp	r3, #127	; 0x7f
 80019a4:	d8f0      	bhi.n	8001988 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	1c5a      	adds	r2, r3, #1
 80019aa:	617a      	str	r2, [r7, #20]
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	701a      	strb	r2, [r3, #0]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80019b6:	221b      	movs	r2, #27
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	68b8      	ldr	r0, [r7, #8]
 80019bc:	f7ff f92a 	bl	8000c14 <_SendPacket>
  RECORD_END();
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f383 8811 	msr	BASEPRI, r3
}
 80019c6:	bf00      	nop
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000bac 	.word	0x20000bac
 80019d4:	20000ba8 	.word	0x20000ba8

080019d8 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 80019d8:	b40f      	push	{r0, r1, r2, r3}
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	461a      	mov	r2, r3
 80019ea:	2100      	movs	r1, #0
 80019ec:	6938      	ldr	r0, [r7, #16]
 80019ee:	f7ff fa7f 	bl	8000ef0 <_VPrintHost>
  va_end(ParamList);
#endif
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019fc:	b004      	add	sp, #16
 80019fe:	4770      	bx	lr

08001a00 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001a04:	4803      	ldr	r0, [pc, #12]	; (8001a14 <_cbSendSystemDesc+0x14>)
 8001a06:	f7ff feab 	bl	8001760 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001a0a:	4803      	ldr	r0, [pc, #12]	; (8001a18 <_cbSendSystemDesc+0x18>)
 8001a0c:	f7ff fea8 	bl	8001760 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	0800fabc 	.word	0x0800fabc
 8001a18:	0800faf0 	.word	0x0800faf0

08001a1c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <SEGGER_SYSVIEW_Conf+0x20>)
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <SEGGER_SYSVIEW_Conf+0x20>)
 8001a26:	6819      	ldr	r1, [r3, #0]
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <SEGGER_SYSVIEW_Conf+0x24>)
 8001a2a:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <SEGGER_SYSVIEW_Conf+0x28>)
 8001a2c:	f7ff fb1e 	bl	800106c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001a30:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001a34:	f7ff fb5e 	bl	80010f4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	08001a01 	.word	0x08001a01
 8001a44:	0800fbe0 	.word	0x0800fbe0

08001a48 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001a4e:	2300      	movs	r3, #0
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	e048      	b.n	8001ae6 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8001a54:	4929      	ldr	r1, [pc, #164]	; (8001afc <_cbSendTaskList+0xb4>)
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f00b fb75 	bl	800d154 <uxTaskGetStackHighWaterMark>
 8001a6a:	4601      	mov	r1, r0
 8001a6c:	4823      	ldr	r0, [pc, #140]	; (8001afc <_cbSendTaskList+0xb4>)
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4403      	add	r3, r0
 8001a7a:	3310      	adds	r3, #16
 8001a7c:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001a7e:	491f      	ldr	r1, [pc, #124]	; (8001afc <_cbSendTaskList+0xb4>)
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	4613      	mov	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	6818      	ldr	r0, [r3, #0]
 8001a8e:	491b      	ldr	r1, [pc, #108]	; (8001afc <_cbSendTaskList+0xb4>)
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	6819      	ldr	r1, [r3, #0]
 8001aa0:	4c16      	ldr	r4, [pc, #88]	; (8001afc <_cbSendTaskList+0xb4>)
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4423      	add	r3, r4
 8001aae:	3308      	adds	r3, #8
 8001ab0:	681c      	ldr	r4, [r3, #0]
 8001ab2:	4d12      	ldr	r5, [pc, #72]	; (8001afc <_cbSendTaskList+0xb4>)
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	442b      	add	r3, r5
 8001ac0:	330c      	adds	r3, #12
 8001ac2:	681d      	ldr	r5, [r3, #0]
 8001ac4:	4e0d      	ldr	r6, [pc, #52]	; (8001afc <_cbSendTaskList+0xb4>)
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4433      	add	r3, r6
 8001ad2:	3310      	adds	r3, #16
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	462b      	mov	r3, r5
 8001ada:	4622      	mov	r2, r4
 8001adc:	f000 f855 	bl	8001b8a <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <_cbSendTaskList+0xb8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d3b1      	bcc.n	8001a54 <_cbSendTaskList+0xc>
  }
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000c90 	.word	0x20000c90
 8001b00:	20000d30 	.word	0x20000d30

08001b04 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001b0c:	f00b f80a 	bl	800cb24 <xTaskGetTickCountFromISR>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2200      	movs	r2, #0
 8001b14:	469a      	mov	sl, r3
 8001b16:	4693      	mov	fp, r2
 8001b18:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001b1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	f04f 0a00 	mov.w	sl, #0
 8001b28:	f04f 0b00 	mov.w	fp, #0
 8001b2c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001b30:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001b34:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001b38:	4652      	mov	r2, sl
 8001b3a:	465b      	mov	r3, fp
 8001b3c:	1a14      	subs	r4, r2, r0
 8001b3e:	eb63 0501 	sbc.w	r5, r3, r1
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	f04f 0300 	mov.w	r3, #0
 8001b4a:	00ab      	lsls	r3, r5, #2
 8001b4c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001b50:	00a2      	lsls	r2, r4, #2
 8001b52:	4614      	mov	r4, r2
 8001b54:	461d      	mov	r5, r3
 8001b56:	eb14 0800 	adds.w	r8, r4, r0
 8001b5a:	eb45 0901 	adc.w	r9, r5, r1
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b72:	4690      	mov	r8, r2
 8001b74:	4699      	mov	r9, r3
 8001b76:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001b7a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001b8a <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b08a      	sub	sp, #40	; 0x28
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
 8001b96:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	2214      	movs	r2, #20
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f00d fb43 	bl	800f22c <memset>
  TaskInfo.TaskID     = TaskID;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fcd6 	bl	8001570 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001bc4:	bf00      	nop
 8001bc6:	3728      	adds	r7, #40	; 0x28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <crc32>:
 * CRC32 code derived from work by Gary S. Brown.
 * https://web.mit.edu/freebsd/head/sys/libkern/crc32.c
 *
 */
uint32_t crc32(const void *buf, size_t size)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
	const uint8_t *p = buf;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]
	uint32_t crc;

	crc = ~0U;
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295
 8001bde:	60bb      	str	r3, [r7, #8]
	while (size--)
 8001be0:	e00e      	b.n	8001c00 <crc32+0x34>
		crc = crc32_tab[(crc ^ *p++) & 0xFF] ^ (crc >> 8);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1c5a      	adds	r2, r3, #1
 8001be6:	60fa      	str	r2, [r7, #12]
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	4053      	eors	r3, r2
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <crc32+0x50>)
 8001bf4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	0a1b      	lsrs	r3, r3, #8
 8001bfc:	4053      	eors	r3, r2
 8001bfe:	60bb      	str	r3, [r7, #8]
	while (size--)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	1e5a      	subs	r2, r3, #1
 8001c04:	603a      	str	r2, [r7, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1eb      	bne.n	8001be2 <crc32+0x16>
	return crc ^ ~0U;
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	43db      	mvns	r3, r3
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	0800fbe8 	.word	0x0800fbe8

08001c20 <CheckCRC>:

bool CheckCRC(const uint8_t *Buff, const uint32_t Len)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
	//make sure args and crc32 return are not NULL
	if(!Buff || !Len){
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d002      	beq.n	8001c36 <CheckCRC+0x16>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <CheckCRC+0x1a>
		return false;
 8001c36:	2300      	movs	r3, #0
 8001c38:	e039      	b.n	8001cae <CheckCRC+0x8e>
	}

	uint32_t result = crc32(Buff, 4);
 8001c3a:	2104      	movs	r1, #4
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff ffc5 	bl	8001bcc <crc32>
 8001c42:	6138      	str	r0, [r7, #16]

	if(!result){
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <CheckCRC+0x2e>
		return false;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	e02f      	b.n	8001cae <CheckCRC+0x8e>
	}
	//for each byte of crc32 in packet, ensure equality with crc32 calculated on packet contents
	for (int i = 0; i < 4; i++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	e028      	b.n	8001ca6 <CheckCRC+0x86>
	{
		uint32_t hashresult = result & (0x000000FF << (8 * i));
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	22ff      	movs	r2, #255	; 0xff
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	461a      	mov	r2, r3
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4013      	ands	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
		char hex[3];
		//first 2 digits of each hash result is used; all other digits are significant but always 0
		sprintf(hex, "%02x", hashresult >> (8 * i));
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	40da      	lsrs	r2, r3
 8001c6e:	f107 0308 	add.w	r3, r7, #8
 8001c72:	4911      	ldr	r1, [pc, #68]	; (8001cb8 <CheckCRC+0x98>)
 8001c74:	4618      	mov	r0, r3
 8001c76:	f00d fab9 	bl	800f1ec <siprintf>

		uint8_t uint8_value = strtoul(hex, NULL, 16);
 8001c7a:	f107 0308 	add.w	r3, r7, #8
 8001c7e:	2210      	movs	r2, #16
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f00d faa8 	bl	800f1d8 <strtoul>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	72fb      	strb	r3, [r7, #11]

		if (uint8_value != Buff[i + 5])
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	3305      	adds	r3, #5
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	4413      	add	r3, r2
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	7afa      	ldrb	r2, [r7, #11]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d001      	beq.n	8001ca0 <CheckCRC+0x80>
		{
			return false;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e006      	b.n	8001cae <CheckCRC+0x8e>
	for (int i = 0; i < 4; i++)
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	ddd3      	ble.n	8001c54 <CheckCRC+0x34>
		}
	}

	return true;
 8001cac:	2301      	movs	r3, #1
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	0800fb00 	.word	0x0800fb00

08001cbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cbc:	b590      	push	{r4, r7, lr}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cc2:	f000 feec 	bl	8002a9e <HAL_Init>

  /* USER CODE BEGIN Init */
  SEGGER_SYSVIEW_Conf();
 8001cc6:	f7ff fea9 	bl	8001a1c <SEGGER_SYSVIEW_Conf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cca:	f000 f867 	bl	8001d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cce:	f000 faa7 	bl	8002220 <MX_GPIO_Init>
  MX_ETH_Init();
 8001cd2:	f000 f8d5 	bl	8001e80 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001cd6:	f000 fa73 	bl	80021c0 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8001cda:	f000 f997 	bl	800200c <MX_TIM4_Init>
  MX_TIM12_Init();
 8001cde:	f000 fa0d 	bl	80020fc <MX_TIM12_Init>
  MX_TIM3_Init();
 8001ce2:	f000 f91b 	bl	8001f1c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001ce6:	2104      	movs	r1, #4
 8001ce8:	481e      	ldr	r0, [pc, #120]	; (8001d64 <main+0xa8>)
 8001cea:	f004 fa6f 	bl	80061cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001cee:	2100      	movs	r1, #0
 8001cf0:	481d      	ldr	r0, [pc, #116]	; (8001d68 <main+0xac>)
 8001cf2:	f004 fa6b 	bl	80061cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001cf6:	2108      	movs	r1, #8
 8001cf8:	481c      	ldr	r0, [pc, #112]	; (8001d6c <main+0xb0>)
 8001cfa:	f004 fa67 	bl	80061cc <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001cfe:	f009 fb57 	bl	800b3b0 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of testCommandTimer */
  testCommandTimerHandle = osTimerNew(testCommandTimerEntry, osTimerPeriodic, NULL, &testCommandTimer_attributes);
 8001d02:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <main+0xb4>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	2101      	movs	r1, #1
 8001d08:	481a      	ldr	r0, [pc, #104]	; (8001d74 <main+0xb8>)
 8001d0a:	f009 fca5 	bl	800b658 <osTimerNew>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4a19      	ldr	r2, [pc, #100]	; (8001d78 <main+0xbc>)
 8001d12:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  xTimerStart(testCommandTimerHandle, 10000 / portTICK_PERIOD_MS);
 8001d14:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <main+0xbc>)
 8001d16:	681c      	ldr	r4, [r3, #0]
 8001d18:	f00a fef4 	bl	800cb04 <xTaskGetTickCount>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	2300      	movs	r3, #0
 8001d26:	2101      	movs	r1, #1
 8001d28:	4620      	mov	r0, r4
 8001d2a:	f00b fc53 	bl	800d5d4 <xTimerGenericCommand>
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of commandQueue */
  commandQueueHandle = osMessageQueueNew (16, 32, &commandQueue_attributes);
 8001d2e:	4a13      	ldr	r2, [pc, #76]	; (8001d7c <main+0xc0>)
 8001d30:	2120      	movs	r1, #32
 8001d32:	2010      	movs	r0, #16
 8001d34:	f009 fd14 	bl	800b760 <osMessageQueueNew>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	4a11      	ldr	r2, [pc, #68]	; (8001d80 <main+0xc4>)
 8001d3c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001d3e:	4a11      	ldr	r2, [pc, #68]	; (8001d84 <main+0xc8>)
 8001d40:	2100      	movs	r1, #0
 8001d42:	4811      	ldr	r0, [pc, #68]	; (8001d88 <main+0xcc>)
 8001d44:	f009 fb9e 	bl	800b484 <osThreadNew>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4a10      	ldr	r2, [pc, #64]	; (8001d8c <main+0xd0>)
 8001d4c:	6013      	str	r3, [r2, #0]

  /* creation of commandReader */
  commandReaderHandle = osThreadNew(commandReaderEntry, NULL, &commandReader_attributes);
 8001d4e:	4a10      	ldr	r2, [pc, #64]	; (8001d90 <main+0xd4>)
 8001d50:	2100      	movs	r1, #0
 8001d52:	4810      	ldr	r0, [pc, #64]	; (8001d94 <main+0xd8>)
 8001d54:	f009 fb96 	bl	800b484 <osThreadNew>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	4a0f      	ldr	r2, [pc, #60]	; (8001d98 <main+0xdc>)
 8001d5c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001d5e:	f009 fb5b 	bl	800b418 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d62:	e7fe      	b.n	8001d62 <main+0xa6>
 8001d64:	20000e68 	.word	0x20000e68
 8001d68:	20000eb4 	.word	0x20000eb4
 8001d6c:	20000e1c 	.word	0x20000e1c
 8001d70:	08010048 	.word	0x08010048
 8001d74:	0800241d 	.word	0x0800241d
 8001d78:	20000f94 	.word	0x20000f94
 8001d7c:	08010030 	.word	0x08010030
 8001d80:	20000f90 	.word	0x20000f90
 8001d84:	0800ffe8 	.word	0x0800ffe8
 8001d88:	08002335 	.word	0x08002335
 8001d8c:	20000f88 	.word	0x20000f88
 8001d90:	0801000c 	.word	0x0801000c
 8001d94:	08002349 	.word	0x08002349
 8001d98:	20000f8c 	.word	0x20000f8c

08001d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b094      	sub	sp, #80	; 0x50
 8001da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da2:	f107 031c 	add.w	r3, r7, #28
 8001da6:	2234      	movs	r2, #52	; 0x34
 8001da8:	2100      	movs	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f00d fa3e 	bl	800f22c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db0:	f107 0308 	add.w	r3, r7, #8
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001dc0:	f002 ff44 	bl	8004c4c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc4:	4b2c      	ldr	r3, [pc, #176]	; (8001e78 <SystemClock_Config+0xdc>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	4a2b      	ldr	r2, [pc, #172]	; (8001e78 <SystemClock_Config+0xdc>)
 8001dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dce:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd0:	4b29      	ldr	r3, [pc, #164]	; (8001e78 <SystemClock_Config+0xdc>)
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ddc:	4b27      	ldr	r3, [pc, #156]	; (8001e7c <SystemClock_Config+0xe0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001de4:	4a25      	ldr	r2, [pc, #148]	; (8001e7c <SystemClock_Config+0xe0>)
 8001de6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <SystemClock_Config+0xe0>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001df4:	603b      	str	r3, [r7, #0]
 8001df6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001dfc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001e00:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e02:	2302      	movs	r3, #2
 8001e04:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e0c:	2304      	movs	r3, #4
 8001e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001e10:	2360      	movs	r3, #96	; 0x60
 8001e12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e14:	2302      	movs	r3, #2
 8001e16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e18:	2304      	movs	r3, #4
 8001e1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e20:	f107 031c 	add.w	r3, r7, #28
 8001e24:	4618      	mov	r0, r3
 8001e26:	f002 ff71 	bl	8004d0c <HAL_RCC_OscConfig>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e30:	f000 fb12 	bl	8002458 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e34:	f002 ff1a 	bl	8004c6c <HAL_PWREx_EnableOverDrive>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001e3e:	f000 fb0b 	bl	8002458 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e42:	230f      	movs	r3, #15
 8001e44:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e46:	2302      	movs	r3, #2
 8001e48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e58:	f107 0308 	add.w	r3, r7, #8
 8001e5c:	2103      	movs	r1, #3
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f003 fa02 	bl	8005268 <HAL_RCC_ClockConfig>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001e6a:	f000 faf5 	bl	8002458 <Error_Handler>
  }
}
 8001e6e:	bf00      	nop
 8001e70:	3750      	adds	r7, #80	; 0x50
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40007000 	.word	0x40007000

08001e80 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001e84:	4b1f      	ldr	r3, [pc, #124]	; (8001f04 <MX_ETH_Init+0x84>)
 8001e86:	4a20      	ldr	r2, [pc, #128]	; (8001f08 <MX_ETH_Init+0x88>)
 8001e88:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001e8a:	4b20      	ldr	r3, [pc, #128]	; (8001f0c <MX_ETH_Init+0x8c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001e90:	4b1e      	ldr	r3, [pc, #120]	; (8001f0c <MX_ETH_Init+0x8c>)
 8001e92:	2280      	movs	r2, #128	; 0x80
 8001e94:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001e96:	4b1d      	ldr	r3, [pc, #116]	; (8001f0c <MX_ETH_Init+0x8c>)
 8001e98:	22e1      	movs	r2, #225	; 0xe1
 8001e9a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001e9c:	4b1b      	ldr	r3, [pc, #108]	; (8001f0c <MX_ETH_Init+0x8c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <MX_ETH_Init+0x8c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001ea8:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <MX_ETH_Init+0x8c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <MX_ETH_Init+0x84>)
 8001eb0:	4a16      	ldr	r2, [pc, #88]	; (8001f0c <MX_ETH_Init+0x8c>)
 8001eb2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <MX_ETH_Init+0x84>)
 8001eb6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001eba:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <MX_ETH_Init+0x84>)
 8001ebe:	4a14      	ldr	r2, [pc, #80]	; (8001f10 <MX_ETH_Init+0x90>)
 8001ec0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <MX_ETH_Init+0x84>)
 8001ec4:	4a13      	ldr	r2, [pc, #76]	; (8001f14 <MX_ETH_Init+0x94>)
 8001ec6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001ec8:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <MX_ETH_Init+0x84>)
 8001eca:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001ece:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001ed0:	480c      	ldr	r0, [pc, #48]	; (8001f04 <MX_ETH_Init+0x84>)
 8001ed2:	f000 ff17 	bl	8002d04 <HAL_ETH_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001edc:	f000 fabc 	bl	8002458 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001ee0:	2238      	movs	r2, #56	; 0x38
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	480c      	ldr	r0, [pc, #48]	; (8001f18 <MX_ETH_Init+0x98>)
 8001ee6:	f00d f9a1 	bl	800f22c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001eea:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <MX_ETH_Init+0x98>)
 8001eec:	2221      	movs	r2, #33	; 0x21
 8001eee:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <MX_ETH_Init+0x98>)
 8001ef2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001ef6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001ef8:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <MX_ETH_Init+0x98>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000d6c 	.word	0x20000d6c
 8001f08:	40028000 	.word	0x40028000
 8001f0c:	20000f98 	.word	0x20000f98
 8001f10:	20000200 	.word	0x20000200
 8001f14:	20000160 	.word	0x20000160
 8001f18:	20000d34 	.word	0x20000d34

08001f1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08e      	sub	sp, #56	; 0x38
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	605a      	str	r2, [r3, #4]
 8001f2c:	609a      	str	r2, [r3, #8]
 8001f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f30:	f107 031c 	add.w	r3, r7, #28
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f3c:	463b      	mov	r3, r7
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	60da      	str	r2, [r3, #12]
 8001f48:	611a      	str	r2, [r3, #16]
 8001f4a:	615a      	str	r2, [r3, #20]
 8001f4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f4e:	4b2d      	ldr	r3, [pc, #180]	; (8002004 <MX_TIM3_Init+0xe8>)
 8001f50:	4a2d      	ldr	r2, [pc, #180]	; (8002008 <MX_TIM3_Init+0xec>)
 8001f52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f54:	4b2b      	ldr	r3, [pc, #172]	; (8002004 <MX_TIM3_Init+0xe8>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5a:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <MX_TIM3_Init+0xe8>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f60:	4b28      	ldr	r3, [pc, #160]	; (8002004 <MX_TIM3_Init+0xe8>)
 8001f62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f68:	4b26      	ldr	r3, [pc, #152]	; (8002004 <MX_TIM3_Init+0xe8>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f6e:	4b25      	ldr	r3, [pc, #148]	; (8002004 <MX_TIM3_Init+0xe8>)
 8001f70:	2280      	movs	r2, #128	; 0x80
 8001f72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f74:	4823      	ldr	r0, [pc, #140]	; (8002004 <MX_TIM3_Init+0xe8>)
 8001f76:	f003 fff7 	bl	8005f68 <HAL_TIM_Base_Init>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001f80:	f000 fa6a 	bl	8002458 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f88:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f8e:	4619      	mov	r1, r3
 8001f90:	481c      	ldr	r0, [pc, #112]	; (8002004 <MX_TIM3_Init+0xe8>)
 8001f92:	f004 fc49 	bl	8006828 <HAL_TIM_ConfigClockSource>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001f9c:	f000 fa5c 	bl	8002458 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fa0:	4818      	ldr	r0, [pc, #96]	; (8002004 <MX_TIM3_Init+0xe8>)
 8001fa2:	f004 f8b1 	bl	8006108 <HAL_TIM_PWM_Init>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001fac:	f000 fa54 	bl	8002458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fb8:	f107 031c 	add.w	r3, r7, #28
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4811      	ldr	r0, [pc, #68]	; (8002004 <MX_TIM3_Init+0xe8>)
 8001fc0:	f005 f8e2 	bl	8007188 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001fca:	f000 fa45 	bl	8002458 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fce:	2360      	movs	r3, #96	; 0x60
 8001fd0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fde:	463b      	mov	r3, r7
 8001fe0:	2208      	movs	r2, #8
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4807      	ldr	r0, [pc, #28]	; (8002004 <MX_TIM3_Init+0xe8>)
 8001fe6:	f004 fb0b 	bl	8006600 <HAL_TIM_PWM_ConfigChannel>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001ff0:	f000 fa32 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ff4:	4803      	ldr	r0, [pc, #12]	; (8002004 <MX_TIM3_Init+0xe8>)
 8001ff6:	f000 fb5d 	bl	80026b4 <HAL_TIM_MspPostInit>

}
 8001ffa:	bf00      	nop
 8001ffc:	3738      	adds	r7, #56	; 0x38
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000e1c 	.word	0x20000e1c
 8002008:	40000400 	.word	0x40000400

0800200c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08e      	sub	sp, #56	; 0x38
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002012:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002020:	f107 031c 	add.w	r3, r7, #28
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800202c:	463b      	mov	r3, r7
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]
 8002034:	609a      	str	r2, [r3, #8]
 8002036:	60da      	str	r2, [r3, #12]
 8002038:	611a      	str	r2, [r3, #16]
 800203a:	615a      	str	r2, [r3, #20]
 800203c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800203e:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <MX_TIM4_Init+0xe8>)
 8002040:	4a2d      	ldr	r2, [pc, #180]	; (80020f8 <MX_TIM4_Init+0xec>)
 8002042:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002044:	4b2b      	ldr	r3, [pc, #172]	; (80020f4 <MX_TIM4_Init+0xe8>)
 8002046:	2200      	movs	r2, #0
 8002048:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800204a:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <MX_TIM4_Init+0xe8>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002050:	4b28      	ldr	r3, [pc, #160]	; (80020f4 <MX_TIM4_Init+0xe8>)
 8002052:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002056:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002058:	4b26      	ldr	r3, [pc, #152]	; (80020f4 <MX_TIM4_Init+0xe8>)
 800205a:	2200      	movs	r2, #0
 800205c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800205e:	4b25      	ldr	r3, [pc, #148]	; (80020f4 <MX_TIM4_Init+0xe8>)
 8002060:	2280      	movs	r2, #128	; 0x80
 8002062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002064:	4823      	ldr	r0, [pc, #140]	; (80020f4 <MX_TIM4_Init+0xe8>)
 8002066:	f003 ff7f 	bl	8005f68 <HAL_TIM_Base_Init>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002070:	f000 f9f2 	bl	8002458 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002078:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800207a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800207e:	4619      	mov	r1, r3
 8002080:	481c      	ldr	r0, [pc, #112]	; (80020f4 <MX_TIM4_Init+0xe8>)
 8002082:	f004 fbd1 	bl	8006828 <HAL_TIM_ConfigClockSource>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800208c:	f000 f9e4 	bl	8002458 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002090:	4818      	ldr	r0, [pc, #96]	; (80020f4 <MX_TIM4_Init+0xe8>)
 8002092:	f004 f839 	bl	8006108 <HAL_TIM_PWM_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800209c:	f000 f9dc 	bl	8002458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020a8:	f107 031c 	add.w	r3, r7, #28
 80020ac:	4619      	mov	r1, r3
 80020ae:	4811      	ldr	r0, [pc, #68]	; (80020f4 <MX_TIM4_Init+0xe8>)
 80020b0:	f005 f86a 	bl	8007188 <HAL_TIMEx_MasterConfigSynchronization>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80020ba:	f000 f9cd 	bl	8002458 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020be:	2360      	movs	r3, #96	; 0x60
 80020c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020ce:	463b      	mov	r3, r7
 80020d0:	2204      	movs	r2, #4
 80020d2:	4619      	mov	r1, r3
 80020d4:	4807      	ldr	r0, [pc, #28]	; (80020f4 <MX_TIM4_Init+0xe8>)
 80020d6:	f004 fa93 	bl	8006600 <HAL_TIM_PWM_ConfigChannel>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80020e0:	f000 f9ba 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80020e4:	4803      	ldr	r0, [pc, #12]	; (80020f4 <MX_TIM4_Init+0xe8>)
 80020e6:	f000 fae5 	bl	80026b4 <HAL_TIM_MspPostInit>

}
 80020ea:	bf00      	nop
 80020ec:	3738      	adds	r7, #56	; 0x38
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000e68 	.word	0x20000e68
 80020f8:	40000800 	.word	0x40000800

080020fc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08c      	sub	sp, #48	; 0x30
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002102:	f107 0320 	add.w	r3, r7, #32
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002110:	1d3b      	adds	r3, r7, #4
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]
 800211a:	60da      	str	r2, [r3, #12]
 800211c:	611a      	str	r2, [r3, #16]
 800211e:	615a      	str	r2, [r3, #20]
 8002120:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002122:	4b25      	ldr	r3, [pc, #148]	; (80021b8 <MX_TIM12_Init+0xbc>)
 8002124:	4a25      	ldr	r2, [pc, #148]	; (80021bc <MX_TIM12_Init+0xc0>)
 8002126:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002128:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <MX_TIM12_Init+0xbc>)
 800212a:	2200      	movs	r2, #0
 800212c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800212e:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <MX_TIM12_Init+0xbc>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002134:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <MX_TIM12_Init+0xbc>)
 8002136:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800213a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800213c:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <MX_TIM12_Init+0xbc>)
 800213e:	2200      	movs	r2, #0
 8002140:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002142:	4b1d      	ldr	r3, [pc, #116]	; (80021b8 <MX_TIM12_Init+0xbc>)
 8002144:	2280      	movs	r2, #128	; 0x80
 8002146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002148:	481b      	ldr	r0, [pc, #108]	; (80021b8 <MX_TIM12_Init+0xbc>)
 800214a:	f003 ff0d 	bl	8005f68 <HAL_TIM_Base_Init>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8002154:	f000 f980 	bl	8002458 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800215c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800215e:	f107 0320 	add.w	r3, r7, #32
 8002162:	4619      	mov	r1, r3
 8002164:	4814      	ldr	r0, [pc, #80]	; (80021b8 <MX_TIM12_Init+0xbc>)
 8002166:	f004 fb5f 	bl	8006828 <HAL_TIM_ConfigClockSource>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8002170:	f000 f972 	bl	8002458 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002174:	4810      	ldr	r0, [pc, #64]	; (80021b8 <MX_TIM12_Init+0xbc>)
 8002176:	f003 ffc7 	bl	8006108 <HAL_TIM_PWM_Init>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8002180:	f000 f96a 	bl	8002458 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002184:	2360      	movs	r3, #96	; 0x60
 8002186:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002194:	1d3b      	adds	r3, r7, #4
 8002196:	2200      	movs	r2, #0
 8002198:	4619      	mov	r1, r3
 800219a:	4807      	ldr	r0, [pc, #28]	; (80021b8 <MX_TIM12_Init+0xbc>)
 800219c:	f004 fa30 	bl	8006600 <HAL_TIM_PWM_ConfigChannel>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 80021a6:	f000 f957 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80021aa:	4803      	ldr	r0, [pc, #12]	; (80021b8 <MX_TIM12_Init+0xbc>)
 80021ac:	f000 fa82 	bl	80026b4 <HAL_TIM_MspPostInit>

}
 80021b0:	bf00      	nop
 80021b2:	3730      	adds	r7, #48	; 0x30
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20000eb4 	.word	0x20000eb4
 80021bc:	40001800 	.word	0x40001800

080021c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021c4:	4b14      	ldr	r3, [pc, #80]	; (8002218 <MX_USART3_UART_Init+0x58>)
 80021c6:	4a15      	ldr	r2, [pc, #84]	; (800221c <MX_USART3_UART_Init+0x5c>)
 80021c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80021ca:	4b13      	ldr	r3, [pc, #76]	; (8002218 <MX_USART3_UART_Init+0x58>)
 80021cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021d2:	4b11      	ldr	r3, [pc, #68]	; (8002218 <MX_USART3_UART_Init+0x58>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021d8:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <MX_USART3_UART_Init+0x58>)
 80021da:	2200      	movs	r2, #0
 80021dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021de:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <MX_USART3_UART_Init+0x58>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021e4:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <MX_USART3_UART_Init+0x58>)
 80021e6:	220c      	movs	r2, #12
 80021e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ea:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <MX_USART3_UART_Init+0x58>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f0:	4b09      	ldr	r3, [pc, #36]	; (8002218 <MX_USART3_UART_Init+0x58>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021f6:	4b08      	ldr	r3, [pc, #32]	; (8002218 <MX_USART3_UART_Init+0x58>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <MX_USART3_UART_Init+0x58>)
 80021fe:	2200      	movs	r2, #0
 8002200:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002202:	4805      	ldr	r0, [pc, #20]	; (8002218 <MX_USART3_UART_Init+0x58>)
 8002204:	f005 f86c 	bl	80072e0 <HAL_UART_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800220e:	f000 f923 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000f00 	.word	0x20000f00
 800221c:	40004800 	.word	0x40004800

08002220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08c      	sub	sp, #48	; 0x30
 8002224:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002226:	f107 031c 	add.w	r3, r7, #28
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	605a      	str	r2, [r3, #4]
 8002230:	609a      	str	r2, [r3, #8]
 8002232:	60da      	str	r2, [r3, #12]
 8002234:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002236:	4b3c      	ldr	r3, [pc, #240]	; (8002328 <MX_GPIO_Init+0x108>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a3b      	ldr	r2, [pc, #236]	; (8002328 <MX_GPIO_Init+0x108>)
 800223c:	f043 0304 	orr.w	r3, r3, #4
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b39      	ldr	r3, [pc, #228]	; (8002328 <MX_GPIO_Init+0x108>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	61bb      	str	r3, [r7, #24]
 800224c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800224e:	4b36      	ldr	r3, [pc, #216]	; (8002328 <MX_GPIO_Init+0x108>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	4a35      	ldr	r2, [pc, #212]	; (8002328 <MX_GPIO_Init+0x108>)
 8002254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002258:	6313      	str	r3, [r2, #48]	; 0x30
 800225a:	4b33      	ldr	r3, [pc, #204]	; (8002328 <MX_GPIO_Init+0x108>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002266:	4b30      	ldr	r3, [pc, #192]	; (8002328 <MX_GPIO_Init+0x108>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	4a2f      	ldr	r2, [pc, #188]	; (8002328 <MX_GPIO_Init+0x108>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6313      	str	r3, [r2, #48]	; 0x30
 8002272:	4b2d      	ldr	r3, [pc, #180]	; (8002328 <MX_GPIO_Init+0x108>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800227e:	4b2a      	ldr	r3, [pc, #168]	; (8002328 <MX_GPIO_Init+0x108>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a29      	ldr	r2, [pc, #164]	; (8002328 <MX_GPIO_Init+0x108>)
 8002284:	f043 0302 	orr.w	r3, r3, #2
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b27      	ldr	r3, [pc, #156]	; (8002328 <MX_GPIO_Init+0x108>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002296:	4b24      	ldr	r3, [pc, #144]	; (8002328 <MX_GPIO_Init+0x108>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4a23      	ldr	r2, [pc, #140]	; (8002328 <MX_GPIO_Init+0x108>)
 800229c:	f043 0308 	orr.w	r3, r3, #8
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
 80022a2:	4b21      	ldr	r3, [pc, #132]	; (8002328 <MX_GPIO_Init+0x108>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022ae:	4b1e      	ldr	r3, [pc, #120]	; (8002328 <MX_GPIO_Init+0x108>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a1d      	ldr	r2, [pc, #116]	; (8002328 <MX_GPIO_Init+0x108>)
 80022b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <MX_GPIO_Init+0x108>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80022c6:	2200      	movs	r2, #0
 80022c8:	2140      	movs	r1, #64	; 0x40
 80022ca:	4818      	ldr	r0, [pc, #96]	; (800232c <MX_GPIO_Init+0x10c>)
 80022cc:	f001 f9ec 	bl	80036a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80022d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80022e0:	f107 031c 	add.w	r3, r7, #28
 80022e4:	4619      	mov	r1, r3
 80022e6:	4812      	ldr	r0, [pc, #72]	; (8002330 <MX_GPIO_Init+0x110>)
 80022e8:	f001 f832 	bl	8003350 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80022ec:	2340      	movs	r3, #64	; 0x40
 80022ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f0:	2301      	movs	r3, #1
 80022f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80022fc:	f107 031c 	add.w	r3, r7, #28
 8002300:	4619      	mov	r1, r3
 8002302:	480a      	ldr	r0, [pc, #40]	; (800232c <MX_GPIO_Init+0x10c>)
 8002304:	f001 f824 	bl	8003350 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800230c:	2300      	movs	r3, #0
 800230e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002314:	f107 031c 	add.w	r3, r7, #28
 8002318:	4619      	mov	r1, r3
 800231a:	4804      	ldr	r0, [pc, #16]	; (800232c <MX_GPIO_Init+0x10c>)
 800231c:	f001 f818 	bl	8003350 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002320:	bf00      	nop
 8002322:	3730      	adds	r7, #48	; 0x30
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40023800 	.word	0x40023800
 800232c:	40021800 	.word	0x40021800
 8002330:	40020800 	.word	0x40020800

08002334 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800233c:	f00c f89e 	bl	800e47c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while(1)
    osDelay(1);
 8002340:	2001      	movs	r0, #1
 8002342:	f009 f945 	bl	800b5d0 <osDelay>
 8002346:	e7fb      	b.n	8002340 <StartDefaultTask+0xc>

08002348 <commandReaderEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_commandReaderEntry */
void commandReaderEntry(void *argument)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b090      	sub	sp, #64	; 0x40
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN commandReaderEntry */
  /* Infinite loop */
  bool crccheck;

  int32_t TIM12_CH1_RED = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	63bb      	str	r3, [r7, #56]	; 0x38
  int32_t TIM3_CH3_GREEN = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t TIM4_CH2_BLUE = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	633b      	str	r3, [r7, #48]	; 0x30

  for(;;)
  {
    osDelay(1);
 800235c:	2001      	movs	r0, #1
 800235e:	f009 f937 	bl	800b5d0 <osDelay>
    uint8_t command[32];
    if (xQueueReceive(commandQueueHandle, &command, 100) == pdPASS){
 8002362:	4b27      	ldr	r3, [pc, #156]	; (8002400 <commandReaderEntry+0xb8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f107 010c 	add.w	r1, r7, #12
 800236a:	2264      	movs	r2, #100	; 0x64
 800236c:	4618      	mov	r0, r3
 800236e:	f009 fe5d 	bl	800c02c <xQueueReceive>
 8002372:	4603      	mov	r3, r0
 8002374:	2b01      	cmp	r3, #1
 8002376:	d1f1      	bne.n	800235c <commandReaderEntry+0x14>
    	//SEGGER_SYSVIEW_PrintfHost("%d \n", command[1]);
    	//SEGGER_SYSVIEW_PrintfHost("%p \n", (void*)command);
    	//SEGGER_SYSVIEW_PrintfHost("%u \n", (void*)command);
    	//SEGGER_SYSVIEW_PrintfHost("%x \n", (void*)command);

    	SEGGER_SYSVIEW_PrintfHost("begin:");
 8002378:	4822      	ldr	r0, [pc, #136]	; (8002404 <commandReaderEntry+0xbc>)
 800237a:	f7ff fb2d 	bl	80019d8 <SEGGER_SYSVIEW_PrintfHost>
    	for(int i=0; i < 10; i++){
 800237e:	2300      	movs	r3, #0
 8002380:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002382:	e00b      	b.n	800239c <commandReaderEntry+0x54>
    		SEGGER_SYSVIEW_PrintfHost("%d \n", command[i]);
 8002384:	f107 020c 	add.w	r2, r7, #12
 8002388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800238a:	4413      	add	r3, r2
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	4619      	mov	r1, r3
 8002390:	481d      	ldr	r0, [pc, #116]	; (8002408 <commandReaderEntry+0xc0>)
 8002392:	f7ff fb21 	bl	80019d8 <SEGGER_SYSVIEW_PrintfHost>
    	for(int i=0; i < 10; i++){
 8002396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002398:	3301      	adds	r3, #1
 800239a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800239c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800239e:	2b09      	cmp	r3, #9
 80023a0:	ddf0      	ble.n	8002384 <commandReaderEntry+0x3c>
    	}
    	SEGGER_SYSVIEW_PrintfHost("end");
 80023a2:	481a      	ldr	r0, [pc, #104]	; (800240c <commandReaderEntry+0xc4>)
 80023a4:	f7ff fb18 	bl	80019d8 <SEGGER_SYSVIEW_PrintfHost>
    	crccheck = CheckCRC(command, 9);
 80023a8:	f107 030c 	add.w	r3, r7, #12
 80023ac:	2109      	movs	r1, #9
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fc36 	bl	8001c20 <CheckCRC>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    	//SEGGER_SYSVIEW_PrintfHost("%d \n", crccheck);

    	SEGGER_SYSVIEW_PrintfHost("%d \n", command[2]);
 80023ba:	7bbb      	ldrb	r3, [r7, #14]
 80023bc:	4619      	mov	r1, r3
 80023be:	4812      	ldr	r0, [pc, #72]	; (8002408 <commandReaderEntry+0xc0>)
 80023c0:	f7ff fb0a 	bl	80019d8 <SEGGER_SYSVIEW_PrintfHost>
    	SEGGER_SYSVIEW_PrintfHost("%d \n", command[3]);
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	4619      	mov	r1, r3
 80023c8:	480f      	ldr	r0, [pc, #60]	; (8002408 <commandReaderEntry+0xc0>)
 80023ca:	f7ff fb05 	bl	80019d8 <SEGGER_SYSVIEW_PrintfHost>
    	SEGGER_SYSVIEW_PrintfHost("%d \n", command[4]);
 80023ce:	7c3b      	ldrb	r3, [r7, #16]
 80023d0:	4619      	mov	r1, r3
 80023d2:	480d      	ldr	r0, [pc, #52]	; (8002408 <commandReaderEntry+0xc0>)
 80023d4:	f7ff fb00 	bl	80019d8 <SEGGER_SYSVIEW_PrintfHost>

    	TIM12_CH1_RED = (command[2] * 256);
 80023d8:	7bbb      	ldrb	r3, [r7, #14]
 80023da:	021b      	lsls	r3, r3, #8
 80023dc:	63bb      	str	r3, [r7, #56]	; 0x38
    	TIM12->CCR1 = TIM12_CH1_RED;
 80023de:	4a0c      	ldr	r2, [pc, #48]	; (8002410 <commandReaderEntry+0xc8>)
 80023e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e2:	6353      	str	r3, [r2, #52]	; 0x34

    	TIM3_CH3_GREEN = (command[3] * 256);
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	021b      	lsls	r3, r3, #8
 80023e8:	637b      	str	r3, [r7, #52]	; 0x34
    	TIM3->CCR3 = TIM3_CH3_GREEN;
 80023ea:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <commandReaderEntry+0xcc>)
 80023ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ee:	63d3      	str	r3, [r2, #60]	; 0x3c

    	TIM4_CH2_BLUE = (command[4] * 256);
 80023f0:	7c3b      	ldrb	r3, [r7, #16]
 80023f2:	021b      	lsls	r3, r3, #8
 80023f4:	633b      	str	r3, [r7, #48]	; 0x30
    	TIM4->CCR2 = TIM4_CH2_BLUE;
 80023f6:	4a08      	ldr	r2, [pc, #32]	; (8002418 <commandReaderEntry+0xd0>)
 80023f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fa:	6393      	str	r3, [r2, #56]	; 0x38
  {
 80023fc:	e7ae      	b.n	800235c <commandReaderEntry+0x14>
 80023fe:	bf00      	nop
 8002400:	20000f90 	.word	0x20000f90
 8002404:	0800fb48 	.word	0x0800fb48
 8002408:	0800fb50 	.word	0x0800fb50
 800240c:	0800fb58 	.word	0x0800fb58
 8002410:	40001800 	.word	0x40001800
 8002414:	40000400 	.word	0x40000400
 8002418:	40000800 	.word	0x40000800

0800241c <testCommandTimerEntry>:
  /* USER CODE END commandReaderEntry */
}

/* testCommandTimerEntry function */
void testCommandTimerEntry(void *argument)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN testCommandTimerEntry */
  //SEGGER_SYSVIEW_PrintfHost("sender");
  osDelay(1);
 8002424:	2001      	movs	r0, #1
 8002426:	f009 f8d3 	bl	800b5d0 <osDelay>
  //uint8_t *data = "Hello World from USB CDC\n";
  //xQueueSend(commandQueueHandle, data, 100);

  /* USER CODE END testCommandTimerEntry */
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a04      	ldr	r2, [pc, #16]	; (8002454 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d101      	bne.n	800244a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002446:	f000 fb37 	bl	8002ab8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40001000 	.word	0x40001000

08002458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800245c:	b672      	cpsid	i
}
 800245e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002460:	e7fe      	b.n	8002460 <Error_Handler+0x8>
	...

08002464 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <HAL_MspInit+0x4c>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	4a10      	ldr	r2, [pc, #64]	; (80024b0 <HAL_MspInit+0x4c>)
 8002470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002474:	6413      	str	r3, [r2, #64]	; 0x40
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_MspInit+0x4c>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247e:	607b      	str	r3, [r7, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002482:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_MspInit+0x4c>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <HAL_MspInit+0x4c>)
 8002488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800248c:	6453      	str	r3, [r2, #68]	; 0x44
 800248e:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <HAL_MspInit+0x4c>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002496:	603b      	str	r3, [r7, #0]
 8002498:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800249a:	2200      	movs	r2, #0
 800249c:	210f      	movs	r1, #15
 800249e:	f06f 0001 	mvn.w	r0, #1
 80024a2:	f000 fc05 	bl	8002cb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40023800 	.word	0x40023800

080024b4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08e      	sub	sp, #56	; 0x38
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a4e      	ldr	r2, [pc, #312]	; (800260c <HAL_ETH_MspInit+0x158>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	f040 8096 	bne.w	8002604 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80024d8:	4b4d      	ldr	r3, [pc, #308]	; (8002610 <HAL_ETH_MspInit+0x15c>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	4a4c      	ldr	r2, [pc, #304]	; (8002610 <HAL_ETH_MspInit+0x15c>)
 80024de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024e2:	6313      	str	r3, [r2, #48]	; 0x30
 80024e4:	4b4a      	ldr	r3, [pc, #296]	; (8002610 <HAL_ETH_MspInit+0x15c>)
 80024e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ec:	623b      	str	r3, [r7, #32]
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	4b47      	ldr	r3, [pc, #284]	; (8002610 <HAL_ETH_MspInit+0x15c>)
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	4a46      	ldr	r2, [pc, #280]	; (8002610 <HAL_ETH_MspInit+0x15c>)
 80024f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024fa:	6313      	str	r3, [r2, #48]	; 0x30
 80024fc:	4b44      	ldr	r3, [pc, #272]	; (8002610 <HAL_ETH_MspInit+0x15c>)
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002504:	61fb      	str	r3, [r7, #28]
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	4b41      	ldr	r3, [pc, #260]	; (8002610 <HAL_ETH_MspInit+0x15c>)
 800250a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250c:	4a40      	ldr	r2, [pc, #256]	; (8002610 <HAL_ETH_MspInit+0x15c>)
 800250e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002512:	6313      	str	r3, [r2, #48]	; 0x30
 8002514:	4b3e      	ldr	r3, [pc, #248]	; (8002610 <HAL_ETH_MspInit+0x15c>)
 8002516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800251c:	61bb      	str	r3, [r7, #24]
 800251e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002520:	4b3b      	ldr	r3, [pc, #236]	; (8002610 <HAL_ETH_MspInit+0x15c>)
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	4a3a      	ldr	r2, [pc, #232]	; (8002610 <HAL_ETH_MspInit+0x15c>)
 8002526:	f043 0304 	orr.w	r3, r3, #4
 800252a:	6313      	str	r3, [r2, #48]	; 0x30
 800252c:	4b38      	ldr	r3, [pc, #224]	; (8002610 <HAL_ETH_MspInit+0x15c>)
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002538:	4b35      	ldr	r3, [pc, #212]	; (8002610 <HAL_ETH_MspInit+0x15c>)
 800253a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253c:	4a34      	ldr	r2, [pc, #208]	; (8002610 <HAL_ETH_MspInit+0x15c>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6313      	str	r3, [r2, #48]	; 0x30
 8002544:	4b32      	ldr	r3, [pc, #200]	; (8002610 <HAL_ETH_MspInit+0x15c>)
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002550:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <HAL_ETH_MspInit+0x15c>)
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	4a2e      	ldr	r2, [pc, #184]	; (8002610 <HAL_ETH_MspInit+0x15c>)
 8002556:	f043 0302 	orr.w	r3, r3, #2
 800255a:	6313      	str	r3, [r2, #48]	; 0x30
 800255c:	4b2c      	ldr	r3, [pc, #176]	; (8002610 <HAL_ETH_MspInit+0x15c>)
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002568:	4b29      	ldr	r3, [pc, #164]	; (8002610 <HAL_ETH_MspInit+0x15c>)
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	4a28      	ldr	r2, [pc, #160]	; (8002610 <HAL_ETH_MspInit+0x15c>)
 800256e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002572:	6313      	str	r3, [r2, #48]	; 0x30
 8002574:	4b26      	ldr	r3, [pc, #152]	; (8002610 <HAL_ETH_MspInit+0x15c>)
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002580:	2332      	movs	r3, #50	; 0x32
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002584:	2302      	movs	r3, #2
 8002586:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258c:	2303      	movs	r3, #3
 800258e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002590:	230b      	movs	r3, #11
 8002592:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002598:	4619      	mov	r1, r3
 800259a:	481e      	ldr	r0, [pc, #120]	; (8002614 <HAL_ETH_MspInit+0x160>)
 800259c:	f000 fed8 	bl	8003350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80025a0:	2386      	movs	r3, #134	; 0x86
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a4:	2302      	movs	r3, #2
 80025a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ac:	2303      	movs	r3, #3
 80025ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025b0:	230b      	movs	r3, #11
 80025b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b8:	4619      	mov	r1, r3
 80025ba:	4817      	ldr	r0, [pc, #92]	; (8002618 <HAL_ETH_MspInit+0x164>)
 80025bc:	f000 fec8 	bl	8003350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80025c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ce:	2303      	movs	r3, #3
 80025d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025d2:	230b      	movs	r3, #11
 80025d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80025d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025da:	4619      	mov	r1, r3
 80025dc:	480f      	ldr	r0, [pc, #60]	; (800261c <HAL_ETH_MspInit+0x168>)
 80025de:	f000 feb7 	bl	8003350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80025e2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e8:	2302      	movs	r3, #2
 80025ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f0:	2303      	movs	r3, #3
 80025f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025f4:	230b      	movs	r3, #11
 80025f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025fc:	4619      	mov	r1, r3
 80025fe:	4808      	ldr	r0, [pc, #32]	; (8002620 <HAL_ETH_MspInit+0x16c>)
 8002600:	f000 fea6 	bl	8003350 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002604:	bf00      	nop
 8002606:	3738      	adds	r7, #56	; 0x38
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40028000 	.word	0x40028000
 8002610:	40023800 	.word	0x40023800
 8002614:	40020800 	.word	0x40020800
 8002618:	40020000 	.word	0x40020000
 800261c:	40020400 	.word	0x40020400
 8002620:	40021800 	.word	0x40021800

08002624 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002624:	b480      	push	{r7}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a1c      	ldr	r2, [pc, #112]	; (80026a4 <HAL_TIM_Base_MspInit+0x80>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d10c      	bne.n	8002650 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002636:	4b1c      	ldr	r3, [pc, #112]	; (80026a8 <HAL_TIM_Base_MspInit+0x84>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	4a1b      	ldr	r2, [pc, #108]	; (80026a8 <HAL_TIM_Base_MspInit+0x84>)
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	6413      	str	r3, [r2, #64]	; 0x40
 8002642:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <HAL_TIM_Base_MspInit+0x84>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800264e:	e022      	b.n	8002696 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a15      	ldr	r2, [pc, #84]	; (80026ac <HAL_TIM_Base_MspInit+0x88>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d10c      	bne.n	8002674 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800265a:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <HAL_TIM_Base_MspInit+0x84>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	4a12      	ldr	r2, [pc, #72]	; (80026a8 <HAL_TIM_Base_MspInit+0x84>)
 8002660:	f043 0304 	orr.w	r3, r3, #4
 8002664:	6413      	str	r3, [r2, #64]	; 0x40
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <HAL_TIM_Base_MspInit+0x84>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	693b      	ldr	r3, [r7, #16]
}
 8002672:	e010      	b.n	8002696 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM12)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0d      	ldr	r2, [pc, #52]	; (80026b0 <HAL_TIM_Base_MspInit+0x8c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d10b      	bne.n	8002696 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800267e:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <HAL_TIM_Base_MspInit+0x84>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	4a09      	ldr	r2, [pc, #36]	; (80026a8 <HAL_TIM_Base_MspInit+0x84>)
 8002684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002688:	6413      	str	r3, [r2, #64]	; 0x40
 800268a:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <HAL_TIM_Base_MspInit+0x84>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
}
 8002696:	bf00      	nop
 8002698:	371c      	adds	r7, #28
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40000400 	.word	0x40000400
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40000800 	.word	0x40000800
 80026b0:	40001800 	.word	0x40001800

080026b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	; 0x28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a33      	ldr	r2, [pc, #204]	; (80027a0 <HAL_TIM_MspPostInit+0xec>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d11c      	bne.n	8002710 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d6:	4b33      	ldr	r3, [pc, #204]	; (80027a4 <HAL_TIM_MspPostInit+0xf0>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	4a32      	ldr	r2, [pc, #200]	; (80027a4 <HAL_TIM_MspPostInit+0xf0>)
 80026dc:	f043 0302 	orr.w	r3, r3, #2
 80026e0:	6313      	str	r3, [r2, #48]	; 0x30
 80026e2:	4b30      	ldr	r3, [pc, #192]	; (80027a4 <HAL_TIM_MspPostInit+0xf0>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026ee:	2301      	movs	r3, #1
 80026f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f2:	2302      	movs	r3, #2
 80026f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fa:	2300      	movs	r3, #0
 80026fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026fe:	2302      	movs	r3, #2
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002702:	f107 0314 	add.w	r3, r7, #20
 8002706:	4619      	mov	r1, r3
 8002708:	4827      	ldr	r0, [pc, #156]	; (80027a8 <HAL_TIM_MspPostInit+0xf4>)
 800270a:	f000 fe21 	bl	8003350 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800270e:	e043      	b.n	8002798 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a25      	ldr	r2, [pc, #148]	; (80027ac <HAL_TIM_MspPostInit+0xf8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d11c      	bne.n	8002754 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800271a:	4b22      	ldr	r3, [pc, #136]	; (80027a4 <HAL_TIM_MspPostInit+0xf0>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	4a21      	ldr	r2, [pc, #132]	; (80027a4 <HAL_TIM_MspPostInit+0xf0>)
 8002720:	f043 0302 	orr.w	r3, r3, #2
 8002724:	6313      	str	r3, [r2, #48]	; 0x30
 8002726:	4b1f      	ldr	r3, [pc, #124]	; (80027a4 <HAL_TIM_MspPostInit+0xf0>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002736:	2302      	movs	r3, #2
 8002738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273e:	2300      	movs	r3, #0
 8002740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002742:	2302      	movs	r3, #2
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002746:	f107 0314 	add.w	r3, r7, #20
 800274a:	4619      	mov	r1, r3
 800274c:	4816      	ldr	r0, [pc, #88]	; (80027a8 <HAL_TIM_MspPostInit+0xf4>)
 800274e:	f000 fdff 	bl	8003350 <HAL_GPIO_Init>
}
 8002752:	e021      	b.n	8002798 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM12)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a15      	ldr	r2, [pc, #84]	; (80027b0 <HAL_TIM_MspPostInit+0xfc>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d11c      	bne.n	8002798 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800275e:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <HAL_TIM_MspPostInit+0xf0>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	4a10      	ldr	r2, [pc, #64]	; (80027a4 <HAL_TIM_MspPostInit+0xf0>)
 8002764:	f043 0302 	orr.w	r3, r3, #2
 8002768:	6313      	str	r3, [r2, #48]	; 0x30
 800276a:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <HAL_TIM_MspPostInit+0xf0>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002776:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800277a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277c:	2302      	movs	r3, #2
 800277e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002784:	2300      	movs	r3, #0
 8002786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002788:	2309      	movs	r3, #9
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	4619      	mov	r1, r3
 8002792:	4805      	ldr	r0, [pc, #20]	; (80027a8 <HAL_TIM_MspPostInit+0xf4>)
 8002794:	f000 fddc 	bl	8003350 <HAL_GPIO_Init>
}
 8002798:	bf00      	nop
 800279a:	3728      	adds	r7, #40	; 0x28
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40000400 	.word	0x40000400
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40020400 	.word	0x40020400
 80027ac:	40000800 	.word	0x40000800
 80027b0:	40001800 	.word	0x40001800

080027b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b0ae      	sub	sp, #184	; 0xb8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027cc:	f107 0314 	add.w	r3, r7, #20
 80027d0:	2290      	movs	r2, #144	; 0x90
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f00c fd29 	bl	800f22c <memset>
  if(huart->Instance==USART3)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a22      	ldr	r2, [pc, #136]	; (8002868 <HAL_UART_MspInit+0xb4>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d13c      	bne.n	800285e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80027e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027e8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80027ea:	2300      	movs	r3, #0
 80027ec:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027ee:	f107 0314 	add.w	r3, r7, #20
 80027f2:	4618      	mov	r0, r3
 80027f4:	f002 ff90 	bl	8005718 <HAL_RCCEx_PeriphCLKConfig>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80027fe:	f7ff fe2b 	bl	8002458 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002802:	4b1a      	ldr	r3, [pc, #104]	; (800286c <HAL_UART_MspInit+0xb8>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	4a19      	ldr	r2, [pc, #100]	; (800286c <HAL_UART_MspInit+0xb8>)
 8002808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800280c:	6413      	str	r3, [r2, #64]	; 0x40
 800280e:	4b17      	ldr	r3, [pc, #92]	; (800286c <HAL_UART_MspInit+0xb8>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800281a:	4b14      	ldr	r3, [pc, #80]	; (800286c <HAL_UART_MspInit+0xb8>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4a13      	ldr	r2, [pc, #76]	; (800286c <HAL_UART_MspInit+0xb8>)
 8002820:	f043 0308 	orr.w	r3, r3, #8
 8002824:	6313      	str	r3, [r2, #48]	; 0x30
 8002826:	4b11      	ldr	r3, [pc, #68]	; (800286c <HAL_UART_MspInit+0xb8>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002832:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002836:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283a:	2302      	movs	r3, #2
 800283c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002846:	2303      	movs	r3, #3
 8002848:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800284c:	2307      	movs	r3, #7
 800284e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002852:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002856:	4619      	mov	r1, r3
 8002858:	4805      	ldr	r0, [pc, #20]	; (8002870 <HAL_UART_MspInit+0xbc>)
 800285a:	f000 fd79 	bl	8003350 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800285e:	bf00      	nop
 8002860:	37b8      	adds	r7, #184	; 0xb8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40004800 	.word	0x40004800
 800286c:	40023800 	.word	0x40023800
 8002870:	40020c00 	.word	0x40020c00

08002874 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08e      	sub	sp, #56	; 0x38
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002884:	4b33      	ldr	r3, [pc, #204]	; (8002954 <HAL_InitTick+0xe0>)
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	4a32      	ldr	r2, [pc, #200]	; (8002954 <HAL_InitTick+0xe0>)
 800288a:	f043 0310 	orr.w	r3, r3, #16
 800288e:	6413      	str	r3, [r2, #64]	; 0x40
 8002890:	4b30      	ldr	r3, [pc, #192]	; (8002954 <HAL_InitTick+0xe0>)
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	f003 0310 	and.w	r3, r3, #16
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800289c:	f107 0210 	add.w	r2, r7, #16
 80028a0:	f107 0314 	add.w	r3, r7, #20
 80028a4:	4611      	mov	r1, r2
 80028a6:	4618      	mov	r0, r3
 80028a8:	f002 ff04 	bl	80056b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80028b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d103      	bne.n	80028be <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80028b6:	f002 fed5 	bl	8005664 <HAL_RCC_GetPCLK1Freq>
 80028ba:	6378      	str	r0, [r7, #52]	; 0x34
 80028bc:	e004      	b.n	80028c8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80028be:	f002 fed1 	bl	8005664 <HAL_RCC_GetPCLK1Freq>
 80028c2:	4603      	mov	r3, r0
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80028c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ca:	4a23      	ldr	r2, [pc, #140]	; (8002958 <HAL_InitTick+0xe4>)
 80028cc:	fba2 2303 	umull	r2, r3, r2, r3
 80028d0:	0c9b      	lsrs	r3, r3, #18
 80028d2:	3b01      	subs	r3, #1
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80028d6:	4b21      	ldr	r3, [pc, #132]	; (800295c <HAL_InitTick+0xe8>)
 80028d8:	4a21      	ldr	r2, [pc, #132]	; (8002960 <HAL_InitTick+0xec>)
 80028da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80028dc:	4b1f      	ldr	r3, [pc, #124]	; (800295c <HAL_InitTick+0xe8>)
 80028de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028e2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80028e4:	4a1d      	ldr	r2, [pc, #116]	; (800295c <HAL_InitTick+0xe8>)
 80028e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80028ea:	4b1c      	ldr	r3, [pc, #112]	; (800295c <HAL_InitTick+0xe8>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028f0:	4b1a      	ldr	r3, [pc, #104]	; (800295c <HAL_InitTick+0xe8>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028f6:	4b19      	ldr	r3, [pc, #100]	; (800295c <HAL_InitTick+0xe8>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80028fc:	4817      	ldr	r0, [pc, #92]	; (800295c <HAL_InitTick+0xe8>)
 80028fe:	f003 fb33 	bl	8005f68 <HAL_TIM_Base_Init>
 8002902:	4603      	mov	r3, r0
 8002904:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002908:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800290c:	2b00      	cmp	r3, #0
 800290e:	d11b      	bne.n	8002948 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002910:	4812      	ldr	r0, [pc, #72]	; (800295c <HAL_InitTick+0xe8>)
 8002912:	f003 fb81 	bl	8006018 <HAL_TIM_Base_Start_IT>
 8002916:	4603      	mov	r3, r0
 8002918:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800291c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002920:	2b00      	cmp	r3, #0
 8002922:	d111      	bne.n	8002948 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002924:	2036      	movs	r0, #54	; 0x36
 8002926:	f000 f9df 	bl	8002ce8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b0f      	cmp	r3, #15
 800292e:	d808      	bhi.n	8002942 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002930:	2200      	movs	r2, #0
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	2036      	movs	r0, #54	; 0x36
 8002936:	f000 f9bb 	bl	8002cb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800293a:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <HAL_InitTick+0xf0>)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	e002      	b.n	8002948 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002948:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800294c:	4618      	mov	r0, r3
 800294e:	3738      	adds	r7, #56	; 0x38
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40023800 	.word	0x40023800
 8002958:	431bde83 	.word	0x431bde83
 800295c:	20000fa0 	.word	0x20000fa0
 8002960:	40001000 	.word	0x40001000
 8002964:	20000004 	.word	0x20000004

08002968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800296c:	e7fe      	b.n	800296c <NMI_Handler+0x4>

0800296e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002972:	e7fe      	b.n	8002972 <HardFault_Handler+0x4>

08002974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002978:	e7fe      	b.n	8002978 <MemManage_Handler+0x4>

0800297a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800297e:	e7fe      	b.n	800297e <BusFault_Handler+0x4>

08002980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002984:	e7fe      	b.n	8002984 <UsageFault_Handler+0x4>

08002986 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002986:	b480      	push	{r7}
 8002988:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002998:	4802      	ldr	r0, [pc, #8]	; (80029a4 <TIM6_DAC_IRQHandler+0x10>)
 800299a:	f003 fd11 	bl	80063c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000fa0 	.word	0x20000fa0

080029a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80029ac:	4802      	ldr	r0, [pc, #8]	; (80029b8 <OTG_FS_IRQHandler+0x10>)
 80029ae:	f000 ffda 	bl	8003966 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20006eb4 	.word	0x20006eb4

080029bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029c4:	4a14      	ldr	r2, [pc, #80]	; (8002a18 <_sbrk+0x5c>)
 80029c6:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <_sbrk+0x60>)
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029d0:	4b13      	ldr	r3, [pc, #76]	; (8002a20 <_sbrk+0x64>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d102      	bne.n	80029de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029d8:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <_sbrk+0x64>)
 80029da:	4a12      	ldr	r2, [pc, #72]	; (8002a24 <_sbrk+0x68>)
 80029dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029de:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <_sbrk+0x64>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4413      	add	r3, r2
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d207      	bcs.n	80029fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029ec:	f00c fc8c 	bl	800f308 <__errno>
 80029f0:	4603      	mov	r3, r0
 80029f2:	220c      	movs	r2, #12
 80029f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029f6:	f04f 33ff 	mov.w	r3, #4294967295
 80029fa:	e009      	b.n	8002a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029fc:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <_sbrk+0x64>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a02:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <_sbrk+0x64>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	4a05      	ldr	r2, [pc, #20]	; (8002a20 <_sbrk+0x64>)
 8002a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20080000 	.word	0x20080000
 8002a1c:	00000400 	.word	0x00000400
 8002a20:	20000fec 	.word	0x20000fec
 8002a24:	20007508 	.word	0x20007508

08002a28 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a2c:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <SystemInit+0x20>)
 8002a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a32:	4a05      	ldr	r2, [pc, #20]	; (8002a48 <SystemInit+0x20>)
 8002a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a3c:	bf00      	nop
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a50:	480d      	ldr	r0, [pc, #52]	; (8002a88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a52:	490e      	ldr	r1, [pc, #56]	; (8002a8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a54:	4a0e      	ldr	r2, [pc, #56]	; (8002a90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a58:	e002      	b.n	8002a60 <LoopCopyDataInit>

08002a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a5e:	3304      	adds	r3, #4

08002a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a64:	d3f9      	bcc.n	8002a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a66:	4a0b      	ldr	r2, [pc, #44]	; (8002a94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a68:	4c0b      	ldr	r4, [pc, #44]	; (8002a98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a6c:	e001      	b.n	8002a72 <LoopFillZerobss>

08002a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a70:	3204      	adds	r2, #4

08002a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a74:	d3fb      	bcc.n	8002a6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a76:	f7ff ffd7 	bl	8002a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a7a:	f00c fc4b 	bl	800f314 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a7e:	f7ff f91d 	bl	8001cbc <main>
  bx  lr    
 8002a82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a84:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a8c:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8002a90:	080101b4 	.word	0x080101b4
  ldr r2, =_sbss
 8002a94:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 8002a98:	20007504 	.word	0x20007504

08002a9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a9c:	e7fe      	b.n	8002a9c <ADC_IRQHandler>

08002a9e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aa2:	2003      	movs	r0, #3
 8002aa4:	f000 f8f9 	bl	8002c9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aa8:	200f      	movs	r0, #15
 8002aaa:	f7ff fee3 	bl	8002874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aae:	f7ff fcd9 	bl	8002464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <HAL_IncTick+0x20>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_IncTick+0x24>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	4a04      	ldr	r2, [pc, #16]	; (8002adc <HAL_IncTick+0x24>)
 8002aca:	6013      	str	r3, [r2, #0]
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	20000008 	.word	0x20000008
 8002adc:	20000ff0 	.word	0x20000ff0

08002ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ae4:	4b03      	ldr	r3, [pc, #12]	; (8002af4 <HAL_GetTick+0x14>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	20000ff0 	.word	0x20000ff0

08002af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b00:	f7ff ffee 	bl	8002ae0 <HAL_GetTick>
 8002b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b10:	d005      	beq.n	8002b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b12:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <HAL_Delay+0x44>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b1e:	bf00      	nop
 8002b20:	f7ff ffde 	bl	8002ae0 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d8f7      	bhi.n	8002b20 <HAL_Delay+0x28>
  {
  }
}
 8002b30:	bf00      	nop
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000008 	.word	0x20000008

08002b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <__NVIC_SetPriorityGrouping+0x40>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b68:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <__NVIC_SetPriorityGrouping+0x44>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b6e:	4a04      	ldr	r2, [pc, #16]	; (8002b80 <__NVIC_SetPriorityGrouping+0x40>)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	60d3      	str	r3, [r2, #12]
}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	e000ed00 	.word	0xe000ed00
 8002b84:	05fa0000 	.word	0x05fa0000

08002b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b8c:	4b04      	ldr	r3, [pc, #16]	; (8002ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	0a1b      	lsrs	r3, r3, #8
 8002b92:	f003 0307 	and.w	r3, r3, #7
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	db0b      	blt.n	8002bce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	f003 021f 	and.w	r2, r3, #31
 8002bbc:	4907      	ldr	r1, [pc, #28]	; (8002bdc <__NVIC_EnableIRQ+0x38>)
 8002bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	e000e100 	.word	0xe000e100

08002be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	6039      	str	r1, [r7, #0]
 8002bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	db0a      	blt.n	8002c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	490c      	ldr	r1, [pc, #48]	; (8002c2c <__NVIC_SetPriority+0x4c>)
 8002bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfe:	0112      	lsls	r2, r2, #4
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	440b      	add	r3, r1
 8002c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c08:	e00a      	b.n	8002c20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	4908      	ldr	r1, [pc, #32]	; (8002c30 <__NVIC_SetPriority+0x50>)
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	3b04      	subs	r3, #4
 8002c18:	0112      	lsls	r2, r2, #4
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	761a      	strb	r2, [r3, #24]
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	e000e100 	.word	0xe000e100
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b089      	sub	sp, #36	; 0x24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f1c3 0307 	rsb	r3, r3, #7
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	bf28      	it	cs
 8002c52:	2304      	movcs	r3, #4
 8002c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	2b06      	cmp	r3, #6
 8002c5c:	d902      	bls.n	8002c64 <NVIC_EncodePriority+0x30>
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	3b03      	subs	r3, #3
 8002c62:	e000      	b.n	8002c66 <NVIC_EncodePriority+0x32>
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c68:	f04f 32ff 	mov.w	r2, #4294967295
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43da      	mvns	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	401a      	ands	r2, r3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	fa01 f303 	lsl.w	r3, r1, r3
 8002c86:	43d9      	mvns	r1, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c8c:	4313      	orrs	r3, r2
         );
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3724      	adds	r7, #36	; 0x24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff ff4c 	bl	8002b40 <__NVIC_SetPriorityGrouping>
}
 8002ca8:	bf00      	nop
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cc2:	f7ff ff61 	bl	8002b88 <__NVIC_GetPriorityGrouping>
 8002cc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	68b9      	ldr	r1, [r7, #8]
 8002ccc:	6978      	ldr	r0, [r7, #20]
 8002cce:	f7ff ffb1 	bl	8002c34 <NVIC_EncodePriority>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cd8:	4611      	mov	r1, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff ff80 	bl	8002be0 <__NVIC_SetPriority>
}
 8002ce0:	bf00      	nop
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff ff54 	bl	8002ba4 <__NVIC_EnableIRQ>
}
 8002cfc:	bf00      	nop
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e06a      	b.n	8002dec <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d106      	bne.n	8002d2e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2223      	movs	r2, #35	; 0x23
 8002d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7ff fbc3 	bl	80024b4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2e:	4b31      	ldr	r3, [pc, #196]	; (8002df4 <HAL_ETH_Init+0xf0>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	4a30      	ldr	r2, [pc, #192]	; (8002df4 <HAL_ETH_Init+0xf0>)
 8002d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d38:	6453      	str	r3, [r2, #68]	; 0x44
 8002d3a:	4b2e      	ldr	r3, [pc, #184]	; (8002df4 <HAL_ETH_Init+0xf0>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002d46:	4b2c      	ldr	r3, [pc, #176]	; (8002df8 <HAL_ETH_Init+0xf4>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4a2b      	ldr	r2, [pc, #172]	; (8002df8 <HAL_ETH_Init+0xf4>)
 8002d4c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d50:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002d52:	4b29      	ldr	r3, [pc, #164]	; (8002df8 <HAL_ETH_Init+0xf4>)
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	4927      	ldr	r1, [pc, #156]	; (8002df8 <HAL_ETH_Init+0xf4>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002d60:	4b25      	ldr	r3, [pc, #148]	; (8002df8 <HAL_ETH_Init+0xf4>)
 8002d62:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6812      	ldr	r2, [r2, #0]
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d7a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d7c:	f7ff feb0 	bl	8002ae0 <HAL_GetTick>
 8002d80:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002d82:	e011      	b.n	8002da8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002d84:	f7ff feac 	bl	8002ae0 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d92:	d909      	bls.n	8002da8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2204      	movs	r2, #4
 8002d98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	22e0      	movs	r2, #224	; 0xe0
 8002da0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e021      	b.n	8002dec <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1e4      	bne.n	8002d84 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f958 	bl	8003070 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f9ff 	bl	80031c4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 fa55 	bl	8003276 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f9bd 	bl	8003154 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2210      	movs	r2, #16
 8002de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40013800 	.word	0x40013800

08002dfc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4b51      	ldr	r3, [pc, #324]	; (8002f58 <ETH_SetMACConfig+0x15c>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	7c1b      	ldrb	r3, [r3, #16]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d102      	bne.n	8002e24 <ETH_SetMACConfig+0x28>
 8002e1e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002e22:	e000      	b.n	8002e26 <ETH_SetMACConfig+0x2a>
 8002e24:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	7c5b      	ldrb	r3, [r3, #17]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d102      	bne.n	8002e34 <ETH_SetMACConfig+0x38>
 8002e2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e32:	e000      	b.n	8002e36 <ETH_SetMACConfig+0x3a>
 8002e34:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e36:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e3c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	7fdb      	ldrb	r3, [r3, #31]
 8002e42:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002e44:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e4a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	7f92      	ldrb	r2, [r2, #30]
 8002e50:	2a00      	cmp	r2, #0
 8002e52:	d102      	bne.n	8002e5a <ETH_SetMACConfig+0x5e>
 8002e54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e58:	e000      	b.n	8002e5c <ETH_SetMACConfig+0x60>
 8002e5a:	2200      	movs	r2, #0
                        macconf->Speed |
 8002e5c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	7f1b      	ldrb	r3, [r3, #28]
 8002e62:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002e64:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002e6a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	791b      	ldrb	r3, [r3, #4]
 8002e70:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002e72:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002e7a:	2a00      	cmp	r2, #0
 8002e7c:	d102      	bne.n	8002e84 <ETH_SetMACConfig+0x88>
 8002e7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e82:	e000      	b.n	8002e86 <ETH_SetMACConfig+0x8a>
 8002e84:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002e86:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	7bdb      	ldrb	r3, [r3, #15]
 8002e8c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002e8e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002e94:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e9c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002eb6:	2001      	movs	r0, #1
 8002eb8:	f7ff fe1e 	bl	8002af8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eda:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002ee2:	2a00      	cmp	r2, #0
 8002ee4:	d101      	bne.n	8002eea <ETH_SetMACConfig+0xee>
 8002ee6:	2280      	movs	r2, #128	; 0x80
 8002ee8:	e000      	b.n	8002eec <ETH_SetMACConfig+0xf0>
 8002eea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002eec:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ef2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002efa:	2a01      	cmp	r2, #1
 8002efc:	d101      	bne.n	8002f02 <ETH_SetMACConfig+0x106>
 8002efe:	2208      	movs	r2, #8
 8002f00:	e000      	b.n	8002f04 <ETH_SetMACConfig+0x108>
 8002f02:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002f04:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002f0c:	2a01      	cmp	r2, #1
 8002f0e:	d101      	bne.n	8002f14 <ETH_SetMACConfig+0x118>
 8002f10:	2204      	movs	r2, #4
 8002f12:	e000      	b.n	8002f16 <ETH_SetMACConfig+0x11a>
 8002f14:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f16:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002f1e:	2a01      	cmp	r2, #1
 8002f20:	d101      	bne.n	8002f26 <ETH_SetMACConfig+0x12a>
 8002f22:	2202      	movs	r2, #2
 8002f24:	e000      	b.n	8002f28 <ETH_SetMACConfig+0x12c>
 8002f26:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f40:	2001      	movs	r0, #1
 8002f42:	f7ff fdd9 	bl	8002af8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	619a      	str	r2, [r3, #24]
}
 8002f4e:	bf00      	nop
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	ff20810f 	.word	0xff20810f

08002f5c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	4b3d      	ldr	r3, [pc, #244]	; (800306c <ETH_SetDMAConfig+0x110>)
 8002f76:	4013      	ands	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	7b1b      	ldrb	r3, [r3, #12]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d102      	bne.n	8002f88 <ETH_SetDMAConfig+0x2c>
 8002f82:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002f86:	e000      	b.n	8002f8a <ETH_SetDMAConfig+0x2e>
 8002f88:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	7b5b      	ldrb	r3, [r3, #13]
 8002f8e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f90:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	7f52      	ldrb	r2, [r2, #29]
 8002f96:	2a00      	cmp	r2, #0
 8002f98:	d102      	bne.n	8002fa0 <ETH_SetDMAConfig+0x44>
 8002f9a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f9e:	e000      	b.n	8002fa2 <ETH_SetDMAConfig+0x46>
 8002fa0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002fa2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	7b9b      	ldrb	r3, [r3, #14]
 8002fa8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002faa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002fb0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	7f1b      	ldrb	r3, [r3, #28]
 8002fb6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002fb8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	7f9b      	ldrb	r3, [r3, #30]
 8002fbe:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002fc0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002fc6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fce:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ff2:	2001      	movs	r0, #1
 8002ff4:	f7ff fd80 	bl	8002af8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003000:	461a      	mov	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	791b      	ldrb	r3, [r3, #4]
 800300a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003010:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003016:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800301c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003024:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003026:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800302e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003034:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6812      	ldr	r2, [r2, #0]
 800303a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800303e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003042:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003050:	2001      	movs	r0, #1
 8003052:	f7ff fd51 	bl	8002af8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800305e:	461a      	mov	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6013      	str	r3, [r2, #0]
}
 8003064:	bf00      	nop
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	f8de3f23 	.word	0xf8de3f23

08003070 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b0a6      	sub	sp, #152	; 0x98
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003078:	2301      	movs	r3, #1
 800307a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800307e:	2301      	movs	r3, #1
 8003080:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003084:	2300      	movs	r3, #0
 8003086:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003088:	2300      	movs	r3, #0
 800308a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800308e:	2301      	movs	r3, #1
 8003090:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003094:	2300      	movs	r3, #0
 8003096:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800309a:	2301      	movs	r3, #1
 800309c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80030a6:	2300      	movs	r3, #0
 80030a8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80030ac:	2300      	movs	r3, #0
 80030ae:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80030ba:	2300      	movs	r3, #0
 80030bc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80030c0:	2300      	movs	r3, #0
 80030c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80030c6:	2300      	movs	r3, #0
 80030c8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80030cc:	2300      	movs	r3, #0
 80030ce:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80030d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030d6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80030d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80030de:	2300      	movs	r3, #0
 80030e0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80030e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030e8:	4619      	mov	r1, r3
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7ff fe86 	bl	8002dfc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80030f0:	2301      	movs	r3, #1
 80030f2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80030f4:	2301      	movs	r3, #1
 80030f6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80030f8:	2301      	movs	r3, #1
 80030fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80030fe:	2301      	movs	r3, #1
 8003100:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003106:	2300      	movs	r3, #0
 8003108:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800310c:	2300      	movs	r3, #0
 800310e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003112:	2300      	movs	r3, #0
 8003114:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003116:	2301      	movs	r3, #1
 8003118:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800311c:	2301      	movs	r3, #1
 800311e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003120:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003124:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003126:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800312a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800312c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003130:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003132:	2301      	movs	r3, #1
 8003134:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003138:	2300      	movs	r3, #0
 800313a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800313c:	2300      	movs	r3, #0
 800313e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003140:	f107 0308 	add.w	r3, r7, #8
 8003144:	4619      	mov	r1, r3
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7ff ff08 	bl	8002f5c <ETH_SetDMAConfig>
}
 800314c:	bf00      	nop
 800314e:	3798      	adds	r7, #152	; 0x98
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3305      	adds	r3, #5
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	021b      	lsls	r3, r3, #8
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	3204      	adds	r2, #4
 800316c:	7812      	ldrb	r2, [r2, #0]
 800316e:	4313      	orrs	r3, r2
 8003170:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	4b11      	ldr	r3, [pc, #68]	; (80031bc <ETH_MACAddressConfig+0x68>)
 8003176:	4413      	add	r3, r2
 8003178:	461a      	mov	r2, r3
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3303      	adds	r3, #3
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	061a      	lsls	r2, r3, #24
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3302      	adds	r3, #2
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	041b      	lsls	r3, r3, #16
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3301      	adds	r3, #1
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	021b      	lsls	r3, r3, #8
 8003198:	4313      	orrs	r3, r2
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	7812      	ldrb	r2, [r2, #0]
 800319e:	4313      	orrs	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <ETH_MACAddressConfig+0x6c>)
 80031a6:	4413      	add	r3, r2
 80031a8:	461a      	mov	r2, r3
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	6013      	str	r3, [r2, #0]
}
 80031ae:	bf00      	nop
 80031b0:	371c      	adds	r7, #28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40028040 	.word	0x40028040
 80031c0:	40028044 	.word	0x40028044

080031c4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80031cc:	2300      	movs	r3, #0
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	e03e      	b.n	8003250 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68d9      	ldr	r1, [r3, #12]
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	4613      	mov	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	440b      	add	r3, r1
 80031e2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2200      	movs	r2, #0
 80031ee:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2200      	movs	r2, #0
 80031f4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2200      	movs	r2, #0
 80031fa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80031fc:	68b9      	ldr	r1, [r7, #8]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	3206      	adds	r2, #6
 8003204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d80c      	bhi.n	8003234 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68d9      	ldr	r1, [r3, #12]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	440b      	add	r3, r1
 800322c:	461a      	mov	r2, r3
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	60da      	str	r2, [r3, #12]
 8003232:	e004      	b.n	800323e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	461a      	mov	r2, r3
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	3301      	adds	r3, #1
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b03      	cmp	r3, #3
 8003254:	d9bd      	bls.n	80031d2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68da      	ldr	r2, [r3, #12]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003268:	611a      	str	r2, [r3, #16]
}
 800326a:	bf00      	nop
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003276:	b480      	push	{r7}
 8003278:	b085      	sub	sp, #20
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	e046      	b.n	8003312 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6919      	ldr	r1, [r3, #16]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	440b      	add	r3, r1
 8003294:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2200      	movs	r2, #0
 80032a0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2200      	movs	r2, #0
 80032a6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2200      	movs	r2, #0
 80032ac:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2200      	movs	r2, #0
 80032b2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2200      	movs	r2, #0
 80032b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80032c0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80032c8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80032d6:	68b9      	ldr	r1, [r7, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	3212      	adds	r2, #18
 80032de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d80c      	bhi.n	8003302 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6919      	ldr	r1, [r3, #16]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	440b      	add	r3, r1
 80032fa:	461a      	mov	r2, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	60da      	str	r2, [r3, #12]
 8003300:	e004      	b.n	800330c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	461a      	mov	r2, r3
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	3301      	adds	r3, #1
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2b03      	cmp	r3, #3
 8003316:	d9b5      	bls.n	8003284 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691a      	ldr	r2, [r3, #16]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003342:	60da      	str	r2, [r3, #12]
}
 8003344:	bf00      	nop
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003350:	b480      	push	{r7}
 8003352:	b089      	sub	sp, #36	; 0x24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003362:	2300      	movs	r3, #0
 8003364:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003366:	2300      	movs	r3, #0
 8003368:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
 800336e:	e175      	b.n	800365c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003370:	2201      	movs	r2, #1
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	4013      	ands	r3, r2
 8003382:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	429a      	cmp	r2, r3
 800338a:	f040 8164 	bne.w	8003656 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	2b01      	cmp	r3, #1
 8003398:	d005      	beq.n	80033a6 <HAL_GPIO_Init+0x56>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d130      	bne.n	8003408 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	2203      	movs	r2, #3
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4013      	ands	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033dc:	2201      	movs	r2, #1
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	43db      	mvns	r3, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4013      	ands	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	091b      	lsrs	r3, r3, #4
 80033f2:	f003 0201 	and.w	r2, r3, #1
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4313      	orrs	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f003 0303 	and.w	r3, r3, #3
 8003410:	2b03      	cmp	r3, #3
 8003412:	d017      	beq.n	8003444 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	2203      	movs	r2, #3
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4013      	ands	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d123      	bne.n	8003498 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	08da      	lsrs	r2, r3, #3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3208      	adds	r2, #8
 8003458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800345c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	220f      	movs	r2, #15
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	43db      	mvns	r3, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4013      	ands	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4313      	orrs	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	08da      	lsrs	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3208      	adds	r2, #8
 8003492:	69b9      	ldr	r1, [r7, #24]
 8003494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	2203      	movs	r2, #3
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 0203 	and.w	r2, r3, #3
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80be 	beq.w	8003656 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034da:	4b66      	ldr	r3, [pc, #408]	; (8003674 <HAL_GPIO_Init+0x324>)
 80034dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034de:	4a65      	ldr	r2, [pc, #404]	; (8003674 <HAL_GPIO_Init+0x324>)
 80034e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034e4:	6453      	str	r3, [r2, #68]	; 0x44
 80034e6:	4b63      	ldr	r3, [pc, #396]	; (8003674 <HAL_GPIO_Init+0x324>)
 80034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80034f2:	4a61      	ldr	r2, [pc, #388]	; (8003678 <HAL_GPIO_Init+0x328>)
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	089b      	lsrs	r3, r3, #2
 80034f8:	3302      	adds	r3, #2
 80034fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	220f      	movs	r2, #15
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43db      	mvns	r3, r3
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	4013      	ands	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a58      	ldr	r2, [pc, #352]	; (800367c <HAL_GPIO_Init+0x32c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d037      	beq.n	800358e <HAL_GPIO_Init+0x23e>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a57      	ldr	r2, [pc, #348]	; (8003680 <HAL_GPIO_Init+0x330>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d031      	beq.n	800358a <HAL_GPIO_Init+0x23a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a56      	ldr	r2, [pc, #344]	; (8003684 <HAL_GPIO_Init+0x334>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d02b      	beq.n	8003586 <HAL_GPIO_Init+0x236>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a55      	ldr	r2, [pc, #340]	; (8003688 <HAL_GPIO_Init+0x338>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d025      	beq.n	8003582 <HAL_GPIO_Init+0x232>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a54      	ldr	r2, [pc, #336]	; (800368c <HAL_GPIO_Init+0x33c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d01f      	beq.n	800357e <HAL_GPIO_Init+0x22e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a53      	ldr	r2, [pc, #332]	; (8003690 <HAL_GPIO_Init+0x340>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d019      	beq.n	800357a <HAL_GPIO_Init+0x22a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a52      	ldr	r2, [pc, #328]	; (8003694 <HAL_GPIO_Init+0x344>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d013      	beq.n	8003576 <HAL_GPIO_Init+0x226>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a51      	ldr	r2, [pc, #324]	; (8003698 <HAL_GPIO_Init+0x348>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00d      	beq.n	8003572 <HAL_GPIO_Init+0x222>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a50      	ldr	r2, [pc, #320]	; (800369c <HAL_GPIO_Init+0x34c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d007      	beq.n	800356e <HAL_GPIO_Init+0x21e>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a4f      	ldr	r2, [pc, #316]	; (80036a0 <HAL_GPIO_Init+0x350>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d101      	bne.n	800356a <HAL_GPIO_Init+0x21a>
 8003566:	2309      	movs	r3, #9
 8003568:	e012      	b.n	8003590 <HAL_GPIO_Init+0x240>
 800356a:	230a      	movs	r3, #10
 800356c:	e010      	b.n	8003590 <HAL_GPIO_Init+0x240>
 800356e:	2308      	movs	r3, #8
 8003570:	e00e      	b.n	8003590 <HAL_GPIO_Init+0x240>
 8003572:	2307      	movs	r3, #7
 8003574:	e00c      	b.n	8003590 <HAL_GPIO_Init+0x240>
 8003576:	2306      	movs	r3, #6
 8003578:	e00a      	b.n	8003590 <HAL_GPIO_Init+0x240>
 800357a:	2305      	movs	r3, #5
 800357c:	e008      	b.n	8003590 <HAL_GPIO_Init+0x240>
 800357e:	2304      	movs	r3, #4
 8003580:	e006      	b.n	8003590 <HAL_GPIO_Init+0x240>
 8003582:	2303      	movs	r3, #3
 8003584:	e004      	b.n	8003590 <HAL_GPIO_Init+0x240>
 8003586:	2302      	movs	r3, #2
 8003588:	e002      	b.n	8003590 <HAL_GPIO_Init+0x240>
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <HAL_GPIO_Init+0x240>
 800358e:	2300      	movs	r3, #0
 8003590:	69fa      	ldr	r2, [r7, #28]
 8003592:	f002 0203 	and.w	r2, r2, #3
 8003596:	0092      	lsls	r2, r2, #2
 8003598:	4093      	lsls	r3, r2
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4313      	orrs	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80035a0:	4935      	ldr	r1, [pc, #212]	; (8003678 <HAL_GPIO_Init+0x328>)
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	089b      	lsrs	r3, r3, #2
 80035a6:	3302      	adds	r3, #2
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035ae:	4b3d      	ldr	r3, [pc, #244]	; (80036a4 <HAL_GPIO_Init+0x354>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	43db      	mvns	r3, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4013      	ands	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035d2:	4a34      	ldr	r2, [pc, #208]	; (80036a4 <HAL_GPIO_Init+0x354>)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035d8:	4b32      	ldr	r3, [pc, #200]	; (80036a4 <HAL_GPIO_Init+0x354>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	43db      	mvns	r3, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4013      	ands	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035fc:	4a29      	ldr	r2, [pc, #164]	; (80036a4 <HAL_GPIO_Init+0x354>)
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003602:	4b28      	ldr	r3, [pc, #160]	; (80036a4 <HAL_GPIO_Init+0x354>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	43db      	mvns	r3, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4013      	ands	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003626:	4a1f      	ldr	r2, [pc, #124]	; (80036a4 <HAL_GPIO_Init+0x354>)
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800362c:	4b1d      	ldr	r3, [pc, #116]	; (80036a4 <HAL_GPIO_Init+0x354>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	43db      	mvns	r3, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4013      	ands	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003650:	4a14      	ldr	r2, [pc, #80]	; (80036a4 <HAL_GPIO_Init+0x354>)
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	3301      	adds	r3, #1
 800365a:	61fb      	str	r3, [r7, #28]
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	2b0f      	cmp	r3, #15
 8003660:	f67f ae86 	bls.w	8003370 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003664:	bf00      	nop
 8003666:	bf00      	nop
 8003668:	3724      	adds	r7, #36	; 0x24
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40023800 	.word	0x40023800
 8003678:	40013800 	.word	0x40013800
 800367c:	40020000 	.word	0x40020000
 8003680:	40020400 	.word	0x40020400
 8003684:	40020800 	.word	0x40020800
 8003688:	40020c00 	.word	0x40020c00
 800368c:	40021000 	.word	0x40021000
 8003690:	40021400 	.word	0x40021400
 8003694:	40021800 	.word	0x40021800
 8003698:	40021c00 	.word	0x40021c00
 800369c:	40022000 	.word	0x40022000
 80036a0:	40022400 	.word	0x40022400
 80036a4:	40013c00 	.word	0x40013c00

080036a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	807b      	strh	r3, [r7, #2]
 80036b4:	4613      	mov	r3, r2
 80036b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036b8:	787b      	ldrb	r3, [r7, #1]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036be:	887a      	ldrh	r2, [r7, #2]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80036c4:	e003      	b.n	80036ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80036c6:	887b      	ldrh	r3, [r7, #2]
 80036c8:	041a      	lsls	r2, r3, #16
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	619a      	str	r2, [r3, #24]
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036dc:	b08f      	sub	sp, #60	; 0x3c
 80036de:	af0a      	add	r7, sp, #40	; 0x28
 80036e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e116      	b.n	800391a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d106      	bne.n	800370c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f00b f8ba 	bl	800e880 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2203      	movs	r2, #3
 8003710:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371c:	2b00      	cmp	r3, #0
 800371e:	d102      	bne.n	8003726 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f004 fb4b 	bl	8007dc6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	603b      	str	r3, [r7, #0]
 8003736:	687e      	ldr	r6, [r7, #4]
 8003738:	466d      	mov	r5, sp
 800373a:	f106 0410 	add.w	r4, r6, #16
 800373e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003740:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003744:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003746:	e894 0003 	ldmia.w	r4, {r0, r1}
 800374a:	e885 0003 	stmia.w	r5, {r0, r1}
 800374e:	1d33      	adds	r3, r6, #4
 8003750:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003752:	6838      	ldr	r0, [r7, #0]
 8003754:	f004 fa2c 	bl	8007bb0 <USB_CoreInit>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d005      	beq.n	800376a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2202      	movs	r2, #2
 8003762:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e0d7      	b.n	800391a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2100      	movs	r1, #0
 8003770:	4618      	mov	r0, r3
 8003772:	f004 fb39 	bl	8007de8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003776:	2300      	movs	r3, #0
 8003778:	73fb      	strb	r3, [r7, #15]
 800377a:	e04a      	b.n	8003812 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800377c:	7bfa      	ldrb	r2, [r7, #15]
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	4613      	mov	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	333d      	adds	r3, #61	; 0x3d
 800378c:	2201      	movs	r2, #1
 800378e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003790:	7bfa      	ldrb	r2, [r7, #15]
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	4613      	mov	r3, r2
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	333c      	adds	r3, #60	; 0x3c
 80037a0:	7bfa      	ldrb	r2, [r7, #15]
 80037a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037a4:	7bfa      	ldrb	r2, [r7, #15]
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	b298      	uxth	r0, r3
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	4413      	add	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	3344      	adds	r3, #68	; 0x44
 80037b8:	4602      	mov	r2, r0
 80037ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037bc:	7bfa      	ldrb	r2, [r7, #15]
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	4613      	mov	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	3340      	adds	r3, #64	; 0x40
 80037cc:	2200      	movs	r2, #0
 80037ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037d0:	7bfa      	ldrb	r2, [r7, #15]
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	4613      	mov	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	4413      	add	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	3348      	adds	r3, #72	; 0x48
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037e4:	7bfa      	ldrb	r2, [r7, #15]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	4413      	add	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	334c      	adds	r3, #76	; 0x4c
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037f8:	7bfa      	ldrb	r2, [r7, #15]
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	4613      	mov	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	4413      	add	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	3354      	adds	r3, #84	; 0x54
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	3301      	adds	r3, #1
 8003810:	73fb      	strb	r3, [r7, #15]
 8003812:	7bfa      	ldrb	r2, [r7, #15]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	429a      	cmp	r2, r3
 800381a:	d3af      	bcc.n	800377c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800381c:	2300      	movs	r3, #0
 800381e:	73fb      	strb	r3, [r7, #15]
 8003820:	e044      	b.n	80038ac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003822:	7bfa      	ldrb	r2, [r7, #15]
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	4413      	add	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003834:	2200      	movs	r2, #0
 8003836:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003838:	7bfa      	ldrb	r2, [r7, #15]
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	4613      	mov	r3, r2
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	4413      	add	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	440b      	add	r3, r1
 8003846:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800384a:	7bfa      	ldrb	r2, [r7, #15]
 800384c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800384e:	7bfa      	ldrb	r2, [r7, #15]
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	4413      	add	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003860:	2200      	movs	r2, #0
 8003862:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003864:	7bfa      	ldrb	r2, [r7, #15]
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	4613      	mov	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800387a:	7bfa      	ldrb	r2, [r7, #15]
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	4613      	mov	r3, r2
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	4413      	add	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	440b      	add	r3, r1
 8003888:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003890:	7bfa      	ldrb	r2, [r7, #15]
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	4613      	mov	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4413      	add	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	3301      	adds	r3, #1
 80038aa:	73fb      	strb	r3, [r7, #15]
 80038ac:	7bfa      	ldrb	r2, [r7, #15]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d3b5      	bcc.n	8003822 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	603b      	str	r3, [r7, #0]
 80038bc:	687e      	ldr	r6, [r7, #4]
 80038be:	466d      	mov	r5, sp
 80038c0:	f106 0410 	add.w	r4, r6, #16
 80038c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80038d4:	1d33      	adds	r3, r6, #4
 80038d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038d8:	6838      	ldr	r0, [r7, #0]
 80038da:	f004 fad1 	bl	8007e80 <USB_DevInit>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e014      	b.n	800391a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	2b01      	cmp	r3, #1
 8003906:	d102      	bne.n	800390e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f001 f97b 	bl	8004c04 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f005 fc1f 	bl	8009156 <USB_DevDisconnect>

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003922 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_PCD_Start+0x16>
 8003934:	2302      	movs	r3, #2
 8003936:	e012      	b.n	800395e <HAL_PCD_Start+0x3c>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f004 fa2d 	bl	8007da4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f005 fbe0 	bl	8009114 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003966:	b590      	push	{r4, r7, lr}
 8003968:	b08d      	sub	sp, #52	; 0x34
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f005 fc9e 	bl	80092be <USB_GetMode>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	f040 84b7 	bne.w	80042f8 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f005 fc02 	bl	8009198 <USB_ReadInterrupts>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 84ad 	beq.w	80042f6 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	0a1b      	lsrs	r3, r3, #8
 80039a6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f005 fbef 	bl	8009198 <USB_ReadInterrupts>
 80039ba:	4603      	mov	r3, r0
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d107      	bne.n	80039d4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695a      	ldr	r2, [r3, #20]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f002 0202 	and.w	r2, r2, #2
 80039d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f005 fbdd 	bl	8009198 <USB_ReadInterrupts>
 80039de:	4603      	mov	r3, r0
 80039e0:	f003 0310 	and.w	r3, r3, #16
 80039e4:	2b10      	cmp	r3, #16
 80039e6:	d161      	bne.n	8003aac <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699a      	ldr	r2, [r3, #24]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0210 	bic.w	r2, r2, #16
 80039f6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	f003 020f 	and.w	r2, r3, #15
 8003a04:	4613      	mov	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	4413      	add	r3, r2
 8003a14:	3304      	adds	r3, #4
 8003a16:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	0c5b      	lsrs	r3, r3, #17
 8003a1c:	f003 030f 	and.w	r3, r3, #15
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d124      	bne.n	8003a6e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d035      	beq.n	8003a9c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	091b      	lsrs	r3, r3, #4
 8003a38:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	461a      	mov	r2, r3
 8003a42:	6a38      	ldr	r0, [r7, #32]
 8003a44:	f005 fa14 	bl	8008e70 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	691a      	ldr	r2, [r3, #16]
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	091b      	lsrs	r3, r3, #4
 8003a50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a54:	441a      	add	r2, r3
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	6a1a      	ldr	r2, [r3, #32]
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	091b      	lsrs	r3, r3, #4
 8003a62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a66:	441a      	add	r2, r3
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	621a      	str	r2, [r3, #32]
 8003a6c:	e016      	b.n	8003a9c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	0c5b      	lsrs	r3, r3, #17
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	2b06      	cmp	r3, #6
 8003a78:	d110      	bne.n	8003a9c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a80:	2208      	movs	r2, #8
 8003a82:	4619      	mov	r1, r3
 8003a84:	6a38      	ldr	r0, [r7, #32]
 8003a86:	f005 f9f3 	bl	8008e70 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	6a1a      	ldr	r2, [r3, #32]
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	091b      	lsrs	r3, r3, #4
 8003a92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a96:	441a      	add	r2, r3
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699a      	ldr	r2, [r3, #24]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0210 	orr.w	r2, r2, #16
 8003aaa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f005 fb71 	bl	8009198 <USB_ReadInterrupts>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003abc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ac0:	f040 80a7 	bne.w	8003c12 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f005 fb76 	bl	80091be <USB_ReadDevAllOutEpInterrupt>
 8003ad2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003ad4:	e099      	b.n	8003c0a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 808e 	beq.w	8003bfe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	4611      	mov	r1, r2
 8003aec:	4618      	mov	r0, r3
 8003aee:	f005 fb9a 	bl	8009226 <USB_ReadDevOutEPInterrupt>
 8003af2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00c      	beq.n	8003b18 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003b10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fef0 	bl	80048f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00c      	beq.n	8003b3c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	015a      	lsls	r2, r3, #5
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b2e:	461a      	mov	r2, r3
 8003b30:	2308      	movs	r3, #8
 8003b32:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003b34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 ffc6 	bl	8004ac8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f003 0310 	and.w	r3, r3, #16
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d008      	beq.n	8003b58 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b52:	461a      	mov	r2, r3
 8003b54:	2310      	movs	r3, #16
 8003b56:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d030      	beq.n	8003bc4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6a:	2b80      	cmp	r3, #128	; 0x80
 8003b6c:	d109      	bne.n	8003b82 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	69fa      	ldr	r2, [r7, #28]
 8003b78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b80:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b84:	4613      	mov	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	4413      	add	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	4413      	add	r3, r2
 8003b94:	3304      	adds	r3, #4
 8003b96:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	78db      	ldrb	r3, [r3, #3]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d108      	bne.n	8003bb2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	4619      	mov	r1, r3
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f00a ff9b 	bl	800eae8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	f003 0320 	and.w	r3, r3, #32
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d008      	beq.n	8003be0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bda:	461a      	mov	r2, r3
 8003bdc:	2320      	movs	r3, #32
 8003bde:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d009      	beq.n	8003bfe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bfc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	3301      	adds	r3, #1
 8003c02:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c06:	085b      	lsrs	r3, r3, #1
 8003c08:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f47f af62 	bne.w	8003ad6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f005 fabe 	bl	8009198 <USB_ReadInterrupts>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c26:	f040 80db 	bne.w	8003de0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f005 fadf 	bl	80091f2 <USB_ReadDevAllInEpInterrupt>
 8003c34:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003c3a:	e0cd      	b.n	8003dd8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 80c2 	beq.w	8003dcc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	4611      	mov	r1, r2
 8003c52:	4618      	mov	r0, r3
 8003c54:	f005 fb05 	bl	8009262 <USB_ReadDevInEPInterrupt>
 8003c58:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d057      	beq.n	8003d14 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	69f9      	ldr	r1, [r7, #28]
 8003c80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c84:	4013      	ands	r3, r2
 8003c86:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c94:	461a      	mov	r2, r3
 8003c96:	2301      	movs	r3, #1
 8003c98:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d132      	bne.n	8003d08 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	4413      	add	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	440b      	add	r3, r1
 8003cb0:	334c      	adds	r3, #76	; 0x4c
 8003cb2:	6819      	ldr	r1, [r3, #0]
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb8:	4613      	mov	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4403      	add	r3, r0
 8003cc2:	3348      	adds	r3, #72	; 0x48
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4419      	add	r1, r3
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ccc:	4613      	mov	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4403      	add	r3, r0
 8003cd6:	334c      	adds	r3, #76	; 0x4c
 8003cd8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d113      	bne.n	8003d08 <HAL_PCD_IRQHandler+0x3a2>
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	4413      	add	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	3354      	adds	r3, #84	; 0x54
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d108      	bne.n	8003d08 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d00:	461a      	mov	r2, r3
 8003d02:	2101      	movs	r1, #1
 8003d04:	f005 fb0e 	bl	8009324 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f00a fe65 	bl	800e9de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d008      	beq.n	8003d30 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	2308      	movs	r3, #8
 8003d2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f003 0310 	and.w	r3, r3, #16
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d008      	beq.n	8003d4c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d46:	461a      	mov	r2, r3
 8003d48:	2310      	movs	r3, #16
 8003d4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d008      	beq.n	8003d68 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d62:	461a      	mov	r2, r3
 8003d64:	2340      	movs	r3, #64	; 0x40
 8003d66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d023      	beq.n	8003dba <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003d72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d74:	6a38      	ldr	r0, [r7, #32]
 8003d76:	f004 f9e1 	bl	800813c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	3338      	adds	r3, #56	; 0x38
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	4413      	add	r3, r2
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	78db      	ldrb	r3, [r3, #3]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d108      	bne.n	8003da8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	4619      	mov	r1, r3
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f00a feb2 	bl	800eb0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db4:	461a      	mov	r2, r3
 8003db6:	2302      	movs	r3, #2
 8003db8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003dc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fd08 	bl	80047dc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	3301      	adds	r3, #1
 8003dd0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd4:	085b      	lsrs	r3, r3, #1
 8003dd6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f47f af2e 	bne.w	8003c3c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f005 f9d7 	bl	8009198 <USB_ReadInterrupts>
 8003dea:	4603      	mov	r3, r0
 8003dec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003df0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003df4:	d122      	bne.n	8003e3c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	69fa      	ldr	r2, [r7, #28]
 8003e00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e04:	f023 0301 	bic.w	r3, r3, #1
 8003e08:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d108      	bne.n	8003e26 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f00b f82c 	bl	800ee7c <HAL_PCDEx_LPM_Callback>
 8003e24:	e002      	b.n	8003e2c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f00a fe50 	bl	800eacc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695a      	ldr	r2, [r3, #20]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003e3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f005 f9a9 	bl	8009198 <USB_ReadInterrupts>
 8003e46:	4603      	mov	r3, r0
 8003e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e50:	d112      	bne.n	8003e78 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d102      	bne.n	8003e68 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f00a fe0c 	bl	800ea80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695a      	ldr	r2, [r3, #20]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003e76:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f005 f98b 	bl	8009198 <USB_ReadInterrupts>
 8003e82:	4603      	mov	r3, r0
 8003e84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e8c:	d121      	bne.n	8003ed2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695a      	ldr	r2, [r3, #20]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003e9c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d111      	bne.n	8003ecc <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb6:	089b      	lsrs	r3, r3, #2
 8003eb8:	f003 020f 	and.w	r2, r3, #15
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f00a ffd9 	bl	800ee7c <HAL_PCDEx_LPM_Callback>
 8003eca:	e002      	b.n	8003ed2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f00a fdd7 	bl	800ea80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f005 f95e 	bl	8009198 <USB_ReadInterrupts>
 8003edc:	4603      	mov	r3, r0
 8003ede:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee6:	f040 80b7 	bne.w	8004058 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	69fa      	ldr	r2, [r7, #28]
 8003ef4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ef8:	f023 0301 	bic.w	r3, r3, #1
 8003efc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2110      	movs	r1, #16
 8003f04:	4618      	mov	r0, r3
 8003f06:	f004 f919 	bl	800813c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f0e:	e046      	b.n	8003f9e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f22:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f34:	0151      	lsls	r1, r2, #5
 8003f36:	69fa      	ldr	r2, [r7, #28]
 8003f38:	440a      	add	r2, r1
 8003f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f42:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f50:	461a      	mov	r2, r3
 8003f52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f56:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f68:	0151      	lsls	r1, r2, #5
 8003f6a:	69fa      	ldr	r2, [r7, #28]
 8003f6c:	440a      	add	r2, r1
 8003f6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f76:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7a:	015a      	lsls	r2, r3, #5
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f88:	0151      	lsls	r1, r2, #5
 8003f8a:	69fa      	ldr	r2, [r7, #28]
 8003f8c:	440a      	add	r2, r1
 8003f8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f96:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d3b3      	bcc.n	8003f10 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	69fa      	ldr	r2, [r7, #28]
 8003fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fb6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003fba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d016      	beq.n	8003ff2 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fce:	69fa      	ldr	r2, [r7, #28]
 8003fd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fd4:	f043 030b 	orr.w	r3, r3, #11
 8003fd8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe4:	69fa      	ldr	r2, [r7, #28]
 8003fe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fea:	f043 030b 	orr.w	r3, r3, #11
 8003fee:	6453      	str	r3, [r2, #68]	; 0x44
 8003ff0:	e015      	b.n	800401e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff8:	695a      	ldr	r2, [r3, #20]
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004000:	4619      	mov	r1, r3
 8004002:	f242 032b 	movw	r3, #8235	; 0x202b
 8004006:	4313      	orrs	r3, r2
 8004008:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	69fa      	ldr	r2, [r7, #28]
 8004014:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004018:	f043 030b 	orr.w	r3, r3, #11
 800401c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69fa      	ldr	r2, [r7, #28]
 8004028:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800402c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004030:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6818      	ldr	r0, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004042:	461a      	mov	r2, r3
 8004044:	f005 f96e 	bl	8009324 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695a      	ldr	r2, [r3, #20]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004056:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	f005 f89b 	bl	8009198 <USB_ReadInterrupts>
 8004062:	4603      	mov	r3, r0
 8004064:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800406c:	d124      	bne.n	80040b8 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f005 f932 	bl	80092dc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4618      	mov	r0, r3
 800407e:	f004 f8da 	bl	8008236 <USB_GetDevSpeed>
 8004082:	4603      	mov	r3, r0
 8004084:	461a      	mov	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681c      	ldr	r4, [r3, #0]
 800408e:	f001 fadd 	bl	800564c <HAL_RCC_GetHCLKFreq>
 8004092:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004098:	b2db      	uxtb	r3, r3
 800409a:	461a      	mov	r2, r3
 800409c:	4620      	mov	r0, r4
 800409e:	f003 fddf 	bl	8007c60 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f00a fcc3 	bl	800ea2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695a      	ldr	r2, [r3, #20]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80040b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f005 f86b 	bl	8009198 <USB_ReadInterrupts>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d10a      	bne.n	80040e2 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f00a fca0 	bl	800ea12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695a      	ldr	r2, [r3, #20]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f002 0208 	and.w	r2, r2, #8
 80040e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f005 f856 	bl	8009198 <USB_ReadInterrupts>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f2:	2b80      	cmp	r3, #128	; 0x80
 80040f4:	d122      	bne.n	800413c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004102:	2301      	movs	r3, #1
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
 8004106:	e014      	b.n	8004132 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800410c:	4613      	mov	r3, r2
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	4413      	add	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d105      	bne.n	800412c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	b2db      	uxtb	r3, r3
 8004124:	4619      	mov	r1, r3
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fb27 	bl	800477a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	3301      	adds	r3, #1
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004138:	429a      	cmp	r2, r3
 800413a:	d3e5      	bcc.n	8004108 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	f005 f829 	bl	8009198 <USB_ReadInterrupts>
 8004146:	4603      	mov	r3, r0
 8004148:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800414c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004150:	d13b      	bne.n	80041ca <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004152:	2301      	movs	r3, #1
 8004154:	627b      	str	r3, [r7, #36]	; 0x24
 8004156:	e02b      	b.n	80041b0 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	4413      	add	r3, r2
 8004160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416c:	4613      	mov	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	3340      	adds	r3, #64	; 0x40
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d115      	bne.n	80041aa <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800417e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004180:	2b00      	cmp	r3, #0
 8004182:	da12      	bge.n	80041aa <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004188:	4613      	mov	r3, r2
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	4413      	add	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	333f      	adds	r3, #63	; 0x3f
 8004194:	2201      	movs	r2, #1
 8004196:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	b2db      	uxtb	r3, r3
 800419c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	4619      	mov	r1, r3
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fae8 	bl	800477a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	3301      	adds	r3, #1
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d3ce      	bcc.n	8004158 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695a      	ldr	r2, [r3, #20]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80041c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f004 ffe2 	bl	8009198 <USB_ReadInterrupts>
 80041d4:	4603      	mov	r3, r0
 80041d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041de:	d155      	bne.n	800428c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041e0:	2301      	movs	r3, #1
 80041e2:	627b      	str	r3, [r7, #36]	; 0x24
 80041e4:	e045      	b.n	8004272 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041fa:	4613      	mov	r3, r2
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	4413      	add	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	440b      	add	r3, r1
 8004204:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d12e      	bne.n	800426c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800420e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004210:	2b00      	cmp	r3, #0
 8004212:	da2b      	bge.n	800426c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004220:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004224:	429a      	cmp	r2, r3
 8004226:	d121      	bne.n	800426c <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800422c:	4613      	mov	r3, r2
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	4413      	add	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	440b      	add	r3, r1
 8004236:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800423a:	2201      	movs	r2, #1
 800423c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10a      	bne.n	800426c <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	69fa      	ldr	r2, [r7, #28]
 8004260:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004264:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004268:	6053      	str	r3, [r2, #4]
            break;
 800426a:	e007      	b.n	800427c <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	3301      	adds	r3, #1
 8004270:	627b      	str	r3, [r7, #36]	; 0x24
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004278:	429a      	cmp	r2, r3
 800427a:	d3b4      	bcc.n	80041e6 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695a      	ldr	r2, [r3, #20]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800428a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4618      	mov	r0, r3
 8004292:	f004 ff81 	bl	8009198 <USB_ReadInterrupts>
 8004296:	4603      	mov	r3, r0
 8004298:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800429c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a0:	d10a      	bne.n	80042b8 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f00a fc44 	bl	800eb30 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695a      	ldr	r2, [r3, #20]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80042b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4618      	mov	r0, r3
 80042be:	f004 ff6b 	bl	8009198 <USB_ReadInterrupts>
 80042c2:	4603      	mov	r3, r0
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d115      	bne.n	80042f8 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d002      	beq.n	80042e4 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f00a fc34 	bl	800eb4c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6859      	ldr	r1, [r3, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	605a      	str	r2, [r3, #4]
 80042f4:	e000      	b.n	80042f8 <HAL_PCD_IRQHandler+0x992>
      return;
 80042f6:	bf00      	nop
    }
  }
}
 80042f8:	3734      	adds	r7, #52	; 0x34
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd90      	pop	{r4, r7, pc}

080042fe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	460b      	mov	r3, r1
 8004308:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004310:	2b01      	cmp	r3, #1
 8004312:	d101      	bne.n	8004318 <HAL_PCD_SetAddress+0x1a>
 8004314:	2302      	movs	r3, #2
 8004316:	e013      	b.n	8004340 <HAL_PCD_SetAddress+0x42>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	78fa      	ldrb	r2, [r7, #3]
 8004324:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	78fa      	ldrb	r2, [r7, #3]
 800432e:	4611      	mov	r1, r2
 8004330:	4618      	mov	r0, r3
 8004332:	f004 fec9 	bl	80090c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	4608      	mov	r0, r1
 8004352:	4611      	mov	r1, r2
 8004354:	461a      	mov	r2, r3
 8004356:	4603      	mov	r3, r0
 8004358:	70fb      	strb	r3, [r7, #3]
 800435a:	460b      	mov	r3, r1
 800435c:	803b      	strh	r3, [r7, #0]
 800435e:	4613      	mov	r3, r2
 8004360:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004366:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800436a:	2b00      	cmp	r3, #0
 800436c:	da0f      	bge.n	800438e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800436e:	78fb      	ldrb	r3, [r7, #3]
 8004370:	f003 020f 	and.w	r2, r3, #15
 8004374:	4613      	mov	r3, r2
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	4413      	add	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	3338      	adds	r3, #56	; 0x38
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	4413      	add	r3, r2
 8004382:	3304      	adds	r3, #4
 8004384:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2201      	movs	r2, #1
 800438a:	705a      	strb	r2, [r3, #1]
 800438c:	e00f      	b.n	80043ae <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800438e:	78fb      	ldrb	r3, [r7, #3]
 8004390:	f003 020f 	and.w	r2, r3, #15
 8004394:	4613      	mov	r3, r2
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4413      	add	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	4413      	add	r3, r2
 80043a4:	3304      	adds	r3, #4
 80043a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80043ae:	78fb      	ldrb	r3, [r7, #3]
 80043b0:	f003 030f 	and.w	r3, r3, #15
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80043ba:	883a      	ldrh	r2, [r7, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	78ba      	ldrb	r2, [r7, #2]
 80043c4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	785b      	ldrb	r3, [r3, #1]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d004      	beq.n	80043d8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80043d8:	78bb      	ldrb	r3, [r7, #2]
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d102      	bne.n	80043e4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d101      	bne.n	80043f2 <HAL_PCD_EP_Open+0xaa>
 80043ee:	2302      	movs	r3, #2
 80043f0:	e00e      	b.n	8004410 <HAL_PCD_EP_Open+0xc8>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68f9      	ldr	r1, [r7, #12]
 8004400:	4618      	mov	r0, r3
 8004402:	f003 ff3d 	bl	8008280 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800440e:	7afb      	ldrb	r3, [r7, #11]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004424:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004428:	2b00      	cmp	r3, #0
 800442a:	da0f      	bge.n	800444c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800442c:	78fb      	ldrb	r3, [r7, #3]
 800442e:	f003 020f 	and.w	r2, r3, #15
 8004432:	4613      	mov	r3, r2
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	4413      	add	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	3338      	adds	r3, #56	; 0x38
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	4413      	add	r3, r2
 8004440:	3304      	adds	r3, #4
 8004442:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2201      	movs	r2, #1
 8004448:	705a      	strb	r2, [r3, #1]
 800444a:	e00f      	b.n	800446c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800444c:	78fb      	ldrb	r3, [r7, #3]
 800444e:	f003 020f 	and.w	r2, r3, #15
 8004452:	4613      	mov	r3, r2
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	4413      	add	r3, r2
 8004462:	3304      	adds	r3, #4
 8004464:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800446c:	78fb      	ldrb	r3, [r7, #3]
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	b2da      	uxtb	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <HAL_PCD_EP_Close+0x6e>
 8004482:	2302      	movs	r3, #2
 8004484:	e00e      	b.n	80044a4 <HAL_PCD_EP_Close+0x8c>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68f9      	ldr	r1, [r7, #12]
 8004494:	4618      	mov	r0, r3
 8004496:	f003 ff7b 	bl	8008390 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	607a      	str	r2, [r7, #4]
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	460b      	mov	r3, r1
 80044ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044bc:	7afb      	ldrb	r3, [r7, #11]
 80044be:	f003 020f 	and.w	r2, r3, #15
 80044c2:	4613      	mov	r3, r2
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	4413      	add	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	4413      	add	r3, r2
 80044d2:	3304      	adds	r3, #4
 80044d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2200      	movs	r2, #0
 80044e6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	2200      	movs	r2, #0
 80044ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044ee:	7afb      	ldrb	r3, [r7, #11]
 80044f0:	f003 030f 	and.w	r3, r3, #15
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d102      	bne.n	8004508 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004508:	7afb      	ldrb	r3, [r7, #11]
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	2b00      	cmp	r3, #0
 8004510:	d109      	bne.n	8004526 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6818      	ldr	r0, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	461a      	mov	r2, r3
 800451e:	6979      	ldr	r1, [r7, #20]
 8004520:	f004 fa62 	bl	80089e8 <USB_EP0StartXfer>
 8004524:	e008      	b.n	8004538 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6818      	ldr	r0, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	461a      	mov	r2, r3
 8004532:	6979      	ldr	r1, [r7, #20]
 8004534:	f004 f808 	bl	8008548 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
 800454a:	460b      	mov	r3, r1
 800454c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800454e:	78fb      	ldrb	r3, [r7, #3]
 8004550:	f003 020f 	and.w	r2, r3, #15
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	4613      	mov	r3, r2
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	4413      	add	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	440b      	add	r3, r1
 8004560:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004564:	681b      	ldr	r3, [r3, #0]
}
 8004566:	4618      	mov	r0, r3
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b086      	sub	sp, #24
 8004576:	af00      	add	r7, sp, #0
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	603b      	str	r3, [r7, #0]
 800457e:	460b      	mov	r3, r1
 8004580:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004582:	7afb      	ldrb	r3, [r7, #11]
 8004584:	f003 020f 	and.w	r2, r3, #15
 8004588:	4613      	mov	r3, r2
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	4413      	add	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	3338      	adds	r3, #56	; 0x38
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	4413      	add	r3, r2
 8004596:	3304      	adds	r3, #4
 8004598:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2200      	movs	r2, #0
 80045aa:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	2201      	movs	r2, #1
 80045b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045b2:	7afb      	ldrb	r3, [r7, #11]
 80045b4:	f003 030f 	and.w	r3, r3, #15
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d102      	bne.n	80045cc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045cc:	7afb      	ldrb	r3, [r7, #11]
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d109      	bne.n	80045ea <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	461a      	mov	r2, r3
 80045e2:	6979      	ldr	r1, [r7, #20]
 80045e4:	f004 fa00 	bl	80089e8 <USB_EP0StartXfer>
 80045e8:	e008      	b.n	80045fc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	461a      	mov	r2, r3
 80045f6:	6979      	ldr	r1, [r7, #20]
 80045f8:	f003 ffa6 	bl	8008548 <USB_EPStartXfer>
  }

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b084      	sub	sp, #16
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
 800460e:	460b      	mov	r3, r1
 8004610:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004612:	78fb      	ldrb	r3, [r7, #3]
 8004614:	f003 020f 	and.w	r2, r3, #15
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	429a      	cmp	r2, r3
 800461e:	d901      	bls.n	8004624 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e050      	b.n	80046c6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004624:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004628:	2b00      	cmp	r3, #0
 800462a:	da0f      	bge.n	800464c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800462c:	78fb      	ldrb	r3, [r7, #3]
 800462e:	f003 020f 	and.w	r2, r3, #15
 8004632:	4613      	mov	r3, r2
 8004634:	00db      	lsls	r3, r3, #3
 8004636:	4413      	add	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	3338      	adds	r3, #56	; 0x38
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	4413      	add	r3, r2
 8004640:	3304      	adds	r3, #4
 8004642:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2201      	movs	r2, #1
 8004648:	705a      	strb	r2, [r3, #1]
 800464a:	e00d      	b.n	8004668 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800464c:	78fa      	ldrb	r2, [r7, #3]
 800464e:	4613      	mov	r3, r2
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	4413      	add	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	4413      	add	r3, r2
 800465e:	3304      	adds	r3, #4
 8004660:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2201      	movs	r2, #1
 800466c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800466e:	78fb      	ldrb	r3, [r7, #3]
 8004670:	f003 030f 	and.w	r3, r3, #15
 8004674:	b2da      	uxtb	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004680:	2b01      	cmp	r3, #1
 8004682:	d101      	bne.n	8004688 <HAL_PCD_EP_SetStall+0x82>
 8004684:	2302      	movs	r3, #2
 8004686:	e01e      	b.n	80046c6 <HAL_PCD_EP_SetStall+0xc0>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68f9      	ldr	r1, [r7, #12]
 8004696:	4618      	mov	r0, r3
 8004698:	f004 fc42 	bl	8008f20 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800469c:	78fb      	ldrb	r3, [r7, #3]
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10a      	bne.n	80046bc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6818      	ldr	r0, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	b2d9      	uxtb	r1, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80046b6:	461a      	mov	r2, r3
 80046b8:	f004 fe34 	bl	8009324 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b084      	sub	sp, #16
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	460b      	mov	r3, r1
 80046d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80046da:	78fb      	ldrb	r3, [r7, #3]
 80046dc:	f003 020f 	and.w	r2, r3, #15
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d901      	bls.n	80046ec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e042      	b.n	8004772 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	da0f      	bge.n	8004714 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046f4:	78fb      	ldrb	r3, [r7, #3]
 80046f6:	f003 020f 	and.w	r2, r3, #15
 80046fa:	4613      	mov	r3, r2
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	4413      	add	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	3338      	adds	r3, #56	; 0x38
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	4413      	add	r3, r2
 8004708:	3304      	adds	r3, #4
 800470a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2201      	movs	r2, #1
 8004710:	705a      	strb	r2, [r3, #1]
 8004712:	e00f      	b.n	8004734 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004714:	78fb      	ldrb	r3, [r7, #3]
 8004716:	f003 020f 	and.w	r2, r3, #15
 800471a:	4613      	mov	r3, r2
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	4413      	add	r3, r2
 800472a:	3304      	adds	r3, #4
 800472c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800473a:	78fb      	ldrb	r3, [r7, #3]
 800473c:	f003 030f 	and.w	r3, r3, #15
 8004740:	b2da      	uxtb	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_PCD_EP_ClrStall+0x86>
 8004750:	2302      	movs	r3, #2
 8004752:	e00e      	b.n	8004772 <HAL_PCD_EP_ClrStall+0xa4>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68f9      	ldr	r1, [r7, #12]
 8004762:	4618      	mov	r0, r3
 8004764:	f004 fc4a 	bl	8008ffc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b084      	sub	sp, #16
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	460b      	mov	r3, r1
 8004784:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004786:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800478a:	2b00      	cmp	r3, #0
 800478c:	da0c      	bge.n	80047a8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800478e:	78fb      	ldrb	r3, [r7, #3]
 8004790:	f003 020f 	and.w	r2, r3, #15
 8004794:	4613      	mov	r3, r2
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	4413      	add	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	3338      	adds	r3, #56	; 0x38
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	4413      	add	r3, r2
 80047a2:	3304      	adds	r3, #4
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	e00c      	b.n	80047c2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047a8:	78fb      	ldrb	r3, [r7, #3]
 80047aa:	f003 020f 	and.w	r2, r3, #15
 80047ae:	4613      	mov	r3, r2
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	4413      	add	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	4413      	add	r3, r2
 80047be:	3304      	adds	r3, #4
 80047c0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68f9      	ldr	r1, [r7, #12]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f004 fa69 	bl	8008ca0 <USB_EPStopXfer>
 80047ce:	4603      	mov	r3, r0
 80047d0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80047d2:	7afb      	ldrb	r3, [r7, #11]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08a      	sub	sp, #40	; 0x28
 80047e0:	af02      	add	r7, sp, #8
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	4613      	mov	r3, r2
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	4413      	add	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	3338      	adds	r3, #56	; 0x38
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	4413      	add	r3, r2
 8004800:	3304      	adds	r3, #4
 8004802:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a1a      	ldr	r2, [r3, #32]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	429a      	cmp	r2, r3
 800480e:	d901      	bls.n	8004814 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e06c      	b.n	80048ee <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	699a      	ldr	r2, [r3, #24]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	69fa      	ldr	r2, [r7, #28]
 8004826:	429a      	cmp	r2, r3
 8004828:	d902      	bls.n	8004830 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	3303      	adds	r3, #3
 8004834:	089b      	lsrs	r3, r3, #2
 8004836:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004838:	e02b      	b.n	8004892 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	699a      	ldr	r2, [r3, #24]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	69fa      	ldr	r2, [r7, #28]
 800484c:	429a      	cmp	r2, r3
 800484e:	d902      	bls.n	8004856 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	3303      	adds	r3, #3
 800485a:	089b      	lsrs	r3, r3, #2
 800485c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6919      	ldr	r1, [r3, #16]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	b2da      	uxtb	r2, r3
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800486e:	b2db      	uxtb	r3, r3
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	4603      	mov	r3, r0
 8004874:	6978      	ldr	r0, [r7, #20]
 8004876:	f004 fabd 	bl	8008df4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	691a      	ldr	r2, [r3, #16]
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	441a      	add	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6a1a      	ldr	r2, [r3, #32]
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	441a      	add	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	4413      	add	r3, r2
 800489a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d809      	bhi.n	80048bc <PCD_WriteEmptyTxFifo+0xe0>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a1a      	ldr	r2, [r3, #32]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d203      	bcs.n	80048bc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1be      	bne.n	800483a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	699a      	ldr	r2, [r3, #24]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d811      	bhi.n	80048ec <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	2201      	movs	r2, #1
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	43db      	mvns	r3, r3
 80048e2:	6939      	ldr	r1, [r7, #16]
 80048e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048e8:	4013      	ands	r3, r2
 80048ea:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3720      	adds	r7, #32
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b088      	sub	sp, #32
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	333c      	adds	r3, #60	; 0x3c
 8004910:	3304      	adds	r3, #4
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	4413      	add	r3, r2
 800491e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d17b      	bne.n	8004a26 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f003 0308 	and.w	r3, r3, #8
 8004934:	2b00      	cmp	r3, #0
 8004936:	d015      	beq.n	8004964 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	4a61      	ldr	r2, [pc, #388]	; (8004ac0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	f240 80b9 	bls.w	8004ab4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 80b3 	beq.w	8004ab4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495a:	461a      	mov	r2, r3
 800495c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004960:	6093      	str	r3, [r2, #8]
 8004962:	e0a7      	b.n	8004ab4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b00      	cmp	r3, #0
 800496c:	d009      	beq.n	8004982 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	4413      	add	r3, r2
 8004976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800497a:	461a      	mov	r2, r3
 800497c:	2320      	movs	r3, #32
 800497e:	6093      	str	r3, [r2, #8]
 8004980:	e098      	b.n	8004ab4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004988:	2b00      	cmp	r3, #0
 800498a:	f040 8093 	bne.w	8004ab4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	4a4b      	ldr	r2, [pc, #300]	; (8004ac0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d90f      	bls.n	80049b6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00a      	beq.n	80049b6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ac:	461a      	mov	r2, r3
 80049ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049b2:	6093      	str	r3, [r2, #8]
 80049b4:	e07e      	b.n	8004ab4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	4613      	mov	r3, r2
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	4413      	add	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	4413      	add	r3, r2
 80049c8:	3304      	adds	r3, #4
 80049ca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	69da      	ldr	r2, [r3, #28]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	0159      	lsls	r1, r3, #5
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	440b      	add	r3, r1
 80049d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049e2:	1ad2      	subs	r2, r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d114      	bne.n	8004a18 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d109      	bne.n	8004a0a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6818      	ldr	r0, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a00:	461a      	mov	r2, r3
 8004a02:	2101      	movs	r1, #1
 8004a04:	f004 fc8e 	bl	8009324 <USB_EP0_OutStart>
 8004a08:	e006      	b.n	8004a18 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	691a      	ldr	r2, [r3, #16]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	441a      	add	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f009 ffc2 	bl	800e9a8 <HAL_PCD_DataOutStageCallback>
 8004a24:	e046      	b.n	8004ab4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	4a26      	ldr	r2, [pc, #152]	; (8004ac4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d124      	bne.n	8004a78 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a44:	461a      	mov	r2, r3
 8004a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a4a:	6093      	str	r3, [r2, #8]
 8004a4c:	e032      	b.n	8004ab4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d008      	beq.n	8004a6a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a64:	461a      	mov	r2, r3
 8004a66:	2320      	movs	r3, #32
 8004a68:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	4619      	mov	r1, r3
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f009 ff99 	bl	800e9a8 <HAL_PCD_DataOutStageCallback>
 8004a76:	e01d      	b.n	8004ab4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d114      	bne.n	8004aa8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	4613      	mov	r3, r2
 8004a84:	00db      	lsls	r3, r3, #3
 8004a86:	4413      	add	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	440b      	add	r3, r1
 8004a8c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d108      	bne.n	8004aa8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6818      	ldr	r0, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	f004 fc3e 	bl	8009324 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	4619      	mov	r1, r3
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f009 ff7a 	bl	800e9a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3720      	adds	r7, #32
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	4f54300a 	.word	0x4f54300a
 8004ac4:	4f54310a 	.word	0x4f54310a

08004ac8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	333c      	adds	r3, #60	; 0x3c
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4a15      	ldr	r2, [pc, #84]	; (8004b50 <PCD_EP_OutSetupPacket_int+0x88>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d90e      	bls.n	8004b1c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d009      	beq.n	8004b1c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b14:	461a      	mov	r2, r3
 8004b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b1a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f009 ff31 	bl	800e984 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	4a0a      	ldr	r2, [pc, #40]	; (8004b50 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d90c      	bls.n	8004b44 <PCD_EP_OutSetupPacket_int+0x7c>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d108      	bne.n	8004b44 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6818      	ldr	r0, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	2101      	movs	r1, #1
 8004b40:	f004 fbf0 	bl	8009324 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3718      	adds	r7, #24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	4f54300a 	.word	0x4f54300a

08004b54 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	70fb      	strb	r3, [r7, #3]
 8004b60:	4613      	mov	r3, r2
 8004b62:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004b6c:	78fb      	ldrb	r3, [r7, #3]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d107      	bne.n	8004b82 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004b72:	883b      	ldrh	r3, [r7, #0]
 8004b74:	0419      	lsls	r1, r3, #16
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	629a      	str	r2, [r3, #40]	; 0x28
 8004b80:	e028      	b.n	8004bd4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	0c1b      	lsrs	r3, r3, #16
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b90:	2300      	movs	r3, #0
 8004b92:	73fb      	strb	r3, [r7, #15]
 8004b94:	e00d      	b.n	8004bb2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
 8004b9c:	3340      	adds	r3, #64	; 0x40
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	0c1b      	lsrs	r3, r3, #16
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	4413      	add	r3, r2
 8004baa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	73fb      	strb	r3, [r7, #15]
 8004bb2:	7bfa      	ldrb	r2, [r7, #15]
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d3ec      	bcc.n	8004b96 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004bbc:	883b      	ldrh	r3, [r7, #0]
 8004bbe:	0418      	lsls	r0, r3, #16
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6819      	ldr	r1, [r3, #0]
 8004bc4:	78fb      	ldrb	r3, [r7, #3]
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	4302      	orrs	r2, r0
 8004bcc:	3340      	adds	r3, #64	; 0x40
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	460b      	mov	r3, r1
 8004bec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	887a      	ldrh	r2, [r7, #2]
 8004bf4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c32:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <HAL_PCDEx_ActivateLPM+0x44>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	10000003 	.word	0x10000003

08004c4c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c50:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a04      	ldr	r2, [pc, #16]	; (8004c68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c5a:	6013      	str	r3, [r2, #0]
}
 8004c5c:	bf00      	nop
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	40007000 	.word	0x40007000

08004c6c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004c72:	2300      	movs	r3, #0
 8004c74:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004c76:	4b23      	ldr	r3, [pc, #140]	; (8004d04 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	4a22      	ldr	r2, [pc, #136]	; (8004d04 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c80:	6413      	str	r3, [r2, #64]	; 0x40
 8004c82:	4b20      	ldr	r3, [pc, #128]	; (8004d04 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8a:	603b      	str	r3, [r7, #0]
 8004c8c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004c8e:	4b1e      	ldr	r3, [pc, #120]	; (8004d08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a1d      	ldr	r2, [pc, #116]	; (8004d08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c98:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c9a:	f7fd ff21 	bl	8002ae0 <HAL_GetTick>
 8004c9e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ca0:	e009      	b.n	8004cb6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ca2:	f7fd ff1d 	bl	8002ae0 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cb0:	d901      	bls.n	8004cb6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e022      	b.n	8004cfc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004cb6:	4b14      	ldr	r3, [pc, #80]	; (8004d08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc2:	d1ee      	bne.n	8004ca2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004cc4:	4b10      	ldr	r3, [pc, #64]	; (8004d08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a0f      	ldr	r2, [pc, #60]	; (8004d08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cd0:	f7fd ff06 	bl	8002ae0 <HAL_GetTick>
 8004cd4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004cd6:	e009      	b.n	8004cec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004cd8:	f7fd ff02 	bl	8002ae0 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ce6:	d901      	bls.n	8004cec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e007      	b.n	8004cfc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004cec:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cf8:	d1ee      	bne.n	8004cd8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	40023800 	.word	0x40023800
 8004d08:	40007000 	.word	0x40007000

08004d0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004d14:	2300      	movs	r3, #0
 8004d16:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e29b      	b.n	800525a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 8087 	beq.w	8004e3e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d30:	4b96      	ldr	r3, [pc, #600]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f003 030c 	and.w	r3, r3, #12
 8004d38:	2b04      	cmp	r3, #4
 8004d3a:	d00c      	beq.n	8004d56 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d3c:	4b93      	ldr	r3, [pc, #588]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f003 030c 	and.w	r3, r3, #12
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d112      	bne.n	8004d6e <HAL_RCC_OscConfig+0x62>
 8004d48:	4b90      	ldr	r3, [pc, #576]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d54:	d10b      	bne.n	8004d6e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d56:	4b8d      	ldr	r3, [pc, #564]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d06c      	beq.n	8004e3c <HAL_RCC_OscConfig+0x130>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d168      	bne.n	8004e3c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e275      	b.n	800525a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d76:	d106      	bne.n	8004d86 <HAL_RCC_OscConfig+0x7a>
 8004d78:	4b84      	ldr	r3, [pc, #528]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a83      	ldr	r2, [pc, #524]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d82:	6013      	str	r3, [r2, #0]
 8004d84:	e02e      	b.n	8004de4 <HAL_RCC_OscConfig+0xd8>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10c      	bne.n	8004da8 <HAL_RCC_OscConfig+0x9c>
 8004d8e:	4b7f      	ldr	r3, [pc, #508]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a7e      	ldr	r2, [pc, #504]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	4b7c      	ldr	r3, [pc, #496]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a7b      	ldr	r2, [pc, #492]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004da0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	e01d      	b.n	8004de4 <HAL_RCC_OscConfig+0xd8>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004db0:	d10c      	bne.n	8004dcc <HAL_RCC_OscConfig+0xc0>
 8004db2:	4b76      	ldr	r3, [pc, #472]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a75      	ldr	r2, [pc, #468]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	4b73      	ldr	r3, [pc, #460]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a72      	ldr	r2, [pc, #456]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	e00b      	b.n	8004de4 <HAL_RCC_OscConfig+0xd8>
 8004dcc:	4b6f      	ldr	r3, [pc, #444]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a6e      	ldr	r2, [pc, #440]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dd6:	6013      	str	r3, [r2, #0]
 8004dd8:	4b6c      	ldr	r3, [pc, #432]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a6b      	ldr	r2, [pc, #428]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d013      	beq.n	8004e14 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dec:	f7fd fe78 	bl	8002ae0 <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004df4:	f7fd fe74 	bl	8002ae0 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b64      	cmp	r3, #100	; 0x64
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e229      	b.n	800525a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e06:	4b61      	ldr	r3, [pc, #388]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f0      	beq.n	8004df4 <HAL_RCC_OscConfig+0xe8>
 8004e12:	e014      	b.n	8004e3e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e14:	f7fd fe64 	bl	8002ae0 <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e1c:	f7fd fe60 	bl	8002ae0 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b64      	cmp	r3, #100	; 0x64
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e215      	b.n	800525a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e2e:	4b57      	ldr	r3, [pc, #348]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1f0      	bne.n	8004e1c <HAL_RCC_OscConfig+0x110>
 8004e3a:	e000      	b.n	8004e3e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d069      	beq.n	8004f1e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e4a:	4b50      	ldr	r3, [pc, #320]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 030c 	and.w	r3, r3, #12
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00b      	beq.n	8004e6e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e56:	4b4d      	ldr	r3, [pc, #308]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f003 030c 	and.w	r3, r3, #12
 8004e5e:	2b08      	cmp	r3, #8
 8004e60:	d11c      	bne.n	8004e9c <HAL_RCC_OscConfig+0x190>
 8004e62:	4b4a      	ldr	r3, [pc, #296]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d116      	bne.n	8004e9c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e6e:	4b47      	ldr	r3, [pc, #284]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d005      	beq.n	8004e86 <HAL_RCC_OscConfig+0x17a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d001      	beq.n	8004e86 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e1e9      	b.n	800525a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e86:	4b41      	ldr	r3, [pc, #260]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	493d      	ldr	r1, [pc, #244]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e9a:	e040      	b.n	8004f1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d023      	beq.n	8004eec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ea4:	4b39      	ldr	r3, [pc, #228]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a38      	ldr	r2, [pc, #224]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004eaa:	f043 0301 	orr.w	r3, r3, #1
 8004eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb0:	f7fd fe16 	bl	8002ae0 <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eb8:	f7fd fe12 	bl	8002ae0 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e1c7      	b.n	800525a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eca:	4b30      	ldr	r3, [pc, #192]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0f0      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed6:	4b2d      	ldr	r3, [pc, #180]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	4929      	ldr	r1, [pc, #164]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	600b      	str	r3, [r1, #0]
 8004eea:	e018      	b.n	8004f1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eec:	4b27      	ldr	r3, [pc, #156]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a26      	ldr	r2, [pc, #152]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004ef2:	f023 0301 	bic.w	r3, r3, #1
 8004ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef8:	f7fd fdf2 	bl	8002ae0 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f00:	f7fd fdee 	bl	8002ae0 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e1a3      	b.n	800525a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f12:	4b1e      	ldr	r3, [pc, #120]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1f0      	bne.n	8004f00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0308 	and.w	r3, r3, #8
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d038      	beq.n	8004f9c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d019      	beq.n	8004f66 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f32:	4b16      	ldr	r3, [pc, #88]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f36:	4a15      	ldr	r2, [pc, #84]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004f38:	f043 0301 	orr.w	r3, r3, #1
 8004f3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f3e:	f7fd fdcf 	bl	8002ae0 <HAL_GetTick>
 8004f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f44:	e008      	b.n	8004f58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f46:	f7fd fdcb 	bl	8002ae0 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e180      	b.n	800525a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f58:	4b0c      	ldr	r3, [pc, #48]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0f0      	beq.n	8004f46 <HAL_RCC_OscConfig+0x23a>
 8004f64:	e01a      	b.n	8004f9c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f66:	4b09      	ldr	r3, [pc, #36]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f6a:	4a08      	ldr	r2, [pc, #32]	; (8004f8c <HAL_RCC_OscConfig+0x280>)
 8004f6c:	f023 0301 	bic.w	r3, r3, #1
 8004f70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f72:	f7fd fdb5 	bl	8002ae0 <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f78:	e00a      	b.n	8004f90 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f7a:	f7fd fdb1 	bl	8002ae0 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d903      	bls.n	8004f90 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e166      	b.n	800525a <HAL_RCC_OscConfig+0x54e>
 8004f8c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f90:	4b92      	ldr	r3, [pc, #584]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 8004f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1ee      	bne.n	8004f7a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 80a4 	beq.w	80050f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004faa:	4b8c      	ldr	r3, [pc, #560]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10d      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fb6:	4b89      	ldr	r3, [pc, #548]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	4a88      	ldr	r2, [pc, #544]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 8004fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8004fc2:	4b86      	ldr	r3, [pc, #536]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fca:	60bb      	str	r3, [r7, #8]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fd2:	4b83      	ldr	r3, [pc, #524]	; (80051e0 <HAL_RCC_OscConfig+0x4d4>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d118      	bne.n	8005010 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004fde:	4b80      	ldr	r3, [pc, #512]	; (80051e0 <HAL_RCC_OscConfig+0x4d4>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a7f      	ldr	r2, [pc, #508]	; (80051e0 <HAL_RCC_OscConfig+0x4d4>)
 8004fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fea:	f7fd fd79 	bl	8002ae0 <HAL_GetTick>
 8004fee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff2:	f7fd fd75 	bl	8002ae0 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b64      	cmp	r3, #100	; 0x64
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e12a      	b.n	800525a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005004:	4b76      	ldr	r3, [pc, #472]	; (80051e0 <HAL_RCC_OscConfig+0x4d4>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0f0      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d106      	bne.n	8005026 <HAL_RCC_OscConfig+0x31a>
 8005018:	4b70      	ldr	r3, [pc, #448]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 800501a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501c:	4a6f      	ldr	r2, [pc, #444]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 800501e:	f043 0301 	orr.w	r3, r3, #1
 8005022:	6713      	str	r3, [r2, #112]	; 0x70
 8005024:	e02d      	b.n	8005082 <HAL_RCC_OscConfig+0x376>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10c      	bne.n	8005048 <HAL_RCC_OscConfig+0x33c>
 800502e:	4b6b      	ldr	r3, [pc, #428]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 8005030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005032:	4a6a      	ldr	r2, [pc, #424]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 8005034:	f023 0301 	bic.w	r3, r3, #1
 8005038:	6713      	str	r3, [r2, #112]	; 0x70
 800503a:	4b68      	ldr	r3, [pc, #416]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 800503c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503e:	4a67      	ldr	r2, [pc, #412]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 8005040:	f023 0304 	bic.w	r3, r3, #4
 8005044:	6713      	str	r3, [r2, #112]	; 0x70
 8005046:	e01c      	b.n	8005082 <HAL_RCC_OscConfig+0x376>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	2b05      	cmp	r3, #5
 800504e:	d10c      	bne.n	800506a <HAL_RCC_OscConfig+0x35e>
 8005050:	4b62      	ldr	r3, [pc, #392]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 8005052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005054:	4a61      	ldr	r2, [pc, #388]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 8005056:	f043 0304 	orr.w	r3, r3, #4
 800505a:	6713      	str	r3, [r2, #112]	; 0x70
 800505c:	4b5f      	ldr	r3, [pc, #380]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 800505e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005060:	4a5e      	ldr	r2, [pc, #376]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 8005062:	f043 0301 	orr.w	r3, r3, #1
 8005066:	6713      	str	r3, [r2, #112]	; 0x70
 8005068:	e00b      	b.n	8005082 <HAL_RCC_OscConfig+0x376>
 800506a:	4b5c      	ldr	r3, [pc, #368]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 800506c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506e:	4a5b      	ldr	r2, [pc, #364]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 8005070:	f023 0301 	bic.w	r3, r3, #1
 8005074:	6713      	str	r3, [r2, #112]	; 0x70
 8005076:	4b59      	ldr	r3, [pc, #356]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 8005078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507a:	4a58      	ldr	r2, [pc, #352]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 800507c:	f023 0304 	bic.w	r3, r3, #4
 8005080:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d015      	beq.n	80050b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800508a:	f7fd fd29 	bl	8002ae0 <HAL_GetTick>
 800508e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005090:	e00a      	b.n	80050a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005092:	f7fd fd25 	bl	8002ae0 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e0d8      	b.n	800525a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050a8:	4b4c      	ldr	r3, [pc, #304]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 80050aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0ee      	beq.n	8005092 <HAL_RCC_OscConfig+0x386>
 80050b4:	e014      	b.n	80050e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b6:	f7fd fd13 	bl	8002ae0 <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050bc:	e00a      	b.n	80050d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050be:	f7fd fd0f 	bl	8002ae0 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e0c2      	b.n	800525a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050d4:	4b41      	ldr	r3, [pc, #260]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 80050d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1ee      	bne.n	80050be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050e0:	7dfb      	ldrb	r3, [r7, #23]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d105      	bne.n	80050f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050e6:	4b3d      	ldr	r3, [pc, #244]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	4a3c      	ldr	r2, [pc, #240]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 80050ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 80ae 	beq.w	8005258 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050fc:	4b37      	ldr	r3, [pc, #220]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f003 030c 	and.w	r3, r3, #12
 8005104:	2b08      	cmp	r3, #8
 8005106:	d06d      	beq.n	80051e4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	2b02      	cmp	r3, #2
 800510e:	d14b      	bne.n	80051a8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005110:	4b32      	ldr	r3, [pc, #200]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a31      	ldr	r2, [pc, #196]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 8005116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800511a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800511c:	f7fd fce0 	bl	8002ae0 <HAL_GetTick>
 8005120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005124:	f7fd fcdc 	bl	8002ae0 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e091      	b.n	800525a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005136:	4b29      	ldr	r3, [pc, #164]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f0      	bne.n	8005124 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	69da      	ldr	r2, [r3, #28]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	019b      	lsls	r3, r3, #6
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005158:	085b      	lsrs	r3, r3, #1
 800515a:	3b01      	subs	r3, #1
 800515c:	041b      	lsls	r3, r3, #16
 800515e:	431a      	orrs	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005164:	061b      	lsls	r3, r3, #24
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516c:	071b      	lsls	r3, r3, #28
 800516e:	491b      	ldr	r1, [pc, #108]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 8005170:	4313      	orrs	r3, r2
 8005172:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005174:	4b19      	ldr	r3, [pc, #100]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a18      	ldr	r2, [pc, #96]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 800517a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800517e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005180:	f7fd fcae 	bl	8002ae0 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005188:	f7fd fcaa 	bl	8002ae0 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e05f      	b.n	800525a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800519a:	4b10      	ldr	r3, [pc, #64]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0f0      	beq.n	8005188 <HAL_RCC_OscConfig+0x47c>
 80051a6:	e057      	b.n	8005258 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051a8:	4b0c      	ldr	r3, [pc, #48]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a0b      	ldr	r2, [pc, #44]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 80051ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b4:	f7fd fc94 	bl	8002ae0 <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ba:	e008      	b.n	80051ce <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051bc:	f7fd fc90 	bl	8002ae0 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e045      	b.n	800525a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ce:	4b03      	ldr	r3, [pc, #12]	; (80051dc <HAL_RCC_OscConfig+0x4d0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1f0      	bne.n	80051bc <HAL_RCC_OscConfig+0x4b0>
 80051da:	e03d      	b.n	8005258 <HAL_RCC_OscConfig+0x54c>
 80051dc:	40023800 	.word	0x40023800
 80051e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80051e4:	4b1f      	ldr	r3, [pc, #124]	; (8005264 <HAL_RCC_OscConfig+0x558>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d030      	beq.n	8005254 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d129      	bne.n	8005254 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800520a:	429a      	cmp	r2, r3
 800520c:	d122      	bne.n	8005254 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005214:	4013      	ands	r3, r2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800521a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800521c:	4293      	cmp	r3, r2
 800521e:	d119      	bne.n	8005254 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522a:	085b      	lsrs	r3, r3, #1
 800522c:	3b01      	subs	r3, #1
 800522e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005230:	429a      	cmp	r2, r3
 8005232:	d10f      	bne.n	8005254 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005240:	429a      	cmp	r2, r3
 8005242:	d107      	bne.n	8005254 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005250:	429a      	cmp	r2, r3
 8005252:	d001      	beq.n	8005258 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e000      	b.n	800525a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	40023800 	.word	0x40023800

08005268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e0d0      	b.n	8005422 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005280:	4b6a      	ldr	r3, [pc, #424]	; (800542c <HAL_RCC_ClockConfig+0x1c4>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 030f 	and.w	r3, r3, #15
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d910      	bls.n	80052b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800528e:	4b67      	ldr	r3, [pc, #412]	; (800542c <HAL_RCC_ClockConfig+0x1c4>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f023 020f 	bic.w	r2, r3, #15
 8005296:	4965      	ldr	r1, [pc, #404]	; (800542c <HAL_RCC_ClockConfig+0x1c4>)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	4313      	orrs	r3, r2
 800529c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800529e:	4b63      	ldr	r3, [pc, #396]	; (800542c <HAL_RCC_ClockConfig+0x1c4>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 030f 	and.w	r3, r3, #15
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d001      	beq.n	80052b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e0b8      	b.n	8005422 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d020      	beq.n	80052fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d005      	beq.n	80052d4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052c8:	4b59      	ldr	r3, [pc, #356]	; (8005430 <HAL_RCC_ClockConfig+0x1c8>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	4a58      	ldr	r2, [pc, #352]	; (8005430 <HAL_RCC_ClockConfig+0x1c8>)
 80052ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0308 	and.w	r3, r3, #8
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d005      	beq.n	80052ec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052e0:	4b53      	ldr	r3, [pc, #332]	; (8005430 <HAL_RCC_ClockConfig+0x1c8>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	4a52      	ldr	r2, [pc, #328]	; (8005430 <HAL_RCC_ClockConfig+0x1c8>)
 80052e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052ec:	4b50      	ldr	r3, [pc, #320]	; (8005430 <HAL_RCC_ClockConfig+0x1c8>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	494d      	ldr	r1, [pc, #308]	; (8005430 <HAL_RCC_ClockConfig+0x1c8>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d040      	beq.n	800538c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d107      	bne.n	8005322 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005312:	4b47      	ldr	r3, [pc, #284]	; (8005430 <HAL_RCC_ClockConfig+0x1c8>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d115      	bne.n	800534a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e07f      	b.n	8005422 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	2b02      	cmp	r3, #2
 8005328:	d107      	bne.n	800533a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800532a:	4b41      	ldr	r3, [pc, #260]	; (8005430 <HAL_RCC_ClockConfig+0x1c8>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d109      	bne.n	800534a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e073      	b.n	8005422 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800533a:	4b3d      	ldr	r3, [pc, #244]	; (8005430 <HAL_RCC_ClockConfig+0x1c8>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e06b      	b.n	8005422 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800534a:	4b39      	ldr	r3, [pc, #228]	; (8005430 <HAL_RCC_ClockConfig+0x1c8>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f023 0203 	bic.w	r2, r3, #3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	4936      	ldr	r1, [pc, #216]	; (8005430 <HAL_RCC_ClockConfig+0x1c8>)
 8005358:	4313      	orrs	r3, r2
 800535a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800535c:	f7fd fbc0 	bl	8002ae0 <HAL_GetTick>
 8005360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005362:	e00a      	b.n	800537a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005364:	f7fd fbbc 	bl	8002ae0 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005372:	4293      	cmp	r3, r2
 8005374:	d901      	bls.n	800537a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e053      	b.n	8005422 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800537a:	4b2d      	ldr	r3, [pc, #180]	; (8005430 <HAL_RCC_ClockConfig+0x1c8>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f003 020c 	and.w	r2, r3, #12
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	429a      	cmp	r2, r3
 800538a:	d1eb      	bne.n	8005364 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800538c:	4b27      	ldr	r3, [pc, #156]	; (800542c <HAL_RCC_ClockConfig+0x1c4>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 030f 	and.w	r3, r3, #15
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	429a      	cmp	r2, r3
 8005398:	d210      	bcs.n	80053bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539a:	4b24      	ldr	r3, [pc, #144]	; (800542c <HAL_RCC_ClockConfig+0x1c4>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f023 020f 	bic.w	r2, r3, #15
 80053a2:	4922      	ldr	r1, [pc, #136]	; (800542c <HAL_RCC_ClockConfig+0x1c4>)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053aa:	4b20      	ldr	r3, [pc, #128]	; (800542c <HAL_RCC_ClockConfig+0x1c4>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 030f 	and.w	r3, r3, #15
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d001      	beq.n	80053bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e032      	b.n	8005422 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d008      	beq.n	80053da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053c8:	4b19      	ldr	r3, [pc, #100]	; (8005430 <HAL_RCC_ClockConfig+0x1c8>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	4916      	ldr	r1, [pc, #88]	; (8005430 <HAL_RCC_ClockConfig+0x1c8>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d009      	beq.n	80053fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053e6:	4b12      	ldr	r3, [pc, #72]	; (8005430 <HAL_RCC_ClockConfig+0x1c8>)
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	490e      	ldr	r1, [pc, #56]	; (8005430 <HAL_RCC_ClockConfig+0x1c8>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053fa:	f000 f821 	bl	8005440 <HAL_RCC_GetSysClockFreq>
 80053fe:	4602      	mov	r2, r0
 8005400:	4b0b      	ldr	r3, [pc, #44]	; (8005430 <HAL_RCC_ClockConfig+0x1c8>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	091b      	lsrs	r3, r3, #4
 8005406:	f003 030f 	and.w	r3, r3, #15
 800540a:	490a      	ldr	r1, [pc, #40]	; (8005434 <HAL_RCC_ClockConfig+0x1cc>)
 800540c:	5ccb      	ldrb	r3, [r1, r3]
 800540e:	fa22 f303 	lsr.w	r3, r2, r3
 8005412:	4a09      	ldr	r2, [pc, #36]	; (8005438 <HAL_RCC_ClockConfig+0x1d0>)
 8005414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005416:	4b09      	ldr	r3, [pc, #36]	; (800543c <HAL_RCC_ClockConfig+0x1d4>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4618      	mov	r0, r3
 800541c:	f7fd fa2a 	bl	8002874 <HAL_InitTick>

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	40023c00 	.word	0x40023c00
 8005430:	40023800 	.word	0x40023800
 8005434:	08010058 	.word	0x08010058
 8005438:	20000000 	.word	0x20000000
 800543c:	20000004 	.word	0x20000004

08005440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005444:	b094      	sub	sp, #80	; 0x50
 8005446:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005448:	2300      	movs	r3, #0
 800544a:	647b      	str	r3, [r7, #68]	; 0x44
 800544c:	2300      	movs	r3, #0
 800544e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005450:	2300      	movs	r3, #0
 8005452:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005454:	2300      	movs	r3, #0
 8005456:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005458:	4b79      	ldr	r3, [pc, #484]	; (8005640 <HAL_RCC_GetSysClockFreq+0x200>)
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f003 030c 	and.w	r3, r3, #12
 8005460:	2b08      	cmp	r3, #8
 8005462:	d00d      	beq.n	8005480 <HAL_RCC_GetSysClockFreq+0x40>
 8005464:	2b08      	cmp	r3, #8
 8005466:	f200 80e1 	bhi.w	800562c <HAL_RCC_GetSysClockFreq+0x1ec>
 800546a:	2b00      	cmp	r3, #0
 800546c:	d002      	beq.n	8005474 <HAL_RCC_GetSysClockFreq+0x34>
 800546e:	2b04      	cmp	r3, #4
 8005470:	d003      	beq.n	800547a <HAL_RCC_GetSysClockFreq+0x3a>
 8005472:	e0db      	b.n	800562c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005474:	4b73      	ldr	r3, [pc, #460]	; (8005644 <HAL_RCC_GetSysClockFreq+0x204>)
 8005476:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005478:	e0db      	b.n	8005632 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800547a:	4b73      	ldr	r3, [pc, #460]	; (8005648 <HAL_RCC_GetSysClockFreq+0x208>)
 800547c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800547e:	e0d8      	b.n	8005632 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005480:	4b6f      	ldr	r3, [pc, #444]	; (8005640 <HAL_RCC_GetSysClockFreq+0x200>)
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005488:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800548a:	4b6d      	ldr	r3, [pc, #436]	; (8005640 <HAL_RCC_GetSysClockFreq+0x200>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d063      	beq.n	800555e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005496:	4b6a      	ldr	r3, [pc, #424]	; (8005640 <HAL_RCC_GetSysClockFreq+0x200>)
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	099b      	lsrs	r3, r3, #6
 800549c:	2200      	movs	r2, #0
 800549e:	63bb      	str	r3, [r7, #56]	; 0x38
 80054a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80054a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a8:	633b      	str	r3, [r7, #48]	; 0x30
 80054aa:	2300      	movs	r3, #0
 80054ac:	637b      	str	r3, [r7, #52]	; 0x34
 80054ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80054b2:	4622      	mov	r2, r4
 80054b4:	462b      	mov	r3, r5
 80054b6:	f04f 0000 	mov.w	r0, #0
 80054ba:	f04f 0100 	mov.w	r1, #0
 80054be:	0159      	lsls	r1, r3, #5
 80054c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054c4:	0150      	lsls	r0, r2, #5
 80054c6:	4602      	mov	r2, r0
 80054c8:	460b      	mov	r3, r1
 80054ca:	4621      	mov	r1, r4
 80054cc:	1a51      	subs	r1, r2, r1
 80054ce:	6139      	str	r1, [r7, #16]
 80054d0:	4629      	mov	r1, r5
 80054d2:	eb63 0301 	sbc.w	r3, r3, r1
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	f04f 0200 	mov.w	r2, #0
 80054dc:	f04f 0300 	mov.w	r3, #0
 80054e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054e4:	4659      	mov	r1, fp
 80054e6:	018b      	lsls	r3, r1, #6
 80054e8:	4651      	mov	r1, sl
 80054ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054ee:	4651      	mov	r1, sl
 80054f0:	018a      	lsls	r2, r1, #6
 80054f2:	4651      	mov	r1, sl
 80054f4:	ebb2 0801 	subs.w	r8, r2, r1
 80054f8:	4659      	mov	r1, fp
 80054fa:	eb63 0901 	sbc.w	r9, r3, r1
 80054fe:	f04f 0200 	mov.w	r2, #0
 8005502:	f04f 0300 	mov.w	r3, #0
 8005506:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800550a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800550e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005512:	4690      	mov	r8, r2
 8005514:	4699      	mov	r9, r3
 8005516:	4623      	mov	r3, r4
 8005518:	eb18 0303 	adds.w	r3, r8, r3
 800551c:	60bb      	str	r3, [r7, #8]
 800551e:	462b      	mov	r3, r5
 8005520:	eb49 0303 	adc.w	r3, r9, r3
 8005524:	60fb      	str	r3, [r7, #12]
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	f04f 0300 	mov.w	r3, #0
 800552e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005532:	4629      	mov	r1, r5
 8005534:	024b      	lsls	r3, r1, #9
 8005536:	4621      	mov	r1, r4
 8005538:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800553c:	4621      	mov	r1, r4
 800553e:	024a      	lsls	r2, r1, #9
 8005540:	4610      	mov	r0, r2
 8005542:	4619      	mov	r1, r3
 8005544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005546:	2200      	movs	r2, #0
 8005548:	62bb      	str	r3, [r7, #40]	; 0x28
 800554a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800554c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005550:	f7fa ff16 	bl	8000380 <__aeabi_uldivmod>
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	4613      	mov	r3, r2
 800555a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800555c:	e058      	b.n	8005610 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800555e:	4b38      	ldr	r3, [pc, #224]	; (8005640 <HAL_RCC_GetSysClockFreq+0x200>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	099b      	lsrs	r3, r3, #6
 8005564:	2200      	movs	r2, #0
 8005566:	4618      	mov	r0, r3
 8005568:	4611      	mov	r1, r2
 800556a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800556e:	623b      	str	r3, [r7, #32]
 8005570:	2300      	movs	r3, #0
 8005572:	627b      	str	r3, [r7, #36]	; 0x24
 8005574:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005578:	4642      	mov	r2, r8
 800557a:	464b      	mov	r3, r9
 800557c:	f04f 0000 	mov.w	r0, #0
 8005580:	f04f 0100 	mov.w	r1, #0
 8005584:	0159      	lsls	r1, r3, #5
 8005586:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800558a:	0150      	lsls	r0, r2, #5
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	4641      	mov	r1, r8
 8005592:	ebb2 0a01 	subs.w	sl, r2, r1
 8005596:	4649      	mov	r1, r9
 8005598:	eb63 0b01 	sbc.w	fp, r3, r1
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	f04f 0300 	mov.w	r3, #0
 80055a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80055b0:	ebb2 040a 	subs.w	r4, r2, sl
 80055b4:	eb63 050b 	sbc.w	r5, r3, fp
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	f04f 0300 	mov.w	r3, #0
 80055c0:	00eb      	lsls	r3, r5, #3
 80055c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055c6:	00e2      	lsls	r2, r4, #3
 80055c8:	4614      	mov	r4, r2
 80055ca:	461d      	mov	r5, r3
 80055cc:	4643      	mov	r3, r8
 80055ce:	18e3      	adds	r3, r4, r3
 80055d0:	603b      	str	r3, [r7, #0]
 80055d2:	464b      	mov	r3, r9
 80055d4:	eb45 0303 	adc.w	r3, r5, r3
 80055d8:	607b      	str	r3, [r7, #4]
 80055da:	f04f 0200 	mov.w	r2, #0
 80055de:	f04f 0300 	mov.w	r3, #0
 80055e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055e6:	4629      	mov	r1, r5
 80055e8:	028b      	lsls	r3, r1, #10
 80055ea:	4621      	mov	r1, r4
 80055ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055f0:	4621      	mov	r1, r4
 80055f2:	028a      	lsls	r2, r1, #10
 80055f4:	4610      	mov	r0, r2
 80055f6:	4619      	mov	r1, r3
 80055f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055fa:	2200      	movs	r2, #0
 80055fc:	61bb      	str	r3, [r7, #24]
 80055fe:	61fa      	str	r2, [r7, #28]
 8005600:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005604:	f7fa febc 	bl	8000380 <__aeabi_uldivmod>
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
 800560c:	4613      	mov	r3, r2
 800560e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005610:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <HAL_RCC_GetSysClockFreq+0x200>)
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	0c1b      	lsrs	r3, r3, #16
 8005616:	f003 0303 	and.w	r3, r3, #3
 800561a:	3301      	adds	r3, #1
 800561c:	005b      	lsls	r3, r3, #1
 800561e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005620:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005624:	fbb2 f3f3 	udiv	r3, r2, r3
 8005628:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800562a:	e002      	b.n	8005632 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800562c:	4b05      	ldr	r3, [pc, #20]	; (8005644 <HAL_RCC_GetSysClockFreq+0x204>)
 800562e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005630:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005634:	4618      	mov	r0, r3
 8005636:	3750      	adds	r7, #80	; 0x50
 8005638:	46bd      	mov	sp, r7
 800563a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800563e:	bf00      	nop
 8005640:	40023800 	.word	0x40023800
 8005644:	00f42400 	.word	0x00f42400
 8005648:	007a1200 	.word	0x007a1200

0800564c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005650:	4b03      	ldr	r3, [pc, #12]	; (8005660 <HAL_RCC_GetHCLKFreq+0x14>)
 8005652:	681b      	ldr	r3, [r3, #0]
}
 8005654:	4618      	mov	r0, r3
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	20000000 	.word	0x20000000

08005664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005668:	f7ff fff0 	bl	800564c <HAL_RCC_GetHCLKFreq>
 800566c:	4602      	mov	r2, r0
 800566e:	4b05      	ldr	r3, [pc, #20]	; (8005684 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	0a9b      	lsrs	r3, r3, #10
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	4903      	ldr	r1, [pc, #12]	; (8005688 <HAL_RCC_GetPCLK1Freq+0x24>)
 800567a:	5ccb      	ldrb	r3, [r1, r3]
 800567c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005680:	4618      	mov	r0, r3
 8005682:	bd80      	pop	{r7, pc}
 8005684:	40023800 	.word	0x40023800
 8005688:	08010068 	.word	0x08010068

0800568c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005690:	f7ff ffdc 	bl	800564c <HAL_RCC_GetHCLKFreq>
 8005694:	4602      	mov	r2, r0
 8005696:	4b05      	ldr	r3, [pc, #20]	; (80056ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	0b5b      	lsrs	r3, r3, #13
 800569c:	f003 0307 	and.w	r3, r3, #7
 80056a0:	4903      	ldr	r1, [pc, #12]	; (80056b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056a2:	5ccb      	ldrb	r3, [r1, r3]
 80056a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	40023800 	.word	0x40023800
 80056b0:	08010068 	.word	0x08010068

080056b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	220f      	movs	r2, #15
 80056c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80056c4:	4b12      	ldr	r3, [pc, #72]	; (8005710 <HAL_RCC_GetClockConfig+0x5c>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f003 0203 	and.w	r2, r3, #3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80056d0:	4b0f      	ldr	r3, [pc, #60]	; (8005710 <HAL_RCC_GetClockConfig+0x5c>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80056dc:	4b0c      	ldr	r3, [pc, #48]	; (8005710 <HAL_RCC_GetClockConfig+0x5c>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80056e8:	4b09      	ldr	r3, [pc, #36]	; (8005710 <HAL_RCC_GetClockConfig+0x5c>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	08db      	lsrs	r3, r3, #3
 80056ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80056f6:	4b07      	ldr	r3, [pc, #28]	; (8005714 <HAL_RCC_GetClockConfig+0x60>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 020f 	and.w	r2, r3, #15
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	601a      	str	r2, [r3, #0]
}
 8005702:	bf00      	nop
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	40023800 	.word	0x40023800
 8005714:	40023c00 	.word	0x40023c00

08005718 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b088      	sub	sp, #32
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005720:	2300      	movs	r3, #0
 8005722:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005724:	2300      	movs	r3, #0
 8005726:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005728:	2300      	movs	r3, #0
 800572a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800572c:	2300      	movs	r3, #0
 800572e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005730:	2300      	movs	r3, #0
 8005732:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	2b00      	cmp	r3, #0
 800573e:	d012      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005740:	4b69      	ldr	r3, [pc, #420]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	4a68      	ldr	r2, [pc, #416]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005746:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800574a:	6093      	str	r3, [r2, #8]
 800574c:	4b66      	ldr	r3, [pc, #408]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005754:	4964      	ldr	r1, [pc, #400]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005756:	4313      	orrs	r3, r2
 8005758:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005762:	2301      	movs	r3, #1
 8005764:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d017      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005772:	4b5d      	ldr	r3, [pc, #372]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005778:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005780:	4959      	ldr	r1, [pc, #356]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005782:	4313      	orrs	r3, r2
 8005784:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005790:	d101      	bne.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005792:	2301      	movs	r3, #1
 8005794:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800579e:	2301      	movs	r3, #1
 80057a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d017      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80057ae:	4b4e      	ldr	r3, [pc, #312]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057bc:	494a      	ldr	r1, [pc, #296]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057cc:	d101      	bne.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80057ce:	2301      	movs	r3, #1
 80057d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80057da:	2301      	movs	r3, #1
 80057dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80057ea:	2301      	movs	r3, #1
 80057ec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0320 	and.w	r3, r3, #32
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 808b 	beq.w	8005912 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80057fc:	4b3a      	ldr	r3, [pc, #232]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005800:	4a39      	ldr	r2, [pc, #228]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005806:	6413      	str	r3, [r2, #64]	; 0x40
 8005808:	4b37      	ldr	r3, [pc, #220]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005810:	60bb      	str	r3, [r7, #8]
 8005812:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005814:	4b35      	ldr	r3, [pc, #212]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a34      	ldr	r2, [pc, #208]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800581a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800581e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005820:	f7fd f95e 	bl	8002ae0 <HAL_GetTick>
 8005824:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005826:	e008      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005828:	f7fd f95a 	bl	8002ae0 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b64      	cmp	r3, #100	; 0x64
 8005834:	d901      	bls.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e38f      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800583a:	4b2c      	ldr	r3, [pc, #176]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005842:	2b00      	cmp	r3, #0
 8005844:	d0f0      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005846:	4b28      	ldr	r3, [pc, #160]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800584e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d035      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	429a      	cmp	r2, r3
 8005862:	d02e      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005864:	4b20      	ldr	r3, [pc, #128]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800586c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800586e:	4b1e      	ldr	r3, [pc, #120]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005872:	4a1d      	ldr	r2, [pc, #116]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005878:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800587a:	4b1b      	ldr	r3, [pc, #108]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800587c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587e:	4a1a      	ldr	r2, [pc, #104]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005884:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005886:	4a18      	ldr	r2, [pc, #96]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800588c:	4b16      	ldr	r3, [pc, #88]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800588e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b01      	cmp	r3, #1
 8005896:	d114      	bne.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005898:	f7fd f922 	bl	8002ae0 <HAL_GetTick>
 800589c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800589e:	e00a      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058a0:	f7fd f91e 	bl	8002ae0 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e351      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058b6:	4b0c      	ldr	r3, [pc, #48]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d0ee      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058ce:	d111      	bne.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80058d0:	4b05      	ldr	r3, [pc, #20]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80058dc:	4b04      	ldr	r3, [pc, #16]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80058de:	400b      	ands	r3, r1
 80058e0:	4901      	ldr	r1, [pc, #4]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	608b      	str	r3, [r1, #8]
 80058e6:	e00b      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80058e8:	40023800 	.word	0x40023800
 80058ec:	40007000 	.word	0x40007000
 80058f0:	0ffffcff 	.word	0x0ffffcff
 80058f4:	4bac      	ldr	r3, [pc, #688]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	4aab      	ldr	r2, [pc, #684]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80058fe:	6093      	str	r3, [r2, #8]
 8005900:	4ba9      	ldr	r3, [pc, #676]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005902:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800590c:	49a6      	ldr	r1, [pc, #664]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800590e:	4313      	orrs	r3, r2
 8005910:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0310 	and.w	r3, r3, #16
 800591a:	2b00      	cmp	r3, #0
 800591c:	d010      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800591e:	4ba2      	ldr	r3, [pc, #648]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005924:	4aa0      	ldr	r2, [pc, #640]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005926:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800592a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800592e:	4b9e      	ldr	r3, [pc, #632]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005930:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005938:	499b      	ldr	r1, [pc, #620]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800593a:	4313      	orrs	r3, r2
 800593c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00a      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800594c:	4b96      	ldr	r3, [pc, #600]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800594e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005952:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800595a:	4993      	ldr	r1, [pc, #588]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800595c:	4313      	orrs	r3, r2
 800595e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00a      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800596e:	4b8e      	ldr	r3, [pc, #568]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005974:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800597c:	498a      	ldr	r1, [pc, #552]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800597e:	4313      	orrs	r3, r2
 8005980:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00a      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005990:	4b85      	ldr	r3, [pc, #532]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005996:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800599e:	4982      	ldr	r1, [pc, #520]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00a      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059b2:	4b7d      	ldr	r3, [pc, #500]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c0:	4979      	ldr	r1, [pc, #484]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00a      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059d4:	4b74      	ldr	r3, [pc, #464]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059da:	f023 0203 	bic.w	r2, r3, #3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e2:	4971      	ldr	r1, [pc, #452]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00a      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059f6:	4b6c      	ldr	r3, [pc, #432]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059fc:	f023 020c 	bic.w	r2, r3, #12
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a04:	4968      	ldr	r1, [pc, #416]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00a      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a18:	4b63      	ldr	r3, [pc, #396]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a1e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a26:	4960      	ldr	r1, [pc, #384]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00a      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a3a:	4b5b      	ldr	r3, [pc, #364]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a40:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a48:	4957      	ldr	r1, [pc, #348]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00a      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a5c:	4b52      	ldr	r3, [pc, #328]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6a:	494f      	ldr	r1, [pc, #316]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00a      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005a7e:	4b4a      	ldr	r3, [pc, #296]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a8c:	4946      	ldr	r1, [pc, #280]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00a      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005aa0:	4b41      	ldr	r3, [pc, #260]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aae:	493e      	ldr	r1, [pc, #248]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00a      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005ac2:	4b39      	ldr	r3, [pc, #228]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad0:	4935      	ldr	r1, [pc, #212]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00a      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ae4:	4b30      	ldr	r3, [pc, #192]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005af2:	492d      	ldr	r1, [pc, #180]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d011      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005b06:	4b28      	ldr	r3, [pc, #160]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b14:	4924      	ldr	r1, [pc, #144]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b24:	d101      	bne.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005b26:	2301      	movs	r3, #1
 8005b28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0308 	and.w	r3, r3, #8
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005b36:	2301      	movs	r3, #1
 8005b38:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00a      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b46:	4b18      	ldr	r3, [pc, #96]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b4c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b54:	4914      	ldr	r1, [pc, #80]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00b      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b68:	4b0f      	ldr	r3, [pc, #60]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b6e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b78:	490b      	ldr	r1, [pc, #44]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00f      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005b8c:	4b06      	ldr	r3, [pc, #24]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b92:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b9c:	4902      	ldr	r1, [pc, #8]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005ba4:	e002      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005ba6:	bf00      	nop
 8005ba8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00b      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bb8:	4b8a      	ldr	r3, [pc, #552]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bbe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc8:	4986      	ldr	r1, [pc, #536]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00b      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005bdc:	4b81      	ldr	r3, [pc, #516]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005be2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bec:	497d      	ldr	r1, [pc, #500]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d006      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 80d6 	beq.w	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c08:	4b76      	ldr	r3, [pc, #472]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a75      	ldr	r2, [pc, #468]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c14:	f7fc ff64 	bl	8002ae0 <HAL_GetTick>
 8005c18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c1a:	e008      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c1c:	f7fc ff60 	bl	8002ae0 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b64      	cmp	r3, #100	; 0x64
 8005c28:	d901      	bls.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e195      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c2e:	4b6d      	ldr	r3, [pc, #436]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1f0      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d021      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d11d      	bne.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005c4e:	4b65      	ldr	r3, [pc, #404]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c54:	0c1b      	lsrs	r3, r3, #16
 8005c56:	f003 0303 	and.w	r3, r3, #3
 8005c5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005c5c:	4b61      	ldr	r3, [pc, #388]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c62:	0e1b      	lsrs	r3, r3, #24
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	019a      	lsls	r2, r3, #6
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	041b      	lsls	r3, r3, #16
 8005c74:	431a      	orrs	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	061b      	lsls	r3, r3, #24
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	071b      	lsls	r3, r3, #28
 8005c82:	4958      	ldr	r1, [pc, #352]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d004      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c9e:	d00a      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d02e      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cb4:	d129      	bne.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005cb6:	4b4b      	ldr	r3, [pc, #300]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cbc:	0c1b      	lsrs	r3, r3, #16
 8005cbe:	f003 0303 	and.w	r3, r3, #3
 8005cc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005cc4:	4b47      	ldr	r3, [pc, #284]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cca:	0f1b      	lsrs	r3, r3, #28
 8005ccc:	f003 0307 	and.w	r3, r3, #7
 8005cd0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	019a      	lsls	r2, r3, #6
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	041b      	lsls	r3, r3, #16
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	061b      	lsls	r3, r3, #24
 8005ce4:	431a      	orrs	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	071b      	lsls	r3, r3, #28
 8005cea:	493e      	ldr	r1, [pc, #248]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005cf2:	4b3c      	ldr	r3, [pc, #240]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cf8:	f023 021f 	bic.w	r2, r3, #31
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	3b01      	subs	r3, #1
 8005d02:	4938      	ldr	r1, [pc, #224]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d01d      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d16:	4b33      	ldr	r3, [pc, #204]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d1c:	0e1b      	lsrs	r3, r3, #24
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d24:	4b2f      	ldr	r3, [pc, #188]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d2a:	0f1b      	lsrs	r3, r3, #28
 8005d2c:	f003 0307 	and.w	r3, r3, #7
 8005d30:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	019a      	lsls	r2, r3, #6
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	041b      	lsls	r3, r3, #16
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	061b      	lsls	r3, r3, #24
 8005d44:	431a      	orrs	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	071b      	lsls	r3, r3, #28
 8005d4a:	4926      	ldr	r1, [pc, #152]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d011      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	019a      	lsls	r2, r3, #6
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	041b      	lsls	r3, r3, #16
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	061b      	lsls	r3, r3, #24
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	071b      	lsls	r3, r3, #28
 8005d7a:	491a      	ldr	r1, [pc, #104]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d82:	4b18      	ldr	r3, [pc, #96]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a17      	ldr	r2, [pc, #92]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d8e:	f7fc fea7 	bl	8002ae0 <HAL_GetTick>
 8005d92:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d94:	e008      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d96:	f7fc fea3 	bl	8002ae0 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	2b64      	cmp	r3, #100	; 0x64
 8005da2:	d901      	bls.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e0d8      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005da8:	4b0e      	ldr	r3, [pc, #56]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0f0      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	f040 80ce 	bne.w	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005dbc:	4b09      	ldr	r3, [pc, #36]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a08      	ldr	r2, [pc, #32]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dc8:	f7fc fe8a 	bl	8002ae0 <HAL_GetTick>
 8005dcc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005dce:	e00b      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005dd0:	f7fc fe86 	bl	8002ae0 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b64      	cmp	r3, #100	; 0x64
 8005ddc:	d904      	bls.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e0bb      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005de2:	bf00      	nop
 8005de4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005de8:	4b5e      	ldr	r3, [pc, #376]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005df0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005df4:	d0ec      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d009      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d02e      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d12a      	bne.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005e1e:	4b51      	ldr	r3, [pc, #324]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e24:	0c1b      	lsrs	r3, r3, #16
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e2c:	4b4d      	ldr	r3, [pc, #308]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e32:	0f1b      	lsrs	r3, r3, #28
 8005e34:	f003 0307 	and.w	r3, r3, #7
 8005e38:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	019a      	lsls	r2, r3, #6
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	041b      	lsls	r3, r3, #16
 8005e44:	431a      	orrs	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	061b      	lsls	r3, r3, #24
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	071b      	lsls	r3, r3, #28
 8005e52:	4944      	ldr	r1, [pc, #272]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005e5a:	4b42      	ldr	r3, [pc, #264]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e60:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	021b      	lsls	r3, r3, #8
 8005e6c:	493d      	ldr	r1, [pc, #244]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d022      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e88:	d11d      	bne.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e8a:	4b36      	ldr	r3, [pc, #216]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e90:	0e1b      	lsrs	r3, r3, #24
 8005e92:	f003 030f 	and.w	r3, r3, #15
 8005e96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e98:	4b32      	ldr	r3, [pc, #200]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e9e:	0f1b      	lsrs	r3, r3, #28
 8005ea0:	f003 0307 	and.w	r3, r3, #7
 8005ea4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	019a      	lsls	r2, r3, #6
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	041b      	lsls	r3, r3, #16
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	061b      	lsls	r3, r3, #24
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	071b      	lsls	r3, r3, #28
 8005ebe:	4929      	ldr	r1, [pc, #164]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0308 	and.w	r3, r3, #8
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d028      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ed2:	4b24      	ldr	r3, [pc, #144]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed8:	0e1b      	lsrs	r3, r3, #24
 8005eda:	f003 030f 	and.w	r3, r3, #15
 8005ede:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005ee0:	4b20      	ldr	r3, [pc, #128]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee6:	0c1b      	lsrs	r3, r3, #16
 8005ee8:	f003 0303 	and.w	r3, r3, #3
 8005eec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	019a      	lsls	r2, r3, #6
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	041b      	lsls	r3, r3, #16
 8005ef8:	431a      	orrs	r2, r3
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	061b      	lsls	r3, r3, #24
 8005efe:	431a      	orrs	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	69db      	ldr	r3, [r3, #28]
 8005f04:	071b      	lsls	r3, r3, #28
 8005f06:	4917      	ldr	r1, [pc, #92]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005f0e:	4b15      	ldr	r3, [pc, #84]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1c:	4911      	ldr	r1, [pc, #68]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005f24:	4b0f      	ldr	r3, [pc, #60]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a0e      	ldr	r2, [pc, #56]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f30:	f7fc fdd6 	bl	8002ae0 <HAL_GetTick>
 8005f34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f36:	e008      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005f38:	f7fc fdd2 	bl	8002ae0 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b64      	cmp	r3, #100	; 0x64
 8005f44:	d901      	bls.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e007      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f4a:	4b06      	ldr	r3, [pc, #24]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f56:	d1ef      	bne.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3720      	adds	r7, #32
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	40023800 	.word	0x40023800

08005f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e049      	b.n	800600e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d106      	bne.n	8005f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7fc fb48 	bl	8002624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	3304      	adds	r3, #4
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	4610      	mov	r0, r2
 8005fa8:	f000 fd30 	bl	8006a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
	...

08006018 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b01      	cmp	r3, #1
 800602a:	d001      	beq.n	8006030 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e054      	b.n	80060da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68da      	ldr	r2, [r3, #12]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f042 0201 	orr.w	r2, r2, #1
 8006046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a26      	ldr	r2, [pc, #152]	; (80060e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d022      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x80>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605a:	d01d      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x80>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a22      	ldr	r2, [pc, #136]	; (80060ec <HAL_TIM_Base_Start_IT+0xd4>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d018      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x80>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a21      	ldr	r2, [pc, #132]	; (80060f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d013      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x80>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a1f      	ldr	r2, [pc, #124]	; (80060f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d00e      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x80>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a1e      	ldr	r2, [pc, #120]	; (80060f8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d009      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x80>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a1c      	ldr	r2, [pc, #112]	; (80060fc <HAL_TIM_Base_Start_IT+0xe4>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d004      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x80>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a1b      	ldr	r2, [pc, #108]	; (8006100 <HAL_TIM_Base_Start_IT+0xe8>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d115      	bne.n	80060c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689a      	ldr	r2, [r3, #8]
 800609e:	4b19      	ldr	r3, [pc, #100]	; (8006104 <HAL_TIM_Base_Start_IT+0xec>)
 80060a0:	4013      	ands	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2b06      	cmp	r3, #6
 80060a8:	d015      	beq.n	80060d6 <HAL_TIM_Base_Start_IT+0xbe>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060b0:	d011      	beq.n	80060d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f042 0201 	orr.w	r2, r2, #1
 80060c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c2:	e008      	b.n	80060d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0201 	orr.w	r2, r2, #1
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	e000      	b.n	80060d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	40010000 	.word	0x40010000
 80060ec:	40000400 	.word	0x40000400
 80060f0:	40000800 	.word	0x40000800
 80060f4:	40000c00 	.word	0x40000c00
 80060f8:	40010400 	.word	0x40010400
 80060fc:	40014000 	.word	0x40014000
 8006100:	40001800 	.word	0x40001800
 8006104:	00010007 	.word	0x00010007

08006108 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e049      	b.n	80061ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d106      	bne.n	8006134 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f841 	bl	80061b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2202      	movs	r2, #2
 8006138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	3304      	adds	r3, #4
 8006144:	4619      	mov	r1, r3
 8006146:	4610      	mov	r0, r2
 8006148:	f000 fc60 	bl	8006a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b083      	sub	sp, #12
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061be:	bf00      	nop
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
	...

080061cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d109      	bne.n	80061f0 <HAL_TIM_PWM_Start+0x24>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	bf14      	ite	ne
 80061e8:	2301      	movne	r3, #1
 80061ea:	2300      	moveq	r3, #0
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	e03c      	b.n	800626a <HAL_TIM_PWM_Start+0x9e>
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d109      	bne.n	800620a <HAL_TIM_PWM_Start+0x3e>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b01      	cmp	r3, #1
 8006200:	bf14      	ite	ne
 8006202:	2301      	movne	r3, #1
 8006204:	2300      	moveq	r3, #0
 8006206:	b2db      	uxtb	r3, r3
 8006208:	e02f      	b.n	800626a <HAL_TIM_PWM_Start+0x9e>
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b08      	cmp	r3, #8
 800620e:	d109      	bne.n	8006224 <HAL_TIM_PWM_Start+0x58>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b01      	cmp	r3, #1
 800621a:	bf14      	ite	ne
 800621c:	2301      	movne	r3, #1
 800621e:	2300      	moveq	r3, #0
 8006220:	b2db      	uxtb	r3, r3
 8006222:	e022      	b.n	800626a <HAL_TIM_PWM_Start+0x9e>
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	2b0c      	cmp	r3, #12
 8006228:	d109      	bne.n	800623e <HAL_TIM_PWM_Start+0x72>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b01      	cmp	r3, #1
 8006234:	bf14      	ite	ne
 8006236:	2301      	movne	r3, #1
 8006238:	2300      	moveq	r3, #0
 800623a:	b2db      	uxtb	r3, r3
 800623c:	e015      	b.n	800626a <HAL_TIM_PWM_Start+0x9e>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b10      	cmp	r3, #16
 8006242:	d109      	bne.n	8006258 <HAL_TIM_PWM_Start+0x8c>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b01      	cmp	r3, #1
 800624e:	bf14      	ite	ne
 8006250:	2301      	movne	r3, #1
 8006252:	2300      	moveq	r3, #0
 8006254:	b2db      	uxtb	r3, r3
 8006256:	e008      	b.n	800626a <HAL_TIM_PWM_Start+0x9e>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b01      	cmp	r3, #1
 8006262:	bf14      	ite	ne
 8006264:	2301      	movne	r3, #1
 8006266:	2300      	moveq	r3, #0
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e092      	b.n	8006398 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d104      	bne.n	8006282 <HAL_TIM_PWM_Start+0xb6>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2202      	movs	r2, #2
 800627c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006280:	e023      	b.n	80062ca <HAL_TIM_PWM_Start+0xfe>
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b04      	cmp	r3, #4
 8006286:	d104      	bne.n	8006292 <HAL_TIM_PWM_Start+0xc6>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006290:	e01b      	b.n	80062ca <HAL_TIM_PWM_Start+0xfe>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2b08      	cmp	r3, #8
 8006296:	d104      	bne.n	80062a2 <HAL_TIM_PWM_Start+0xd6>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062a0:	e013      	b.n	80062ca <HAL_TIM_PWM_Start+0xfe>
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b0c      	cmp	r3, #12
 80062a6:	d104      	bne.n	80062b2 <HAL_TIM_PWM_Start+0xe6>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2202      	movs	r2, #2
 80062ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062b0:	e00b      	b.n	80062ca <HAL_TIM_PWM_Start+0xfe>
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b10      	cmp	r3, #16
 80062b6:	d104      	bne.n	80062c2 <HAL_TIM_PWM_Start+0xf6>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2202      	movs	r2, #2
 80062bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062c0:	e003      	b.n	80062ca <HAL_TIM_PWM_Start+0xfe>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2202      	movs	r2, #2
 80062c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2201      	movs	r2, #1
 80062d0:	6839      	ldr	r1, [r7, #0]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 ff32 	bl	800713c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a30      	ldr	r2, [pc, #192]	; (80063a0 <HAL_TIM_PWM_Start+0x1d4>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d004      	beq.n	80062ec <HAL_TIM_PWM_Start+0x120>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a2f      	ldr	r2, [pc, #188]	; (80063a4 <HAL_TIM_PWM_Start+0x1d8>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d101      	bne.n	80062f0 <HAL_TIM_PWM_Start+0x124>
 80062ec:	2301      	movs	r3, #1
 80062ee:	e000      	b.n	80062f2 <HAL_TIM_PWM_Start+0x126>
 80062f0:	2300      	movs	r3, #0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d007      	beq.n	8006306 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006304:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a25      	ldr	r2, [pc, #148]	; (80063a0 <HAL_TIM_PWM_Start+0x1d4>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d022      	beq.n	8006356 <HAL_TIM_PWM_Start+0x18a>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006318:	d01d      	beq.n	8006356 <HAL_TIM_PWM_Start+0x18a>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a22      	ldr	r2, [pc, #136]	; (80063a8 <HAL_TIM_PWM_Start+0x1dc>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d018      	beq.n	8006356 <HAL_TIM_PWM_Start+0x18a>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a20      	ldr	r2, [pc, #128]	; (80063ac <HAL_TIM_PWM_Start+0x1e0>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d013      	beq.n	8006356 <HAL_TIM_PWM_Start+0x18a>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a1f      	ldr	r2, [pc, #124]	; (80063b0 <HAL_TIM_PWM_Start+0x1e4>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d00e      	beq.n	8006356 <HAL_TIM_PWM_Start+0x18a>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a19      	ldr	r2, [pc, #100]	; (80063a4 <HAL_TIM_PWM_Start+0x1d8>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d009      	beq.n	8006356 <HAL_TIM_PWM_Start+0x18a>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a1b      	ldr	r2, [pc, #108]	; (80063b4 <HAL_TIM_PWM_Start+0x1e8>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d004      	beq.n	8006356 <HAL_TIM_PWM_Start+0x18a>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a19      	ldr	r2, [pc, #100]	; (80063b8 <HAL_TIM_PWM_Start+0x1ec>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d115      	bne.n	8006382 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	4b17      	ldr	r3, [pc, #92]	; (80063bc <HAL_TIM_PWM_Start+0x1f0>)
 800635e:	4013      	ands	r3, r2
 8006360:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b06      	cmp	r3, #6
 8006366:	d015      	beq.n	8006394 <HAL_TIM_PWM_Start+0x1c8>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800636e:	d011      	beq.n	8006394 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f042 0201 	orr.w	r2, r2, #1
 800637e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006380:	e008      	b.n	8006394 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f042 0201 	orr.w	r2, r2, #1
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	e000      	b.n	8006396 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006394:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	40010000 	.word	0x40010000
 80063a4:	40010400 	.word	0x40010400
 80063a8:	40000400 	.word	0x40000400
 80063ac:	40000800 	.word	0x40000800
 80063b0:	40000c00 	.word	0x40000c00
 80063b4:	40014000 	.word	0x40014000
 80063b8:	40001800 	.word	0x40001800
 80063bc:	00010007 	.word	0x00010007

080063c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	f003 0302 	and.w	r3, r3, #2
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d122      	bne.n	800641c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d11b      	bne.n	800641c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f06f 0202 	mvn.w	r2, #2
 80063ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	f003 0303 	and.w	r3, r3, #3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fae4 	bl	80069d0 <HAL_TIM_IC_CaptureCallback>
 8006408:	e005      	b.n	8006416 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fad6 	bl	80069bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fae7 	bl	80069e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	f003 0304 	and.w	r3, r3, #4
 8006426:	2b04      	cmp	r3, #4
 8006428:	d122      	bne.n	8006470 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f003 0304 	and.w	r3, r3, #4
 8006434:	2b04      	cmp	r3, #4
 8006436:	d11b      	bne.n	8006470 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f06f 0204 	mvn.w	r2, #4
 8006440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2202      	movs	r2, #2
 8006446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 faba 	bl	80069d0 <HAL_TIM_IC_CaptureCallback>
 800645c:	e005      	b.n	800646a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 faac 	bl	80069bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fabd 	bl	80069e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f003 0308 	and.w	r3, r3, #8
 800647a:	2b08      	cmp	r3, #8
 800647c:	d122      	bne.n	80064c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f003 0308 	and.w	r3, r3, #8
 8006488:	2b08      	cmp	r3, #8
 800648a:	d11b      	bne.n	80064c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f06f 0208 	mvn.w	r2, #8
 8006494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2204      	movs	r2, #4
 800649a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	f003 0303 	and.w	r3, r3, #3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fa90 	bl	80069d0 <HAL_TIM_IC_CaptureCallback>
 80064b0:	e005      	b.n	80064be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fa82 	bl	80069bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 fa93 	bl	80069e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	f003 0310 	and.w	r3, r3, #16
 80064ce:	2b10      	cmp	r3, #16
 80064d0:	d122      	bne.n	8006518 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f003 0310 	and.w	r3, r3, #16
 80064dc:	2b10      	cmp	r3, #16
 80064de:	d11b      	bne.n	8006518 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f06f 0210 	mvn.w	r2, #16
 80064e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2208      	movs	r2, #8
 80064ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d003      	beq.n	8006506 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fa66 	bl	80069d0 <HAL_TIM_IC_CaptureCallback>
 8006504:	e005      	b.n	8006512 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fa58 	bl	80069bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 fa69 	bl	80069e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b01      	cmp	r3, #1
 8006524:	d10e      	bne.n	8006544 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	2b01      	cmp	r3, #1
 8006532:	d107      	bne.n	8006544 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f06f 0201 	mvn.w	r2, #1
 800653c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7fb ff78 	bl	8002434 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800654e:	2b80      	cmp	r3, #128	; 0x80
 8006550:	d10e      	bne.n	8006570 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800655c:	2b80      	cmp	r3, #128	; 0x80
 800655e:	d107      	bne.n	8006570 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fea4 	bl	80072b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800657e:	d10e      	bne.n	800659e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800658a:	2b80      	cmp	r3, #128	; 0x80
 800658c:	d107      	bne.n	800659e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fe97 	bl	80072cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a8:	2b40      	cmp	r3, #64	; 0x40
 80065aa:	d10e      	bne.n	80065ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b6:	2b40      	cmp	r3, #64	; 0x40
 80065b8:	d107      	bne.n	80065ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 fa17 	bl	80069f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	f003 0320 	and.w	r3, r3, #32
 80065d4:	2b20      	cmp	r3, #32
 80065d6:	d10e      	bne.n	80065f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	f003 0320 	and.w	r3, r3, #32
 80065e2:	2b20      	cmp	r3, #32
 80065e4:	d107      	bne.n	80065f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f06f 0220 	mvn.w	r2, #32
 80065ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 fe57 	bl	80072a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065f6:	bf00      	nop
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
	...

08006600 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800660c:	2300      	movs	r3, #0
 800660e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006616:	2b01      	cmp	r3, #1
 8006618:	d101      	bne.n	800661e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800661a:	2302      	movs	r3, #2
 800661c:	e0ff      	b.n	800681e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2b14      	cmp	r3, #20
 800662a:	f200 80f0 	bhi.w	800680e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800662e:	a201      	add	r2, pc, #4	; (adr r2, 8006634 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006634:	08006689 	.word	0x08006689
 8006638:	0800680f 	.word	0x0800680f
 800663c:	0800680f 	.word	0x0800680f
 8006640:	0800680f 	.word	0x0800680f
 8006644:	080066c9 	.word	0x080066c9
 8006648:	0800680f 	.word	0x0800680f
 800664c:	0800680f 	.word	0x0800680f
 8006650:	0800680f 	.word	0x0800680f
 8006654:	0800670b 	.word	0x0800670b
 8006658:	0800680f 	.word	0x0800680f
 800665c:	0800680f 	.word	0x0800680f
 8006660:	0800680f 	.word	0x0800680f
 8006664:	0800674b 	.word	0x0800674b
 8006668:	0800680f 	.word	0x0800680f
 800666c:	0800680f 	.word	0x0800680f
 8006670:	0800680f 	.word	0x0800680f
 8006674:	0800678d 	.word	0x0800678d
 8006678:	0800680f 	.word	0x0800680f
 800667c:	0800680f 	.word	0x0800680f
 8006680:	0800680f 	.word	0x0800680f
 8006684:	080067cd 	.word	0x080067cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68b9      	ldr	r1, [r7, #8]
 800668e:	4618      	mov	r0, r3
 8006690:	f000 fa5c 	bl	8006b4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	699a      	ldr	r2, [r3, #24]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f042 0208 	orr.w	r2, r2, #8
 80066a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	699a      	ldr	r2, [r3, #24]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f022 0204 	bic.w	r2, r2, #4
 80066b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6999      	ldr	r1, [r3, #24]
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	691a      	ldr	r2, [r3, #16]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	619a      	str	r2, [r3, #24]
      break;
 80066c6:	e0a5      	b.n	8006814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68b9      	ldr	r1, [r7, #8]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 faae 	bl	8006c30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	699a      	ldr	r2, [r3, #24]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699a      	ldr	r2, [r3, #24]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6999      	ldr	r1, [r3, #24]
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	021a      	lsls	r2, r3, #8
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	430a      	orrs	r2, r1
 8006706:	619a      	str	r2, [r3, #24]
      break;
 8006708:	e084      	b.n	8006814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68b9      	ldr	r1, [r7, #8]
 8006710:	4618      	mov	r0, r3
 8006712:	f000 fb05 	bl	8006d20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	69da      	ldr	r2, [r3, #28]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f042 0208 	orr.w	r2, r2, #8
 8006724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	69da      	ldr	r2, [r3, #28]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0204 	bic.w	r2, r2, #4
 8006734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69d9      	ldr	r1, [r3, #28]
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	691a      	ldr	r2, [r3, #16]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	430a      	orrs	r2, r1
 8006746:	61da      	str	r2, [r3, #28]
      break;
 8006748:	e064      	b.n	8006814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68b9      	ldr	r1, [r7, #8]
 8006750:	4618      	mov	r0, r3
 8006752:	f000 fb5b 	bl	8006e0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	69da      	ldr	r2, [r3, #28]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	69da      	ldr	r2, [r3, #28]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69d9      	ldr	r1, [r3, #28]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	021a      	lsls	r2, r3, #8
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	61da      	str	r2, [r3, #28]
      break;
 800678a:	e043      	b.n	8006814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68b9      	ldr	r1, [r7, #8]
 8006792:	4618      	mov	r0, r3
 8006794:	f000 fb92 	bl	8006ebc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 0208 	orr.w	r2, r2, #8
 80067a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f022 0204 	bic.w	r2, r2, #4
 80067b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	691a      	ldr	r2, [r3, #16]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067ca:	e023      	b.n	8006814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68b9      	ldr	r1, [r7, #8]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 fbc4 	bl	8006f60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	021a      	lsls	r2, r3, #8
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	430a      	orrs	r2, r1
 800680a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800680c:	e002      	b.n	8006814 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	75fb      	strb	r3, [r7, #23]
      break;
 8006812:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800681c:	7dfb      	ldrb	r3, [r7, #23]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop

08006828 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006832:	2300      	movs	r3, #0
 8006834:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800683c:	2b01      	cmp	r3, #1
 800683e:	d101      	bne.n	8006844 <HAL_TIM_ConfigClockSource+0x1c>
 8006840:	2302      	movs	r3, #2
 8006842:	e0b4      	b.n	80069ae <HAL_TIM_ConfigClockSource+0x186>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2202      	movs	r2, #2
 8006850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	4b56      	ldr	r3, [pc, #344]	; (80069b8 <HAL_TIM_ConfigClockSource+0x190>)
 8006860:	4013      	ands	r3, r2
 8006862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800686a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800687c:	d03e      	beq.n	80068fc <HAL_TIM_ConfigClockSource+0xd4>
 800687e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006882:	f200 8087 	bhi.w	8006994 <HAL_TIM_ConfigClockSource+0x16c>
 8006886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800688a:	f000 8086 	beq.w	800699a <HAL_TIM_ConfigClockSource+0x172>
 800688e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006892:	d87f      	bhi.n	8006994 <HAL_TIM_ConfigClockSource+0x16c>
 8006894:	2b70      	cmp	r3, #112	; 0x70
 8006896:	d01a      	beq.n	80068ce <HAL_TIM_ConfigClockSource+0xa6>
 8006898:	2b70      	cmp	r3, #112	; 0x70
 800689a:	d87b      	bhi.n	8006994 <HAL_TIM_ConfigClockSource+0x16c>
 800689c:	2b60      	cmp	r3, #96	; 0x60
 800689e:	d050      	beq.n	8006942 <HAL_TIM_ConfigClockSource+0x11a>
 80068a0:	2b60      	cmp	r3, #96	; 0x60
 80068a2:	d877      	bhi.n	8006994 <HAL_TIM_ConfigClockSource+0x16c>
 80068a4:	2b50      	cmp	r3, #80	; 0x50
 80068a6:	d03c      	beq.n	8006922 <HAL_TIM_ConfigClockSource+0xfa>
 80068a8:	2b50      	cmp	r3, #80	; 0x50
 80068aa:	d873      	bhi.n	8006994 <HAL_TIM_ConfigClockSource+0x16c>
 80068ac:	2b40      	cmp	r3, #64	; 0x40
 80068ae:	d058      	beq.n	8006962 <HAL_TIM_ConfigClockSource+0x13a>
 80068b0:	2b40      	cmp	r3, #64	; 0x40
 80068b2:	d86f      	bhi.n	8006994 <HAL_TIM_ConfigClockSource+0x16c>
 80068b4:	2b30      	cmp	r3, #48	; 0x30
 80068b6:	d064      	beq.n	8006982 <HAL_TIM_ConfigClockSource+0x15a>
 80068b8:	2b30      	cmp	r3, #48	; 0x30
 80068ba:	d86b      	bhi.n	8006994 <HAL_TIM_ConfigClockSource+0x16c>
 80068bc:	2b20      	cmp	r3, #32
 80068be:	d060      	beq.n	8006982 <HAL_TIM_ConfigClockSource+0x15a>
 80068c0:	2b20      	cmp	r3, #32
 80068c2:	d867      	bhi.n	8006994 <HAL_TIM_ConfigClockSource+0x16c>
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d05c      	beq.n	8006982 <HAL_TIM_ConfigClockSource+0x15a>
 80068c8:	2b10      	cmp	r3, #16
 80068ca:	d05a      	beq.n	8006982 <HAL_TIM_ConfigClockSource+0x15a>
 80068cc:	e062      	b.n	8006994 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068de:	f000 fc0d 	bl	80070fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	609a      	str	r2, [r3, #8]
      break;
 80068fa:	e04f      	b.n	800699c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800690c:	f000 fbf6 	bl	80070fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689a      	ldr	r2, [r3, #8]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800691e:	609a      	str	r2, [r3, #8]
      break;
 8006920:	e03c      	b.n	800699c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800692e:	461a      	mov	r2, r3
 8006930:	f000 fb6a 	bl	8007008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2150      	movs	r1, #80	; 0x50
 800693a:	4618      	mov	r0, r3
 800693c:	f000 fbc3 	bl	80070c6 <TIM_ITRx_SetConfig>
      break;
 8006940:	e02c      	b.n	800699c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800694e:	461a      	mov	r2, r3
 8006950:	f000 fb89 	bl	8007066 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2160      	movs	r1, #96	; 0x60
 800695a:	4618      	mov	r0, r3
 800695c:	f000 fbb3 	bl	80070c6 <TIM_ITRx_SetConfig>
      break;
 8006960:	e01c      	b.n	800699c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800696e:	461a      	mov	r2, r3
 8006970:	f000 fb4a 	bl	8007008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2140      	movs	r1, #64	; 0x40
 800697a:	4618      	mov	r0, r3
 800697c:	f000 fba3 	bl	80070c6 <TIM_ITRx_SetConfig>
      break;
 8006980:	e00c      	b.n	800699c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4619      	mov	r1, r3
 800698c:	4610      	mov	r0, r2
 800698e:	f000 fb9a 	bl	80070c6 <TIM_ITRx_SetConfig>
      break;
 8006992:	e003      	b.n	800699c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	73fb      	strb	r3, [r7, #15]
      break;
 8006998:	e000      	b.n	800699c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800699a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	fffeff88 	.word	0xfffeff88

080069bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a40      	ldr	r2, [pc, #256]	; (8006b20 <TIM_Base_SetConfig+0x114>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d013      	beq.n	8006a4c <TIM_Base_SetConfig+0x40>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a2a:	d00f      	beq.n	8006a4c <TIM_Base_SetConfig+0x40>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a3d      	ldr	r2, [pc, #244]	; (8006b24 <TIM_Base_SetConfig+0x118>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d00b      	beq.n	8006a4c <TIM_Base_SetConfig+0x40>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a3c      	ldr	r2, [pc, #240]	; (8006b28 <TIM_Base_SetConfig+0x11c>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d007      	beq.n	8006a4c <TIM_Base_SetConfig+0x40>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a3b      	ldr	r2, [pc, #236]	; (8006b2c <TIM_Base_SetConfig+0x120>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d003      	beq.n	8006a4c <TIM_Base_SetConfig+0x40>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a3a      	ldr	r2, [pc, #232]	; (8006b30 <TIM_Base_SetConfig+0x124>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d108      	bne.n	8006a5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a2f      	ldr	r2, [pc, #188]	; (8006b20 <TIM_Base_SetConfig+0x114>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d02b      	beq.n	8006abe <TIM_Base_SetConfig+0xb2>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a6c:	d027      	beq.n	8006abe <TIM_Base_SetConfig+0xb2>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a2c      	ldr	r2, [pc, #176]	; (8006b24 <TIM_Base_SetConfig+0x118>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d023      	beq.n	8006abe <TIM_Base_SetConfig+0xb2>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a2b      	ldr	r2, [pc, #172]	; (8006b28 <TIM_Base_SetConfig+0x11c>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d01f      	beq.n	8006abe <TIM_Base_SetConfig+0xb2>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a2a      	ldr	r2, [pc, #168]	; (8006b2c <TIM_Base_SetConfig+0x120>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d01b      	beq.n	8006abe <TIM_Base_SetConfig+0xb2>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a29      	ldr	r2, [pc, #164]	; (8006b30 <TIM_Base_SetConfig+0x124>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d017      	beq.n	8006abe <TIM_Base_SetConfig+0xb2>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a28      	ldr	r2, [pc, #160]	; (8006b34 <TIM_Base_SetConfig+0x128>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d013      	beq.n	8006abe <TIM_Base_SetConfig+0xb2>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a27      	ldr	r2, [pc, #156]	; (8006b38 <TIM_Base_SetConfig+0x12c>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d00f      	beq.n	8006abe <TIM_Base_SetConfig+0xb2>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a26      	ldr	r2, [pc, #152]	; (8006b3c <TIM_Base_SetConfig+0x130>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d00b      	beq.n	8006abe <TIM_Base_SetConfig+0xb2>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a25      	ldr	r2, [pc, #148]	; (8006b40 <TIM_Base_SetConfig+0x134>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d007      	beq.n	8006abe <TIM_Base_SetConfig+0xb2>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a24      	ldr	r2, [pc, #144]	; (8006b44 <TIM_Base_SetConfig+0x138>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d003      	beq.n	8006abe <TIM_Base_SetConfig+0xb2>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a23      	ldr	r2, [pc, #140]	; (8006b48 <TIM_Base_SetConfig+0x13c>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d108      	bne.n	8006ad0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	689a      	ldr	r2, [r3, #8]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a0a      	ldr	r2, [pc, #40]	; (8006b20 <TIM_Base_SetConfig+0x114>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d003      	beq.n	8006b04 <TIM_Base_SetConfig+0xf8>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a0c      	ldr	r2, [pc, #48]	; (8006b30 <TIM_Base_SetConfig+0x124>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d103      	bne.n	8006b0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	691a      	ldr	r2, [r3, #16]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	615a      	str	r2, [r3, #20]
}
 8006b12:	bf00      	nop
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	40010000 	.word	0x40010000
 8006b24:	40000400 	.word	0x40000400
 8006b28:	40000800 	.word	0x40000800
 8006b2c:	40000c00 	.word	0x40000c00
 8006b30:	40010400 	.word	0x40010400
 8006b34:	40014000 	.word	0x40014000
 8006b38:	40014400 	.word	0x40014400
 8006b3c:	40014800 	.word	0x40014800
 8006b40:	40001800 	.word	0x40001800
 8006b44:	40001c00 	.word	0x40001c00
 8006b48:	40002000 	.word	0x40002000

08006b4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b087      	sub	sp, #28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	f023 0201 	bic.w	r2, r3, #1
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	4b2b      	ldr	r3, [pc, #172]	; (8006c24 <TIM_OC1_SetConfig+0xd8>)
 8006b78:	4013      	ands	r3, r2
 8006b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f023 0303 	bic.w	r3, r3, #3
 8006b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f023 0302 	bic.w	r3, r3, #2
 8006b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a21      	ldr	r2, [pc, #132]	; (8006c28 <TIM_OC1_SetConfig+0xdc>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d003      	beq.n	8006bb0 <TIM_OC1_SetConfig+0x64>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a20      	ldr	r2, [pc, #128]	; (8006c2c <TIM_OC1_SetConfig+0xe0>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d10c      	bne.n	8006bca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	f023 0308 	bic.w	r3, r3, #8
 8006bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	f023 0304 	bic.w	r3, r3, #4
 8006bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a16      	ldr	r2, [pc, #88]	; (8006c28 <TIM_OC1_SetConfig+0xdc>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d003      	beq.n	8006bda <TIM_OC1_SetConfig+0x8e>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a15      	ldr	r2, [pc, #84]	; (8006c2c <TIM_OC1_SetConfig+0xe0>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d111      	bne.n	8006bfe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	621a      	str	r2, [r3, #32]
}
 8006c18:	bf00      	nop
 8006c1a:	371c      	adds	r7, #28
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	fffeff8f 	.word	0xfffeff8f
 8006c28:	40010000 	.word	0x40010000
 8006c2c:	40010400 	.word	0x40010400

08006c30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b087      	sub	sp, #28
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	f023 0210 	bic.w	r2, r3, #16
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a1b      	ldr	r3, [r3, #32]
 8006c4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	4b2e      	ldr	r3, [pc, #184]	; (8006d14 <TIM_OC2_SetConfig+0xe4>)
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	021b      	lsls	r3, r3, #8
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f023 0320 	bic.w	r3, r3, #32
 8006c7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	011b      	lsls	r3, r3, #4
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a23      	ldr	r2, [pc, #140]	; (8006d18 <TIM_OC2_SetConfig+0xe8>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d003      	beq.n	8006c98 <TIM_OC2_SetConfig+0x68>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a22      	ldr	r2, [pc, #136]	; (8006d1c <TIM_OC2_SetConfig+0xec>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d10d      	bne.n	8006cb4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	011b      	lsls	r3, r3, #4
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a18      	ldr	r2, [pc, #96]	; (8006d18 <TIM_OC2_SetConfig+0xe8>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d003      	beq.n	8006cc4 <TIM_OC2_SetConfig+0x94>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a17      	ldr	r2, [pc, #92]	; (8006d1c <TIM_OC2_SetConfig+0xec>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d113      	bne.n	8006cec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	695b      	ldr	r3, [r3, #20]
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	621a      	str	r2, [r3, #32]
}
 8006d06:	bf00      	nop
 8006d08:	371c      	adds	r7, #28
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	feff8fff 	.word	0xfeff8fff
 8006d18:	40010000 	.word	0x40010000
 8006d1c:	40010400 	.word	0x40010400

08006d20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	4b2d      	ldr	r3, [pc, #180]	; (8006e00 <TIM_OC3_SetConfig+0xe0>)
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f023 0303 	bic.w	r3, r3, #3
 8006d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	021b      	lsls	r3, r3, #8
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a22      	ldr	r2, [pc, #136]	; (8006e04 <TIM_OC3_SetConfig+0xe4>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d003      	beq.n	8006d86 <TIM_OC3_SetConfig+0x66>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a21      	ldr	r2, [pc, #132]	; (8006e08 <TIM_OC3_SetConfig+0xe8>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d10d      	bne.n	8006da2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	021b      	lsls	r3, r3, #8
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006da0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a17      	ldr	r2, [pc, #92]	; (8006e04 <TIM_OC3_SetConfig+0xe4>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d003      	beq.n	8006db2 <TIM_OC3_SetConfig+0x92>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a16      	ldr	r2, [pc, #88]	; (8006e08 <TIM_OC3_SetConfig+0xe8>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d113      	bne.n	8006dda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	011b      	lsls	r3, r3, #4
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	011b      	lsls	r3, r3, #4
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	621a      	str	r2, [r3, #32]
}
 8006df4:	bf00      	nop
 8006df6:	371c      	adds	r7, #28
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	fffeff8f 	.word	0xfffeff8f
 8006e04:	40010000 	.word	0x40010000
 8006e08:	40010400 	.word	0x40010400

08006e0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b087      	sub	sp, #28
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	4b1e      	ldr	r3, [pc, #120]	; (8006eb0 <TIM_OC4_SetConfig+0xa4>)
 8006e38:	4013      	ands	r3, r2
 8006e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	021b      	lsls	r3, r3, #8
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	031b      	lsls	r3, r3, #12
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a13      	ldr	r2, [pc, #76]	; (8006eb4 <TIM_OC4_SetConfig+0xa8>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d003      	beq.n	8006e74 <TIM_OC4_SetConfig+0x68>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a12      	ldr	r2, [pc, #72]	; (8006eb8 <TIM_OC4_SetConfig+0xac>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d109      	bne.n	8006e88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	019b      	lsls	r3, r3, #6
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	685a      	ldr	r2, [r3, #4]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	621a      	str	r2, [r3, #32]
}
 8006ea2:	bf00      	nop
 8006ea4:	371c      	adds	r7, #28
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	feff8fff 	.word	0xfeff8fff
 8006eb4:	40010000 	.word	0x40010000
 8006eb8:	40010400 	.word	0x40010400

08006ebc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	4b1b      	ldr	r3, [pc, #108]	; (8006f54 <TIM_OC5_SetConfig+0x98>)
 8006ee8:	4013      	ands	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006efc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	041b      	lsls	r3, r3, #16
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a12      	ldr	r2, [pc, #72]	; (8006f58 <TIM_OC5_SetConfig+0x9c>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d003      	beq.n	8006f1a <TIM_OC5_SetConfig+0x5e>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a11      	ldr	r2, [pc, #68]	; (8006f5c <TIM_OC5_SetConfig+0xa0>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d109      	bne.n	8006f2e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	021b      	lsls	r3, r3, #8
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	621a      	str	r2, [r3, #32]
}
 8006f48:	bf00      	nop
 8006f4a:	371c      	adds	r7, #28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	fffeff8f 	.word	0xfffeff8f
 8006f58:	40010000 	.word	0x40010000
 8006f5c:	40010400 	.word	0x40010400

08006f60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	4b1c      	ldr	r3, [pc, #112]	; (8006ffc <TIM_OC6_SetConfig+0x9c>)
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	021b      	lsls	r3, r3, #8
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	051b      	lsls	r3, r3, #20
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a13      	ldr	r2, [pc, #76]	; (8007000 <TIM_OC6_SetConfig+0xa0>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d003      	beq.n	8006fc0 <TIM_OC6_SetConfig+0x60>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a12      	ldr	r2, [pc, #72]	; (8007004 <TIM_OC6_SetConfig+0xa4>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d109      	bne.n	8006fd4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	695b      	ldr	r3, [r3, #20]
 8006fcc:	029b      	lsls	r3, r3, #10
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	685a      	ldr	r2, [r3, #4]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	621a      	str	r2, [r3, #32]
}
 8006fee:	bf00      	nop
 8006ff0:	371c      	adds	r7, #28
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	feff8fff 	.word	0xfeff8fff
 8007000:	40010000 	.word	0x40010000
 8007004:	40010400 	.word	0x40010400

08007008 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6a1b      	ldr	r3, [r3, #32]
 8007018:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	f023 0201 	bic.w	r2, r3, #1
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	011b      	lsls	r3, r3, #4
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	4313      	orrs	r3, r2
 800703c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	f023 030a 	bic.w	r3, r3, #10
 8007044:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	4313      	orrs	r3, r2
 800704c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	621a      	str	r2, [r3, #32]
}
 800705a:	bf00      	nop
 800705c:	371c      	adds	r7, #28
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007066:	b480      	push	{r7}
 8007068:	b087      	sub	sp, #28
 800706a:	af00      	add	r7, sp, #0
 800706c:	60f8      	str	r0, [r7, #12]
 800706e:	60b9      	str	r1, [r7, #8]
 8007070:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	f023 0210 	bic.w	r2, r3, #16
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6a1b      	ldr	r3, [r3, #32]
 8007088:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007090:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	031b      	lsls	r3, r3, #12
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	4313      	orrs	r3, r2
 800709a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	011b      	lsls	r3, r3, #4
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	621a      	str	r2, [r3, #32]
}
 80070ba:	bf00      	nop
 80070bc:	371c      	adds	r7, #28
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b085      	sub	sp, #20
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
 80070ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	f043 0307 	orr.w	r3, r3, #7
 80070e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	609a      	str	r2, [r3, #8]
}
 80070f0:	bf00      	nop
 80070f2:	3714      	adds	r7, #20
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b087      	sub	sp, #28
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
 8007108:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007116:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	021a      	lsls	r2, r3, #8
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	431a      	orrs	r2, r3
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	4313      	orrs	r3, r2
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	4313      	orrs	r3, r2
 8007128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	609a      	str	r2, [r3, #8]
}
 8007130:	bf00      	nop
 8007132:	371c      	adds	r7, #28
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800713c:	b480      	push	{r7}
 800713e:	b087      	sub	sp, #28
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	f003 031f 	and.w	r3, r3, #31
 800714e:	2201      	movs	r2, #1
 8007150:	fa02 f303 	lsl.w	r3, r2, r3
 8007154:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6a1a      	ldr	r2, [r3, #32]
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	43db      	mvns	r3, r3
 800715e:	401a      	ands	r2, r3
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6a1a      	ldr	r2, [r3, #32]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	f003 031f 	and.w	r3, r3, #31
 800716e:	6879      	ldr	r1, [r7, #4]
 8007170:	fa01 f303 	lsl.w	r3, r1, r3
 8007174:	431a      	orrs	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	621a      	str	r2, [r3, #32]
}
 800717a:	bf00      	nop
 800717c:	371c      	adds	r7, #28
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
	...

08007188 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007198:	2b01      	cmp	r3, #1
 800719a:	d101      	bne.n	80071a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800719c:	2302      	movs	r3, #2
 800719e:	e06d      	b.n	800727c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2202      	movs	r2, #2
 80071ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a30      	ldr	r2, [pc, #192]	; (8007288 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d004      	beq.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a2f      	ldr	r2, [pc, #188]	; (800728c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d108      	bne.n	80071e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80071da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a20      	ldr	r2, [pc, #128]	; (8007288 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d022      	beq.n	8007250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007212:	d01d      	beq.n	8007250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a1d      	ldr	r2, [pc, #116]	; (8007290 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d018      	beq.n	8007250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a1c      	ldr	r2, [pc, #112]	; (8007294 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d013      	beq.n	8007250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a1a      	ldr	r2, [pc, #104]	; (8007298 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d00e      	beq.n	8007250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a15      	ldr	r2, [pc, #84]	; (800728c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d009      	beq.n	8007250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a16      	ldr	r2, [pc, #88]	; (800729c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d004      	beq.n	8007250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a15      	ldr	r2, [pc, #84]	; (80072a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d10c      	bne.n	800726a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007256:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	4313      	orrs	r3, r2
 8007260:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr
 8007288:	40010000 	.word	0x40010000
 800728c:	40010400 	.word	0x40010400
 8007290:	40000400 	.word	0x40000400
 8007294:	40000800 	.word	0x40000800
 8007298:	40000c00 	.word	0x40000c00
 800729c:	40014000 	.word	0x40014000
 80072a0:	40001800 	.word	0x40001800

080072a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d101      	bne.n	80072f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e040      	b.n	8007374 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d106      	bne.n	8007308 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7fb fa56 	bl	80027b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2224      	movs	r2, #36	; 0x24
 800730c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0201 	bic.w	r2, r2, #1
 800731c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f82c 	bl	800737c <UART_SetConfig>
 8007324:	4603      	mov	r3, r0
 8007326:	2b01      	cmp	r3, #1
 8007328:	d101      	bne.n	800732e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e022      	b.n	8007374 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007332:	2b00      	cmp	r3, #0
 8007334:	d002      	beq.n	800733c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fa84 	bl	8007844 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800734a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689a      	ldr	r2, [r3, #8]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800735a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f042 0201 	orr.w	r2, r2, #1
 800736a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fb0b 	bl	8007988 <UART_CheckIdleState>
 8007372:	4603      	mov	r3, r0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b088      	sub	sp, #32
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007384:	2300      	movs	r3, #0
 8007386:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	689a      	ldr	r2, [r3, #8]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	431a      	orrs	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	431a      	orrs	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	69db      	ldr	r3, [r3, #28]
 800739c:	4313      	orrs	r3, r2
 800739e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	4ba6      	ldr	r3, [pc, #664]	; (8007640 <UART_SetConfig+0x2c4>)
 80073a8:	4013      	ands	r3, r2
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	6812      	ldr	r2, [r2, #0]
 80073ae:	6979      	ldr	r1, [r7, #20]
 80073b0:	430b      	orrs	r3, r1
 80073b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68da      	ldr	r2, [r3, #12]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a1b      	ldr	r3, [r3, #32]
 80073d4:	697a      	ldr	r2, [r7, #20]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	430a      	orrs	r2, r1
 80073ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a94      	ldr	r2, [pc, #592]	; (8007644 <UART_SetConfig+0x2c8>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d120      	bne.n	800743a <UART_SetConfig+0xbe>
 80073f8:	4b93      	ldr	r3, [pc, #588]	; (8007648 <UART_SetConfig+0x2cc>)
 80073fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073fe:	f003 0303 	and.w	r3, r3, #3
 8007402:	2b03      	cmp	r3, #3
 8007404:	d816      	bhi.n	8007434 <UART_SetConfig+0xb8>
 8007406:	a201      	add	r2, pc, #4	; (adr r2, 800740c <UART_SetConfig+0x90>)
 8007408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740c:	0800741d 	.word	0x0800741d
 8007410:	08007429 	.word	0x08007429
 8007414:	08007423 	.word	0x08007423
 8007418:	0800742f 	.word	0x0800742f
 800741c:	2301      	movs	r3, #1
 800741e:	77fb      	strb	r3, [r7, #31]
 8007420:	e150      	b.n	80076c4 <UART_SetConfig+0x348>
 8007422:	2302      	movs	r3, #2
 8007424:	77fb      	strb	r3, [r7, #31]
 8007426:	e14d      	b.n	80076c4 <UART_SetConfig+0x348>
 8007428:	2304      	movs	r3, #4
 800742a:	77fb      	strb	r3, [r7, #31]
 800742c:	e14a      	b.n	80076c4 <UART_SetConfig+0x348>
 800742e:	2308      	movs	r3, #8
 8007430:	77fb      	strb	r3, [r7, #31]
 8007432:	e147      	b.n	80076c4 <UART_SetConfig+0x348>
 8007434:	2310      	movs	r3, #16
 8007436:	77fb      	strb	r3, [r7, #31]
 8007438:	e144      	b.n	80076c4 <UART_SetConfig+0x348>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a83      	ldr	r2, [pc, #524]	; (800764c <UART_SetConfig+0x2d0>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d132      	bne.n	80074aa <UART_SetConfig+0x12e>
 8007444:	4b80      	ldr	r3, [pc, #512]	; (8007648 <UART_SetConfig+0x2cc>)
 8007446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800744a:	f003 030c 	and.w	r3, r3, #12
 800744e:	2b0c      	cmp	r3, #12
 8007450:	d828      	bhi.n	80074a4 <UART_SetConfig+0x128>
 8007452:	a201      	add	r2, pc, #4	; (adr r2, 8007458 <UART_SetConfig+0xdc>)
 8007454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007458:	0800748d 	.word	0x0800748d
 800745c:	080074a5 	.word	0x080074a5
 8007460:	080074a5 	.word	0x080074a5
 8007464:	080074a5 	.word	0x080074a5
 8007468:	08007499 	.word	0x08007499
 800746c:	080074a5 	.word	0x080074a5
 8007470:	080074a5 	.word	0x080074a5
 8007474:	080074a5 	.word	0x080074a5
 8007478:	08007493 	.word	0x08007493
 800747c:	080074a5 	.word	0x080074a5
 8007480:	080074a5 	.word	0x080074a5
 8007484:	080074a5 	.word	0x080074a5
 8007488:	0800749f 	.word	0x0800749f
 800748c:	2300      	movs	r3, #0
 800748e:	77fb      	strb	r3, [r7, #31]
 8007490:	e118      	b.n	80076c4 <UART_SetConfig+0x348>
 8007492:	2302      	movs	r3, #2
 8007494:	77fb      	strb	r3, [r7, #31]
 8007496:	e115      	b.n	80076c4 <UART_SetConfig+0x348>
 8007498:	2304      	movs	r3, #4
 800749a:	77fb      	strb	r3, [r7, #31]
 800749c:	e112      	b.n	80076c4 <UART_SetConfig+0x348>
 800749e:	2308      	movs	r3, #8
 80074a0:	77fb      	strb	r3, [r7, #31]
 80074a2:	e10f      	b.n	80076c4 <UART_SetConfig+0x348>
 80074a4:	2310      	movs	r3, #16
 80074a6:	77fb      	strb	r3, [r7, #31]
 80074a8:	e10c      	b.n	80076c4 <UART_SetConfig+0x348>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a68      	ldr	r2, [pc, #416]	; (8007650 <UART_SetConfig+0x2d4>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d120      	bne.n	80074f6 <UART_SetConfig+0x17a>
 80074b4:	4b64      	ldr	r3, [pc, #400]	; (8007648 <UART_SetConfig+0x2cc>)
 80074b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80074be:	2b30      	cmp	r3, #48	; 0x30
 80074c0:	d013      	beq.n	80074ea <UART_SetConfig+0x16e>
 80074c2:	2b30      	cmp	r3, #48	; 0x30
 80074c4:	d814      	bhi.n	80074f0 <UART_SetConfig+0x174>
 80074c6:	2b20      	cmp	r3, #32
 80074c8:	d009      	beq.n	80074de <UART_SetConfig+0x162>
 80074ca:	2b20      	cmp	r3, #32
 80074cc:	d810      	bhi.n	80074f0 <UART_SetConfig+0x174>
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d002      	beq.n	80074d8 <UART_SetConfig+0x15c>
 80074d2:	2b10      	cmp	r3, #16
 80074d4:	d006      	beq.n	80074e4 <UART_SetConfig+0x168>
 80074d6:	e00b      	b.n	80074f0 <UART_SetConfig+0x174>
 80074d8:	2300      	movs	r3, #0
 80074da:	77fb      	strb	r3, [r7, #31]
 80074dc:	e0f2      	b.n	80076c4 <UART_SetConfig+0x348>
 80074de:	2302      	movs	r3, #2
 80074e0:	77fb      	strb	r3, [r7, #31]
 80074e2:	e0ef      	b.n	80076c4 <UART_SetConfig+0x348>
 80074e4:	2304      	movs	r3, #4
 80074e6:	77fb      	strb	r3, [r7, #31]
 80074e8:	e0ec      	b.n	80076c4 <UART_SetConfig+0x348>
 80074ea:	2308      	movs	r3, #8
 80074ec:	77fb      	strb	r3, [r7, #31]
 80074ee:	e0e9      	b.n	80076c4 <UART_SetConfig+0x348>
 80074f0:	2310      	movs	r3, #16
 80074f2:	77fb      	strb	r3, [r7, #31]
 80074f4:	e0e6      	b.n	80076c4 <UART_SetConfig+0x348>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a56      	ldr	r2, [pc, #344]	; (8007654 <UART_SetConfig+0x2d8>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d120      	bne.n	8007542 <UART_SetConfig+0x1c6>
 8007500:	4b51      	ldr	r3, [pc, #324]	; (8007648 <UART_SetConfig+0x2cc>)
 8007502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007506:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800750a:	2bc0      	cmp	r3, #192	; 0xc0
 800750c:	d013      	beq.n	8007536 <UART_SetConfig+0x1ba>
 800750e:	2bc0      	cmp	r3, #192	; 0xc0
 8007510:	d814      	bhi.n	800753c <UART_SetConfig+0x1c0>
 8007512:	2b80      	cmp	r3, #128	; 0x80
 8007514:	d009      	beq.n	800752a <UART_SetConfig+0x1ae>
 8007516:	2b80      	cmp	r3, #128	; 0x80
 8007518:	d810      	bhi.n	800753c <UART_SetConfig+0x1c0>
 800751a:	2b00      	cmp	r3, #0
 800751c:	d002      	beq.n	8007524 <UART_SetConfig+0x1a8>
 800751e:	2b40      	cmp	r3, #64	; 0x40
 8007520:	d006      	beq.n	8007530 <UART_SetConfig+0x1b4>
 8007522:	e00b      	b.n	800753c <UART_SetConfig+0x1c0>
 8007524:	2300      	movs	r3, #0
 8007526:	77fb      	strb	r3, [r7, #31]
 8007528:	e0cc      	b.n	80076c4 <UART_SetConfig+0x348>
 800752a:	2302      	movs	r3, #2
 800752c:	77fb      	strb	r3, [r7, #31]
 800752e:	e0c9      	b.n	80076c4 <UART_SetConfig+0x348>
 8007530:	2304      	movs	r3, #4
 8007532:	77fb      	strb	r3, [r7, #31]
 8007534:	e0c6      	b.n	80076c4 <UART_SetConfig+0x348>
 8007536:	2308      	movs	r3, #8
 8007538:	77fb      	strb	r3, [r7, #31]
 800753a:	e0c3      	b.n	80076c4 <UART_SetConfig+0x348>
 800753c:	2310      	movs	r3, #16
 800753e:	77fb      	strb	r3, [r7, #31]
 8007540:	e0c0      	b.n	80076c4 <UART_SetConfig+0x348>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a44      	ldr	r2, [pc, #272]	; (8007658 <UART_SetConfig+0x2dc>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d125      	bne.n	8007598 <UART_SetConfig+0x21c>
 800754c:	4b3e      	ldr	r3, [pc, #248]	; (8007648 <UART_SetConfig+0x2cc>)
 800754e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007556:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800755a:	d017      	beq.n	800758c <UART_SetConfig+0x210>
 800755c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007560:	d817      	bhi.n	8007592 <UART_SetConfig+0x216>
 8007562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007566:	d00b      	beq.n	8007580 <UART_SetConfig+0x204>
 8007568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800756c:	d811      	bhi.n	8007592 <UART_SetConfig+0x216>
 800756e:	2b00      	cmp	r3, #0
 8007570:	d003      	beq.n	800757a <UART_SetConfig+0x1fe>
 8007572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007576:	d006      	beq.n	8007586 <UART_SetConfig+0x20a>
 8007578:	e00b      	b.n	8007592 <UART_SetConfig+0x216>
 800757a:	2300      	movs	r3, #0
 800757c:	77fb      	strb	r3, [r7, #31]
 800757e:	e0a1      	b.n	80076c4 <UART_SetConfig+0x348>
 8007580:	2302      	movs	r3, #2
 8007582:	77fb      	strb	r3, [r7, #31]
 8007584:	e09e      	b.n	80076c4 <UART_SetConfig+0x348>
 8007586:	2304      	movs	r3, #4
 8007588:	77fb      	strb	r3, [r7, #31]
 800758a:	e09b      	b.n	80076c4 <UART_SetConfig+0x348>
 800758c:	2308      	movs	r3, #8
 800758e:	77fb      	strb	r3, [r7, #31]
 8007590:	e098      	b.n	80076c4 <UART_SetConfig+0x348>
 8007592:	2310      	movs	r3, #16
 8007594:	77fb      	strb	r3, [r7, #31]
 8007596:	e095      	b.n	80076c4 <UART_SetConfig+0x348>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a2f      	ldr	r2, [pc, #188]	; (800765c <UART_SetConfig+0x2e0>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d125      	bne.n	80075ee <UART_SetConfig+0x272>
 80075a2:	4b29      	ldr	r3, [pc, #164]	; (8007648 <UART_SetConfig+0x2cc>)
 80075a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80075ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075b0:	d017      	beq.n	80075e2 <UART_SetConfig+0x266>
 80075b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075b6:	d817      	bhi.n	80075e8 <UART_SetConfig+0x26c>
 80075b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075bc:	d00b      	beq.n	80075d6 <UART_SetConfig+0x25a>
 80075be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075c2:	d811      	bhi.n	80075e8 <UART_SetConfig+0x26c>
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d003      	beq.n	80075d0 <UART_SetConfig+0x254>
 80075c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075cc:	d006      	beq.n	80075dc <UART_SetConfig+0x260>
 80075ce:	e00b      	b.n	80075e8 <UART_SetConfig+0x26c>
 80075d0:	2301      	movs	r3, #1
 80075d2:	77fb      	strb	r3, [r7, #31]
 80075d4:	e076      	b.n	80076c4 <UART_SetConfig+0x348>
 80075d6:	2302      	movs	r3, #2
 80075d8:	77fb      	strb	r3, [r7, #31]
 80075da:	e073      	b.n	80076c4 <UART_SetConfig+0x348>
 80075dc:	2304      	movs	r3, #4
 80075de:	77fb      	strb	r3, [r7, #31]
 80075e0:	e070      	b.n	80076c4 <UART_SetConfig+0x348>
 80075e2:	2308      	movs	r3, #8
 80075e4:	77fb      	strb	r3, [r7, #31]
 80075e6:	e06d      	b.n	80076c4 <UART_SetConfig+0x348>
 80075e8:	2310      	movs	r3, #16
 80075ea:	77fb      	strb	r3, [r7, #31]
 80075ec:	e06a      	b.n	80076c4 <UART_SetConfig+0x348>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a1b      	ldr	r2, [pc, #108]	; (8007660 <UART_SetConfig+0x2e4>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d138      	bne.n	800766a <UART_SetConfig+0x2ee>
 80075f8:	4b13      	ldr	r3, [pc, #76]	; (8007648 <UART_SetConfig+0x2cc>)
 80075fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007602:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007606:	d017      	beq.n	8007638 <UART_SetConfig+0x2bc>
 8007608:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800760c:	d82a      	bhi.n	8007664 <UART_SetConfig+0x2e8>
 800760e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007612:	d00b      	beq.n	800762c <UART_SetConfig+0x2b0>
 8007614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007618:	d824      	bhi.n	8007664 <UART_SetConfig+0x2e8>
 800761a:	2b00      	cmp	r3, #0
 800761c:	d003      	beq.n	8007626 <UART_SetConfig+0x2aa>
 800761e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007622:	d006      	beq.n	8007632 <UART_SetConfig+0x2b6>
 8007624:	e01e      	b.n	8007664 <UART_SetConfig+0x2e8>
 8007626:	2300      	movs	r3, #0
 8007628:	77fb      	strb	r3, [r7, #31]
 800762a:	e04b      	b.n	80076c4 <UART_SetConfig+0x348>
 800762c:	2302      	movs	r3, #2
 800762e:	77fb      	strb	r3, [r7, #31]
 8007630:	e048      	b.n	80076c4 <UART_SetConfig+0x348>
 8007632:	2304      	movs	r3, #4
 8007634:	77fb      	strb	r3, [r7, #31]
 8007636:	e045      	b.n	80076c4 <UART_SetConfig+0x348>
 8007638:	2308      	movs	r3, #8
 800763a:	77fb      	strb	r3, [r7, #31]
 800763c:	e042      	b.n	80076c4 <UART_SetConfig+0x348>
 800763e:	bf00      	nop
 8007640:	efff69f3 	.word	0xefff69f3
 8007644:	40011000 	.word	0x40011000
 8007648:	40023800 	.word	0x40023800
 800764c:	40004400 	.word	0x40004400
 8007650:	40004800 	.word	0x40004800
 8007654:	40004c00 	.word	0x40004c00
 8007658:	40005000 	.word	0x40005000
 800765c:	40011400 	.word	0x40011400
 8007660:	40007800 	.word	0x40007800
 8007664:	2310      	movs	r3, #16
 8007666:	77fb      	strb	r3, [r7, #31]
 8007668:	e02c      	b.n	80076c4 <UART_SetConfig+0x348>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a72      	ldr	r2, [pc, #456]	; (8007838 <UART_SetConfig+0x4bc>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d125      	bne.n	80076c0 <UART_SetConfig+0x344>
 8007674:	4b71      	ldr	r3, [pc, #452]	; (800783c <UART_SetConfig+0x4c0>)
 8007676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800767a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800767e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007682:	d017      	beq.n	80076b4 <UART_SetConfig+0x338>
 8007684:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007688:	d817      	bhi.n	80076ba <UART_SetConfig+0x33e>
 800768a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800768e:	d00b      	beq.n	80076a8 <UART_SetConfig+0x32c>
 8007690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007694:	d811      	bhi.n	80076ba <UART_SetConfig+0x33e>
 8007696:	2b00      	cmp	r3, #0
 8007698:	d003      	beq.n	80076a2 <UART_SetConfig+0x326>
 800769a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800769e:	d006      	beq.n	80076ae <UART_SetConfig+0x332>
 80076a0:	e00b      	b.n	80076ba <UART_SetConfig+0x33e>
 80076a2:	2300      	movs	r3, #0
 80076a4:	77fb      	strb	r3, [r7, #31]
 80076a6:	e00d      	b.n	80076c4 <UART_SetConfig+0x348>
 80076a8:	2302      	movs	r3, #2
 80076aa:	77fb      	strb	r3, [r7, #31]
 80076ac:	e00a      	b.n	80076c4 <UART_SetConfig+0x348>
 80076ae:	2304      	movs	r3, #4
 80076b0:	77fb      	strb	r3, [r7, #31]
 80076b2:	e007      	b.n	80076c4 <UART_SetConfig+0x348>
 80076b4:	2308      	movs	r3, #8
 80076b6:	77fb      	strb	r3, [r7, #31]
 80076b8:	e004      	b.n	80076c4 <UART_SetConfig+0x348>
 80076ba:	2310      	movs	r3, #16
 80076bc:	77fb      	strb	r3, [r7, #31]
 80076be:	e001      	b.n	80076c4 <UART_SetConfig+0x348>
 80076c0:	2310      	movs	r3, #16
 80076c2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	69db      	ldr	r3, [r3, #28]
 80076c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076cc:	d15b      	bne.n	8007786 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80076ce:	7ffb      	ldrb	r3, [r7, #31]
 80076d0:	2b08      	cmp	r3, #8
 80076d2:	d828      	bhi.n	8007726 <UART_SetConfig+0x3aa>
 80076d4:	a201      	add	r2, pc, #4	; (adr r2, 80076dc <UART_SetConfig+0x360>)
 80076d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076da:	bf00      	nop
 80076dc:	08007701 	.word	0x08007701
 80076e0:	08007709 	.word	0x08007709
 80076e4:	08007711 	.word	0x08007711
 80076e8:	08007727 	.word	0x08007727
 80076ec:	08007717 	.word	0x08007717
 80076f0:	08007727 	.word	0x08007727
 80076f4:	08007727 	.word	0x08007727
 80076f8:	08007727 	.word	0x08007727
 80076fc:	0800771f 	.word	0x0800771f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007700:	f7fd ffb0 	bl	8005664 <HAL_RCC_GetPCLK1Freq>
 8007704:	61b8      	str	r0, [r7, #24]
        break;
 8007706:	e013      	b.n	8007730 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007708:	f7fd ffc0 	bl	800568c <HAL_RCC_GetPCLK2Freq>
 800770c:	61b8      	str	r0, [r7, #24]
        break;
 800770e:	e00f      	b.n	8007730 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007710:	4b4b      	ldr	r3, [pc, #300]	; (8007840 <UART_SetConfig+0x4c4>)
 8007712:	61bb      	str	r3, [r7, #24]
        break;
 8007714:	e00c      	b.n	8007730 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007716:	f7fd fe93 	bl	8005440 <HAL_RCC_GetSysClockFreq>
 800771a:	61b8      	str	r0, [r7, #24]
        break;
 800771c:	e008      	b.n	8007730 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800771e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007722:	61bb      	str	r3, [r7, #24]
        break;
 8007724:	e004      	b.n	8007730 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007726:	2300      	movs	r3, #0
 8007728:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	77bb      	strb	r3, [r7, #30]
        break;
 800772e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d074      	beq.n	8007820 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	005a      	lsls	r2, r3, #1
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	085b      	lsrs	r3, r3, #1
 8007740:	441a      	add	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	fbb2 f3f3 	udiv	r3, r2, r3
 800774a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	2b0f      	cmp	r3, #15
 8007750:	d916      	bls.n	8007780 <UART_SetConfig+0x404>
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007758:	d212      	bcs.n	8007780 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	b29b      	uxth	r3, r3
 800775e:	f023 030f 	bic.w	r3, r3, #15
 8007762:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	085b      	lsrs	r3, r3, #1
 8007768:	b29b      	uxth	r3, r3
 800776a:	f003 0307 	and.w	r3, r3, #7
 800776e:	b29a      	uxth	r2, r3
 8007770:	89fb      	ldrh	r3, [r7, #14]
 8007772:	4313      	orrs	r3, r2
 8007774:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	89fa      	ldrh	r2, [r7, #14]
 800777c:	60da      	str	r2, [r3, #12]
 800777e:	e04f      	b.n	8007820 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	77bb      	strb	r3, [r7, #30]
 8007784:	e04c      	b.n	8007820 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007786:	7ffb      	ldrb	r3, [r7, #31]
 8007788:	2b08      	cmp	r3, #8
 800778a:	d828      	bhi.n	80077de <UART_SetConfig+0x462>
 800778c:	a201      	add	r2, pc, #4	; (adr r2, 8007794 <UART_SetConfig+0x418>)
 800778e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007792:	bf00      	nop
 8007794:	080077b9 	.word	0x080077b9
 8007798:	080077c1 	.word	0x080077c1
 800779c:	080077c9 	.word	0x080077c9
 80077a0:	080077df 	.word	0x080077df
 80077a4:	080077cf 	.word	0x080077cf
 80077a8:	080077df 	.word	0x080077df
 80077ac:	080077df 	.word	0x080077df
 80077b0:	080077df 	.word	0x080077df
 80077b4:	080077d7 	.word	0x080077d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077b8:	f7fd ff54 	bl	8005664 <HAL_RCC_GetPCLK1Freq>
 80077bc:	61b8      	str	r0, [r7, #24]
        break;
 80077be:	e013      	b.n	80077e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077c0:	f7fd ff64 	bl	800568c <HAL_RCC_GetPCLK2Freq>
 80077c4:	61b8      	str	r0, [r7, #24]
        break;
 80077c6:	e00f      	b.n	80077e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077c8:	4b1d      	ldr	r3, [pc, #116]	; (8007840 <UART_SetConfig+0x4c4>)
 80077ca:	61bb      	str	r3, [r7, #24]
        break;
 80077cc:	e00c      	b.n	80077e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077ce:	f7fd fe37 	bl	8005440 <HAL_RCC_GetSysClockFreq>
 80077d2:	61b8      	str	r0, [r7, #24]
        break;
 80077d4:	e008      	b.n	80077e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077da:	61bb      	str	r3, [r7, #24]
        break;
 80077dc:	e004      	b.n	80077e8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80077de:	2300      	movs	r3, #0
 80077e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	77bb      	strb	r3, [r7, #30]
        break;
 80077e6:	bf00      	nop
    }

    if (pclk != 0U)
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d018      	beq.n	8007820 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	085a      	lsrs	r2, r3, #1
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	441a      	add	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007800:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	2b0f      	cmp	r3, #15
 8007806:	d909      	bls.n	800781c <UART_SetConfig+0x4a0>
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800780e:	d205      	bcs.n	800781c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	b29a      	uxth	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	60da      	str	r2, [r3, #12]
 800781a:	e001      	b.n	8007820 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800782c:	7fbb      	ldrb	r3, [r7, #30]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3720      	adds	r7, #32
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	40007c00 	.word	0x40007c00
 800783c:	40023800 	.word	0x40023800
 8007840:	00f42400 	.word	0x00f42400

08007844 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00a      	beq.n	800786e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	430a      	orrs	r2, r1
 800786c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007872:	f003 0302 	and.w	r3, r3, #2
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00a      	beq.n	8007890 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	430a      	orrs	r2, r1
 800788e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007894:	f003 0304 	and.w	r3, r3, #4
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00a      	beq.n	80078b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	430a      	orrs	r2, r1
 80078b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b6:	f003 0308 	and.w	r3, r3, #8
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00a      	beq.n	80078d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	430a      	orrs	r2, r1
 80078d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d8:	f003 0310 	and.w	r3, r3, #16
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00a      	beq.n	80078f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	430a      	orrs	r2, r1
 80078f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fa:	f003 0320 	and.w	r3, r3, #32
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00a      	beq.n	8007918 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	430a      	orrs	r2, r1
 8007916:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007920:	2b00      	cmp	r3, #0
 8007922:	d01a      	beq.n	800795a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	430a      	orrs	r2, r1
 8007938:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007942:	d10a      	bne.n	800795a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	430a      	orrs	r2, r1
 8007958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00a      	beq.n	800797c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	430a      	orrs	r2, r1
 800797a:	605a      	str	r2, [r3, #4]
  }
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af02      	add	r7, sp, #8
 800798e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007998:	f7fb f8a2 	bl	8002ae0 <HAL_GetTick>
 800799c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 0308 	and.w	r3, r3, #8
 80079a8:	2b08      	cmp	r3, #8
 80079aa:	d10e      	bne.n	80079ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079b0:	9300      	str	r3, [sp, #0]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f831 	bl	8007a22 <UART_WaitOnFlagUntilTimeout>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d001      	beq.n	80079ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079c6:	2303      	movs	r3, #3
 80079c8:	e027      	b.n	8007a1a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 0304 	and.w	r3, r3, #4
 80079d4:	2b04      	cmp	r3, #4
 80079d6:	d10e      	bne.n	80079f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f81b 	bl	8007a22 <UART_WaitOnFlagUntilTimeout>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d001      	beq.n	80079f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	e011      	b.n	8007a1a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2220      	movs	r2, #32
 80079fa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2220      	movs	r2, #32
 8007a00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b09c      	sub	sp, #112	; 0x70
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	60f8      	str	r0, [r7, #12]
 8007a2a:	60b9      	str	r1, [r7, #8]
 8007a2c:	603b      	str	r3, [r7, #0]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a32:	e0a7      	b.n	8007b84 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a3a:	f000 80a3 	beq.w	8007b84 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a3e:	f7fb f84f 	bl	8002ae0 <HAL_GetTick>
 8007a42:	4602      	mov	r2, r0
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d302      	bcc.n	8007a54 <UART_WaitOnFlagUntilTimeout+0x32>
 8007a4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d13f      	bne.n	8007ad4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a5c:	e853 3f00 	ldrex	r3, [r3]
 8007a60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a68:	667b      	str	r3, [r7, #100]	; 0x64
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a74:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a7a:	e841 2300 	strex	r3, r2, [r1]
 8007a7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1e6      	bne.n	8007a54 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	3308      	adds	r3, #8
 8007a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a90:	e853 3f00 	ldrex	r3, [r3]
 8007a94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a98:	f023 0301 	bic.w	r3, r3, #1
 8007a9c:	663b      	str	r3, [r7, #96]	; 0x60
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	3308      	adds	r3, #8
 8007aa4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007aa6:	64ba      	str	r2, [r7, #72]	; 0x48
 8007aa8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007aac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007aae:	e841 2300 	strex	r3, r2, [r1]
 8007ab2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1e5      	bne.n	8007a86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2220      	movs	r2, #32
 8007abe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	e068      	b.n	8007ba6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0304 	and.w	r3, r3, #4
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d050      	beq.n	8007b84 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	69db      	ldr	r3, [r3, #28]
 8007ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007af0:	d148      	bne.n	8007b84 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007afa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b04:	e853 3f00 	ldrex	r3, [r3]
 8007b08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	461a      	mov	r2, r3
 8007b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b1c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b22:	e841 2300 	strex	r3, r2, [r1]
 8007b26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1e6      	bne.n	8007afc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3308      	adds	r3, #8
 8007b34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	e853 3f00 	ldrex	r3, [r3]
 8007b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	f023 0301 	bic.w	r3, r3, #1
 8007b44:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	3308      	adds	r3, #8
 8007b4c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b4e:	623a      	str	r2, [r7, #32]
 8007b50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b52:	69f9      	ldr	r1, [r7, #28]
 8007b54:	6a3a      	ldr	r2, [r7, #32]
 8007b56:	e841 2300 	strex	r3, r2, [r1]
 8007b5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1e5      	bne.n	8007b2e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2220      	movs	r2, #32
 8007b66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2220      	movs	r2, #32
 8007b6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2220      	movs	r2, #32
 8007b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e010      	b.n	8007ba6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	69da      	ldr	r2, [r3, #28]
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	bf0c      	ite	eq
 8007b94:	2301      	moveq	r3, #1
 8007b96:	2300      	movne	r3, #0
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	79fb      	ldrb	r3, [r7, #7]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	f43f af48 	beq.w	8007a34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3770      	adds	r7, #112	; 0x70
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
	...

08007bb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bb0:	b084      	sub	sp, #16
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b084      	sub	sp, #16
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	f107 001c 	add.w	r0, r7, #28
 8007bbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d120      	bne.n	8007c0a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	68da      	ldr	r2, [r3, #12]
 8007bd8:	4b20      	ldr	r3, [pc, #128]	; (8007c5c <USB_CoreInit+0xac>)
 8007bda:	4013      	ands	r3, r2
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d105      	bne.n	8007bfe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f001 fbee 	bl	80093e0 <USB_CoreReset>
 8007c04:	4603      	mov	r3, r0
 8007c06:	73fb      	strb	r3, [r7, #15]
 8007c08:	e010      	b.n	8007c2c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f001 fbe2 	bl	80093e0 <USB_CoreReset>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c24:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d10b      	bne.n	8007c4a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	f043 0206 	orr.w	r2, r3, #6
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f043 0220 	orr.w	r2, r3, #32
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c56:	b004      	add	sp, #16
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	ffbdffbf 	.word	0xffbdffbf

08007c60 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b087      	sub	sp, #28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007c6e:	79fb      	ldrb	r3, [r7, #7]
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d165      	bne.n	8007d40 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	4a41      	ldr	r2, [pc, #260]	; (8007d7c <USB_SetTurnaroundTime+0x11c>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d906      	bls.n	8007c8a <USB_SetTurnaroundTime+0x2a>
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	4a40      	ldr	r2, [pc, #256]	; (8007d80 <USB_SetTurnaroundTime+0x120>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d202      	bcs.n	8007c8a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007c84:	230f      	movs	r3, #15
 8007c86:	617b      	str	r3, [r7, #20]
 8007c88:	e062      	b.n	8007d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	4a3c      	ldr	r2, [pc, #240]	; (8007d80 <USB_SetTurnaroundTime+0x120>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d306      	bcc.n	8007ca0 <USB_SetTurnaroundTime+0x40>
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	4a3b      	ldr	r2, [pc, #236]	; (8007d84 <USB_SetTurnaroundTime+0x124>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d202      	bcs.n	8007ca0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007c9a:	230e      	movs	r3, #14
 8007c9c:	617b      	str	r3, [r7, #20]
 8007c9e:	e057      	b.n	8007d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	4a38      	ldr	r2, [pc, #224]	; (8007d84 <USB_SetTurnaroundTime+0x124>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d306      	bcc.n	8007cb6 <USB_SetTurnaroundTime+0x56>
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	4a37      	ldr	r2, [pc, #220]	; (8007d88 <USB_SetTurnaroundTime+0x128>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d202      	bcs.n	8007cb6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007cb0:	230d      	movs	r3, #13
 8007cb2:	617b      	str	r3, [r7, #20]
 8007cb4:	e04c      	b.n	8007d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	4a33      	ldr	r2, [pc, #204]	; (8007d88 <USB_SetTurnaroundTime+0x128>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d306      	bcc.n	8007ccc <USB_SetTurnaroundTime+0x6c>
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	4a32      	ldr	r2, [pc, #200]	; (8007d8c <USB_SetTurnaroundTime+0x12c>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d802      	bhi.n	8007ccc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007cc6:	230c      	movs	r3, #12
 8007cc8:	617b      	str	r3, [r7, #20]
 8007cca:	e041      	b.n	8007d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	4a2f      	ldr	r2, [pc, #188]	; (8007d8c <USB_SetTurnaroundTime+0x12c>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d906      	bls.n	8007ce2 <USB_SetTurnaroundTime+0x82>
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	4a2e      	ldr	r2, [pc, #184]	; (8007d90 <USB_SetTurnaroundTime+0x130>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d802      	bhi.n	8007ce2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007cdc:	230b      	movs	r3, #11
 8007cde:	617b      	str	r3, [r7, #20]
 8007ce0:	e036      	b.n	8007d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	4a2a      	ldr	r2, [pc, #168]	; (8007d90 <USB_SetTurnaroundTime+0x130>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d906      	bls.n	8007cf8 <USB_SetTurnaroundTime+0x98>
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	4a29      	ldr	r2, [pc, #164]	; (8007d94 <USB_SetTurnaroundTime+0x134>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d802      	bhi.n	8007cf8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007cf2:	230a      	movs	r3, #10
 8007cf4:	617b      	str	r3, [r7, #20]
 8007cf6:	e02b      	b.n	8007d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	4a26      	ldr	r2, [pc, #152]	; (8007d94 <USB_SetTurnaroundTime+0x134>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d906      	bls.n	8007d0e <USB_SetTurnaroundTime+0xae>
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	4a25      	ldr	r2, [pc, #148]	; (8007d98 <USB_SetTurnaroundTime+0x138>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d202      	bcs.n	8007d0e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007d08:	2309      	movs	r3, #9
 8007d0a:	617b      	str	r3, [r7, #20]
 8007d0c:	e020      	b.n	8007d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	4a21      	ldr	r2, [pc, #132]	; (8007d98 <USB_SetTurnaroundTime+0x138>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d306      	bcc.n	8007d24 <USB_SetTurnaroundTime+0xc4>
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	4a20      	ldr	r2, [pc, #128]	; (8007d9c <USB_SetTurnaroundTime+0x13c>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d802      	bhi.n	8007d24 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007d1e:	2308      	movs	r3, #8
 8007d20:	617b      	str	r3, [r7, #20]
 8007d22:	e015      	b.n	8007d50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	4a1d      	ldr	r2, [pc, #116]	; (8007d9c <USB_SetTurnaroundTime+0x13c>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d906      	bls.n	8007d3a <USB_SetTurnaroundTime+0xda>
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	4a1c      	ldr	r2, [pc, #112]	; (8007da0 <USB_SetTurnaroundTime+0x140>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d202      	bcs.n	8007d3a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007d34:	2307      	movs	r3, #7
 8007d36:	617b      	str	r3, [r7, #20]
 8007d38:	e00a      	b.n	8007d50 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007d3a:	2306      	movs	r3, #6
 8007d3c:	617b      	str	r3, [r7, #20]
 8007d3e:	e007      	b.n	8007d50 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007d40:	79fb      	ldrb	r3, [r7, #7]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d102      	bne.n	8007d4c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007d46:	2309      	movs	r3, #9
 8007d48:	617b      	str	r3, [r7, #20]
 8007d4a:	e001      	b.n	8007d50 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007d4c:	2309      	movs	r3, #9
 8007d4e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	68da      	ldr	r2, [r3, #12]
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	029b      	lsls	r3, r3, #10
 8007d64:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007d68:	431a      	orrs	r2, r3
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	371c      	adds	r7, #28
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	00d8acbf 	.word	0x00d8acbf
 8007d80:	00e4e1c0 	.word	0x00e4e1c0
 8007d84:	00f42400 	.word	0x00f42400
 8007d88:	01067380 	.word	0x01067380
 8007d8c:	011a499f 	.word	0x011a499f
 8007d90:	01312cff 	.word	0x01312cff
 8007d94:	014ca43f 	.word	0x014ca43f
 8007d98:	016e3600 	.word	0x016e3600
 8007d9c:	01a6ab1f 	.word	0x01a6ab1f
 8007da0:	01e84800 	.word	0x01e84800

08007da4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	f043 0201 	orr.w	r2, r3, #1
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b083      	sub	sp, #12
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	f023 0201 	bic.w	r2, r3, #1
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	460b      	mov	r3, r1
 8007df2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007df4:	2300      	movs	r3, #0
 8007df6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007e04:	78fb      	ldrb	r3, [r7, #3]
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d115      	bne.n	8007e36 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007e16:	2001      	movs	r0, #1
 8007e18:	f7fa fe6e 	bl	8002af8 <HAL_Delay>
      ms++;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f001 fa4b 	bl	80092be <USB_GetMode>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d01e      	beq.n	8007e6c <USB_SetCurrentMode+0x84>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2b31      	cmp	r3, #49	; 0x31
 8007e32:	d9f0      	bls.n	8007e16 <USB_SetCurrentMode+0x2e>
 8007e34:	e01a      	b.n	8007e6c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007e36:	78fb      	ldrb	r3, [r7, #3]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d115      	bne.n	8007e68 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007e48:	2001      	movs	r0, #1
 8007e4a:	f7fa fe55 	bl	8002af8 <HAL_Delay>
      ms++;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	3301      	adds	r3, #1
 8007e52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f001 fa32 	bl	80092be <USB_GetMode>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d005      	beq.n	8007e6c <USB_SetCurrentMode+0x84>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2b31      	cmp	r3, #49	; 0x31
 8007e64:	d9f0      	bls.n	8007e48 <USB_SetCurrentMode+0x60>
 8007e66:	e001      	b.n	8007e6c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e005      	b.n	8007e78 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2b32      	cmp	r3, #50	; 0x32
 8007e70:	d101      	bne.n	8007e76 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	e000      	b.n	8007e78 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e80:	b084      	sub	sp, #16
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b086      	sub	sp, #24
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
 8007e8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007e8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e92:	2300      	movs	r3, #0
 8007e94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	613b      	str	r3, [r7, #16]
 8007e9e:	e009      	b.n	8007eb4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	3340      	adds	r3, #64	; 0x40
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4413      	add	r3, r2
 8007eaa:	2200      	movs	r2, #0
 8007eac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	613b      	str	r3, [r7, #16]
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	2b0e      	cmp	r3, #14
 8007eb8:	d9f2      	bls.n	8007ea0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d11c      	bne.n	8007efa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ece:	f043 0302 	orr.w	r3, r3, #2
 8007ed2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	601a      	str	r2, [r3, #0]
 8007ef8:	e005      	b.n	8007f06 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007efe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	2300      	movs	r3, #0
 8007f10:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f18:	4619      	mov	r1, r3
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f20:	461a      	mov	r2, r3
 8007f22:	680b      	ldr	r3, [r1, #0]
 8007f24:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d10c      	bne.n	8007f46 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d104      	bne.n	8007f3c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007f32:	2100      	movs	r1, #0
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f965 	bl	8008204 <USB_SetDevSpeed>
 8007f3a:	e008      	b.n	8007f4e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007f3c:	2101      	movs	r1, #1
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 f960 	bl	8008204 <USB_SetDevSpeed>
 8007f44:	e003      	b.n	8007f4e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007f46:	2103      	movs	r1, #3
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 f95b 	bl	8008204 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f4e:	2110      	movs	r1, #16
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 f8f3 	bl	800813c <USB_FlushTxFifo>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f91f 	bl	80081a4 <USB_FlushRxFifo>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d001      	beq.n	8007f70 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f76:	461a      	mov	r2, r3
 8007f78:	2300      	movs	r3, #0
 8007f7a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f82:	461a      	mov	r2, r3
 8007f84:	2300      	movs	r3, #0
 8007f86:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f8e:	461a      	mov	r2, r3
 8007f90:	2300      	movs	r3, #0
 8007f92:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f94:	2300      	movs	r3, #0
 8007f96:	613b      	str	r3, [r7, #16]
 8007f98:	e043      	b.n	8008022 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	015a      	lsls	r2, r3, #5
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fb0:	d118      	bne.n	8007fe4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10a      	bne.n	8007fce <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007fca:	6013      	str	r3, [r2, #0]
 8007fcc:	e013      	b.n	8007ff6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	015a      	lsls	r2, r3, #5
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007fe0:	6013      	str	r3, [r2, #0]
 8007fe2:	e008      	b.n	8007ff6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	015a      	lsls	r2, r3, #5
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	4413      	add	r3, r2
 8007fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008002:	461a      	mov	r2, r3
 8008004:	2300      	movs	r3, #0
 8008006:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	4413      	add	r3, r2
 8008010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008014:	461a      	mov	r2, r3
 8008016:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800801a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	3301      	adds	r3, #1
 8008020:	613b      	str	r3, [r7, #16]
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	429a      	cmp	r2, r3
 8008028:	d3b7      	bcc.n	8007f9a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800802a:	2300      	movs	r3, #0
 800802c:	613b      	str	r3, [r7, #16]
 800802e:	e043      	b.n	80080b8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	015a      	lsls	r2, r3, #5
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	4413      	add	r3, r2
 8008038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008042:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008046:	d118      	bne.n	800807a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d10a      	bne.n	8008064 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	015a      	lsls	r2, r3, #5
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	4413      	add	r3, r2
 8008056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800805a:	461a      	mov	r2, r3
 800805c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008060:	6013      	str	r3, [r2, #0]
 8008062:	e013      	b.n	800808c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	015a      	lsls	r2, r3, #5
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	4413      	add	r3, r2
 800806c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008070:	461a      	mov	r2, r3
 8008072:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008076:	6013      	str	r3, [r2, #0]
 8008078:	e008      	b.n	800808c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	015a      	lsls	r2, r3, #5
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	4413      	add	r3, r2
 8008082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008086:	461a      	mov	r2, r3
 8008088:	2300      	movs	r3, #0
 800808a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	015a      	lsls	r2, r3, #5
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4413      	add	r3, r2
 8008094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008098:	461a      	mov	r2, r3
 800809a:	2300      	movs	r3, #0
 800809c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	015a      	lsls	r2, r3, #5
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	4413      	add	r3, r2
 80080a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080aa:	461a      	mov	r2, r3
 80080ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80080b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	3301      	adds	r3, #1
 80080b6:	613b      	str	r3, [r7, #16]
 80080b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ba:	693a      	ldr	r2, [r7, #16]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d3b7      	bcc.n	8008030 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80080e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80080e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d105      	bne.n	80080f4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	f043 0210 	orr.w	r2, r3, #16
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	699a      	ldr	r2, [r3, #24]
 80080f8:	4b0e      	ldr	r3, [pc, #56]	; (8008134 <USB_DevInit+0x2b4>)
 80080fa:	4313      	orrs	r3, r2
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008102:	2b00      	cmp	r3, #0
 8008104:	d005      	beq.n	8008112 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	f043 0208 	orr.w	r2, r3, #8
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008114:	2b01      	cmp	r3, #1
 8008116:	d105      	bne.n	8008124 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	699a      	ldr	r2, [r3, #24]
 800811c:	4b06      	ldr	r3, [pc, #24]	; (8008138 <USB_DevInit+0x2b8>)
 800811e:	4313      	orrs	r3, r2
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008124:	7dfb      	ldrb	r3, [r7, #23]
}
 8008126:	4618      	mov	r0, r3
 8008128:	3718      	adds	r7, #24
 800812a:	46bd      	mov	sp, r7
 800812c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008130:	b004      	add	sp, #16
 8008132:	4770      	bx	lr
 8008134:	803c3800 	.word	0x803c3800
 8008138:	40000004 	.word	0x40000004

0800813c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008146:	2300      	movs	r3, #0
 8008148:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	3301      	adds	r3, #1
 800814e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	4a13      	ldr	r2, [pc, #76]	; (80081a0 <USB_FlushTxFifo+0x64>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d901      	bls.n	800815c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008158:	2303      	movs	r3, #3
 800815a:	e01b      	b.n	8008194 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	2b00      	cmp	r3, #0
 8008162:	daf2      	bge.n	800814a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008164:	2300      	movs	r3, #0
 8008166:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	019b      	lsls	r3, r3, #6
 800816c:	f043 0220 	orr.w	r2, r3, #32
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	3301      	adds	r3, #1
 8008178:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	4a08      	ldr	r2, [pc, #32]	; (80081a0 <USB_FlushTxFifo+0x64>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d901      	bls.n	8008186 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008182:	2303      	movs	r3, #3
 8008184:	e006      	b.n	8008194 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	f003 0320 	and.w	r3, r3, #32
 800818e:	2b20      	cmp	r3, #32
 8008190:	d0f0      	beq.n	8008174 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr
 80081a0:	00030d40 	.word	0x00030d40

080081a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	3301      	adds	r3, #1
 80081b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	4a11      	ldr	r2, [pc, #68]	; (8008200 <USB_FlushRxFifo+0x5c>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d901      	bls.n	80081c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	e018      	b.n	80081f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	daf2      	bge.n	80081b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80081ca:	2300      	movs	r3, #0
 80081cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2210      	movs	r2, #16
 80081d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	3301      	adds	r3, #1
 80081d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	4a08      	ldr	r2, [pc, #32]	; (8008200 <USB_FlushRxFifo+0x5c>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d901      	bls.n	80081e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80081e2:	2303      	movs	r3, #3
 80081e4:	e006      	b.n	80081f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	f003 0310 	and.w	r3, r3, #16
 80081ee:	2b10      	cmp	r3, #16
 80081f0:	d0f0      	beq.n	80081d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr
 8008200:	00030d40 	.word	0x00030d40

08008204 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	460b      	mov	r3, r1
 800820e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	78fb      	ldrb	r3, [r7, #3]
 800821e:	68f9      	ldr	r1, [r7, #12]
 8008220:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008224:	4313      	orrs	r3, r2
 8008226:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3714      	adds	r7, #20
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008236:	b480      	push	{r7}
 8008238:	b087      	sub	sp, #28
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f003 0306 	and.w	r3, r3, #6
 800824e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d102      	bne.n	800825c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008256:	2300      	movs	r3, #0
 8008258:	75fb      	strb	r3, [r7, #23]
 800825a:	e00a      	b.n	8008272 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2b02      	cmp	r3, #2
 8008260:	d002      	beq.n	8008268 <USB_GetDevSpeed+0x32>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2b06      	cmp	r3, #6
 8008266:	d102      	bne.n	800826e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008268:	2302      	movs	r3, #2
 800826a:	75fb      	strb	r3, [r7, #23]
 800826c:	e001      	b.n	8008272 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800826e:	230f      	movs	r3, #15
 8008270:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008272:	7dfb      	ldrb	r3, [r7, #23]
}
 8008274:	4618      	mov	r0, r3
 8008276:	371c      	adds	r7, #28
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	785b      	ldrb	r3, [r3, #1]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d139      	bne.n	8008310 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082a2:	69da      	ldr	r2, [r3, #28]
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	f003 030f 	and.w	r3, r3, #15
 80082ac:	2101      	movs	r1, #1
 80082ae:	fa01 f303 	lsl.w	r3, r1, r3
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	68f9      	ldr	r1, [r7, #12]
 80082b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082ba:	4313      	orrs	r3, r2
 80082bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	015a      	lsls	r2, r3, #5
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	4413      	add	r3, r2
 80082c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d153      	bne.n	800837c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	015a      	lsls	r2, r3, #5
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	4413      	add	r3, r2
 80082dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	791b      	ldrb	r3, [r3, #4]
 80082ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80082f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	059b      	lsls	r3, r3, #22
 80082f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80082f8:	431a      	orrs	r2, r3
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	0159      	lsls	r1, r3, #5
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	440b      	add	r3, r1
 8008302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008306:	4619      	mov	r1, r3
 8008308:	4b20      	ldr	r3, [pc, #128]	; (800838c <USB_ActivateEndpoint+0x10c>)
 800830a:	4313      	orrs	r3, r2
 800830c:	600b      	str	r3, [r1, #0]
 800830e:	e035      	b.n	800837c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008316:	69da      	ldr	r2, [r3, #28]
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	f003 030f 	and.w	r3, r3, #15
 8008320:	2101      	movs	r1, #1
 8008322:	fa01 f303 	lsl.w	r3, r1, r3
 8008326:	041b      	lsls	r3, r3, #16
 8008328:	68f9      	ldr	r1, [r7, #12]
 800832a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800832e:	4313      	orrs	r3, r2
 8008330:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	015a      	lsls	r2, r3, #5
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	4413      	add	r3, r2
 800833a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008344:	2b00      	cmp	r3, #0
 8008346:	d119      	bne.n	800837c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	015a      	lsls	r2, r3, #5
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	4413      	add	r3, r2
 8008350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	791b      	ldrb	r3, [r3, #4]
 8008362:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008364:	430b      	orrs	r3, r1
 8008366:	431a      	orrs	r2, r3
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	0159      	lsls	r1, r3, #5
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	440b      	add	r3, r1
 8008370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008374:	4619      	mov	r1, r3
 8008376:	4b05      	ldr	r3, [pc, #20]	; (800838c <USB_ActivateEndpoint+0x10c>)
 8008378:	4313      	orrs	r3, r2
 800837a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3714      	adds	r7, #20
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	10008000 	.word	0x10008000

08008390 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	785b      	ldrb	r3, [r3, #1]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d161      	bne.n	8008470 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	015a      	lsls	r2, r3, #5
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	4413      	add	r3, r2
 80083b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083c2:	d11f      	bne.n	8008404 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	015a      	lsls	r2, r3, #5
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	4413      	add	r3, r2
 80083cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68ba      	ldr	r2, [r7, #8]
 80083d4:	0151      	lsls	r1, r2, #5
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	440a      	add	r2, r1
 80083da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80083e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	015a      	lsls	r2, r3, #5
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	4413      	add	r3, r2
 80083ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	0151      	lsls	r1, r2, #5
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	440a      	add	r2, r1
 80083fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008402:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800840a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	f003 030f 	and.w	r3, r3, #15
 8008414:	2101      	movs	r1, #1
 8008416:	fa01 f303 	lsl.w	r3, r1, r3
 800841a:	b29b      	uxth	r3, r3
 800841c:	43db      	mvns	r3, r3
 800841e:	68f9      	ldr	r1, [r7, #12]
 8008420:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008424:	4013      	ands	r3, r2
 8008426:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800842e:	69da      	ldr	r2, [r3, #28]
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	f003 030f 	and.w	r3, r3, #15
 8008438:	2101      	movs	r1, #1
 800843a:	fa01 f303 	lsl.w	r3, r1, r3
 800843e:	b29b      	uxth	r3, r3
 8008440:	43db      	mvns	r3, r3
 8008442:	68f9      	ldr	r1, [r7, #12]
 8008444:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008448:	4013      	ands	r3, r2
 800844a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4413      	add	r3, r2
 8008454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	0159      	lsls	r1, r3, #5
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	440b      	add	r3, r1
 8008462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008466:	4619      	mov	r1, r3
 8008468:	4b35      	ldr	r3, [pc, #212]	; (8008540 <USB_DeactivateEndpoint+0x1b0>)
 800846a:	4013      	ands	r3, r2
 800846c:	600b      	str	r3, [r1, #0]
 800846e:	e060      	b.n	8008532 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	015a      	lsls	r2, r3, #5
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	4413      	add	r3, r2
 8008478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008482:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008486:	d11f      	bne.n	80084c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	015a      	lsls	r2, r3, #5
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	4413      	add	r3, r2
 8008490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	0151      	lsls	r1, r2, #5
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	440a      	add	r2, r1
 800849e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80084a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	015a      	lsls	r2, r3, #5
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	4413      	add	r3, r2
 80084b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	0151      	lsls	r1, r2, #5
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	440a      	add	r2, r1
 80084be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	f003 030f 	and.w	r3, r3, #15
 80084d8:	2101      	movs	r1, #1
 80084da:	fa01 f303 	lsl.w	r3, r1, r3
 80084de:	041b      	lsls	r3, r3, #16
 80084e0:	43db      	mvns	r3, r3
 80084e2:	68f9      	ldr	r1, [r7, #12]
 80084e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084e8:	4013      	ands	r3, r2
 80084ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084f2:	69da      	ldr	r2, [r3, #28]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	f003 030f 	and.w	r3, r3, #15
 80084fc:	2101      	movs	r1, #1
 80084fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008502:	041b      	lsls	r3, r3, #16
 8008504:	43db      	mvns	r3, r3
 8008506:	68f9      	ldr	r1, [r7, #12]
 8008508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800850c:	4013      	ands	r3, r2
 800850e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	015a      	lsls	r2, r3, #5
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	4413      	add	r3, r2
 8008518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	0159      	lsls	r1, r3, #5
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	440b      	add	r3, r1
 8008526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800852a:	4619      	mov	r1, r3
 800852c:	4b05      	ldr	r3, [pc, #20]	; (8008544 <USB_DeactivateEndpoint+0x1b4>)
 800852e:	4013      	ands	r3, r2
 8008530:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3714      	adds	r7, #20
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr
 8008540:	ec337800 	.word	0xec337800
 8008544:	eff37800 	.word	0xeff37800

08008548 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b08a      	sub	sp, #40	; 0x28
 800854c:	af02      	add	r7, sp, #8
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	4613      	mov	r3, r2
 8008554:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	785b      	ldrb	r3, [r3, #1]
 8008564:	2b01      	cmp	r3, #1
 8008566:	f040 8163 	bne.w	8008830 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d132      	bne.n	80085d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	015a      	lsls	r2, r3, #5
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	4413      	add	r3, r2
 800857a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800857e:	691a      	ldr	r2, [r3, #16]
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	0159      	lsls	r1, r3, #5
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	440b      	add	r3, r1
 8008588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800858c:	4619      	mov	r1, r3
 800858e:	4ba5      	ldr	r3, [pc, #660]	; (8008824 <USB_EPStartXfer+0x2dc>)
 8008590:	4013      	ands	r3, r2
 8008592:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	015a      	lsls	r2, r3, #5
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	4413      	add	r3, r2
 800859c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	69ba      	ldr	r2, [r7, #24]
 80085a4:	0151      	lsls	r1, r2, #5
 80085a6:	69fa      	ldr	r2, [r7, #28]
 80085a8:	440a      	add	r2, r1
 80085aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	015a      	lsls	r2, r3, #5
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c0:	691a      	ldr	r2, [r3, #16]
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	0159      	lsls	r1, r3, #5
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	440b      	add	r3, r1
 80085ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ce:	4619      	mov	r1, r3
 80085d0:	4b95      	ldr	r3, [pc, #596]	; (8008828 <USB_EPStartXfer+0x2e0>)
 80085d2:	4013      	ands	r3, r2
 80085d4:	610b      	str	r3, [r1, #16]
 80085d6:	e074      	b.n	80086c2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	015a      	lsls	r2, r3, #5
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	4413      	add	r3, r2
 80085e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e4:	691a      	ldr	r2, [r3, #16]
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	0159      	lsls	r1, r3, #5
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	440b      	add	r3, r1
 80085ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f2:	4619      	mov	r1, r3
 80085f4:	4b8c      	ldr	r3, [pc, #560]	; (8008828 <USB_EPStartXfer+0x2e0>)
 80085f6:	4013      	ands	r3, r2
 80085f8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	015a      	lsls	r2, r3, #5
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	4413      	add	r3, r2
 8008602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008606:	691a      	ldr	r2, [r3, #16]
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	0159      	lsls	r1, r3, #5
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	440b      	add	r3, r1
 8008610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008614:	4619      	mov	r1, r3
 8008616:	4b83      	ldr	r3, [pc, #524]	; (8008824 <USB_EPStartXfer+0x2dc>)
 8008618:	4013      	ands	r3, r2
 800861a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	015a      	lsls	r2, r3, #5
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	4413      	add	r3, r2
 8008624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008628:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	6999      	ldr	r1, [r3, #24]
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	440b      	add	r3, r1
 8008634:	1e59      	subs	r1, r3, #1
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	fbb1 f3f3 	udiv	r3, r1, r3
 800863e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008640:	4b7a      	ldr	r3, [pc, #488]	; (800882c <USB_EPStartXfer+0x2e4>)
 8008642:	400b      	ands	r3, r1
 8008644:	69b9      	ldr	r1, [r7, #24]
 8008646:	0148      	lsls	r0, r1, #5
 8008648:	69f9      	ldr	r1, [r7, #28]
 800864a:	4401      	add	r1, r0
 800864c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008650:	4313      	orrs	r3, r2
 8008652:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	015a      	lsls	r2, r3, #5
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	4413      	add	r3, r2
 800865c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008660:	691a      	ldr	r2, [r3, #16]
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800866a:	69b9      	ldr	r1, [r7, #24]
 800866c:	0148      	lsls	r0, r1, #5
 800866e:	69f9      	ldr	r1, [r7, #28]
 8008670:	4401      	add	r1, r0
 8008672:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008676:	4313      	orrs	r3, r2
 8008678:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	791b      	ldrb	r3, [r3, #4]
 800867e:	2b01      	cmp	r3, #1
 8008680:	d11f      	bne.n	80086c2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	015a      	lsls	r2, r3, #5
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	4413      	add	r3, r2
 800868a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	69ba      	ldr	r2, [r7, #24]
 8008692:	0151      	lsls	r1, r2, #5
 8008694:	69fa      	ldr	r2, [r7, #28]
 8008696:	440a      	add	r2, r1
 8008698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800869c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80086a0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	015a      	lsls	r2, r3, #5
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	4413      	add	r3, r2
 80086aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	69ba      	ldr	r2, [r7, #24]
 80086b2:	0151      	lsls	r1, r2, #5
 80086b4:	69fa      	ldr	r2, [r7, #28]
 80086b6:	440a      	add	r2, r1
 80086b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80086c0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80086c2:	79fb      	ldrb	r3, [r7, #7]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d14b      	bne.n	8008760 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d009      	beq.n	80086e4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	015a      	lsls	r2, r3, #5
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	4413      	add	r3, r2
 80086d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086dc:	461a      	mov	r2, r3
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	695b      	ldr	r3, [r3, #20]
 80086e2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	791b      	ldrb	r3, [r3, #4]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d128      	bne.n	800873e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d110      	bne.n	800871e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	015a      	lsls	r2, r3, #5
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	4413      	add	r3, r2
 8008704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	0151      	lsls	r1, r2, #5
 800870e:	69fa      	ldr	r2, [r7, #28]
 8008710:	440a      	add	r2, r1
 8008712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008716:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800871a:	6013      	str	r3, [r2, #0]
 800871c:	e00f      	b.n	800873e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	015a      	lsls	r2, r3, #5
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	4413      	add	r3, r2
 8008726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	69ba      	ldr	r2, [r7, #24]
 800872e:	0151      	lsls	r1, r2, #5
 8008730:	69fa      	ldr	r2, [r7, #28]
 8008732:	440a      	add	r2, r1
 8008734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800873c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	015a      	lsls	r2, r3, #5
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	4413      	add	r3, r2
 8008746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	69ba      	ldr	r2, [r7, #24]
 800874e:	0151      	lsls	r1, r2, #5
 8008750:	69fa      	ldr	r2, [r7, #28]
 8008752:	440a      	add	r2, r1
 8008754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008758:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800875c:	6013      	str	r3, [r2, #0]
 800875e:	e137      	b.n	80089d0 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	015a      	lsls	r2, r3, #5
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	4413      	add	r3, r2
 8008768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	69ba      	ldr	r2, [r7, #24]
 8008770:	0151      	lsls	r1, r2, #5
 8008772:	69fa      	ldr	r2, [r7, #28]
 8008774:	440a      	add	r2, r1
 8008776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800877a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800877e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	791b      	ldrb	r3, [r3, #4]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d015      	beq.n	80087b4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	2b00      	cmp	r3, #0
 800878e:	f000 811f 	beq.w	80089d0 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	f003 030f 	and.w	r3, r3, #15
 80087a2:	2101      	movs	r1, #1
 80087a4:	fa01 f303 	lsl.w	r3, r1, r3
 80087a8:	69f9      	ldr	r1, [r7, #28]
 80087aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087ae:	4313      	orrs	r3, r2
 80087b0:	634b      	str	r3, [r1, #52]	; 0x34
 80087b2:	e10d      	b.n	80089d0 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d110      	bne.n	80087e6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	69ba      	ldr	r2, [r7, #24]
 80087d4:	0151      	lsls	r1, r2, #5
 80087d6:	69fa      	ldr	r2, [r7, #28]
 80087d8:	440a      	add	r2, r1
 80087da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80087e2:	6013      	str	r3, [r2, #0]
 80087e4:	e00f      	b.n	8008806 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	015a      	lsls	r2, r3, #5
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	69ba      	ldr	r2, [r7, #24]
 80087f6:	0151      	lsls	r1, r2, #5
 80087f8:	69fa      	ldr	r2, [r7, #28]
 80087fa:	440a      	add	r2, r1
 80087fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008804:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	6919      	ldr	r1, [r3, #16]
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	781a      	ldrb	r2, [r3, #0]
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	b298      	uxth	r0, r3
 8008814:	79fb      	ldrb	r3, [r7, #7]
 8008816:	9300      	str	r3, [sp, #0]
 8008818:	4603      	mov	r3, r0
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f000 faea 	bl	8008df4 <USB_WritePacket>
 8008820:	e0d6      	b.n	80089d0 <USB_EPStartXfer+0x488>
 8008822:	bf00      	nop
 8008824:	e007ffff 	.word	0xe007ffff
 8008828:	fff80000 	.word	0xfff80000
 800882c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	015a      	lsls	r2, r3, #5
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	4413      	add	r3, r2
 8008838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800883c:	691a      	ldr	r2, [r3, #16]
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	0159      	lsls	r1, r3, #5
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	440b      	add	r3, r1
 8008846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800884a:	4619      	mov	r1, r3
 800884c:	4b63      	ldr	r3, [pc, #396]	; (80089dc <USB_EPStartXfer+0x494>)
 800884e:	4013      	ands	r3, r2
 8008850:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	015a      	lsls	r2, r3, #5
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	4413      	add	r3, r2
 800885a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800885e:	691a      	ldr	r2, [r3, #16]
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	0159      	lsls	r1, r3, #5
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	440b      	add	r3, r1
 8008868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800886c:	4619      	mov	r1, r3
 800886e:	4b5c      	ldr	r3, [pc, #368]	; (80089e0 <USB_EPStartXfer+0x498>)
 8008870:	4013      	ands	r3, r2
 8008872:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	699b      	ldr	r3, [r3, #24]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d123      	bne.n	80088c4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	015a      	lsls	r2, r3, #5
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	4413      	add	r3, r2
 8008884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008888:	691a      	ldr	r2, [r3, #16]
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008892:	69b9      	ldr	r1, [r7, #24]
 8008894:	0148      	lsls	r0, r1, #5
 8008896:	69f9      	ldr	r1, [r7, #28]
 8008898:	4401      	add	r1, r0
 800889a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800889e:	4313      	orrs	r3, r2
 80088a0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	015a      	lsls	r2, r3, #5
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	4413      	add	r3, r2
 80088aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ae:	691b      	ldr	r3, [r3, #16]
 80088b0:	69ba      	ldr	r2, [r7, #24]
 80088b2:	0151      	lsls	r1, r2, #5
 80088b4:	69fa      	ldr	r2, [r7, #28]
 80088b6:	440a      	add	r2, r1
 80088b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088c0:	6113      	str	r3, [r2, #16]
 80088c2:	e037      	b.n	8008934 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	699a      	ldr	r2, [r3, #24]
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	4413      	add	r3, r2
 80088ce:	1e5a      	subs	r2, r3, #1
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088d8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	8afa      	ldrh	r2, [r7, #22]
 80088e0:	fb03 f202 	mul.w	r2, r3, r2
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	015a      	lsls	r2, r3, #5
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f4:	691a      	ldr	r2, [r3, #16]
 80088f6:	8afb      	ldrh	r3, [r7, #22]
 80088f8:	04d9      	lsls	r1, r3, #19
 80088fa:	4b3a      	ldr	r3, [pc, #232]	; (80089e4 <USB_EPStartXfer+0x49c>)
 80088fc:	400b      	ands	r3, r1
 80088fe:	69b9      	ldr	r1, [r7, #24]
 8008900:	0148      	lsls	r0, r1, #5
 8008902:	69f9      	ldr	r1, [r7, #28]
 8008904:	4401      	add	r1, r0
 8008906:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800890a:	4313      	orrs	r3, r2
 800890c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	015a      	lsls	r2, r3, #5
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	4413      	add	r3, r2
 8008916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800891a:	691a      	ldr	r2, [r3, #16]
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	69db      	ldr	r3, [r3, #28]
 8008920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008924:	69b9      	ldr	r1, [r7, #24]
 8008926:	0148      	lsls	r0, r1, #5
 8008928:	69f9      	ldr	r1, [r7, #28]
 800892a:	4401      	add	r1, r0
 800892c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008930:	4313      	orrs	r3, r2
 8008932:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008934:	79fb      	ldrb	r3, [r7, #7]
 8008936:	2b01      	cmp	r3, #1
 8008938:	d10d      	bne.n	8008956 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d009      	beq.n	8008956 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	6919      	ldr	r1, [r3, #16]
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	015a      	lsls	r2, r3, #5
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	4413      	add	r3, r2
 800894e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008952:	460a      	mov	r2, r1
 8008954:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	791b      	ldrb	r3, [r3, #4]
 800895a:	2b01      	cmp	r3, #1
 800895c:	d128      	bne.n	80089b0 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800896a:	2b00      	cmp	r3, #0
 800896c:	d110      	bne.n	8008990 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	015a      	lsls	r2, r3, #5
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	4413      	add	r3, r2
 8008976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	69ba      	ldr	r2, [r7, #24]
 800897e:	0151      	lsls	r1, r2, #5
 8008980:	69fa      	ldr	r2, [r7, #28]
 8008982:	440a      	add	r2, r1
 8008984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008988:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800898c:	6013      	str	r3, [r2, #0]
 800898e:	e00f      	b.n	80089b0 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	015a      	lsls	r2, r3, #5
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	4413      	add	r3, r2
 8008998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	69ba      	ldr	r2, [r7, #24]
 80089a0:	0151      	lsls	r1, r2, #5
 80089a2:	69fa      	ldr	r2, [r7, #28]
 80089a4:	440a      	add	r2, r1
 80089a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	015a      	lsls	r2, r3, #5
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	4413      	add	r3, r2
 80089b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	69ba      	ldr	r2, [r7, #24]
 80089c0:	0151      	lsls	r1, r2, #5
 80089c2:	69fa      	ldr	r2, [r7, #28]
 80089c4:	440a      	add	r2, r1
 80089c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80089ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3720      	adds	r7, #32
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	fff80000 	.word	0xfff80000
 80089e0:	e007ffff 	.word	0xe007ffff
 80089e4:	1ff80000 	.word	0x1ff80000

080089e8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b087      	sub	sp, #28
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	4613      	mov	r3, r2
 80089f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	785b      	ldrb	r3, [r3, #1]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	f040 80ce 	bne.w	8008ba6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	699b      	ldr	r3, [r3, #24]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d132      	bne.n	8008a78 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	015a      	lsls	r2, r3, #5
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	4413      	add	r3, r2
 8008a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a1e:	691a      	ldr	r2, [r3, #16]
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	0159      	lsls	r1, r3, #5
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	440b      	add	r3, r1
 8008a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	4b9a      	ldr	r3, [pc, #616]	; (8008c98 <USB_EP0StartXfer+0x2b0>)
 8008a30:	4013      	ands	r3, r2
 8008a32:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	015a      	lsls	r2, r3, #5
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	693a      	ldr	r2, [r7, #16]
 8008a44:	0151      	lsls	r1, r2, #5
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	440a      	add	r2, r1
 8008a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	015a      	lsls	r2, r3, #5
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	4413      	add	r3, r2
 8008a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a60:	691a      	ldr	r2, [r3, #16]
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	0159      	lsls	r1, r3, #5
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	440b      	add	r3, r1
 8008a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a6e:	4619      	mov	r1, r3
 8008a70:	4b8a      	ldr	r3, [pc, #552]	; (8008c9c <USB_EP0StartXfer+0x2b4>)
 8008a72:	4013      	ands	r3, r2
 8008a74:	610b      	str	r3, [r1, #16]
 8008a76:	e04e      	b.n	8008b16 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	015a      	lsls	r2, r3, #5
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	4413      	add	r3, r2
 8008a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a84:	691a      	ldr	r2, [r3, #16]
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	0159      	lsls	r1, r3, #5
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	440b      	add	r3, r1
 8008a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a92:	4619      	mov	r1, r3
 8008a94:	4b81      	ldr	r3, [pc, #516]	; (8008c9c <USB_EP0StartXfer+0x2b4>)
 8008a96:	4013      	ands	r3, r2
 8008a98:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	015a      	lsls	r2, r3, #5
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa6:	691a      	ldr	r2, [r3, #16]
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	0159      	lsls	r1, r3, #5
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	440b      	add	r3, r1
 8008ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	4b78      	ldr	r3, [pc, #480]	; (8008c98 <USB_EP0StartXfer+0x2b0>)
 8008ab8:	4013      	ands	r3, r2
 8008aba:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	699a      	ldr	r2, [r3, #24]
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d903      	bls.n	8008ad0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	68da      	ldr	r2, [r3, #12]
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	015a      	lsls	r2, r3, #5
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	693a      	ldr	r2, [r7, #16]
 8008ae0:	0151      	lsls	r1, r2, #5
 8008ae2:	697a      	ldr	r2, [r7, #20]
 8008ae4:	440a      	add	r2, r1
 8008ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008aee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	015a      	lsls	r2, r3, #5
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	4413      	add	r3, r2
 8008af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008afc:	691a      	ldr	r2, [r3, #16]
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b06:	6939      	ldr	r1, [r7, #16]
 8008b08:	0148      	lsls	r0, r1, #5
 8008b0a:	6979      	ldr	r1, [r7, #20]
 8008b0c:	4401      	add	r1, r0
 8008b0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b12:	4313      	orrs	r3, r2
 8008b14:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008b16:	79fb      	ldrb	r3, [r7, #7]
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d11e      	bne.n	8008b5a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	695b      	ldr	r3, [r3, #20]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d009      	beq.n	8008b38 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	015a      	lsls	r2, r3, #5
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b30:	461a      	mov	r2, r3
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	695b      	ldr	r3, [r3, #20]
 8008b36:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	015a      	lsls	r2, r3, #5
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	4413      	add	r3, r2
 8008b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	0151      	lsls	r1, r2, #5
 8008b4a:	697a      	ldr	r2, [r7, #20]
 8008b4c:	440a      	add	r2, r1
 8008b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b56:	6013      	str	r3, [r2, #0]
 8008b58:	e097      	b.n	8008c8a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	015a      	lsls	r2, r3, #5
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	0151      	lsls	r1, r2, #5
 8008b6c:	697a      	ldr	r2, [r7, #20]
 8008b6e:	440a      	add	r2, r1
 8008b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b78:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	f000 8083 	beq.w	8008c8a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	f003 030f 	and.w	r3, r3, #15
 8008b94:	2101      	movs	r1, #1
 8008b96:	fa01 f303 	lsl.w	r3, r1, r3
 8008b9a:	6979      	ldr	r1, [r7, #20]
 8008b9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	634b      	str	r3, [r1, #52]	; 0x34
 8008ba4:	e071      	b.n	8008c8a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	015a      	lsls	r2, r3, #5
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	4413      	add	r3, r2
 8008bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bb2:	691a      	ldr	r2, [r3, #16]
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	0159      	lsls	r1, r3, #5
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	440b      	add	r3, r1
 8008bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	4b36      	ldr	r3, [pc, #216]	; (8008c9c <USB_EP0StartXfer+0x2b4>)
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	015a      	lsls	r2, r3, #5
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd4:	691a      	ldr	r2, [r3, #16]
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	0159      	lsls	r1, r3, #5
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	440b      	add	r3, r1
 8008bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be2:	4619      	mov	r1, r3
 8008be4:	4b2c      	ldr	r3, [pc, #176]	; (8008c98 <USB_EP0StartXfer+0x2b0>)
 8008be6:	4013      	ands	r3, r2
 8008be8:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	699b      	ldr	r3, [r3, #24]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d003      	beq.n	8008bfa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	68da      	ldr	r2, [r3, #12]
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	68da      	ldr	r2, [r3, #12]
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	015a      	lsls	r2, r3, #5
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	4413      	add	r3, r2
 8008c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	0151      	lsls	r1, r2, #5
 8008c14:	697a      	ldr	r2, [r7, #20]
 8008c16:	440a      	add	r2, r1
 8008c18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	015a      	lsls	r2, r3, #5
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	4413      	add	r3, r2
 8008c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c2e:	691a      	ldr	r2, [r3, #16]
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	69db      	ldr	r3, [r3, #28]
 8008c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c38:	6939      	ldr	r1, [r7, #16]
 8008c3a:	0148      	lsls	r0, r1, #5
 8008c3c:	6979      	ldr	r1, [r7, #20]
 8008c3e:	4401      	add	r1, r0
 8008c40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008c44:	4313      	orrs	r3, r2
 8008c46:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008c48:	79fb      	ldrb	r3, [r7, #7]
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d10d      	bne.n	8008c6a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d009      	beq.n	8008c6a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	6919      	ldr	r1, [r3, #16]
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	015a      	lsls	r2, r3, #5
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	4413      	add	r3, r2
 8008c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c66:	460a      	mov	r2, r1
 8008c68:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	015a      	lsls	r2, r3, #5
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	4413      	add	r3, r2
 8008c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	693a      	ldr	r2, [r7, #16]
 8008c7a:	0151      	lsls	r1, r2, #5
 8008c7c:	697a      	ldr	r2, [r7, #20]
 8008c7e:	440a      	add	r2, r1
 8008c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c88:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	371c      	adds	r7, #28
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr
 8008c98:	e007ffff 	.word	0xe007ffff
 8008c9c:	fff80000 	.word	0xfff80000

08008ca0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b087      	sub	sp, #28
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008caa:	2300      	movs	r3, #0
 8008cac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	785b      	ldrb	r3, [r3, #1]
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d14a      	bne.n	8008d54 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	015a      	lsls	r2, r3, #5
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cd6:	f040 8086 	bne.w	8008de6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	015a      	lsls	r2, r3, #5
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	683a      	ldr	r2, [r7, #0]
 8008cec:	7812      	ldrb	r2, [r2, #0]
 8008cee:	0151      	lsls	r1, r2, #5
 8008cf0:	693a      	ldr	r2, [r7, #16]
 8008cf2:	440a      	add	r2, r1
 8008cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cf8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008cfc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	015a      	lsls	r2, r3, #5
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	4413      	add	r3, r2
 8008d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	7812      	ldrb	r2, [r2, #0]
 8008d12:	0151      	lsls	r1, r2, #5
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	440a      	add	r2, r1
 8008d18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d20:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	3301      	adds	r3, #1
 8008d26:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f242 7210 	movw	r2, #10000	; 0x2710
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d902      	bls.n	8008d38 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	75fb      	strb	r3, [r7, #23]
          break;
 8008d36:	e056      	b.n	8008de6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	015a      	lsls	r2, r3, #5
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	4413      	add	r3, r2
 8008d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d50:	d0e7      	beq.n	8008d22 <USB_EPStopXfer+0x82>
 8008d52:	e048      	b.n	8008de6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	015a      	lsls	r2, r3, #5
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d6c:	d13b      	bne.n	8008de6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	015a      	lsls	r2, r3, #5
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	4413      	add	r3, r2
 8008d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	683a      	ldr	r2, [r7, #0]
 8008d80:	7812      	ldrb	r2, [r2, #0]
 8008d82:	0151      	lsls	r1, r2, #5
 8008d84:	693a      	ldr	r2, [r7, #16]
 8008d86:	440a      	add	r2, r1
 8008d88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d90:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	015a      	lsls	r2, r3, #5
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	683a      	ldr	r2, [r7, #0]
 8008da4:	7812      	ldrb	r2, [r2, #0]
 8008da6:	0151      	lsls	r1, r2, #5
 8008da8:	693a      	ldr	r2, [r7, #16]
 8008daa:	440a      	add	r2, r1
 8008dac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008db0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008db4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	3301      	adds	r3, #1
 8008dba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f242 7210 	movw	r2, #10000	; 0x2710
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d902      	bls.n	8008dcc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	75fb      	strb	r3, [r7, #23]
          break;
 8008dca:	e00c      	b.n	8008de6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	015a      	lsls	r2, r3, #5
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008de0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008de4:	d0e7      	beq.n	8008db6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	371c      	adds	r7, #28
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b089      	sub	sp, #36	; 0x24
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	4611      	mov	r1, r2
 8008e00:	461a      	mov	r2, r3
 8008e02:	460b      	mov	r3, r1
 8008e04:	71fb      	strb	r3, [r7, #7]
 8008e06:	4613      	mov	r3, r2
 8008e08:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008e12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d123      	bne.n	8008e62 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008e1a:	88bb      	ldrh	r3, [r7, #4]
 8008e1c:	3303      	adds	r3, #3
 8008e1e:	089b      	lsrs	r3, r3, #2
 8008e20:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008e22:	2300      	movs	r3, #0
 8008e24:	61bb      	str	r3, [r7, #24]
 8008e26:	e018      	b.n	8008e5a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008e28:	79fb      	ldrb	r3, [r7, #7]
 8008e2a:	031a      	lsls	r2, r3, #12
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	4413      	add	r3, r2
 8008e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e34:	461a      	mov	r2, r3
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	3301      	adds	r3, #1
 8008e46:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	3301      	adds	r3, #1
 8008e52:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	3301      	adds	r3, #1
 8008e58:	61bb      	str	r3, [r7, #24]
 8008e5a:	69ba      	ldr	r2, [r7, #24]
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d3e2      	bcc.n	8008e28 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3724      	adds	r7, #36	; 0x24
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b08b      	sub	sp, #44	; 0x2c
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008e86:	88fb      	ldrh	r3, [r7, #6]
 8008e88:	089b      	lsrs	r3, r3, #2
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008e8e:	88fb      	ldrh	r3, [r7, #6]
 8008e90:	f003 0303 	and.w	r3, r3, #3
 8008e94:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008e96:	2300      	movs	r3, #0
 8008e98:	623b      	str	r3, [r7, #32]
 8008e9a:	e014      	b.n	8008ec6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	601a      	str	r2, [r3, #0]
    pDest++;
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eaa:	3301      	adds	r3, #1
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008ec0:	6a3b      	ldr	r3, [r7, #32]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	623b      	str	r3, [r7, #32]
 8008ec6:	6a3a      	ldr	r2, [r7, #32]
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d3e6      	bcc.n	8008e9c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008ece:	8bfb      	ldrh	r3, [r7, #30]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d01e      	beq.n	8008f12 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ede:	461a      	mov	r2, r3
 8008ee0:	f107 0310 	add.w	r3, r7, #16
 8008ee4:	6812      	ldr	r2, [r2, #0]
 8008ee6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008ee8:	693a      	ldr	r2, [r7, #16]
 8008eea:	6a3b      	ldr	r3, [r7, #32]
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	00db      	lsls	r3, r3, #3
 8008ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ef4:	b2da      	uxtb	r2, r3
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef8:	701a      	strb	r2, [r3, #0]
      i++;
 8008efa:	6a3b      	ldr	r3, [r7, #32]
 8008efc:	3301      	adds	r3, #1
 8008efe:	623b      	str	r3, [r7, #32]
      pDest++;
 8008f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f02:	3301      	adds	r3, #1
 8008f04:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008f06:	8bfb      	ldrh	r3, [r7, #30]
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008f0c:	8bfb      	ldrh	r3, [r7, #30]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1ea      	bne.n	8008ee8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	372c      	adds	r7, #44	; 0x2c
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	785b      	ldrb	r3, [r3, #1]
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d12c      	bne.n	8008f96 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	015a      	lsls	r2, r3, #5
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	4413      	add	r3, r2
 8008f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	db12      	blt.n	8008f74 <USB_EPSetStall+0x54>
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00f      	beq.n	8008f74 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	015a      	lsls	r2, r3, #5
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68ba      	ldr	r2, [r7, #8]
 8008f64:	0151      	lsls	r1, r2, #5
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	440a      	add	r2, r1
 8008f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008f72:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	015a      	lsls	r2, r3, #5
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	4413      	add	r3, r2
 8008f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	0151      	lsls	r1, r2, #5
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	440a      	add	r2, r1
 8008f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f92:	6013      	str	r3, [r2, #0]
 8008f94:	e02b      	b.n	8008fee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	015a      	lsls	r2, r3, #5
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	db12      	blt.n	8008fce <USB_EPSetStall+0xae>
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00f      	beq.n	8008fce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	015a      	lsls	r2, r3, #5
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	0151      	lsls	r1, r2, #5
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	440a      	add	r2, r1
 8008fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fc8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008fcc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	015a      	lsls	r2, r3, #5
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68ba      	ldr	r2, [r7, #8]
 8008fde:	0151      	lsls	r1, r2, #5
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	440a      	add	r2, r1
 8008fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fe8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008fec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3714      	adds	r7, #20
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	785b      	ldrb	r3, [r3, #1]
 8009014:	2b01      	cmp	r3, #1
 8009016:	d128      	bne.n	800906a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	015a      	lsls	r2, r3, #5
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	4413      	add	r3, r2
 8009020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	0151      	lsls	r1, r2, #5
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	440a      	add	r2, r1
 800902e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009032:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009036:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	791b      	ldrb	r3, [r3, #4]
 800903c:	2b03      	cmp	r3, #3
 800903e:	d003      	beq.n	8009048 <USB_EPClearStall+0x4c>
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	791b      	ldrb	r3, [r3, #4]
 8009044:	2b02      	cmp	r3, #2
 8009046:	d138      	bne.n	80090ba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	015a      	lsls	r2, r3, #5
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	4413      	add	r3, r2
 8009050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	68ba      	ldr	r2, [r7, #8]
 8009058:	0151      	lsls	r1, r2, #5
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	440a      	add	r2, r1
 800905e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009066:	6013      	str	r3, [r2, #0]
 8009068:	e027      	b.n	80090ba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	015a      	lsls	r2, r3, #5
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	4413      	add	r3, r2
 8009072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68ba      	ldr	r2, [r7, #8]
 800907a:	0151      	lsls	r1, r2, #5
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	440a      	add	r2, r1
 8009080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009084:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009088:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	791b      	ldrb	r3, [r3, #4]
 800908e:	2b03      	cmp	r3, #3
 8009090:	d003      	beq.n	800909a <USB_EPClearStall+0x9e>
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	791b      	ldrb	r3, [r3, #4]
 8009096:	2b02      	cmp	r3, #2
 8009098:	d10f      	bne.n	80090ba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	015a      	lsls	r2, r3, #5
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	4413      	add	r3, r2
 80090a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68ba      	ldr	r2, [r7, #8]
 80090aa:	0151      	lsls	r1, r2, #5
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	440a      	add	r2, r1
 80090b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090b8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3714      	adds	r7, #20
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	460b      	mov	r3, r1
 80090d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	68fa      	ldr	r2, [r7, #12]
 80090e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090e6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80090ea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	78fb      	ldrb	r3, [r7, #3]
 80090f6:	011b      	lsls	r3, r3, #4
 80090f8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80090fc:	68f9      	ldr	r1, [r7, #12]
 80090fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009102:	4313      	orrs	r3, r2
 8009104:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	3714      	adds	r7, #20
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800912e:	f023 0303 	bic.w	r3, r3, #3
 8009132:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009142:	f023 0302 	bic.w	r3, r3, #2
 8009146:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009148:	2300      	movs	r3, #0
}
 800914a:	4618      	mov	r0, r3
 800914c:	3714      	adds	r7, #20
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr

08009156 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009156:	b480      	push	{r7}
 8009158:	b085      	sub	sp, #20
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009170:	f023 0303 	bic.w	r3, r3, #3
 8009174:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009184:	f043 0302 	orr.w	r3, r3, #2
 8009188:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800918a:	2300      	movs	r3, #0
}
 800918c:	4618      	mov	r0, r3
 800918e:	3714      	adds	r7, #20
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	695b      	ldr	r3, [r3, #20]
 80091a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	4013      	ands	r3, r2
 80091ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80091b0:	68fb      	ldr	r3, [r7, #12]
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3714      	adds	r7, #20
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr

080091be <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80091be:	b480      	push	{r7}
 80091c0:	b085      	sub	sp, #20
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091d0:	699b      	ldr	r3, [r3, #24]
 80091d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091da:	69db      	ldr	r3, [r3, #28]
 80091dc:	68ba      	ldr	r2, [r7, #8]
 80091de:	4013      	ands	r3, r2
 80091e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	0c1b      	lsrs	r3, r3, #16
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr

080091f2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80091f2:	b480      	push	{r7}
 80091f4:	b085      	sub	sp, #20
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009204:	699b      	ldr	r3, [r3, #24]
 8009206:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800920e:	69db      	ldr	r3, [r3, #28]
 8009210:	68ba      	ldr	r2, [r7, #8]
 8009212:	4013      	ands	r3, r2
 8009214:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	b29b      	uxth	r3, r3
}
 800921a:	4618      	mov	r0, r3
 800921c:	3714      	adds	r7, #20
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr

08009226 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009226:	b480      	push	{r7}
 8009228:	b085      	sub	sp, #20
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
 800922e:	460b      	mov	r3, r1
 8009230:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009236:	78fb      	ldrb	r3, [r7, #3]
 8009238:	015a      	lsls	r2, r3, #5
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	4413      	add	r3, r2
 800923e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800924c:	695b      	ldr	r3, [r3, #20]
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	4013      	ands	r3, r2
 8009252:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009254:	68bb      	ldr	r3, [r7, #8]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3714      	adds	r7, #20
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009262:	b480      	push	{r7}
 8009264:	b087      	sub	sp, #28
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
 800926a:	460b      	mov	r3, r1
 800926c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009278:	691b      	ldr	r3, [r3, #16]
 800927a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009284:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009286:	78fb      	ldrb	r3, [r7, #3]
 8009288:	f003 030f 	and.w	r3, r3, #15
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	fa22 f303 	lsr.w	r3, r2, r3
 8009292:	01db      	lsls	r3, r3, #7
 8009294:	b2db      	uxtb	r3, r3
 8009296:	693a      	ldr	r2, [r7, #16]
 8009298:	4313      	orrs	r3, r2
 800929a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800929c:	78fb      	ldrb	r3, [r7, #3]
 800929e:	015a      	lsls	r2, r3, #5
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	4413      	add	r3, r2
 80092a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	693a      	ldr	r2, [r7, #16]
 80092ac:	4013      	ands	r3, r2
 80092ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80092b0:	68bb      	ldr	r3, [r7, #8]
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	371c      	adds	r7, #28
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr

080092be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80092be:	b480      	push	{r7}
 80092c0:	b083      	sub	sp, #12
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	f003 0301 	and.w	r3, r3, #1
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	370c      	adds	r7, #12
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
	...

080092dc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f6:	4619      	mov	r1, r3
 80092f8:	4b09      	ldr	r3, [pc, #36]	; (8009320 <USB_ActivateSetup+0x44>)
 80092fa:	4013      	ands	r3, r2
 80092fc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800930c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009310:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3714      	adds	r7, #20
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr
 8009320:	fffff800 	.word	0xfffff800

08009324 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009324:	b480      	push	{r7}
 8009326:	b087      	sub	sp, #28
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	460b      	mov	r3, r1
 800932e:	607a      	str	r2, [r7, #4]
 8009330:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	333c      	adds	r3, #60	; 0x3c
 800933a:	3304      	adds	r3, #4
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	4a26      	ldr	r2, [pc, #152]	; (80093dc <USB_EP0_OutStart+0xb8>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d90a      	bls.n	800935e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009354:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009358:	d101      	bne.n	800935e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800935a:	2300      	movs	r3, #0
 800935c:	e037      	b.n	80093ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009364:	461a      	mov	r2, r3
 8009366:	2300      	movs	r3, #0
 8009368:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	697a      	ldr	r2, [r7, #20]
 8009374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009378:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800937c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	697a      	ldr	r2, [r7, #20]
 8009388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800938c:	f043 0318 	orr.w	r3, r3, #24
 8009390:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	697a      	ldr	r2, [r7, #20]
 800939c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80093a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80093a6:	7afb      	ldrb	r3, [r7, #11]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d10f      	bne.n	80093cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b2:	461a      	mov	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	697a      	ldr	r2, [r7, #20]
 80093c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093c6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80093ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	371c      	adds	r7, #28
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	4f54300a 	.word	0x4f54300a

080093e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b085      	sub	sp, #20
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093e8:	2300      	movs	r3, #0
 80093ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	3301      	adds	r3, #1
 80093f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	4a13      	ldr	r2, [pc, #76]	; (8009444 <USB_CoreReset+0x64>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d901      	bls.n	80093fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80093fa:	2303      	movs	r3, #3
 80093fc:	e01b      	b.n	8009436 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	691b      	ldr	r3, [r3, #16]
 8009402:	2b00      	cmp	r3, #0
 8009404:	daf2      	bge.n	80093ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009406:	2300      	movs	r3, #0
 8009408:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	f043 0201 	orr.w	r2, r3, #1
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	3301      	adds	r3, #1
 800941a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4a09      	ldr	r2, [pc, #36]	; (8009444 <USB_CoreReset+0x64>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d901      	bls.n	8009428 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009424:	2303      	movs	r3, #3
 8009426:	e006      	b.n	8009436 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	f003 0301 	and.w	r3, r3, #1
 8009430:	2b01      	cmp	r3, #1
 8009432:	d0f0      	beq.n	8009416 <USB_CoreReset+0x36>

  return HAL_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3714      	adds	r7, #20
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	00030d40 	.word	0x00030d40

08009448 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	460b      	mov	r3, r1
 8009452:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009454:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009458:	f005 fd90 	bl	800ef7c <malloc>
 800945c:	4603      	mov	r3, r0
 800945e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d109      	bne.n	800947a <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	32b0      	adds	r2, #176	; 0xb0
 8009470:	2100      	movs	r1, #0
 8009472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009476:	2302      	movs	r3, #2
 8009478:	e0d4      	b.n	8009624 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800947a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800947e:	2100      	movs	r1, #0
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	f005 fed3 	bl	800f22c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	32b0      	adds	r2, #176	; 0xb0
 8009490:	68f9      	ldr	r1, [r7, #12]
 8009492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	32b0      	adds	r2, #176	; 0xb0
 80094a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	7c1b      	ldrb	r3, [r3, #16]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d138      	bne.n	8009524 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80094b2:	4b5e      	ldr	r3, [pc, #376]	; (800962c <USBD_CDC_Init+0x1e4>)
 80094b4:	7819      	ldrb	r1, [r3, #0]
 80094b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094ba:	2202      	movs	r2, #2
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f005 fbba 	bl	800ec36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80094c2:	4b5a      	ldr	r3, [pc, #360]	; (800962c <USBD_CDC_Init+0x1e4>)
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	f003 020f 	and.w	r2, r3, #15
 80094ca:	6879      	ldr	r1, [r7, #4]
 80094cc:	4613      	mov	r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	4413      	add	r3, r2
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	440b      	add	r3, r1
 80094d6:	3324      	adds	r3, #36	; 0x24
 80094d8:	2201      	movs	r2, #1
 80094da:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80094dc:	4b54      	ldr	r3, [pc, #336]	; (8009630 <USBD_CDC_Init+0x1e8>)
 80094de:	7819      	ldrb	r1, [r3, #0]
 80094e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094e4:	2202      	movs	r2, #2
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f005 fba5 	bl	800ec36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80094ec:	4b50      	ldr	r3, [pc, #320]	; (8009630 <USBD_CDC_Init+0x1e8>)
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	f003 020f 	and.w	r2, r3, #15
 80094f4:	6879      	ldr	r1, [r7, #4]
 80094f6:	4613      	mov	r3, r2
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	4413      	add	r3, r2
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	440b      	add	r3, r1
 8009500:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009504:	2201      	movs	r2, #1
 8009506:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009508:	4b4a      	ldr	r3, [pc, #296]	; (8009634 <USBD_CDC_Init+0x1ec>)
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	f003 020f 	and.w	r2, r3, #15
 8009510:	6879      	ldr	r1, [r7, #4]
 8009512:	4613      	mov	r3, r2
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	4413      	add	r3, r2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	440b      	add	r3, r1
 800951c:	3326      	adds	r3, #38	; 0x26
 800951e:	2210      	movs	r2, #16
 8009520:	801a      	strh	r2, [r3, #0]
 8009522:	e035      	b.n	8009590 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009524:	4b41      	ldr	r3, [pc, #260]	; (800962c <USBD_CDC_Init+0x1e4>)
 8009526:	7819      	ldrb	r1, [r3, #0]
 8009528:	2340      	movs	r3, #64	; 0x40
 800952a:	2202      	movs	r2, #2
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f005 fb82 	bl	800ec36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009532:	4b3e      	ldr	r3, [pc, #248]	; (800962c <USBD_CDC_Init+0x1e4>)
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	f003 020f 	and.w	r2, r3, #15
 800953a:	6879      	ldr	r1, [r7, #4]
 800953c:	4613      	mov	r3, r2
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	4413      	add	r3, r2
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	440b      	add	r3, r1
 8009546:	3324      	adds	r3, #36	; 0x24
 8009548:	2201      	movs	r2, #1
 800954a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800954c:	4b38      	ldr	r3, [pc, #224]	; (8009630 <USBD_CDC_Init+0x1e8>)
 800954e:	7819      	ldrb	r1, [r3, #0]
 8009550:	2340      	movs	r3, #64	; 0x40
 8009552:	2202      	movs	r2, #2
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f005 fb6e 	bl	800ec36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800955a:	4b35      	ldr	r3, [pc, #212]	; (8009630 <USBD_CDC_Init+0x1e8>)
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	f003 020f 	and.w	r2, r3, #15
 8009562:	6879      	ldr	r1, [r7, #4]
 8009564:	4613      	mov	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	4413      	add	r3, r2
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	440b      	add	r3, r1
 800956e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009572:	2201      	movs	r2, #1
 8009574:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009576:	4b2f      	ldr	r3, [pc, #188]	; (8009634 <USBD_CDC_Init+0x1ec>)
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	f003 020f 	and.w	r2, r3, #15
 800957e:	6879      	ldr	r1, [r7, #4]
 8009580:	4613      	mov	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	4413      	add	r3, r2
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	440b      	add	r3, r1
 800958a:	3326      	adds	r3, #38	; 0x26
 800958c:	2210      	movs	r2, #16
 800958e:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009590:	4b28      	ldr	r3, [pc, #160]	; (8009634 <USBD_CDC_Init+0x1ec>)
 8009592:	7819      	ldrb	r1, [r3, #0]
 8009594:	2308      	movs	r3, #8
 8009596:	2203      	movs	r2, #3
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f005 fb4c 	bl	800ec36 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800959e:	4b25      	ldr	r3, [pc, #148]	; (8009634 <USBD_CDC_Init+0x1ec>)
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	f003 020f 	and.w	r2, r3, #15
 80095a6:	6879      	ldr	r1, [r7, #4]
 80095a8:	4613      	mov	r3, r2
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	4413      	add	r3, r2
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	440b      	add	r3, r1
 80095b2:	3324      	adds	r3, #36	; 0x24
 80095b4:	2201      	movs	r2, #1
 80095b6:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	33b0      	adds	r3, #176	; 0xb0
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	4413      	add	r3, r2
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2200      	movs	r2, #0
 80095e0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d101      	bne.n	80095f2 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 80095ee:	2302      	movs	r3, #2
 80095f0:	e018      	b.n	8009624 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	7c1b      	ldrb	r3, [r3, #16]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d10a      	bne.n	8009610 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80095fa:	4b0d      	ldr	r3, [pc, #52]	; (8009630 <USBD_CDC_Init+0x1e8>)
 80095fc:	7819      	ldrb	r1, [r3, #0]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f005 fc03 	bl	800ee14 <USBD_LL_PrepareReceive>
 800960e:	e008      	b.n	8009622 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009610:	4b07      	ldr	r3, [pc, #28]	; (8009630 <USBD_CDC_Init+0x1e8>)
 8009612:	7819      	ldrb	r1, [r3, #0]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800961a:	2340      	movs	r3, #64	; 0x40
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f005 fbf9 	bl	800ee14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	20000093 	.word	0x20000093
 8009630:	20000094 	.word	0x20000094
 8009634:	20000095 	.word	0x20000095

08009638 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	460b      	mov	r3, r1
 8009642:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009644:	4b3a      	ldr	r3, [pc, #232]	; (8009730 <USBD_CDC_DeInit+0xf8>)
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	4619      	mov	r1, r3
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f005 fb19 	bl	800ec82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009650:	4b37      	ldr	r3, [pc, #220]	; (8009730 <USBD_CDC_DeInit+0xf8>)
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	f003 020f 	and.w	r2, r3, #15
 8009658:	6879      	ldr	r1, [r7, #4]
 800965a:	4613      	mov	r3, r2
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	4413      	add	r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	440b      	add	r3, r1
 8009664:	3324      	adds	r3, #36	; 0x24
 8009666:	2200      	movs	r2, #0
 8009668:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800966a:	4b32      	ldr	r3, [pc, #200]	; (8009734 <USBD_CDC_DeInit+0xfc>)
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	4619      	mov	r1, r3
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f005 fb06 	bl	800ec82 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009676:	4b2f      	ldr	r3, [pc, #188]	; (8009734 <USBD_CDC_DeInit+0xfc>)
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	f003 020f 	and.w	r2, r3, #15
 800967e:	6879      	ldr	r1, [r7, #4]
 8009680:	4613      	mov	r3, r2
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	4413      	add	r3, r2
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	440b      	add	r3, r1
 800968a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800968e:	2200      	movs	r2, #0
 8009690:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009692:	4b29      	ldr	r3, [pc, #164]	; (8009738 <USBD_CDC_DeInit+0x100>)
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	4619      	mov	r1, r3
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f005 faf2 	bl	800ec82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800969e:	4b26      	ldr	r3, [pc, #152]	; (8009738 <USBD_CDC_DeInit+0x100>)
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	f003 020f 	and.w	r2, r3, #15
 80096a6:	6879      	ldr	r1, [r7, #4]
 80096a8:	4613      	mov	r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	4413      	add	r3, r2
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	440b      	add	r3, r1
 80096b2:	3324      	adds	r3, #36	; 0x24
 80096b4:	2200      	movs	r2, #0
 80096b6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80096b8:	4b1f      	ldr	r3, [pc, #124]	; (8009738 <USBD_CDC_DeInit+0x100>)
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	f003 020f 	and.w	r2, r3, #15
 80096c0:	6879      	ldr	r1, [r7, #4]
 80096c2:	4613      	mov	r3, r2
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	4413      	add	r3, r2
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	440b      	add	r3, r1
 80096cc:	3326      	adds	r3, #38	; 0x26
 80096ce:	2200      	movs	r2, #0
 80096d0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	32b0      	adds	r2, #176	; 0xb0
 80096dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d01f      	beq.n	8009724 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	33b0      	adds	r3, #176	; 0xb0
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	4413      	add	r3, r2
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	32b0      	adds	r2, #176	; 0xb0
 8009702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009706:	4618      	mov	r0, r3
 8009708:	f005 fc40 	bl	800ef8c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	32b0      	adds	r2, #176	; 0xb0
 8009716:	2100      	movs	r1, #0
 8009718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	20000093 	.word	0x20000093
 8009734:	20000094 	.word	0x20000094
 8009738:	20000095 	.word	0x20000095

0800973c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b086      	sub	sp, #24
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	32b0      	adds	r2, #176	; 0xb0
 8009750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009754:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009756:	2300      	movs	r3, #0
 8009758:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800975a:	2300      	movs	r3, #0
 800975c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d101      	bne.n	800976c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009768:	2303      	movs	r3, #3
 800976a:	e0bf      	b.n	80098ec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009774:	2b00      	cmp	r3, #0
 8009776:	d050      	beq.n	800981a <USBD_CDC_Setup+0xde>
 8009778:	2b20      	cmp	r3, #32
 800977a:	f040 80af 	bne.w	80098dc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	88db      	ldrh	r3, [r3, #6]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d03a      	beq.n	80097fc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	b25b      	sxtb	r3, r3
 800978c:	2b00      	cmp	r3, #0
 800978e:	da1b      	bge.n	80097c8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	33b0      	adds	r3, #176	; 0xb0
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	4413      	add	r3, r2
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	683a      	ldr	r2, [r7, #0]
 80097a4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80097a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80097a8:	683a      	ldr	r2, [r7, #0]
 80097aa:	88d2      	ldrh	r2, [r2, #6]
 80097ac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	88db      	ldrh	r3, [r3, #6]
 80097b2:	2b07      	cmp	r3, #7
 80097b4:	bf28      	it	cs
 80097b6:	2307      	movcs	r3, #7
 80097b8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	89fa      	ldrh	r2, [r7, #14]
 80097be:	4619      	mov	r1, r3
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f001 fd6d 	bl	800b2a0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80097c6:	e090      	b.n	80098ea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	785a      	ldrb	r2, [r3, #1]
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	88db      	ldrh	r3, [r3, #6]
 80097d6:	2b3f      	cmp	r3, #63	; 0x3f
 80097d8:	d803      	bhi.n	80097e2 <USBD_CDC_Setup+0xa6>
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	88db      	ldrh	r3, [r3, #6]
 80097de:	b2da      	uxtb	r2, r3
 80097e0:	e000      	b.n	80097e4 <USBD_CDC_Setup+0xa8>
 80097e2:	2240      	movs	r2, #64	; 0x40
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80097ea:	6939      	ldr	r1, [r7, #16]
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80097f2:	461a      	mov	r2, r3
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f001 fd7f 	bl	800b2f8 <USBD_CtlPrepareRx>
      break;
 80097fa:	e076      	b.n	80098ea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	33b0      	adds	r3, #176	; 0xb0
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	4413      	add	r3, r2
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	683a      	ldr	r2, [r7, #0]
 8009810:	7850      	ldrb	r0, [r2, #1]
 8009812:	2200      	movs	r2, #0
 8009814:	6839      	ldr	r1, [r7, #0]
 8009816:	4798      	blx	r3
      break;
 8009818:	e067      	b.n	80098ea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	785b      	ldrb	r3, [r3, #1]
 800981e:	2b0b      	cmp	r3, #11
 8009820:	d851      	bhi.n	80098c6 <USBD_CDC_Setup+0x18a>
 8009822:	a201      	add	r2, pc, #4	; (adr r2, 8009828 <USBD_CDC_Setup+0xec>)
 8009824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009828:	08009859 	.word	0x08009859
 800982c:	080098d5 	.word	0x080098d5
 8009830:	080098c7 	.word	0x080098c7
 8009834:	080098c7 	.word	0x080098c7
 8009838:	080098c7 	.word	0x080098c7
 800983c:	080098c7 	.word	0x080098c7
 8009840:	080098c7 	.word	0x080098c7
 8009844:	080098c7 	.word	0x080098c7
 8009848:	080098c7 	.word	0x080098c7
 800984c:	080098c7 	.word	0x080098c7
 8009850:	08009883 	.word	0x08009883
 8009854:	080098ad 	.word	0x080098ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800985e:	b2db      	uxtb	r3, r3
 8009860:	2b03      	cmp	r3, #3
 8009862:	d107      	bne.n	8009874 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009864:	f107 030a 	add.w	r3, r7, #10
 8009868:	2202      	movs	r2, #2
 800986a:	4619      	mov	r1, r3
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f001 fd17 	bl	800b2a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009872:	e032      	b.n	80098da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009874:	6839      	ldr	r1, [r7, #0]
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f001 fca1 	bl	800b1be <USBD_CtlError>
            ret = USBD_FAIL;
 800987c:	2303      	movs	r3, #3
 800987e:	75fb      	strb	r3, [r7, #23]
          break;
 8009880:	e02b      	b.n	80098da <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2b03      	cmp	r3, #3
 800988c:	d107      	bne.n	800989e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800988e:	f107 030d 	add.w	r3, r7, #13
 8009892:	2201      	movs	r2, #1
 8009894:	4619      	mov	r1, r3
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f001 fd02 	bl	800b2a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800989c:	e01d      	b.n	80098da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800989e:	6839      	ldr	r1, [r7, #0]
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f001 fc8c 	bl	800b1be <USBD_CtlError>
            ret = USBD_FAIL;
 80098a6:	2303      	movs	r3, #3
 80098a8:	75fb      	strb	r3, [r7, #23]
          break;
 80098aa:	e016      	b.n	80098da <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	2b03      	cmp	r3, #3
 80098b6:	d00f      	beq.n	80098d8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80098b8:	6839      	ldr	r1, [r7, #0]
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f001 fc7f 	bl	800b1be <USBD_CtlError>
            ret = USBD_FAIL;
 80098c0:	2303      	movs	r3, #3
 80098c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80098c4:	e008      	b.n	80098d8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80098c6:	6839      	ldr	r1, [r7, #0]
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f001 fc78 	bl	800b1be <USBD_CtlError>
          ret = USBD_FAIL;
 80098ce:	2303      	movs	r3, #3
 80098d0:	75fb      	strb	r3, [r7, #23]
          break;
 80098d2:	e002      	b.n	80098da <USBD_CDC_Setup+0x19e>
          break;
 80098d4:	bf00      	nop
 80098d6:	e008      	b.n	80098ea <USBD_CDC_Setup+0x1ae>
          break;
 80098d8:	bf00      	nop
      }
      break;
 80098da:	e006      	b.n	80098ea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80098dc:	6839      	ldr	r1, [r7, #0]
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f001 fc6d 	bl	800b1be <USBD_CtlError>
      ret = USBD_FAIL;
 80098e4:	2303      	movs	r3, #3
 80098e6:	75fb      	strb	r3, [r7, #23]
      break;
 80098e8:	bf00      	nop
  }

  return (uint8_t)ret;
 80098ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3718      	adds	r7, #24
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	460b      	mov	r3, r1
 80098fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009906:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	32b0      	adds	r2, #176	; 0xb0
 8009912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d101      	bne.n	800991e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800991a:	2303      	movs	r3, #3
 800991c:	e065      	b.n	80099ea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	32b0      	adds	r2, #176	; 0xb0
 8009928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800992c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800992e:	78fb      	ldrb	r3, [r7, #3]
 8009930:	f003 020f 	and.w	r2, r3, #15
 8009934:	6879      	ldr	r1, [r7, #4]
 8009936:	4613      	mov	r3, r2
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	4413      	add	r3, r2
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	440b      	add	r3, r1
 8009940:	3318      	adds	r3, #24
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d02f      	beq.n	80099a8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009948:	78fb      	ldrb	r3, [r7, #3]
 800994a:	f003 020f 	and.w	r2, r3, #15
 800994e:	6879      	ldr	r1, [r7, #4]
 8009950:	4613      	mov	r3, r2
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	4413      	add	r3, r2
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	440b      	add	r3, r1
 800995a:	3318      	adds	r3, #24
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	78fb      	ldrb	r3, [r7, #3]
 8009960:	f003 010f 	and.w	r1, r3, #15
 8009964:	68f8      	ldr	r0, [r7, #12]
 8009966:	460b      	mov	r3, r1
 8009968:	00db      	lsls	r3, r3, #3
 800996a:	440b      	add	r3, r1
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	4403      	add	r3, r0
 8009970:	3348      	adds	r3, #72	; 0x48
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	fbb2 f1f3 	udiv	r1, r2, r3
 8009978:	fb01 f303 	mul.w	r3, r1, r3
 800997c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800997e:	2b00      	cmp	r3, #0
 8009980:	d112      	bne.n	80099a8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009982:	78fb      	ldrb	r3, [r7, #3]
 8009984:	f003 020f 	and.w	r2, r3, #15
 8009988:	6879      	ldr	r1, [r7, #4]
 800998a:	4613      	mov	r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	4413      	add	r3, r2
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	440b      	add	r3, r1
 8009994:	3318      	adds	r3, #24
 8009996:	2200      	movs	r2, #0
 8009998:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800999a:	78f9      	ldrb	r1, [r7, #3]
 800999c:	2300      	movs	r3, #0
 800999e:	2200      	movs	r2, #0
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f005 fa16 	bl	800edd2 <USBD_LL_Transmit>
 80099a6:	e01f      	b.n	80099e8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	33b0      	adds	r3, #176	; 0xb0
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	4413      	add	r3, r2
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d010      	beq.n	80099e8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	33b0      	adds	r3, #176	; 0xb0
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	4413      	add	r3, r2
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	68ba      	ldr	r2, [r7, #8]
 80099da:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80099e4:	78fa      	ldrb	r2, [r7, #3]
 80099e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b084      	sub	sp, #16
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
 80099fa:	460b      	mov	r3, r1
 80099fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	32b0      	adds	r2, #176	; 0xb0
 8009a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a0c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	32b0      	adds	r2, #176	; 0xb0
 8009a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d101      	bne.n	8009a24 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009a20:	2303      	movs	r3, #3
 8009a22:	e01a      	b.n	8009a5a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009a24:	78fb      	ldrb	r3, [r7, #3]
 8009a26:	4619      	mov	r1, r3
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f005 fa14 	bl	800ee56 <USBD_LL_GetRxDataSize>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	33b0      	adds	r3, #176	; 0xb0
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	4413      	add	r3, r2
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009a4e:	68fa      	ldr	r2, [r7, #12]
 8009a50:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009a54:	4611      	mov	r1, r2
 8009a56:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b084      	sub	sp, #16
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	32b0      	adds	r2, #176	; 0xb0
 8009a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a78:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d101      	bne.n	8009a84 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009a80:	2303      	movs	r3, #3
 8009a82:	e025      	b.n	8009ad0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	33b0      	adds	r3, #176	; 0xb0
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	4413      	add	r3, r2
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d01a      	beq.n	8009ace <USBD_CDC_EP0_RxReady+0x6c>
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009a9e:	2bff      	cmp	r3, #255	; 0xff
 8009aa0:	d015      	beq.n	8009ace <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	33b0      	adds	r3, #176	; 0xb0
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	4413      	add	r3, r2
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009aba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009ac2:	b292      	uxth	r2, r2
 8009ac4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	22ff      	movs	r2, #255	; 0xff
 8009aca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009ace:	2300      	movs	r3, #0
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3710      	adds	r7, #16
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b086      	sub	sp, #24
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009ae0:	2182      	movs	r1, #130	; 0x82
 8009ae2:	4818      	ldr	r0, [pc, #96]	; (8009b44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009ae4:	f000 fd09 	bl	800a4fa <USBD_GetEpDesc>
 8009ae8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009aea:	2101      	movs	r1, #1
 8009aec:	4815      	ldr	r0, [pc, #84]	; (8009b44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009aee:	f000 fd04 	bl	800a4fa <USBD_GetEpDesc>
 8009af2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009af4:	2181      	movs	r1, #129	; 0x81
 8009af6:	4813      	ldr	r0, [pc, #76]	; (8009b44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009af8:	f000 fcff 	bl	800a4fa <USBD_GetEpDesc>
 8009afc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d002      	beq.n	8009b0a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	2210      	movs	r2, #16
 8009b08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d006      	beq.n	8009b1e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b18:	711a      	strb	r2, [r3, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d006      	beq.n	8009b32 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2200      	movs	r2, #0
 8009b28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b2c:	711a      	strb	r2, [r3, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2243      	movs	r2, #67	; 0x43
 8009b36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009b38:	4b02      	ldr	r3, [pc, #8]	; (8009b44 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3718      	adds	r7, #24
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	20000050 	.word	0x20000050

08009b48 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b086      	sub	sp, #24
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b50:	2182      	movs	r1, #130	; 0x82
 8009b52:	4818      	ldr	r0, [pc, #96]	; (8009bb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009b54:	f000 fcd1 	bl	800a4fa <USBD_GetEpDesc>
 8009b58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009b5a:	2101      	movs	r1, #1
 8009b5c:	4815      	ldr	r0, [pc, #84]	; (8009bb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009b5e:	f000 fccc 	bl	800a4fa <USBD_GetEpDesc>
 8009b62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009b64:	2181      	movs	r1, #129	; 0x81
 8009b66:	4813      	ldr	r0, [pc, #76]	; (8009bb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009b68:	f000 fcc7 	bl	800a4fa <USBD_GetEpDesc>
 8009b6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d002      	beq.n	8009b7a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	2210      	movs	r2, #16
 8009b78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d006      	beq.n	8009b8e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	2200      	movs	r2, #0
 8009b84:	711a      	strb	r2, [r3, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f042 0202 	orr.w	r2, r2, #2
 8009b8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d006      	beq.n	8009ba2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2200      	movs	r2, #0
 8009b98:	711a      	strb	r2, [r3, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f042 0202 	orr.w	r2, r2, #2
 8009ba0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2243      	movs	r2, #67	; 0x43
 8009ba6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009ba8:	4b02      	ldr	r3, [pc, #8]	; (8009bb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3718      	adds	r7, #24
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	20000050 	.word	0x20000050

08009bb8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b086      	sub	sp, #24
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009bc0:	2182      	movs	r1, #130	; 0x82
 8009bc2:	4818      	ldr	r0, [pc, #96]	; (8009c24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009bc4:	f000 fc99 	bl	800a4fa <USBD_GetEpDesc>
 8009bc8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009bca:	2101      	movs	r1, #1
 8009bcc:	4815      	ldr	r0, [pc, #84]	; (8009c24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009bce:	f000 fc94 	bl	800a4fa <USBD_GetEpDesc>
 8009bd2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009bd4:	2181      	movs	r1, #129	; 0x81
 8009bd6:	4813      	ldr	r0, [pc, #76]	; (8009c24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009bd8:	f000 fc8f 	bl	800a4fa <USBD_GetEpDesc>
 8009bdc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d002      	beq.n	8009bea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	2210      	movs	r2, #16
 8009be8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d006      	beq.n	8009bfe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bf8:	711a      	strb	r2, [r3, #4]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d006      	beq.n	8009c12 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c0c:	711a      	strb	r2, [r3, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2243      	movs	r2, #67	; 0x43
 8009c16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009c18:	4b02      	ldr	r3, [pc, #8]	; (8009c24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3718      	adds	r7, #24
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	20000050 	.word	0x20000050

08009c28 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	220a      	movs	r2, #10
 8009c34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009c36:	4b03      	ldr	r3, [pc, #12]	; (8009c44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr
 8009c44:	2000000c 	.word	0x2000000c

08009c48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d101      	bne.n	8009c5c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009c58:	2303      	movs	r3, #3
 8009c5a:	e009      	b.n	8009c70 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	33b0      	adds	r3, #176	; 0xb0
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	4413      	add	r3, r2
 8009c6a:	683a      	ldr	r2, [r7, #0]
 8009c6c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009c6e:	2300      	movs	r3, #0
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b087      	sub	sp, #28
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	32b0      	adds	r2, #176	; 0xb0
 8009c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c96:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d101      	bne.n	8009ca2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	e008      	b.n	8009cb4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	68ba      	ldr	r2, [r7, #8]
 8009ca6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009cb2:	2300      	movs	r3, #0
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	371c      	adds	r7, #28
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b085      	sub	sp, #20
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	32b0      	adds	r2, #176	; 0xb0
 8009cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cd8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d101      	bne.n	8009ce4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009ce0:	2303      	movs	r3, #3
 8009ce2:	e004      	b.n	8009cee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	683a      	ldr	r2, [r7, #0]
 8009ce8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3714      	adds	r7, #20
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr
	...

08009cfc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	32b0      	adds	r2, #176	; 0xb0
 8009d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d12:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	32b0      	adds	r2, #176	; 0xb0
 8009d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d101      	bne.n	8009d2a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009d26:	2303      	movs	r3, #3
 8009d28:	e018      	b.n	8009d5c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	7c1b      	ldrb	r3, [r3, #16]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d10a      	bne.n	8009d48 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d32:	4b0c      	ldr	r3, [pc, #48]	; (8009d64 <USBD_CDC_ReceivePacket+0x68>)
 8009d34:	7819      	ldrb	r1, [r3, #0]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f005 f867 	bl	800ee14 <USBD_LL_PrepareReceive>
 8009d46:	e008      	b.n	8009d5a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d48:	4b06      	ldr	r3, [pc, #24]	; (8009d64 <USBD_CDC_ReceivePacket+0x68>)
 8009d4a:	7819      	ldrb	r1, [r3, #0]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d52:	2340      	movs	r3, #64	; 0x40
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f005 f85d 	bl	800ee14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	20000094 	.word	0x20000094

08009d68 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	4613      	mov	r3, r2
 8009d74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d101      	bne.n	8009d80 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	e01f      	b.n	8009dc0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d003      	beq.n	8009da6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	68ba      	ldr	r2, [r7, #8]
 8009da2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2201      	movs	r2, #1
 8009daa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	79fa      	ldrb	r2, [r7, #7]
 8009db2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	f004 fed7 	bl	800eb68 <USBD_LL_Init>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3718      	adds	r7, #24
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d101      	bne.n	8009de0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009ddc:	2303      	movs	r3, #3
 8009dde:	e025      	b.n	8009e2c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	683a      	ldr	r2, [r7, #0]
 8009de4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	32ae      	adds	r2, #174	; 0xae
 8009df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00f      	beq.n	8009e1c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	32ae      	adds	r2, #174	; 0xae
 8009e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e0c:	f107 020e 	add.w	r2, r7, #14
 8009e10:	4610      	mov	r0, r2
 8009e12:	4798      	blx	r3
 8009e14:	4602      	mov	r2, r0
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009e22:	1c5a      	adds	r2, r3, #1
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3710      	adds	r7, #16
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f004 fedf 	bl	800ec00 <USBD_LL_Start>
 8009e42:	4603      	mov	r3, r0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3708      	adds	r7, #8
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009e54:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	370c      	adds	r7, #12
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr

08009e62 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b084      	sub	sp, #16
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d009      	beq.n	8009e90 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	78fa      	ldrb	r2, [r7, #3]
 8009e86:	4611      	mov	r1, r2
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	4798      	blx	r3
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b084      	sub	sp, #16
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	78fa      	ldrb	r2, [r7, #3]
 8009eb4:	4611      	mov	r1, r2
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	4798      	blx	r3
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d001      	beq.n	8009ec4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009ec0:	2303      	movs	r3, #3
 8009ec2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b084      	sub	sp, #16
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
 8009ed6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ede:	6839      	ldr	r1, [r7, #0]
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f001 f932 	bl	800b14a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009f02:	f003 031f 	and.w	r3, r3, #31
 8009f06:	2b02      	cmp	r3, #2
 8009f08:	d01a      	beq.n	8009f40 <USBD_LL_SetupStage+0x72>
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d822      	bhi.n	8009f54 <USBD_LL_SetupStage+0x86>
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d002      	beq.n	8009f18 <USBD_LL_SetupStage+0x4a>
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d00a      	beq.n	8009f2c <USBD_LL_SetupStage+0x5e>
 8009f16:	e01d      	b.n	8009f54 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f1e:	4619      	mov	r1, r3
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 fb5f 	bl	800a5e4 <USBD_StdDevReq>
 8009f26:	4603      	mov	r3, r0
 8009f28:	73fb      	strb	r3, [r7, #15]
      break;
 8009f2a:	e020      	b.n	8009f6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 fbc7 	bl	800a6c8 <USBD_StdItfReq>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8009f3e:	e016      	b.n	8009f6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f46:	4619      	mov	r1, r3
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 fc29 	bl	800a7a0 <USBD_StdEPReq>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	73fb      	strb	r3, [r7, #15]
      break;
 8009f52:	e00c      	b.n	8009f6e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009f5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	4619      	mov	r1, r3
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f004 feac 	bl	800ecc0 <USBD_LL_StallEP>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8009f6c:	bf00      	nop
  }

  return ret;
 8009f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3710      	adds	r7, #16
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b086      	sub	sp, #24
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	460b      	mov	r3, r1
 8009f82:	607a      	str	r2, [r7, #4]
 8009f84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f86:	2300      	movs	r3, #0
 8009f88:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009f8a:	7afb      	ldrb	r3, [r7, #11]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d16e      	bne.n	800a06e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009f96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f9e:	2b03      	cmp	r3, #3
 8009fa0:	f040 8098 	bne.w	800a0d4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	689a      	ldr	r2, [r3, #8]
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d913      	bls.n	8009fd8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	689a      	ldr	r2, [r3, #8]
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	68db      	ldr	r3, [r3, #12]
 8009fb8:	1ad2      	subs	r2, r2, r3
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	68da      	ldr	r2, [r3, #12]
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	689b      	ldr	r3, [r3, #8]
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	bf28      	it	cs
 8009fca:	4613      	movcs	r3, r2
 8009fcc:	461a      	mov	r2, r3
 8009fce:	6879      	ldr	r1, [r7, #4]
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f001 f9ae 	bl	800b332 <USBD_CtlContinueRx>
 8009fd6:	e07d      	b.n	800a0d4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009fde:	f003 031f 	and.w	r3, r3, #31
 8009fe2:	2b02      	cmp	r3, #2
 8009fe4:	d014      	beq.n	800a010 <USBD_LL_DataOutStage+0x98>
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	d81d      	bhi.n	800a026 <USBD_LL_DataOutStage+0xae>
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d002      	beq.n	8009ff4 <USBD_LL_DataOutStage+0x7c>
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d003      	beq.n	8009ffa <USBD_LL_DataOutStage+0x82>
 8009ff2:	e018      	b.n	800a026 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	75bb      	strb	r3, [r7, #22]
            break;
 8009ff8:	e018      	b.n	800a02c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a000:	b2db      	uxtb	r3, r3
 800a002:	4619      	mov	r1, r3
 800a004:	68f8      	ldr	r0, [r7, #12]
 800a006:	f000 fa5e 	bl	800a4c6 <USBD_CoreFindIF>
 800a00a:	4603      	mov	r3, r0
 800a00c:	75bb      	strb	r3, [r7, #22]
            break;
 800a00e:	e00d      	b.n	800a02c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a016:	b2db      	uxtb	r3, r3
 800a018:	4619      	mov	r1, r3
 800a01a:	68f8      	ldr	r0, [r7, #12]
 800a01c:	f000 fa60 	bl	800a4e0 <USBD_CoreFindEP>
 800a020:	4603      	mov	r3, r0
 800a022:	75bb      	strb	r3, [r7, #22]
            break;
 800a024:	e002      	b.n	800a02c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a026:	2300      	movs	r3, #0
 800a028:	75bb      	strb	r3, [r7, #22]
            break;
 800a02a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a02c:	7dbb      	ldrb	r3, [r7, #22]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d119      	bne.n	800a066 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	2b03      	cmp	r3, #3
 800a03c:	d113      	bne.n	800a066 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a03e:	7dba      	ldrb	r2, [r7, #22]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	32ae      	adds	r2, #174	; 0xae
 800a044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00b      	beq.n	800a066 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a04e:	7dba      	ldrb	r2, [r7, #22]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a056:	7dba      	ldrb	r2, [r7, #22]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	32ae      	adds	r2, #174	; 0xae
 800a05c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f001 f974 	bl	800b354 <USBD_CtlSendStatus>
 800a06c:	e032      	b.n	800a0d4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a06e:	7afb      	ldrb	r3, [r7, #11]
 800a070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a074:	b2db      	uxtb	r3, r3
 800a076:	4619      	mov	r1, r3
 800a078:	68f8      	ldr	r0, [r7, #12]
 800a07a:	f000 fa31 	bl	800a4e0 <USBD_CoreFindEP>
 800a07e:	4603      	mov	r3, r0
 800a080:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a082:	7dbb      	ldrb	r3, [r7, #22]
 800a084:	2bff      	cmp	r3, #255	; 0xff
 800a086:	d025      	beq.n	800a0d4 <USBD_LL_DataOutStage+0x15c>
 800a088:	7dbb      	ldrb	r3, [r7, #22]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d122      	bne.n	800a0d4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a094:	b2db      	uxtb	r3, r3
 800a096:	2b03      	cmp	r3, #3
 800a098:	d117      	bne.n	800a0ca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a09a:	7dba      	ldrb	r2, [r7, #22]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	32ae      	adds	r2, #174	; 0xae
 800a0a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a4:	699b      	ldr	r3, [r3, #24]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00f      	beq.n	800a0ca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a0aa:	7dba      	ldrb	r2, [r7, #22]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a0b2:	7dba      	ldrb	r2, [r7, #22]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	32ae      	adds	r2, #174	; 0xae
 800a0b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0bc:	699b      	ldr	r3, [r3, #24]
 800a0be:	7afa      	ldrb	r2, [r7, #11]
 800a0c0:	4611      	mov	r1, r2
 800a0c2:	68f8      	ldr	r0, [r7, #12]
 800a0c4:	4798      	blx	r3
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a0ca:	7dfb      	ldrb	r3, [r7, #23]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d001      	beq.n	800a0d4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a0d0:	7dfb      	ldrb	r3, [r7, #23]
 800a0d2:	e000      	b.n	800a0d6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a0d4:	2300      	movs	r3, #0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3718      	adds	r7, #24
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b086      	sub	sp, #24
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	60f8      	str	r0, [r7, #12]
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	607a      	str	r2, [r7, #4]
 800a0ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a0ec:	7afb      	ldrb	r3, [r7, #11]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d16f      	bne.n	800a1d2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	3314      	adds	r3, #20
 800a0f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a0fe:	2b02      	cmp	r3, #2
 800a100:	d15a      	bne.n	800a1b8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	689a      	ldr	r2, [r3, #8]
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d914      	bls.n	800a138 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	689a      	ldr	r2, [r3, #8]
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	1ad2      	subs	r2, r2, r3
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	461a      	mov	r2, r3
 800a122:	6879      	ldr	r1, [r7, #4]
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f001 f8d6 	bl	800b2d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a12a:	2300      	movs	r3, #0
 800a12c:	2200      	movs	r2, #0
 800a12e:	2100      	movs	r1, #0
 800a130:	68f8      	ldr	r0, [r7, #12]
 800a132:	f004 fe6f 	bl	800ee14 <USBD_LL_PrepareReceive>
 800a136:	e03f      	b.n	800a1b8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	68da      	ldr	r2, [r3, #12]
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	429a      	cmp	r2, r3
 800a142:	d11c      	bne.n	800a17e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	685a      	ldr	r2, [r3, #4]
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d316      	bcc.n	800a17e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	685a      	ldr	r2, [r3, #4]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d20f      	bcs.n	800a17e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a15e:	2200      	movs	r2, #0
 800a160:	2100      	movs	r1, #0
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f001 f8b7 	bl	800b2d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a170:	2300      	movs	r3, #0
 800a172:	2200      	movs	r2, #0
 800a174:	2100      	movs	r1, #0
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	f004 fe4c 	bl	800ee14 <USBD_LL_PrepareReceive>
 800a17c:	e01c      	b.n	800a1b8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a184:	b2db      	uxtb	r3, r3
 800a186:	2b03      	cmp	r3, #3
 800a188:	d10f      	bne.n	800a1aa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d009      	beq.n	800a1aa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2200      	movs	r2, #0
 800a19a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1aa:	2180      	movs	r1, #128	; 0x80
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f004 fd87 	bl	800ecc0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f001 f8e1 	bl	800b37a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d03a      	beq.n	800a238 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a1c2:	68f8      	ldr	r0, [r7, #12]
 800a1c4:	f7ff fe42 	bl	8009e4c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a1d0:	e032      	b.n	800a238 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a1d2:	7afb      	ldrb	r3, [r7, #11]
 800a1d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	4619      	mov	r1, r3
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f000 f97f 	bl	800a4e0 <USBD_CoreFindEP>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a1e6:	7dfb      	ldrb	r3, [r7, #23]
 800a1e8:	2bff      	cmp	r3, #255	; 0xff
 800a1ea:	d025      	beq.n	800a238 <USBD_LL_DataInStage+0x15a>
 800a1ec:	7dfb      	ldrb	r3, [r7, #23]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d122      	bne.n	800a238 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	2b03      	cmp	r3, #3
 800a1fc:	d11c      	bne.n	800a238 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a1fe:	7dfa      	ldrb	r2, [r7, #23]
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	32ae      	adds	r2, #174	; 0xae
 800a204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a208:	695b      	ldr	r3, [r3, #20]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d014      	beq.n	800a238 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a20e:	7dfa      	ldrb	r2, [r7, #23]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a216:	7dfa      	ldrb	r2, [r7, #23]
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	32ae      	adds	r2, #174	; 0xae
 800a21c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a220:	695b      	ldr	r3, [r3, #20]
 800a222:	7afa      	ldrb	r2, [r7, #11]
 800a224:	4611      	mov	r1, r2
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	4798      	blx	r3
 800a22a:	4603      	mov	r3, r0
 800a22c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a22e:	7dbb      	ldrb	r3, [r7, #22]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d001      	beq.n	800a238 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a234:	7dbb      	ldrb	r3, [r7, #22]
 800a236:	e000      	b.n	800a23a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a238:	2300      	movs	r3, #0
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3718      	adds	r7, #24
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b084      	sub	sp, #16
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a24a:	2300      	movs	r3, #0
 800a24c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2201      	movs	r2, #1
 800a252:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2200      	movs	r2, #0
 800a262:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2200      	movs	r2, #0
 800a270:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d014      	beq.n	800a2a8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00e      	beq.n	800a2a8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	6852      	ldr	r2, [r2, #4]
 800a296:	b2d2      	uxtb	r2, r2
 800a298:	4611      	mov	r1, r2
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	4798      	blx	r3
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d001      	beq.n	800a2a8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a2a8:	2340      	movs	r3, #64	; 0x40
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f004 fcc1 	bl	800ec36 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2240      	movs	r2, #64	; 0x40
 800a2c0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a2c4:	2340      	movs	r3, #64	; 0x40
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	2180      	movs	r1, #128	; 0x80
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f004 fcb3 	bl	800ec36 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2240      	movs	r2, #64	; 0x40
 800a2da:	621a      	str	r2, [r3, #32]

  return ret;
 800a2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3710      	adds	r7, #16
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a2e6:	b480      	push	{r7}
 800a2e8:	b083      	sub	sp, #12
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	78fa      	ldrb	r2, [r7, #3]
 800a2f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	370c      	adds	r7, #12
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr

0800a306 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a306:	b480      	push	{r7}
 800a308:	b083      	sub	sp, #12
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a314:	b2da      	uxtb	r2, r3
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2204      	movs	r2, #4
 800a320:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a324:	2300      	movs	r3, #0
}
 800a326:	4618      	mov	r0, r3
 800a328:	370c      	adds	r7, #12
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr

0800a332 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a332:	b480      	push	{r7}
 800a334:	b083      	sub	sp, #12
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a340:	b2db      	uxtb	r3, r3
 800a342:	2b04      	cmp	r3, #4
 800a344:	d106      	bne.n	800a354 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a34c:	b2da      	uxtb	r2, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a354:	2300      	movs	r3, #0
}
 800a356:	4618      	mov	r0, r3
 800a358:	370c      	adds	r7, #12
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr

0800a362 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b082      	sub	sp, #8
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a370:	b2db      	uxtb	r3, r3
 800a372:	2b03      	cmp	r3, #3
 800a374:	d110      	bne.n	800a398 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d00b      	beq.n	800a398 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a386:	69db      	ldr	r3, [r3, #28]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d005      	beq.n	800a398 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a392:	69db      	ldr	r3, [r3, #28]
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3708      	adds	r7, #8
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b082      	sub	sp, #8
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	32ae      	adds	r2, #174	; 0xae
 800a3b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d101      	bne.n	800a3c4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a3c0:	2303      	movs	r3, #3
 800a3c2:	e01c      	b.n	800a3fe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	2b03      	cmp	r3, #3
 800a3ce:	d115      	bne.n	800a3fc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	32ae      	adds	r2, #174	; 0xae
 800a3da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3de:	6a1b      	ldr	r3, [r3, #32]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d00b      	beq.n	800a3fc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	32ae      	adds	r2, #174	; 0xae
 800a3ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3f2:	6a1b      	ldr	r3, [r3, #32]
 800a3f4:	78fa      	ldrb	r2, [r7, #3]
 800a3f6:	4611      	mov	r1, r2
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3708      	adds	r7, #8
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b082      	sub	sp, #8
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	460b      	mov	r3, r1
 800a410:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	32ae      	adds	r2, #174	; 0xae
 800a41c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d101      	bne.n	800a428 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a424:	2303      	movs	r3, #3
 800a426:	e01c      	b.n	800a462 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	2b03      	cmp	r3, #3
 800a432:	d115      	bne.n	800a460 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	32ae      	adds	r2, #174	; 0xae
 800a43e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a444:	2b00      	cmp	r3, #0
 800a446:	d00b      	beq.n	800a460 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	32ae      	adds	r2, #174	; 0xae
 800a452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a458:	78fa      	ldrb	r2, [r7, #3]
 800a45a:	4611      	mov	r1, r2
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a460:	2300      	movs	r3, #0
}
 800a462:	4618      	mov	r0, r3
 800a464:	3708      	adds	r7, #8
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}

0800a46a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a46a:	b480      	push	{r7}
 800a46c:	b083      	sub	sp, #12
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a472:	2300      	movs	r3, #0
}
 800a474:	4618      	mov	r0, r3
 800a476:	370c      	adds	r7, #12
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a488:	2300      	movs	r3, #0
 800a48a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00e      	beq.n	800a4bc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	6852      	ldr	r2, [r2, #4]
 800a4aa:	b2d2      	uxtb	r2, r2
 800a4ac:	4611      	mov	r1, r2
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	4798      	blx	r3
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d001      	beq.n	800a4bc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a4bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a4c6:	b480      	push	{r7}
 800a4c8:	b083      	sub	sp, #12
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a4d2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a4ec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	370c      	adds	r7, #12
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr

0800a4fa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b086      	sub	sp, #24
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
 800a502:	460b      	mov	r3, r1
 800a504:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a50e:	2300      	movs	r3, #0
 800a510:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	885b      	ldrh	r3, [r3, #2]
 800a516:	b29a      	uxth	r2, r3
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	429a      	cmp	r2, r3
 800a520:	d920      	bls.n	800a564 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	b29b      	uxth	r3, r3
 800a528:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a52a:	e013      	b.n	800a554 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a52c:	f107 030a 	add.w	r3, r7, #10
 800a530:	4619      	mov	r1, r3
 800a532:	6978      	ldr	r0, [r7, #20]
 800a534:	f000 f81b 	bl	800a56e <USBD_GetNextDesc>
 800a538:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	785b      	ldrb	r3, [r3, #1]
 800a53e:	2b05      	cmp	r3, #5
 800a540:	d108      	bne.n	800a554 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	789b      	ldrb	r3, [r3, #2]
 800a54a:	78fa      	ldrb	r2, [r7, #3]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d008      	beq.n	800a562 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a550:	2300      	movs	r3, #0
 800a552:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	885b      	ldrh	r3, [r3, #2]
 800a558:	b29a      	uxth	r2, r3
 800a55a:	897b      	ldrh	r3, [r7, #10]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d8e5      	bhi.n	800a52c <USBD_GetEpDesc+0x32>
 800a560:	e000      	b.n	800a564 <USBD_GetEpDesc+0x6a>
          break;
 800a562:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a564:	693b      	ldr	r3, [r7, #16]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3718      	adds	r7, #24
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a56e:	b480      	push	{r7}
 800a570:	b085      	sub	sp, #20
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
 800a576:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	881a      	ldrh	r2, [r3, #0]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	b29b      	uxth	r3, r3
 800a586:	4413      	add	r3, r2
 800a588:	b29a      	uxth	r2, r3
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	461a      	mov	r2, r3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	4413      	add	r3, r2
 800a598:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a59a:	68fb      	ldr	r3, [r7, #12]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3714      	adds	r7, #20
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b087      	sub	sp, #28
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	3301      	adds	r3, #1
 800a5be:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a5c6:	8a3b      	ldrh	r3, [r7, #16]
 800a5c8:	021b      	lsls	r3, r3, #8
 800a5ca:	b21a      	sxth	r2, r3
 800a5cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	b21b      	sxth	r3, r3
 800a5d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a5d6:	89fb      	ldrh	r3, [r7, #14]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	371c      	adds	r7, #28
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5fa:	2b40      	cmp	r3, #64	; 0x40
 800a5fc:	d005      	beq.n	800a60a <USBD_StdDevReq+0x26>
 800a5fe:	2b40      	cmp	r3, #64	; 0x40
 800a600:	d857      	bhi.n	800a6b2 <USBD_StdDevReq+0xce>
 800a602:	2b00      	cmp	r3, #0
 800a604:	d00f      	beq.n	800a626 <USBD_StdDevReq+0x42>
 800a606:	2b20      	cmp	r3, #32
 800a608:	d153      	bne.n	800a6b2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	32ae      	adds	r2, #174	; 0xae
 800a614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	6839      	ldr	r1, [r7, #0]
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	4798      	blx	r3
 800a620:	4603      	mov	r3, r0
 800a622:	73fb      	strb	r3, [r7, #15]
      break;
 800a624:	e04a      	b.n	800a6bc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	785b      	ldrb	r3, [r3, #1]
 800a62a:	2b09      	cmp	r3, #9
 800a62c:	d83b      	bhi.n	800a6a6 <USBD_StdDevReq+0xc2>
 800a62e:	a201      	add	r2, pc, #4	; (adr r2, 800a634 <USBD_StdDevReq+0x50>)
 800a630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a634:	0800a689 	.word	0x0800a689
 800a638:	0800a69d 	.word	0x0800a69d
 800a63c:	0800a6a7 	.word	0x0800a6a7
 800a640:	0800a693 	.word	0x0800a693
 800a644:	0800a6a7 	.word	0x0800a6a7
 800a648:	0800a667 	.word	0x0800a667
 800a64c:	0800a65d 	.word	0x0800a65d
 800a650:	0800a6a7 	.word	0x0800a6a7
 800a654:	0800a67f 	.word	0x0800a67f
 800a658:	0800a671 	.word	0x0800a671
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a65c:	6839      	ldr	r1, [r7, #0]
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 fa3c 	bl	800aadc <USBD_GetDescriptor>
          break;
 800a664:	e024      	b.n	800a6b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a666:	6839      	ldr	r1, [r7, #0]
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 fbcb 	bl	800ae04 <USBD_SetAddress>
          break;
 800a66e:	e01f      	b.n	800a6b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a670:	6839      	ldr	r1, [r7, #0]
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 fc0a 	bl	800ae8c <USBD_SetConfig>
 800a678:	4603      	mov	r3, r0
 800a67a:	73fb      	strb	r3, [r7, #15]
          break;
 800a67c:	e018      	b.n	800a6b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a67e:	6839      	ldr	r1, [r7, #0]
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 fcad 	bl	800afe0 <USBD_GetConfig>
          break;
 800a686:	e013      	b.n	800a6b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a688:	6839      	ldr	r1, [r7, #0]
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 fcde 	bl	800b04c <USBD_GetStatus>
          break;
 800a690:	e00e      	b.n	800a6b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a692:	6839      	ldr	r1, [r7, #0]
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 fd0d 	bl	800b0b4 <USBD_SetFeature>
          break;
 800a69a:	e009      	b.n	800a6b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a69c:	6839      	ldr	r1, [r7, #0]
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 fd31 	bl	800b106 <USBD_ClrFeature>
          break;
 800a6a4:	e004      	b.n	800a6b0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a6a6:	6839      	ldr	r1, [r7, #0]
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 fd88 	bl	800b1be <USBD_CtlError>
          break;
 800a6ae:	bf00      	nop
      }
      break;
 800a6b0:	e004      	b.n	800a6bc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a6b2:	6839      	ldr	r1, [r7, #0]
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 fd82 	bl	800b1be <USBD_CtlError>
      break;
 800a6ba:	bf00      	nop
  }

  return ret;
 800a6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop

0800a6c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6de:	2b40      	cmp	r3, #64	; 0x40
 800a6e0:	d005      	beq.n	800a6ee <USBD_StdItfReq+0x26>
 800a6e2:	2b40      	cmp	r3, #64	; 0x40
 800a6e4:	d852      	bhi.n	800a78c <USBD_StdItfReq+0xc4>
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d001      	beq.n	800a6ee <USBD_StdItfReq+0x26>
 800a6ea:	2b20      	cmp	r3, #32
 800a6ec:	d14e      	bne.n	800a78c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	d840      	bhi.n	800a77e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	889b      	ldrh	r3, [r3, #4]
 800a700:	b2db      	uxtb	r3, r3
 800a702:	2b01      	cmp	r3, #1
 800a704:	d836      	bhi.n	800a774 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	889b      	ldrh	r3, [r3, #4]
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	4619      	mov	r1, r3
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f7ff fed9 	bl	800a4c6 <USBD_CoreFindIF>
 800a714:	4603      	mov	r3, r0
 800a716:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a718:	7bbb      	ldrb	r3, [r7, #14]
 800a71a:	2bff      	cmp	r3, #255	; 0xff
 800a71c:	d01d      	beq.n	800a75a <USBD_StdItfReq+0x92>
 800a71e:	7bbb      	ldrb	r3, [r7, #14]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d11a      	bne.n	800a75a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a724:	7bba      	ldrb	r2, [r7, #14]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	32ae      	adds	r2, #174	; 0xae
 800a72a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d00f      	beq.n	800a754 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a734:	7bba      	ldrb	r2, [r7, #14]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a73c:	7bba      	ldrb	r2, [r7, #14]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	32ae      	adds	r2, #174	; 0xae
 800a742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	6839      	ldr	r1, [r7, #0]
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	4798      	blx	r3
 800a74e:	4603      	mov	r3, r0
 800a750:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a752:	e004      	b.n	800a75e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a754:	2303      	movs	r3, #3
 800a756:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a758:	e001      	b.n	800a75e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a75a:	2303      	movs	r3, #3
 800a75c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	88db      	ldrh	r3, [r3, #6]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d110      	bne.n	800a788 <USBD_StdItfReq+0xc0>
 800a766:	7bfb      	ldrb	r3, [r7, #15]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d10d      	bne.n	800a788 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 fdf1 	bl	800b354 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a772:	e009      	b.n	800a788 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a774:	6839      	ldr	r1, [r7, #0]
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 fd21 	bl	800b1be <USBD_CtlError>
          break;
 800a77c:	e004      	b.n	800a788 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a77e:	6839      	ldr	r1, [r7, #0]
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f000 fd1c 	bl	800b1be <USBD_CtlError>
          break;
 800a786:	e000      	b.n	800a78a <USBD_StdItfReq+0xc2>
          break;
 800a788:	bf00      	nop
      }
      break;
 800a78a:	e004      	b.n	800a796 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a78c:	6839      	ldr	r1, [r7, #0]
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 fd15 	bl	800b1be <USBD_CtlError>
      break;
 800a794:	bf00      	nop
  }

  return ret;
 800a796:	7bfb      	ldrb	r3, [r7, #15]
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3710      	adds	r7, #16
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	889b      	ldrh	r3, [r3, #4]
 800a7b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7bc:	2b40      	cmp	r3, #64	; 0x40
 800a7be:	d007      	beq.n	800a7d0 <USBD_StdEPReq+0x30>
 800a7c0:	2b40      	cmp	r3, #64	; 0x40
 800a7c2:	f200 817f 	bhi.w	800aac4 <USBD_StdEPReq+0x324>
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d02a      	beq.n	800a820 <USBD_StdEPReq+0x80>
 800a7ca:	2b20      	cmp	r3, #32
 800a7cc:	f040 817a 	bne.w	800aac4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a7d0:	7bbb      	ldrb	r3, [r7, #14]
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f7ff fe83 	bl	800a4e0 <USBD_CoreFindEP>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7de:	7b7b      	ldrb	r3, [r7, #13]
 800a7e0:	2bff      	cmp	r3, #255	; 0xff
 800a7e2:	f000 8174 	beq.w	800aace <USBD_StdEPReq+0x32e>
 800a7e6:	7b7b      	ldrb	r3, [r7, #13]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f040 8170 	bne.w	800aace <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a7ee:	7b7a      	ldrb	r2, [r7, #13]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a7f6:	7b7a      	ldrb	r2, [r7, #13]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	32ae      	adds	r2, #174	; 0xae
 800a7fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	2b00      	cmp	r3, #0
 800a804:	f000 8163 	beq.w	800aace <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a808:	7b7a      	ldrb	r2, [r7, #13]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	32ae      	adds	r2, #174	; 0xae
 800a80e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	6839      	ldr	r1, [r7, #0]
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	4798      	blx	r3
 800a81a:	4603      	mov	r3, r0
 800a81c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a81e:	e156      	b.n	800aace <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	785b      	ldrb	r3, [r3, #1]
 800a824:	2b03      	cmp	r3, #3
 800a826:	d008      	beq.n	800a83a <USBD_StdEPReq+0x9a>
 800a828:	2b03      	cmp	r3, #3
 800a82a:	f300 8145 	bgt.w	800aab8 <USBD_StdEPReq+0x318>
 800a82e:	2b00      	cmp	r3, #0
 800a830:	f000 809b 	beq.w	800a96a <USBD_StdEPReq+0x1ca>
 800a834:	2b01      	cmp	r3, #1
 800a836:	d03c      	beq.n	800a8b2 <USBD_StdEPReq+0x112>
 800a838:	e13e      	b.n	800aab8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a840:	b2db      	uxtb	r3, r3
 800a842:	2b02      	cmp	r3, #2
 800a844:	d002      	beq.n	800a84c <USBD_StdEPReq+0xac>
 800a846:	2b03      	cmp	r3, #3
 800a848:	d016      	beq.n	800a878 <USBD_StdEPReq+0xd8>
 800a84a:	e02c      	b.n	800a8a6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a84c:	7bbb      	ldrb	r3, [r7, #14]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d00d      	beq.n	800a86e <USBD_StdEPReq+0xce>
 800a852:	7bbb      	ldrb	r3, [r7, #14]
 800a854:	2b80      	cmp	r3, #128	; 0x80
 800a856:	d00a      	beq.n	800a86e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a858:	7bbb      	ldrb	r3, [r7, #14]
 800a85a:	4619      	mov	r1, r3
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f004 fa2f 	bl	800ecc0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a862:	2180      	movs	r1, #128	; 0x80
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f004 fa2b 	bl	800ecc0 <USBD_LL_StallEP>
 800a86a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a86c:	e020      	b.n	800a8b0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a86e:	6839      	ldr	r1, [r7, #0]
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 fca4 	bl	800b1be <USBD_CtlError>
              break;
 800a876:	e01b      	b.n	800a8b0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	885b      	ldrh	r3, [r3, #2]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d10e      	bne.n	800a89e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a880:	7bbb      	ldrb	r3, [r7, #14]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00b      	beq.n	800a89e <USBD_StdEPReq+0xfe>
 800a886:	7bbb      	ldrb	r3, [r7, #14]
 800a888:	2b80      	cmp	r3, #128	; 0x80
 800a88a:	d008      	beq.n	800a89e <USBD_StdEPReq+0xfe>
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	88db      	ldrh	r3, [r3, #6]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d104      	bne.n	800a89e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a894:	7bbb      	ldrb	r3, [r7, #14]
 800a896:	4619      	mov	r1, r3
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f004 fa11 	bl	800ecc0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 fd58 	bl	800b354 <USBD_CtlSendStatus>

              break;
 800a8a4:	e004      	b.n	800a8b0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a8a6:	6839      	ldr	r1, [r7, #0]
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 fc88 	bl	800b1be <USBD_CtlError>
              break;
 800a8ae:	bf00      	nop
          }
          break;
 800a8b0:	e107      	b.n	800aac2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	2b02      	cmp	r3, #2
 800a8bc:	d002      	beq.n	800a8c4 <USBD_StdEPReq+0x124>
 800a8be:	2b03      	cmp	r3, #3
 800a8c0:	d016      	beq.n	800a8f0 <USBD_StdEPReq+0x150>
 800a8c2:	e04b      	b.n	800a95c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8c4:	7bbb      	ldrb	r3, [r7, #14]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d00d      	beq.n	800a8e6 <USBD_StdEPReq+0x146>
 800a8ca:	7bbb      	ldrb	r3, [r7, #14]
 800a8cc:	2b80      	cmp	r3, #128	; 0x80
 800a8ce:	d00a      	beq.n	800a8e6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a8d0:	7bbb      	ldrb	r3, [r7, #14]
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f004 f9f3 	bl	800ecc0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8da:	2180      	movs	r1, #128	; 0x80
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f004 f9ef 	bl	800ecc0 <USBD_LL_StallEP>
 800a8e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a8e4:	e040      	b.n	800a968 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a8e6:	6839      	ldr	r1, [r7, #0]
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 fc68 	bl	800b1be <USBD_CtlError>
              break;
 800a8ee:	e03b      	b.n	800a968 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	885b      	ldrh	r3, [r3, #2]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d136      	bne.n	800a966 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a8f8:	7bbb      	ldrb	r3, [r7, #14]
 800a8fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d004      	beq.n	800a90c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a902:	7bbb      	ldrb	r3, [r7, #14]
 800a904:	4619      	mov	r1, r3
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f004 f9f9 	bl	800ecfe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 fd21 	bl	800b354 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a912:	7bbb      	ldrb	r3, [r7, #14]
 800a914:	4619      	mov	r1, r3
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f7ff fde2 	bl	800a4e0 <USBD_CoreFindEP>
 800a91c:	4603      	mov	r3, r0
 800a91e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a920:	7b7b      	ldrb	r3, [r7, #13]
 800a922:	2bff      	cmp	r3, #255	; 0xff
 800a924:	d01f      	beq.n	800a966 <USBD_StdEPReq+0x1c6>
 800a926:	7b7b      	ldrb	r3, [r7, #13]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d11c      	bne.n	800a966 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a92c:	7b7a      	ldrb	r2, [r7, #13]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a934:	7b7a      	ldrb	r2, [r7, #13]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	32ae      	adds	r2, #174	; 0xae
 800a93a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d010      	beq.n	800a966 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a944:	7b7a      	ldrb	r2, [r7, #13]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	32ae      	adds	r2, #174	; 0xae
 800a94a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	6839      	ldr	r1, [r7, #0]
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	4798      	blx	r3
 800a956:	4603      	mov	r3, r0
 800a958:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a95a:	e004      	b.n	800a966 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a95c:	6839      	ldr	r1, [r7, #0]
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 fc2d 	bl	800b1be <USBD_CtlError>
              break;
 800a964:	e000      	b.n	800a968 <USBD_StdEPReq+0x1c8>
              break;
 800a966:	bf00      	nop
          }
          break;
 800a968:	e0ab      	b.n	800aac2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a970:	b2db      	uxtb	r3, r3
 800a972:	2b02      	cmp	r3, #2
 800a974:	d002      	beq.n	800a97c <USBD_StdEPReq+0x1dc>
 800a976:	2b03      	cmp	r3, #3
 800a978:	d032      	beq.n	800a9e0 <USBD_StdEPReq+0x240>
 800a97a:	e097      	b.n	800aaac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a97c:	7bbb      	ldrb	r3, [r7, #14]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d007      	beq.n	800a992 <USBD_StdEPReq+0x1f2>
 800a982:	7bbb      	ldrb	r3, [r7, #14]
 800a984:	2b80      	cmp	r3, #128	; 0x80
 800a986:	d004      	beq.n	800a992 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a988:	6839      	ldr	r1, [r7, #0]
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 fc17 	bl	800b1be <USBD_CtlError>
                break;
 800a990:	e091      	b.n	800aab6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a992:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a996:	2b00      	cmp	r3, #0
 800a998:	da0b      	bge.n	800a9b2 <USBD_StdEPReq+0x212>
 800a99a:	7bbb      	ldrb	r3, [r7, #14]
 800a99c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9a0:	4613      	mov	r3, r2
 800a9a2:	009b      	lsls	r3, r3, #2
 800a9a4:	4413      	add	r3, r2
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	3310      	adds	r3, #16
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	3304      	adds	r3, #4
 800a9b0:	e00b      	b.n	800a9ca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a9b2:	7bbb      	ldrb	r3, [r7, #14]
 800a9b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9b8:	4613      	mov	r3, r2
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	4413      	add	r3, r2
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	4413      	add	r3, r2
 800a9c8:	3304      	adds	r3, #4
 800a9ca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	2202      	movs	r2, #2
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 fc61 	bl	800b2a0 <USBD_CtlSendData>
              break;
 800a9de:	e06a      	b.n	800aab6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a9e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	da11      	bge.n	800aa0c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a9e8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ea:	f003 020f 	and.w	r2, r3, #15
 800a9ee:	6879      	ldr	r1, [r7, #4]
 800a9f0:	4613      	mov	r3, r2
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	4413      	add	r3, r2
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	440b      	add	r3, r1
 800a9fa:	3324      	adds	r3, #36	; 0x24
 800a9fc:	881b      	ldrh	r3, [r3, #0]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d117      	bne.n	800aa32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aa02:	6839      	ldr	r1, [r7, #0]
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 fbda 	bl	800b1be <USBD_CtlError>
                  break;
 800aa0a:	e054      	b.n	800aab6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aa0c:	7bbb      	ldrb	r3, [r7, #14]
 800aa0e:	f003 020f 	and.w	r2, r3, #15
 800aa12:	6879      	ldr	r1, [r7, #4]
 800aa14:	4613      	mov	r3, r2
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	4413      	add	r3, r2
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	440b      	add	r3, r1
 800aa1e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aa22:	881b      	ldrh	r3, [r3, #0]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d104      	bne.n	800aa32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aa28:	6839      	ldr	r1, [r7, #0]
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 fbc7 	bl	800b1be <USBD_CtlError>
                  break;
 800aa30:	e041      	b.n	800aab6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	da0b      	bge.n	800aa52 <USBD_StdEPReq+0x2b2>
 800aa3a:	7bbb      	ldrb	r3, [r7, #14]
 800aa3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa40:	4613      	mov	r3, r2
 800aa42:	009b      	lsls	r3, r3, #2
 800aa44:	4413      	add	r3, r2
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	3310      	adds	r3, #16
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	3304      	adds	r3, #4
 800aa50:	e00b      	b.n	800aa6a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa52:	7bbb      	ldrb	r3, [r7, #14]
 800aa54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa58:	4613      	mov	r3, r2
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	4413      	add	r3, r2
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	4413      	add	r3, r2
 800aa68:	3304      	adds	r3, #4
 800aa6a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aa6c:	7bbb      	ldrb	r3, [r7, #14]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d002      	beq.n	800aa78 <USBD_StdEPReq+0x2d8>
 800aa72:	7bbb      	ldrb	r3, [r7, #14]
 800aa74:	2b80      	cmp	r3, #128	; 0x80
 800aa76:	d103      	bne.n	800aa80 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	601a      	str	r2, [r3, #0]
 800aa7e:	e00e      	b.n	800aa9e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aa80:	7bbb      	ldrb	r3, [r7, #14]
 800aa82:	4619      	mov	r1, r3
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f004 f959 	bl	800ed3c <USBD_LL_IsStallEP>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d003      	beq.n	800aa98 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	2201      	movs	r2, #1
 800aa94:	601a      	str	r2, [r3, #0]
 800aa96:	e002      	b.n	800aa9e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	2202      	movs	r2, #2
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 fbfb 	bl	800b2a0 <USBD_CtlSendData>
              break;
 800aaaa:	e004      	b.n	800aab6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800aaac:	6839      	ldr	r1, [r7, #0]
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 fb85 	bl	800b1be <USBD_CtlError>
              break;
 800aab4:	bf00      	nop
          }
          break;
 800aab6:	e004      	b.n	800aac2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800aab8:	6839      	ldr	r1, [r7, #0]
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 fb7f 	bl	800b1be <USBD_CtlError>
          break;
 800aac0:	bf00      	nop
      }
      break;
 800aac2:	e005      	b.n	800aad0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800aac4:	6839      	ldr	r1, [r7, #0]
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f000 fb79 	bl	800b1be <USBD_CtlError>
      break;
 800aacc:	e000      	b.n	800aad0 <USBD_StdEPReq+0x330>
      break;
 800aace:	bf00      	nop
  }

  return ret;
 800aad0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3710      	adds	r7, #16
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
	...

0800aadc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aae6:	2300      	movs	r3, #0
 800aae8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aaea:	2300      	movs	r3, #0
 800aaec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	885b      	ldrh	r3, [r3, #2]
 800aaf6:	0a1b      	lsrs	r3, r3, #8
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	3b01      	subs	r3, #1
 800aafc:	2b0e      	cmp	r3, #14
 800aafe:	f200 8152 	bhi.w	800ada6 <USBD_GetDescriptor+0x2ca>
 800ab02:	a201      	add	r2, pc, #4	; (adr r2, 800ab08 <USBD_GetDescriptor+0x2c>)
 800ab04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab08:	0800ab79 	.word	0x0800ab79
 800ab0c:	0800ab91 	.word	0x0800ab91
 800ab10:	0800abd1 	.word	0x0800abd1
 800ab14:	0800ada7 	.word	0x0800ada7
 800ab18:	0800ada7 	.word	0x0800ada7
 800ab1c:	0800ad47 	.word	0x0800ad47
 800ab20:	0800ad73 	.word	0x0800ad73
 800ab24:	0800ada7 	.word	0x0800ada7
 800ab28:	0800ada7 	.word	0x0800ada7
 800ab2c:	0800ada7 	.word	0x0800ada7
 800ab30:	0800ada7 	.word	0x0800ada7
 800ab34:	0800ada7 	.word	0x0800ada7
 800ab38:	0800ada7 	.word	0x0800ada7
 800ab3c:	0800ada7 	.word	0x0800ada7
 800ab40:	0800ab45 	.word	0x0800ab45
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab4a:	69db      	ldr	r3, [r3, #28]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d00b      	beq.n	800ab68 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab56:	69db      	ldr	r3, [r3, #28]
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	7c12      	ldrb	r2, [r2, #16]
 800ab5c:	f107 0108 	add.w	r1, r7, #8
 800ab60:	4610      	mov	r0, r2
 800ab62:	4798      	blx	r3
 800ab64:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab66:	e126      	b.n	800adb6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ab68:	6839      	ldr	r1, [r7, #0]
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 fb27 	bl	800b1be <USBD_CtlError>
        err++;
 800ab70:	7afb      	ldrb	r3, [r7, #11]
 800ab72:	3301      	adds	r3, #1
 800ab74:	72fb      	strb	r3, [r7, #11]
      break;
 800ab76:	e11e      	b.n	800adb6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	7c12      	ldrb	r2, [r2, #16]
 800ab84:	f107 0108 	add.w	r1, r7, #8
 800ab88:	4610      	mov	r0, r2
 800ab8a:	4798      	blx	r3
 800ab8c:	60f8      	str	r0, [r7, #12]
      break;
 800ab8e:	e112      	b.n	800adb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	7c1b      	ldrb	r3, [r3, #16]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d10d      	bne.n	800abb4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aba0:	f107 0208 	add.w	r2, r7, #8
 800aba4:	4610      	mov	r0, r2
 800aba6:	4798      	blx	r3
 800aba8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	3301      	adds	r3, #1
 800abae:	2202      	movs	r2, #2
 800abb0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800abb2:	e100      	b.n	800adb6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abbc:	f107 0208 	add.w	r2, r7, #8
 800abc0:	4610      	mov	r0, r2
 800abc2:	4798      	blx	r3
 800abc4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	3301      	adds	r3, #1
 800abca:	2202      	movs	r2, #2
 800abcc:	701a      	strb	r2, [r3, #0]
      break;
 800abce:	e0f2      	b.n	800adb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	885b      	ldrh	r3, [r3, #2]
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	2b05      	cmp	r3, #5
 800abd8:	f200 80ac 	bhi.w	800ad34 <USBD_GetDescriptor+0x258>
 800abdc:	a201      	add	r2, pc, #4	; (adr r2, 800abe4 <USBD_GetDescriptor+0x108>)
 800abde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe2:	bf00      	nop
 800abe4:	0800abfd 	.word	0x0800abfd
 800abe8:	0800ac31 	.word	0x0800ac31
 800abec:	0800ac65 	.word	0x0800ac65
 800abf0:	0800ac99 	.word	0x0800ac99
 800abf4:	0800accd 	.word	0x0800accd
 800abf8:	0800ad01 	.word	0x0800ad01
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d00b      	beq.n	800ac20 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	7c12      	ldrb	r2, [r2, #16]
 800ac14:	f107 0108 	add.w	r1, r7, #8
 800ac18:	4610      	mov	r0, r2
 800ac1a:	4798      	blx	r3
 800ac1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac1e:	e091      	b.n	800ad44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac20:	6839      	ldr	r1, [r7, #0]
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 facb 	bl	800b1be <USBD_CtlError>
            err++;
 800ac28:	7afb      	ldrb	r3, [r7, #11]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	72fb      	strb	r3, [r7, #11]
          break;
 800ac2e:	e089      	b.n	800ad44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac36:	689b      	ldr	r3, [r3, #8]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00b      	beq.n	800ac54 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	7c12      	ldrb	r2, [r2, #16]
 800ac48:	f107 0108 	add.w	r1, r7, #8
 800ac4c:	4610      	mov	r0, r2
 800ac4e:	4798      	blx	r3
 800ac50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac52:	e077      	b.n	800ad44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac54:	6839      	ldr	r1, [r7, #0]
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f000 fab1 	bl	800b1be <USBD_CtlError>
            err++;
 800ac5c:	7afb      	ldrb	r3, [r7, #11]
 800ac5e:	3301      	adds	r3, #1
 800ac60:	72fb      	strb	r3, [r7, #11]
          break;
 800ac62:	e06f      	b.n	800ad44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac6a:	68db      	ldr	r3, [r3, #12]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d00b      	beq.n	800ac88 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac76:	68db      	ldr	r3, [r3, #12]
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	7c12      	ldrb	r2, [r2, #16]
 800ac7c:	f107 0108 	add.w	r1, r7, #8
 800ac80:	4610      	mov	r0, r2
 800ac82:	4798      	blx	r3
 800ac84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac86:	e05d      	b.n	800ad44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac88:	6839      	ldr	r1, [r7, #0]
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 fa97 	bl	800b1be <USBD_CtlError>
            err++;
 800ac90:	7afb      	ldrb	r3, [r7, #11]
 800ac92:	3301      	adds	r3, #1
 800ac94:	72fb      	strb	r3, [r7, #11]
          break;
 800ac96:	e055      	b.n	800ad44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac9e:	691b      	ldr	r3, [r3, #16]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d00b      	beq.n	800acbc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acaa:	691b      	ldr	r3, [r3, #16]
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	7c12      	ldrb	r2, [r2, #16]
 800acb0:	f107 0108 	add.w	r1, r7, #8
 800acb4:	4610      	mov	r0, r2
 800acb6:	4798      	blx	r3
 800acb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acba:	e043      	b.n	800ad44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800acbc:	6839      	ldr	r1, [r7, #0]
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 fa7d 	bl	800b1be <USBD_CtlError>
            err++;
 800acc4:	7afb      	ldrb	r3, [r7, #11]
 800acc6:	3301      	adds	r3, #1
 800acc8:	72fb      	strb	r3, [r7, #11]
          break;
 800acca:	e03b      	b.n	800ad44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acd2:	695b      	ldr	r3, [r3, #20]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00b      	beq.n	800acf0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acde:	695b      	ldr	r3, [r3, #20]
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	7c12      	ldrb	r2, [r2, #16]
 800ace4:	f107 0108 	add.w	r1, r7, #8
 800ace8:	4610      	mov	r0, r2
 800acea:	4798      	blx	r3
 800acec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acee:	e029      	b.n	800ad44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800acf0:	6839      	ldr	r1, [r7, #0]
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 fa63 	bl	800b1be <USBD_CtlError>
            err++;
 800acf8:	7afb      	ldrb	r3, [r7, #11]
 800acfa:	3301      	adds	r3, #1
 800acfc:	72fb      	strb	r3, [r7, #11]
          break;
 800acfe:	e021      	b.n	800ad44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad06:	699b      	ldr	r3, [r3, #24]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d00b      	beq.n	800ad24 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad12:	699b      	ldr	r3, [r3, #24]
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	7c12      	ldrb	r2, [r2, #16]
 800ad18:	f107 0108 	add.w	r1, r7, #8
 800ad1c:	4610      	mov	r0, r2
 800ad1e:	4798      	blx	r3
 800ad20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad22:	e00f      	b.n	800ad44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad24:	6839      	ldr	r1, [r7, #0]
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 fa49 	bl	800b1be <USBD_CtlError>
            err++;
 800ad2c:	7afb      	ldrb	r3, [r7, #11]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	72fb      	strb	r3, [r7, #11]
          break;
 800ad32:	e007      	b.n	800ad44 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ad34:	6839      	ldr	r1, [r7, #0]
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 fa41 	bl	800b1be <USBD_CtlError>
          err++;
 800ad3c:	7afb      	ldrb	r3, [r7, #11]
 800ad3e:	3301      	adds	r3, #1
 800ad40:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ad42:	bf00      	nop
      }
      break;
 800ad44:	e037      	b.n	800adb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	7c1b      	ldrb	r3, [r3, #16]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d109      	bne.n	800ad62 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad56:	f107 0208 	add.w	r2, r7, #8
 800ad5a:	4610      	mov	r0, r2
 800ad5c:	4798      	blx	r3
 800ad5e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad60:	e029      	b.n	800adb6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ad62:	6839      	ldr	r1, [r7, #0]
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 fa2a 	bl	800b1be <USBD_CtlError>
        err++;
 800ad6a:	7afb      	ldrb	r3, [r7, #11]
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	72fb      	strb	r3, [r7, #11]
      break;
 800ad70:	e021      	b.n	800adb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	7c1b      	ldrb	r3, [r3, #16]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d10d      	bne.n	800ad96 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad82:	f107 0208 	add.w	r2, r7, #8
 800ad86:	4610      	mov	r0, r2
 800ad88:	4798      	blx	r3
 800ad8a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	3301      	adds	r3, #1
 800ad90:	2207      	movs	r2, #7
 800ad92:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad94:	e00f      	b.n	800adb6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ad96:	6839      	ldr	r1, [r7, #0]
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 fa10 	bl	800b1be <USBD_CtlError>
        err++;
 800ad9e:	7afb      	ldrb	r3, [r7, #11]
 800ada0:	3301      	adds	r3, #1
 800ada2:	72fb      	strb	r3, [r7, #11]
      break;
 800ada4:	e007      	b.n	800adb6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ada6:	6839      	ldr	r1, [r7, #0]
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 fa08 	bl	800b1be <USBD_CtlError>
      err++;
 800adae:	7afb      	ldrb	r3, [r7, #11]
 800adb0:	3301      	adds	r3, #1
 800adb2:	72fb      	strb	r3, [r7, #11]
      break;
 800adb4:	bf00      	nop
  }

  if (err != 0U)
 800adb6:	7afb      	ldrb	r3, [r7, #11]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d11e      	bne.n	800adfa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	88db      	ldrh	r3, [r3, #6]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d016      	beq.n	800adf2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800adc4:	893b      	ldrh	r3, [r7, #8]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d00e      	beq.n	800ade8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	88da      	ldrh	r2, [r3, #6]
 800adce:	893b      	ldrh	r3, [r7, #8]
 800add0:	4293      	cmp	r3, r2
 800add2:	bf28      	it	cs
 800add4:	4613      	movcs	r3, r2
 800add6:	b29b      	uxth	r3, r3
 800add8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800adda:	893b      	ldrh	r3, [r7, #8]
 800addc:	461a      	mov	r2, r3
 800adde:	68f9      	ldr	r1, [r7, #12]
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 fa5d 	bl	800b2a0 <USBD_CtlSendData>
 800ade6:	e009      	b.n	800adfc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ade8:	6839      	ldr	r1, [r7, #0]
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 f9e7 	bl	800b1be <USBD_CtlError>
 800adf0:	e004      	b.n	800adfc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 faae 	bl	800b354 <USBD_CtlSendStatus>
 800adf8:	e000      	b.n	800adfc <USBD_GetDescriptor+0x320>
    return;
 800adfa:	bf00      	nop
  }
}
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop

0800ae04 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	889b      	ldrh	r3, [r3, #4]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d131      	bne.n	800ae7a <USBD_SetAddress+0x76>
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	88db      	ldrh	r3, [r3, #6]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d12d      	bne.n	800ae7a <USBD_SetAddress+0x76>
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	885b      	ldrh	r3, [r3, #2]
 800ae22:	2b7f      	cmp	r3, #127	; 0x7f
 800ae24:	d829      	bhi.n	800ae7a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	885b      	ldrh	r3, [r3, #2]
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	2b03      	cmp	r3, #3
 800ae3c:	d104      	bne.n	800ae48 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ae3e:	6839      	ldr	r1, [r7, #0]
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 f9bc 	bl	800b1be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae46:	e01d      	b.n	800ae84 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	7bfa      	ldrb	r2, [r7, #15]
 800ae4c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ae50:	7bfb      	ldrb	r3, [r7, #15]
 800ae52:	4619      	mov	r1, r3
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f003 ff9d 	bl	800ed94 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 fa7a 	bl	800b354 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ae60:	7bfb      	ldrb	r3, [r7, #15]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d004      	beq.n	800ae70 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2202      	movs	r2, #2
 800ae6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae6e:	e009      	b.n	800ae84 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2201      	movs	r2, #1
 800ae74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae78:	e004      	b.n	800ae84 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ae7a:	6839      	ldr	r1, [r7, #0]
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 f99e 	bl	800b1be <USBD_CtlError>
  }
}
 800ae82:	bf00      	nop
 800ae84:	bf00      	nop
 800ae86:	3710      	adds	r7, #16
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae96:	2300      	movs	r3, #0
 800ae98:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	885b      	ldrh	r3, [r3, #2]
 800ae9e:	b2da      	uxtb	r2, r3
 800aea0:	4b4e      	ldr	r3, [pc, #312]	; (800afdc <USBD_SetConfig+0x150>)
 800aea2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aea4:	4b4d      	ldr	r3, [pc, #308]	; (800afdc <USBD_SetConfig+0x150>)
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d905      	bls.n	800aeb8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800aeac:	6839      	ldr	r1, [r7, #0]
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 f985 	bl	800b1be <USBD_CtlError>
    return USBD_FAIL;
 800aeb4:	2303      	movs	r3, #3
 800aeb6:	e08c      	b.n	800afd2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aebe:	b2db      	uxtb	r3, r3
 800aec0:	2b02      	cmp	r3, #2
 800aec2:	d002      	beq.n	800aeca <USBD_SetConfig+0x3e>
 800aec4:	2b03      	cmp	r3, #3
 800aec6:	d029      	beq.n	800af1c <USBD_SetConfig+0x90>
 800aec8:	e075      	b.n	800afb6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800aeca:	4b44      	ldr	r3, [pc, #272]	; (800afdc <USBD_SetConfig+0x150>)
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d020      	beq.n	800af14 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800aed2:	4b42      	ldr	r3, [pc, #264]	; (800afdc <USBD_SetConfig+0x150>)
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	461a      	mov	r2, r3
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aedc:	4b3f      	ldr	r3, [pc, #252]	; (800afdc <USBD_SetConfig+0x150>)
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	4619      	mov	r1, r3
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f7fe ffbd 	bl	8009e62 <USBD_SetClassConfig>
 800aee8:	4603      	mov	r3, r0
 800aeea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aeec:	7bfb      	ldrb	r3, [r7, #15]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d008      	beq.n	800af04 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800aef2:	6839      	ldr	r1, [r7, #0]
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 f962 	bl	800b1be <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2202      	movs	r2, #2
 800aefe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af02:	e065      	b.n	800afd0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 fa25 	bl	800b354 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2203      	movs	r2, #3
 800af0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800af12:	e05d      	b.n	800afd0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 fa1d 	bl	800b354 <USBD_CtlSendStatus>
      break;
 800af1a:	e059      	b.n	800afd0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800af1c:	4b2f      	ldr	r3, [pc, #188]	; (800afdc <USBD_SetConfig+0x150>)
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d112      	bne.n	800af4a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2202      	movs	r2, #2
 800af28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800af2c:	4b2b      	ldr	r3, [pc, #172]	; (800afdc <USBD_SetConfig+0x150>)
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	461a      	mov	r2, r3
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800af36:	4b29      	ldr	r3, [pc, #164]	; (800afdc <USBD_SetConfig+0x150>)
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	4619      	mov	r1, r3
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f7fe ffac 	bl	8009e9a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 fa06 	bl	800b354 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af48:	e042      	b.n	800afd0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800af4a:	4b24      	ldr	r3, [pc, #144]	; (800afdc <USBD_SetConfig+0x150>)
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	461a      	mov	r2, r3
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	429a      	cmp	r2, r3
 800af56:	d02a      	beq.n	800afae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	4619      	mov	r1, r3
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f7fe ff9a 	bl	8009e9a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800af66:	4b1d      	ldr	r3, [pc, #116]	; (800afdc <USBD_SetConfig+0x150>)
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	461a      	mov	r2, r3
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af70:	4b1a      	ldr	r3, [pc, #104]	; (800afdc <USBD_SetConfig+0x150>)
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	4619      	mov	r1, r3
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f7fe ff73 	bl	8009e62 <USBD_SetClassConfig>
 800af7c:	4603      	mov	r3, r0
 800af7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800af80:	7bfb      	ldrb	r3, [r7, #15]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00f      	beq.n	800afa6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800af86:	6839      	ldr	r1, [r7, #0]
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 f918 	bl	800b1be <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	b2db      	uxtb	r3, r3
 800af94:	4619      	mov	r1, r3
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f7fe ff7f 	bl	8009e9a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2202      	movs	r2, #2
 800afa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800afa4:	e014      	b.n	800afd0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 f9d4 	bl	800b354 <USBD_CtlSendStatus>
      break;
 800afac:	e010      	b.n	800afd0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 f9d0 	bl	800b354 <USBD_CtlSendStatus>
      break;
 800afb4:	e00c      	b.n	800afd0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800afb6:	6839      	ldr	r1, [r7, #0]
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 f900 	bl	800b1be <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800afbe:	4b07      	ldr	r3, [pc, #28]	; (800afdc <USBD_SetConfig+0x150>)
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	4619      	mov	r1, r3
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f7fe ff68 	bl	8009e9a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800afca:	2303      	movs	r3, #3
 800afcc:	73fb      	strb	r3, [r7, #15]
      break;
 800afce:	bf00      	nop
  }

  return ret;
 800afd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3710      	adds	r7, #16
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	20000ff4 	.word	0x20000ff4

0800afe0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b082      	sub	sp, #8
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	88db      	ldrh	r3, [r3, #6]
 800afee:	2b01      	cmp	r3, #1
 800aff0:	d004      	beq.n	800affc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aff2:	6839      	ldr	r1, [r7, #0]
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 f8e2 	bl	800b1be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800affa:	e023      	b.n	800b044 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b002:	b2db      	uxtb	r3, r3
 800b004:	2b02      	cmp	r3, #2
 800b006:	dc02      	bgt.n	800b00e <USBD_GetConfig+0x2e>
 800b008:	2b00      	cmp	r3, #0
 800b00a:	dc03      	bgt.n	800b014 <USBD_GetConfig+0x34>
 800b00c:	e015      	b.n	800b03a <USBD_GetConfig+0x5a>
 800b00e:	2b03      	cmp	r3, #3
 800b010:	d00b      	beq.n	800b02a <USBD_GetConfig+0x4a>
 800b012:	e012      	b.n	800b03a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2200      	movs	r2, #0
 800b018:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	3308      	adds	r3, #8
 800b01e:	2201      	movs	r2, #1
 800b020:	4619      	mov	r1, r3
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 f93c 	bl	800b2a0 <USBD_CtlSendData>
        break;
 800b028:	e00c      	b.n	800b044 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	3304      	adds	r3, #4
 800b02e:	2201      	movs	r2, #1
 800b030:	4619      	mov	r1, r3
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 f934 	bl	800b2a0 <USBD_CtlSendData>
        break;
 800b038:	e004      	b.n	800b044 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b03a:	6839      	ldr	r1, [r7, #0]
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f000 f8be 	bl	800b1be <USBD_CtlError>
        break;
 800b042:	bf00      	nop
}
 800b044:	bf00      	nop
 800b046:	3708      	adds	r7, #8
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	3b01      	subs	r3, #1
 800b060:	2b02      	cmp	r3, #2
 800b062:	d81e      	bhi.n	800b0a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	88db      	ldrh	r3, [r3, #6]
 800b068:	2b02      	cmp	r3, #2
 800b06a:	d004      	beq.n	800b076 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b06c:	6839      	ldr	r1, [r7, #0]
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 f8a5 	bl	800b1be <USBD_CtlError>
        break;
 800b074:	e01a      	b.n	800b0ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2201      	movs	r2, #1
 800b07a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b082:	2b00      	cmp	r3, #0
 800b084:	d005      	beq.n	800b092 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	68db      	ldr	r3, [r3, #12]
 800b08a:	f043 0202 	orr.w	r2, r3, #2
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	330c      	adds	r3, #12
 800b096:	2202      	movs	r2, #2
 800b098:	4619      	mov	r1, r3
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 f900 	bl	800b2a0 <USBD_CtlSendData>
      break;
 800b0a0:	e004      	b.n	800b0ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b0a2:	6839      	ldr	r1, [r7, #0]
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 f88a 	bl	800b1be <USBD_CtlError>
      break;
 800b0aa:	bf00      	nop
  }
}
 800b0ac:	bf00      	nop
 800b0ae:	3708      	adds	r7, #8
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	885b      	ldrh	r3, [r3, #2]
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d107      	bne.n	800b0d6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 f940 	bl	800b354 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b0d4:	e013      	b.n	800b0fe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	885b      	ldrh	r3, [r3, #2]
 800b0da:	2b02      	cmp	r3, #2
 800b0dc:	d10b      	bne.n	800b0f6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	889b      	ldrh	r3, [r3, #4]
 800b0e2:	0a1b      	lsrs	r3, r3, #8
 800b0e4:	b29b      	uxth	r3, r3
 800b0e6:	b2da      	uxtb	r2, r3
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 f930 	bl	800b354 <USBD_CtlSendStatus>
}
 800b0f4:	e003      	b.n	800b0fe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b0f6:	6839      	ldr	r1, [r7, #0]
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 f860 	bl	800b1be <USBD_CtlError>
}
 800b0fe:	bf00      	nop
 800b100:	3708      	adds	r7, #8
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}

0800b106 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b106:	b580      	push	{r7, lr}
 800b108:	b082      	sub	sp, #8
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
 800b10e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b116:	b2db      	uxtb	r3, r3
 800b118:	3b01      	subs	r3, #1
 800b11a:	2b02      	cmp	r3, #2
 800b11c:	d80b      	bhi.n	800b136 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	885b      	ldrh	r3, [r3, #2]
 800b122:	2b01      	cmp	r3, #1
 800b124:	d10c      	bne.n	800b140 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 f910 	bl	800b354 <USBD_CtlSendStatus>
      }
      break;
 800b134:	e004      	b.n	800b140 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b136:	6839      	ldr	r1, [r7, #0]
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f000 f840 	bl	800b1be <USBD_CtlError>
      break;
 800b13e:	e000      	b.n	800b142 <USBD_ClrFeature+0x3c>
      break;
 800b140:	bf00      	nop
  }
}
 800b142:	bf00      	nop
 800b144:	3708      	adds	r7, #8
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}

0800b14a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b084      	sub	sp, #16
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
 800b152:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	781a      	ldrb	r2, [r3, #0]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	3301      	adds	r3, #1
 800b164:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	781a      	ldrb	r2, [r3, #0]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	3301      	adds	r3, #1
 800b172:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b174:	68f8      	ldr	r0, [r7, #12]
 800b176:	f7ff fa17 	bl	800a5a8 <SWAPBYTE>
 800b17a:	4603      	mov	r3, r0
 800b17c:	461a      	mov	r2, r3
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	3301      	adds	r3, #1
 800b186:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	3301      	adds	r3, #1
 800b18c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b18e:	68f8      	ldr	r0, [r7, #12]
 800b190:	f7ff fa0a 	bl	800a5a8 <SWAPBYTE>
 800b194:	4603      	mov	r3, r0
 800b196:	461a      	mov	r2, r3
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	3301      	adds	r3, #1
 800b1a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b1a8:	68f8      	ldr	r0, [r7, #12]
 800b1aa:	f7ff f9fd 	bl	800a5a8 <SWAPBYTE>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	80da      	strh	r2, [r3, #6]
}
 800b1b6:	bf00      	nop
 800b1b8:	3710      	adds	r7, #16
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b082      	sub	sp, #8
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
 800b1c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1c8:	2180      	movs	r1, #128	; 0x80
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f003 fd78 	bl	800ecc0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b1d0:	2100      	movs	r1, #0
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f003 fd74 	bl	800ecc0 <USBD_LL_StallEP>
}
 800b1d8:	bf00      	nop
 800b1da:	3708      	adds	r7, #8
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b086      	sub	sp, #24
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	60b9      	str	r1, [r7, #8]
 800b1ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d036      	beq.n	800b264 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b1fa:	6938      	ldr	r0, [r7, #16]
 800b1fc:	f000 f836 	bl	800b26c <USBD_GetLen>
 800b200:	4603      	mov	r3, r0
 800b202:	3301      	adds	r3, #1
 800b204:	b29b      	uxth	r3, r3
 800b206:	005b      	lsls	r3, r3, #1
 800b208:	b29a      	uxth	r2, r3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b20e:	7dfb      	ldrb	r3, [r7, #23]
 800b210:	68ba      	ldr	r2, [r7, #8]
 800b212:	4413      	add	r3, r2
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	7812      	ldrb	r2, [r2, #0]
 800b218:	701a      	strb	r2, [r3, #0]
  idx++;
 800b21a:	7dfb      	ldrb	r3, [r7, #23]
 800b21c:	3301      	adds	r3, #1
 800b21e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b220:	7dfb      	ldrb	r3, [r7, #23]
 800b222:	68ba      	ldr	r2, [r7, #8]
 800b224:	4413      	add	r3, r2
 800b226:	2203      	movs	r2, #3
 800b228:	701a      	strb	r2, [r3, #0]
  idx++;
 800b22a:	7dfb      	ldrb	r3, [r7, #23]
 800b22c:	3301      	adds	r3, #1
 800b22e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b230:	e013      	b.n	800b25a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b232:	7dfb      	ldrb	r3, [r7, #23]
 800b234:	68ba      	ldr	r2, [r7, #8]
 800b236:	4413      	add	r3, r2
 800b238:	693a      	ldr	r2, [r7, #16]
 800b23a:	7812      	ldrb	r2, [r2, #0]
 800b23c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	3301      	adds	r3, #1
 800b242:	613b      	str	r3, [r7, #16]
    idx++;
 800b244:	7dfb      	ldrb	r3, [r7, #23]
 800b246:	3301      	adds	r3, #1
 800b248:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b24a:	7dfb      	ldrb	r3, [r7, #23]
 800b24c:	68ba      	ldr	r2, [r7, #8]
 800b24e:	4413      	add	r3, r2
 800b250:	2200      	movs	r2, #0
 800b252:	701a      	strb	r2, [r3, #0]
    idx++;
 800b254:	7dfb      	ldrb	r3, [r7, #23]
 800b256:	3301      	adds	r3, #1
 800b258:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1e7      	bne.n	800b232 <USBD_GetString+0x52>
 800b262:	e000      	b.n	800b266 <USBD_GetString+0x86>
    return;
 800b264:	bf00      	nop
  }
}
 800b266:	3718      	adds	r7, #24
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b085      	sub	sp, #20
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b274:	2300      	movs	r3, #0
 800b276:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b27c:	e005      	b.n	800b28a <USBD_GetLen+0x1e>
  {
    len++;
 800b27e:	7bfb      	ldrb	r3, [r7, #15]
 800b280:	3301      	adds	r3, #1
 800b282:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	3301      	adds	r3, #1
 800b288:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d1f5      	bne.n	800b27e <USBD_GetLen+0x12>
  }

  return len;
 800b292:	7bfb      	ldrb	r3, [r7, #15]
}
 800b294:	4618      	mov	r0, r3
 800b296:	3714      	adds	r7, #20
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr

0800b2a0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2202      	movs	r2, #2
 800b2b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	68ba      	ldr	r2, [r7, #8]
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	68f8      	ldr	r0, [r7, #12]
 800b2c8:	f003 fd83 	bl	800edd2 <USBD_LL_Transmit>

  return USBD_OK;
 800b2cc:	2300      	movs	r3, #0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3710      	adds	r7, #16
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b084      	sub	sp, #16
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	60f8      	str	r0, [r7, #12]
 800b2de:	60b9      	str	r1, [r7, #8]
 800b2e0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	68ba      	ldr	r2, [r7, #8]
 800b2e6:	2100      	movs	r1, #0
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f003 fd72 	bl	800edd2 <USBD_LL_Transmit>

  return USBD_OK;
 800b2ee:	2300      	movs	r3, #0
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3710      	adds	r7, #16
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b084      	sub	sp, #16
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	60b9      	str	r1, [r7, #8]
 800b302:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2203      	movs	r2, #3
 800b308:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	68ba      	ldr	r2, [r7, #8]
 800b320:	2100      	movs	r1, #0
 800b322:	68f8      	ldr	r0, [r7, #12]
 800b324:	f003 fd76 	bl	800ee14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b328:	2300      	movs	r3, #0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3710      	adds	r7, #16
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}

0800b332 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b332:	b580      	push	{r7, lr}
 800b334:	b084      	sub	sp, #16
 800b336:	af00      	add	r7, sp, #0
 800b338:	60f8      	str	r0, [r7, #12]
 800b33a:	60b9      	str	r1, [r7, #8]
 800b33c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	68ba      	ldr	r2, [r7, #8]
 800b342:	2100      	movs	r1, #0
 800b344:	68f8      	ldr	r0, [r7, #12]
 800b346:	f003 fd65 	bl	800ee14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b34a:	2300      	movs	r3, #0
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3710      	adds	r7, #16
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2204      	movs	r2, #4
 800b360:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b364:	2300      	movs	r3, #0
 800b366:	2200      	movs	r2, #0
 800b368:	2100      	movs	r1, #0
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f003 fd31 	bl	800edd2 <USBD_LL_Transmit>

  return USBD_OK;
 800b370:	2300      	movs	r3, #0
}
 800b372:	4618      	mov	r0, r3
 800b374:	3708      	adds	r7, #8
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b082      	sub	sp, #8
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2205      	movs	r2, #5
 800b386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b38a:	2300      	movs	r3, #0
 800b38c:	2200      	movs	r2, #0
 800b38e:	2100      	movs	r1, #0
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f003 fd3f 	bl	800ee14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b396:	2300      	movs	r3, #0
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3708      	adds	r7, #8
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b3a0:	b480      	push	{r7}
 800b3a2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800b3a4:	bf00      	nop
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr
	...

0800b3b0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b3b0:	b480      	push	{r7}
 800b3b2:	b085      	sub	sp, #20
 800b3b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3b6:	f3ef 8305 	mrs	r3, IPSR
 800b3ba:	60bb      	str	r3, [r7, #8]
  return(result);
 800b3bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d10f      	bne.n	800b3e2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3c2:	f3ef 8310 	mrs	r3, PRIMASK
 800b3c6:	607b      	str	r3, [r7, #4]
  return(result);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d105      	bne.n	800b3da <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b3ce:	f3ef 8311 	mrs	r3, BASEPRI
 800b3d2:	603b      	str	r3, [r7, #0]
  return(result);
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d007      	beq.n	800b3ea <osKernelInitialize+0x3a>
 800b3da:	4b0e      	ldr	r3, [pc, #56]	; (800b414 <osKernelInitialize+0x64>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2b02      	cmp	r3, #2
 800b3e0:	d103      	bne.n	800b3ea <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800b3e2:	f06f 0305 	mvn.w	r3, #5
 800b3e6:	60fb      	str	r3, [r7, #12]
 800b3e8:	e00c      	b.n	800b404 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b3ea:	4b0a      	ldr	r3, [pc, #40]	; (800b414 <osKernelInitialize+0x64>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d105      	bne.n	800b3fe <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b3f2:	4b08      	ldr	r3, [pc, #32]	; (800b414 <osKernelInitialize+0x64>)
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	60fb      	str	r3, [r7, #12]
 800b3fc:	e002      	b.n	800b404 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800b3fe:	f04f 33ff 	mov.w	r3, #4294967295
 800b402:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b404:	68fb      	ldr	r3, [r7, #12]
}
 800b406:	4618      	mov	r0, r3
 800b408:	3714      	adds	r7, #20
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr
 800b412:	bf00      	nop
 800b414:	20000ff8 	.word	0x20000ff8

0800b418 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b41e:	f3ef 8305 	mrs	r3, IPSR
 800b422:	60bb      	str	r3, [r7, #8]
  return(result);
 800b424:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b426:	2b00      	cmp	r3, #0
 800b428:	d10f      	bne.n	800b44a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b42a:	f3ef 8310 	mrs	r3, PRIMASK
 800b42e:	607b      	str	r3, [r7, #4]
  return(result);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d105      	bne.n	800b442 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b436:	f3ef 8311 	mrs	r3, BASEPRI
 800b43a:	603b      	str	r3, [r7, #0]
  return(result);
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d007      	beq.n	800b452 <osKernelStart+0x3a>
 800b442:	4b0f      	ldr	r3, [pc, #60]	; (800b480 <osKernelStart+0x68>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	2b02      	cmp	r3, #2
 800b448:	d103      	bne.n	800b452 <osKernelStart+0x3a>
    stat = osErrorISR;
 800b44a:	f06f 0305 	mvn.w	r3, #5
 800b44e:	60fb      	str	r3, [r7, #12]
 800b450:	e010      	b.n	800b474 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b452:	4b0b      	ldr	r3, [pc, #44]	; (800b480 <osKernelStart+0x68>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	2b01      	cmp	r3, #1
 800b458:	d109      	bne.n	800b46e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b45a:	f7ff ffa1 	bl	800b3a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b45e:	4b08      	ldr	r3, [pc, #32]	; (800b480 <osKernelStart+0x68>)
 800b460:	2202      	movs	r2, #2
 800b462:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b464:	f001 fa2c 	bl	800c8c0 <vTaskStartScheduler>
      stat = osOK;
 800b468:	2300      	movs	r3, #0
 800b46a:	60fb      	str	r3, [r7, #12]
 800b46c:	e002      	b.n	800b474 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800b46e:	f04f 33ff 	mov.w	r3, #4294967295
 800b472:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b474:	68fb      	ldr	r3, [r7, #12]
}
 800b476:	4618      	mov	r0, r3
 800b478:	3710      	adds	r7, #16
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	20000ff8 	.word	0x20000ff8

0800b484 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b484:	b580      	push	{r7, lr}
 800b486:	b090      	sub	sp, #64	; 0x40
 800b488:	af04      	add	r7, sp, #16
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b490:	2300      	movs	r3, #0
 800b492:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b494:	f3ef 8305 	mrs	r3, IPSR
 800b498:	61fb      	str	r3, [r7, #28]
  return(result);
 800b49a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	f040 808f 	bne.w	800b5c0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4a2:	f3ef 8310 	mrs	r3, PRIMASK
 800b4a6:	61bb      	str	r3, [r7, #24]
  return(result);
 800b4a8:	69bb      	ldr	r3, [r7, #24]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d105      	bne.n	800b4ba <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b4ae:	f3ef 8311 	mrs	r3, BASEPRI
 800b4b2:	617b      	str	r3, [r7, #20]
  return(result);
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d003      	beq.n	800b4c2 <osThreadNew+0x3e>
 800b4ba:	4b44      	ldr	r3, [pc, #272]	; (800b5cc <osThreadNew+0x148>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	2b02      	cmp	r3, #2
 800b4c0:	d07e      	beq.n	800b5c0 <osThreadNew+0x13c>
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d07b      	beq.n	800b5c0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800b4c8:	2380      	movs	r3, #128	; 0x80
 800b4ca:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800b4cc:	2318      	movs	r3, #24
 800b4ce:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800b4d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b4d8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d045      	beq.n	800b56c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d002      	beq.n	800b4ee <osThreadNew+0x6a>
        name = attr->name;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	699b      	ldr	r3, [r3, #24]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d002      	beq.n	800b4fc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	699b      	ldr	r3, [r3, #24]
 800b4fa:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d008      	beq.n	800b514 <osThreadNew+0x90>
 800b502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b504:	2b38      	cmp	r3, #56	; 0x38
 800b506:	d805      	bhi.n	800b514 <osThreadNew+0x90>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	f003 0301 	and.w	r3, r3, #1
 800b510:	2b00      	cmp	r3, #0
 800b512:	d001      	beq.n	800b518 <osThreadNew+0x94>
        return (NULL);
 800b514:	2300      	movs	r3, #0
 800b516:	e054      	b.n	800b5c2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	695b      	ldr	r3, [r3, #20]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d003      	beq.n	800b528 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	695b      	ldr	r3, [r3, #20]
 800b524:	089b      	lsrs	r3, r3, #2
 800b526:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d00e      	beq.n	800b54e <osThreadNew+0xca>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	2ba7      	cmp	r3, #167	; 0xa7
 800b536:	d90a      	bls.n	800b54e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d006      	beq.n	800b54e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	695b      	ldr	r3, [r3, #20]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d002      	beq.n	800b54e <osThreadNew+0xca>
        mem = 1;
 800b548:	2301      	movs	r3, #1
 800b54a:	623b      	str	r3, [r7, #32]
 800b54c:	e010      	b.n	800b570 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	689b      	ldr	r3, [r3, #8]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d10c      	bne.n	800b570 <osThreadNew+0xec>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	68db      	ldr	r3, [r3, #12]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d108      	bne.n	800b570 <osThreadNew+0xec>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	691b      	ldr	r3, [r3, #16]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d104      	bne.n	800b570 <osThreadNew+0xec>
          mem = 0;
 800b566:	2300      	movs	r3, #0
 800b568:	623b      	str	r3, [r7, #32]
 800b56a:	e001      	b.n	800b570 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800b56c:	2300      	movs	r3, #0
 800b56e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b570:	6a3b      	ldr	r3, [r7, #32]
 800b572:	2b01      	cmp	r3, #1
 800b574:	d110      	bne.n	800b598 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b57e:	9202      	str	r2, [sp, #8]
 800b580:	9301      	str	r3, [sp, #4]
 800b582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b584:	9300      	str	r3, [sp, #0]
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b58a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b58c:	68f8      	ldr	r0, [r7, #12]
 800b58e:	f000 ffa1 	bl	800c4d4 <xTaskCreateStatic>
 800b592:	4603      	mov	r3, r0
 800b594:	613b      	str	r3, [r7, #16]
 800b596:	e013      	b.n	800b5c0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800b598:	6a3b      	ldr	r3, [r7, #32]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d110      	bne.n	800b5c0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a0:	b29a      	uxth	r2, r3
 800b5a2:	f107 0310 	add.w	r3, r7, #16
 800b5a6:	9301      	str	r3, [sp, #4]
 800b5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5aa:	9300      	str	r3, [sp, #0]
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5b0:	68f8      	ldr	r0, [r7, #12]
 800b5b2:	f000 fff2 	bl	800c59a <xTaskCreate>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d001      	beq.n	800b5c0 <osThreadNew+0x13c>
          hTask = NULL;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b5c0:	693b      	ldr	r3, [r7, #16]
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3730      	adds	r7, #48	; 0x30
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	20000ff8 	.word	0x20000ff8

0800b5d0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b086      	sub	sp, #24
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5d8:	f3ef 8305 	mrs	r3, IPSR
 800b5dc:	613b      	str	r3, [r7, #16]
  return(result);
 800b5de:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d10f      	bne.n	800b604 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5e4:	f3ef 8310 	mrs	r3, PRIMASK
 800b5e8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d105      	bne.n	800b5fc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b5f0:	f3ef 8311 	mrs	r3, BASEPRI
 800b5f4:	60bb      	str	r3, [r7, #8]
  return(result);
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d007      	beq.n	800b60c <osDelay+0x3c>
 800b5fc:	4b0a      	ldr	r3, [pc, #40]	; (800b628 <osDelay+0x58>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	2b02      	cmp	r3, #2
 800b602:	d103      	bne.n	800b60c <osDelay+0x3c>
    stat = osErrorISR;
 800b604:	f06f 0305 	mvn.w	r3, #5
 800b608:	617b      	str	r3, [r7, #20]
 800b60a:	e007      	b.n	800b61c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800b60c:	2300      	movs	r3, #0
 800b60e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d002      	beq.n	800b61c <osDelay+0x4c>
      vTaskDelay(ticks);
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f001 f91c 	bl	800c854 <vTaskDelay>
    }
  }

  return (stat);
 800b61c:	697b      	ldr	r3, [r7, #20]
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3718      	adds	r7, #24
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	20000ff8 	.word	0x20000ff8

0800b62c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f002 fadf 	bl	800dbf8 <pvTimerGetTimerID>
 800b63a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d005      	beq.n	800b64e <TimerCallback+0x22>
    callb->func (callb->arg);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	68fa      	ldr	r2, [r7, #12]
 800b648:	6852      	ldr	r2, [r2, #4]
 800b64a:	4610      	mov	r0, r2
 800b64c:	4798      	blx	r3
  }
}
 800b64e:	bf00      	nop
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
	...

0800b658 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800b658:	b580      	push	{r7, lr}
 800b65a:	b08e      	sub	sp, #56	; 0x38
 800b65c:	af02      	add	r7, sp, #8
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	607a      	str	r2, [r7, #4]
 800b662:	603b      	str	r3, [r7, #0]
 800b664:	460b      	mov	r3, r1
 800b666:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800b668:	2300      	movs	r3, #0
 800b66a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b66c:	f3ef 8305 	mrs	r3, IPSR
 800b670:	61bb      	str	r3, [r7, #24]
  return(result);
 800b672:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800b674:	2b00      	cmp	r3, #0
 800b676:	d16a      	bne.n	800b74e <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b678:	f3ef 8310 	mrs	r3, PRIMASK
 800b67c:	617b      	str	r3, [r7, #20]
  return(result);
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d105      	bne.n	800b690 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b684:	f3ef 8311 	mrs	r3, BASEPRI
 800b688:	613b      	str	r3, [r7, #16]
  return(result);
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d003      	beq.n	800b698 <osTimerNew+0x40>
 800b690:	4b31      	ldr	r3, [pc, #196]	; (800b758 <osTimerNew+0x100>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	2b02      	cmp	r3, #2
 800b696:	d05a      	beq.n	800b74e <osTimerNew+0xf6>
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d057      	beq.n	800b74e <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800b69e:	2008      	movs	r0, #8
 800b6a0:	f002 fd08 	bl	800e0b4 <pvPortMalloc>
 800b6a4:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800b6a6:	69fb      	ldr	r3, [r7, #28]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d050      	beq.n	800b74e <osTimerNew+0xf6>
      callb->func = func;
 800b6ac:	69fb      	ldr	r3, [r7, #28]
 800b6ae:	68fa      	ldr	r2, [r7, #12]
 800b6b0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800b6b2:	69fb      	ldr	r3, [r7, #28]
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800b6b8:	7afb      	ldrb	r3, [r7, #11]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d102      	bne.n	800b6c4 <osTimerNew+0x6c>
        reload = pdFALSE;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	627b      	str	r3, [r7, #36]	; 0x24
 800b6c2:	e001      	b.n	800b6c8 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800b6c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b6cc:	623b      	str	r3, [r7, #32]
      name = NULL;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d01c      	beq.n	800b712 <osTimerNew+0xba>
        if (attr->name != NULL) {
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d002      	beq.n	800b6e6 <osTimerNew+0x8e>
          name = attr->name;
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	689b      	ldr	r3, [r3, #8]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d006      	beq.n	800b6fc <osTimerNew+0xa4>
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	68db      	ldr	r3, [r3, #12]
 800b6f2:	2b2b      	cmp	r3, #43	; 0x2b
 800b6f4:	d902      	bls.n	800b6fc <osTimerNew+0xa4>
          mem = 1;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	623b      	str	r3, [r7, #32]
 800b6fa:	e00c      	b.n	800b716 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	689b      	ldr	r3, [r3, #8]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d108      	bne.n	800b716 <osTimerNew+0xbe>
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d104      	bne.n	800b716 <osTimerNew+0xbe>
            mem = 0;
 800b70c:	2300      	movs	r3, #0
 800b70e:	623b      	str	r3, [r7, #32]
 800b710:	e001      	b.n	800b716 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800b712:	2300      	movs	r3, #0
 800b714:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800b716:	6a3b      	ldr	r3, [r7, #32]
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d10c      	bne.n	800b736 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	689b      	ldr	r3, [r3, #8]
 800b720:	9301      	str	r3, [sp, #4]
 800b722:	4b0e      	ldr	r3, [pc, #56]	; (800b75c <osTimerNew+0x104>)
 800b724:	9300      	str	r3, [sp, #0]
 800b726:	69fb      	ldr	r3, [r7, #28]
 800b728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b72a:	2101      	movs	r1, #1
 800b72c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b72e:	f001 fed2 	bl	800d4d6 <xTimerCreateStatic>
 800b732:	62b8      	str	r0, [r7, #40]	; 0x28
 800b734:	e00b      	b.n	800b74e <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800b736:	6a3b      	ldr	r3, [r7, #32]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d108      	bne.n	800b74e <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800b73c:	4b07      	ldr	r3, [pc, #28]	; (800b75c <osTimerNew+0x104>)
 800b73e:	9300      	str	r3, [sp, #0]
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b744:	2101      	movs	r1, #1
 800b746:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b748:	f001 fea4 	bl	800d494 <xTimerCreate>
 800b74c:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800b74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800b750:	4618      	mov	r0, r3
 800b752:	3730      	adds	r7, #48	; 0x30
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}
 800b758:	20000ff8 	.word	0x20000ff8
 800b75c:	0800b62d 	.word	0x0800b62d

0800b760 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b760:	b580      	push	{r7, lr}
 800b762:	b08c      	sub	sp, #48	; 0x30
 800b764:	af02      	add	r7, sp, #8
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b76c:	2300      	movs	r3, #0
 800b76e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b770:	f3ef 8305 	mrs	r3, IPSR
 800b774:	61bb      	str	r3, [r7, #24]
  return(result);
 800b776:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d16f      	bne.n	800b85c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b77c:	f3ef 8310 	mrs	r3, PRIMASK
 800b780:	617b      	str	r3, [r7, #20]
  return(result);
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d105      	bne.n	800b794 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b788:	f3ef 8311 	mrs	r3, BASEPRI
 800b78c:	613b      	str	r3, [r7, #16]
  return(result);
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d003      	beq.n	800b79c <osMessageQueueNew+0x3c>
 800b794:	4b34      	ldr	r3, [pc, #208]	; (800b868 <osMessageQueueNew+0x108>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	2b02      	cmp	r3, #2
 800b79a:	d05f      	beq.n	800b85c <osMessageQueueNew+0xfc>
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d05c      	beq.n	800b85c <osMessageQueueNew+0xfc>
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d059      	beq.n	800b85c <osMessageQueueNew+0xfc>
    mem = -1;
 800b7a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ac:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d029      	beq.n	800b808 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	689b      	ldr	r3, [r3, #8]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d012      	beq.n	800b7e2 <osMessageQueueNew+0x82>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	68db      	ldr	r3, [r3, #12]
 800b7c0:	2b4f      	cmp	r3, #79	; 0x4f
 800b7c2:	d90e      	bls.n	800b7e2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d00a      	beq.n	800b7e2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	695a      	ldr	r2, [r3, #20]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	68b9      	ldr	r1, [r7, #8]
 800b7d4:	fb01 f303 	mul.w	r3, r1, r3
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d302      	bcc.n	800b7e2 <osMessageQueueNew+0x82>
        mem = 1;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	623b      	str	r3, [r7, #32]
 800b7e0:	e014      	b.n	800b80c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	689b      	ldr	r3, [r3, #8]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d110      	bne.n	800b80c <osMessageQueueNew+0xac>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d10c      	bne.n	800b80c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d108      	bne.n	800b80c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	695b      	ldr	r3, [r3, #20]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d104      	bne.n	800b80c <osMessageQueueNew+0xac>
          mem = 0;
 800b802:	2300      	movs	r3, #0
 800b804:	623b      	str	r3, [r7, #32]
 800b806:	e001      	b.n	800b80c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800b808:	2300      	movs	r3, #0
 800b80a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b80c:	6a3b      	ldr	r3, [r7, #32]
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d10b      	bne.n	800b82a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	691a      	ldr	r2, [r3, #16]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	689b      	ldr	r3, [r3, #8]
 800b81a:	2100      	movs	r1, #0
 800b81c:	9100      	str	r1, [sp, #0]
 800b81e:	68b9      	ldr	r1, [r7, #8]
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	f000 f975 	bl	800bb10 <xQueueGenericCreateStatic>
 800b826:	6278      	str	r0, [r7, #36]	; 0x24
 800b828:	e008      	b.n	800b83c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800b82a:	6a3b      	ldr	r3, [r7, #32]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d105      	bne.n	800b83c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800b830:	2200      	movs	r2, #0
 800b832:	68b9      	ldr	r1, [r7, #8]
 800b834:	68f8      	ldr	r0, [r7, #12]
 800b836:	f000 f9ed 	bl	800bc14 <xQueueGenericCreate>
 800b83a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d00c      	beq.n	800b85c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d003      	beq.n	800b850 <osMessageQueueNew+0xf0>
        name = attr->name;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	61fb      	str	r3, [r7, #28]
 800b84e:	e001      	b.n	800b854 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800b850:	2300      	movs	r3, #0
 800b852:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800b854:	69f9      	ldr	r1, [r7, #28]
 800b856:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b858:	f000 fdde 	bl	800c418 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3728      	adds	r7, #40	; 0x28
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	20000ff8 	.word	0x20000ff8

0800b86c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b86c:	b480      	push	{r7}
 800b86e:	b085      	sub	sp, #20
 800b870:	af00      	add	r7, sp, #0
 800b872:	60f8      	str	r0, [r7, #12]
 800b874:	60b9      	str	r1, [r7, #8]
 800b876:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	4a07      	ldr	r2, [pc, #28]	; (800b898 <vApplicationGetIdleTaskMemory+0x2c>)
 800b87c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	4a06      	ldr	r2, [pc, #24]	; (800b89c <vApplicationGetIdleTaskMemory+0x30>)
 800b882:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2280      	movs	r2, #128	; 0x80
 800b888:	601a      	str	r2, [r3, #0]
}
 800b88a:	bf00      	nop
 800b88c:	3714      	adds	r7, #20
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr
 800b896:	bf00      	nop
 800b898:	20000ffc 	.word	0x20000ffc
 800b89c:	200010a4 	.word	0x200010a4

0800b8a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b8a0:	b480      	push	{r7}
 800b8a2:	b085      	sub	sp, #20
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	60f8      	str	r0, [r7, #12]
 800b8a8:	60b9      	str	r1, [r7, #8]
 800b8aa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	4a07      	ldr	r2, [pc, #28]	; (800b8cc <vApplicationGetTimerTaskMemory+0x2c>)
 800b8b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	4a06      	ldr	r2, [pc, #24]	; (800b8d0 <vApplicationGetTimerTaskMemory+0x30>)
 800b8b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b8be:	601a      	str	r2, [r3, #0]
}
 800b8c0:	bf00      	nop
 800b8c2:	3714      	adds	r7, #20
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr
 800b8cc:	200012a4 	.word	0x200012a4
 800b8d0:	2000134c 	.word	0x2000134c

0800b8d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f103 0208 	add.w	r2, r3, #8
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f103 0208 	add.w	r2, r3, #8
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f103 0208 	add.w	r2, r3, #8
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b908:	bf00      	nop
 800b90a:	370c      	adds	r7, #12
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b914:	b480      	push	{r7}
 800b916:	b083      	sub	sp, #12
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2200      	movs	r2, #0
 800b920:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b922:	bf00      	nop
 800b924:	370c      	adds	r7, #12
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr

0800b92e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b92e:	b480      	push	{r7}
 800b930:	b085      	sub	sp, #20
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
 800b936:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	68fa      	ldr	r2, [r7, #12]
 800b942:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	689a      	ldr	r2, [r3, #8]
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	683a      	ldr	r2, [r7, #0]
 800b952:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	683a      	ldr	r2, [r7, #0]
 800b958:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	1c5a      	adds	r2, r3, #1
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	601a      	str	r2, [r3, #0]
}
 800b96a:	bf00      	nop
 800b96c:	3714      	adds	r7, #20
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr

0800b976 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b976:	b480      	push	{r7}
 800b978:	b085      	sub	sp, #20
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
 800b97e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b98c:	d103      	bne.n	800b996 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	691b      	ldr	r3, [r3, #16]
 800b992:	60fb      	str	r3, [r7, #12]
 800b994:	e00c      	b.n	800b9b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	3308      	adds	r3, #8
 800b99a:	60fb      	str	r3, [r7, #12]
 800b99c:	e002      	b.n	800b9a4 <vListInsert+0x2e>
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	60fb      	str	r3, [r7, #12]
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	685b      	ldr	r3, [r3, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	68ba      	ldr	r2, [r7, #8]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d2f6      	bcs.n	800b99e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	685a      	ldr	r2, [r3, #4]
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	683a      	ldr	r2, [r7, #0]
 800b9be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	68fa      	ldr	r2, [r7, #12]
 800b9c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	683a      	ldr	r2, [r7, #0]
 800b9ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	1c5a      	adds	r2, r3, #1
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	601a      	str	r2, [r3, #0]
}
 800b9dc:	bf00      	nop
 800b9de:	3714      	adds	r7, #20
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b085      	sub	sp, #20
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	691b      	ldr	r3, [r3, #16]
 800b9f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	687a      	ldr	r2, [r7, #4]
 800b9fc:	6892      	ldr	r2, [r2, #8]
 800b9fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	689b      	ldr	r3, [r3, #8]
 800ba04:	687a      	ldr	r2, [r7, #4]
 800ba06:	6852      	ldr	r2, [r2, #4]
 800ba08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d103      	bne.n	800ba1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	689a      	ldr	r2, [r3, #8]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	1e5a      	subs	r2, r3, #1
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3714      	adds	r7, #20
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr

0800ba3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d10c      	bne.n	800ba6a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ba50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba54:	b672      	cpsid	i
 800ba56:	f383 8811 	msr	BASEPRI, r3
 800ba5a:	f3bf 8f6f 	isb	sy
 800ba5e:	f3bf 8f4f 	dsb	sy
 800ba62:	b662      	cpsie	i
 800ba64:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ba66:	bf00      	nop
 800ba68:	e7fe      	b.n	800ba68 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800ba6a:	f002 f9f7 	bl	800de5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba76:	68f9      	ldr	r1, [r7, #12]
 800ba78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ba7a:	fb01 f303 	mul.w	r3, r1, r3
 800ba7e:	441a      	add	r2, r3
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2200      	movs	r2, #0
 800ba88:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681a      	ldr	r2, [r3, #0]
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681a      	ldr	r2, [r3, #0]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba9a:	3b01      	subs	r3, #1
 800ba9c:	68f9      	ldr	r1, [r7, #12]
 800ba9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800baa0:	fb01 f303 	mul.w	r3, r1, r3
 800baa4:	441a      	add	r2, r3
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	22ff      	movs	r2, #255	; 0xff
 800baae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	22ff      	movs	r2, #255	; 0xff
 800bab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d114      	bne.n	800baea <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	691b      	ldr	r3, [r3, #16]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d01a      	beq.n	800bafe <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	3310      	adds	r3, #16
 800bacc:	4618      	mov	r0, r3
 800bace:	f001 f9b1 	bl	800ce34 <xTaskRemoveFromEventList>
 800bad2:	4603      	mov	r3, r0
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d012      	beq.n	800bafe <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bad8:	4b0c      	ldr	r3, [pc, #48]	; (800bb0c <xQueueGenericReset+0xd0>)
 800bada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bade:	601a      	str	r2, [r3, #0]
 800bae0:	f3bf 8f4f 	dsb	sy
 800bae4:	f3bf 8f6f 	isb	sy
 800bae8:	e009      	b.n	800bafe <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	3310      	adds	r3, #16
 800baee:	4618      	mov	r0, r3
 800baf0:	f7ff fef0 	bl	800b8d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	3324      	adds	r3, #36	; 0x24
 800baf8:	4618      	mov	r0, r3
 800bafa:	f7ff feeb 	bl	800b8d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bafe:	f002 f9e1 	bl	800dec4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bb02:	2301      	movs	r3, #1
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3710      	adds	r7, #16
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	e000ed04 	.word	0xe000ed04

0800bb10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b08e      	sub	sp, #56	; 0x38
 800bb14:	af02      	add	r7, sp, #8
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	60b9      	str	r1, [r7, #8]
 800bb1a:	607a      	str	r2, [r7, #4]
 800bb1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d10c      	bne.n	800bb3e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800bb24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb28:	b672      	cpsid	i
 800bb2a:	f383 8811 	msr	BASEPRI, r3
 800bb2e:	f3bf 8f6f 	isb	sy
 800bb32:	f3bf 8f4f 	dsb	sy
 800bb36:	b662      	cpsie	i
 800bb38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb3a:	bf00      	nop
 800bb3c:	e7fe      	b.n	800bb3c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d10c      	bne.n	800bb5e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800bb44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb48:	b672      	cpsid	i
 800bb4a:	f383 8811 	msr	BASEPRI, r3
 800bb4e:	f3bf 8f6f 	isb	sy
 800bb52:	f3bf 8f4f 	dsb	sy
 800bb56:	b662      	cpsie	i
 800bb58:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb5a:	bf00      	nop
 800bb5c:	e7fe      	b.n	800bb5c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d002      	beq.n	800bb6a <xQueueGenericCreateStatic+0x5a>
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d001      	beq.n	800bb6e <xQueueGenericCreateStatic+0x5e>
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	e000      	b.n	800bb70 <xQueueGenericCreateStatic+0x60>
 800bb6e:	2300      	movs	r3, #0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d10c      	bne.n	800bb8e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800bb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb78:	b672      	cpsid	i
 800bb7a:	f383 8811 	msr	BASEPRI, r3
 800bb7e:	f3bf 8f6f 	isb	sy
 800bb82:	f3bf 8f4f 	dsb	sy
 800bb86:	b662      	cpsie	i
 800bb88:	623b      	str	r3, [r7, #32]
}
 800bb8a:	bf00      	nop
 800bb8c:	e7fe      	b.n	800bb8c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d102      	bne.n	800bb9a <xQueueGenericCreateStatic+0x8a>
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d101      	bne.n	800bb9e <xQueueGenericCreateStatic+0x8e>
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e000      	b.n	800bba0 <xQueueGenericCreateStatic+0x90>
 800bb9e:	2300      	movs	r3, #0
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d10c      	bne.n	800bbbe <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800bba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba8:	b672      	cpsid	i
 800bbaa:	f383 8811 	msr	BASEPRI, r3
 800bbae:	f3bf 8f6f 	isb	sy
 800bbb2:	f3bf 8f4f 	dsb	sy
 800bbb6:	b662      	cpsie	i
 800bbb8:	61fb      	str	r3, [r7, #28]
}
 800bbba:	bf00      	nop
 800bbbc:	e7fe      	b.n	800bbbc <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bbbe:	2350      	movs	r3, #80	; 0x50
 800bbc0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	2b50      	cmp	r3, #80	; 0x50
 800bbc6:	d00c      	beq.n	800bbe2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800bbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbcc:	b672      	cpsid	i
 800bbce:	f383 8811 	msr	BASEPRI, r3
 800bbd2:	f3bf 8f6f 	isb	sy
 800bbd6:	f3bf 8f4f 	dsb	sy
 800bbda:	b662      	cpsie	i
 800bbdc:	61bb      	str	r3, [r7, #24]
}
 800bbde:	bf00      	nop
 800bbe0:	e7fe      	b.n	800bbe0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bbe2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00d      	beq.n	800bc0a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bbf6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfc:	9300      	str	r3, [sp, #0]
 800bbfe:	4613      	mov	r3, r2
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	68b9      	ldr	r1, [r7, #8]
 800bc04:	68f8      	ldr	r0, [r7, #12]
 800bc06:	f000 f847 	bl	800bc98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3730      	adds	r7, #48	; 0x30
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b08a      	sub	sp, #40	; 0x28
 800bc18:	af02      	add	r7, sp, #8
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	60b9      	str	r1, [r7, #8]
 800bc1e:	4613      	mov	r3, r2
 800bc20:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d10c      	bne.n	800bc42 <xQueueGenericCreate+0x2e>
	__asm volatile
 800bc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2c:	b672      	cpsid	i
 800bc2e:	f383 8811 	msr	BASEPRI, r3
 800bc32:	f3bf 8f6f 	isb	sy
 800bc36:	f3bf 8f4f 	dsb	sy
 800bc3a:	b662      	cpsie	i
 800bc3c:	613b      	str	r3, [r7, #16]
}
 800bc3e:	bf00      	nop
 800bc40:	e7fe      	b.n	800bc40 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d102      	bne.n	800bc4e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	61fb      	str	r3, [r7, #28]
 800bc4c:	e004      	b.n	800bc58 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	68ba      	ldr	r2, [r7, #8]
 800bc52:	fb02 f303 	mul.w	r3, r2, r3
 800bc56:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	3350      	adds	r3, #80	; 0x50
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f002 fa29 	bl	800e0b4 <pvPortMalloc>
 800bc62:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bc64:	69bb      	ldr	r3, [r7, #24]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d011      	beq.n	800bc8e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bc6a:	69bb      	ldr	r3, [r7, #24]
 800bc6c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	3350      	adds	r3, #80	; 0x50
 800bc72:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bc74:	69bb      	ldr	r3, [r7, #24]
 800bc76:	2200      	movs	r2, #0
 800bc78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bc7c:	79fa      	ldrb	r2, [r7, #7]
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	9300      	str	r3, [sp, #0]
 800bc82:	4613      	mov	r3, r2
 800bc84:	697a      	ldr	r2, [r7, #20]
 800bc86:	68b9      	ldr	r1, [r7, #8]
 800bc88:	68f8      	ldr	r0, [r7, #12]
 800bc8a:	f000 f805 	bl	800bc98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bc8e:	69bb      	ldr	r3, [r7, #24]
	}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3720      	adds	r7, #32
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	607a      	str	r2, [r7, #4]
 800bca4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d103      	bne.n	800bcb4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bcac:	69bb      	ldr	r3, [r7, #24]
 800bcae:	69ba      	ldr	r2, [r7, #24]
 800bcb0:	601a      	str	r2, [r3, #0]
 800bcb2:	e002      	b.n	800bcba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bcb4:	69bb      	ldr	r3, [r7, #24]
 800bcb6:	687a      	ldr	r2, [r7, #4]
 800bcb8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bcba:	69bb      	ldr	r3, [r7, #24]
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bcc0:	69bb      	ldr	r3, [r7, #24]
 800bcc2:	68ba      	ldr	r2, [r7, #8]
 800bcc4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bcc6:	2101      	movs	r1, #1
 800bcc8:	69b8      	ldr	r0, [r7, #24]
 800bcca:	f7ff feb7 	bl	800ba3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bcce:	69bb      	ldr	r3, [r7, #24]
 800bcd0:	78fa      	ldrb	r2, [r7, #3]
 800bcd2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bcd6:	bf00      	nop
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
	...

0800bce0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b08e      	sub	sp, #56	; 0x38
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	607a      	str	r2, [r7, #4]
 800bcec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bcf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d10c      	bne.n	800bd16 <xQueueGenericSend+0x36>
	__asm volatile
 800bcfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd00:	b672      	cpsid	i
 800bd02:	f383 8811 	msr	BASEPRI, r3
 800bd06:	f3bf 8f6f 	isb	sy
 800bd0a:	f3bf 8f4f 	dsb	sy
 800bd0e:	b662      	cpsie	i
 800bd10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bd12:	bf00      	nop
 800bd14:	e7fe      	b.n	800bd14 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d103      	bne.n	800bd24 <xQueueGenericSend+0x44>
 800bd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d101      	bne.n	800bd28 <xQueueGenericSend+0x48>
 800bd24:	2301      	movs	r3, #1
 800bd26:	e000      	b.n	800bd2a <xQueueGenericSend+0x4a>
 800bd28:	2300      	movs	r3, #0
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d10c      	bne.n	800bd48 <xQueueGenericSend+0x68>
	__asm volatile
 800bd2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd32:	b672      	cpsid	i
 800bd34:	f383 8811 	msr	BASEPRI, r3
 800bd38:	f3bf 8f6f 	isb	sy
 800bd3c:	f3bf 8f4f 	dsb	sy
 800bd40:	b662      	cpsie	i
 800bd42:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd44:	bf00      	nop
 800bd46:	e7fe      	b.n	800bd46 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	2b02      	cmp	r3, #2
 800bd4c:	d103      	bne.n	800bd56 <xQueueGenericSend+0x76>
 800bd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	d101      	bne.n	800bd5a <xQueueGenericSend+0x7a>
 800bd56:	2301      	movs	r3, #1
 800bd58:	e000      	b.n	800bd5c <xQueueGenericSend+0x7c>
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d10c      	bne.n	800bd7a <xQueueGenericSend+0x9a>
	__asm volatile
 800bd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd64:	b672      	cpsid	i
 800bd66:	f383 8811 	msr	BASEPRI, r3
 800bd6a:	f3bf 8f6f 	isb	sy
 800bd6e:	f3bf 8f4f 	dsb	sy
 800bd72:	b662      	cpsie	i
 800bd74:	623b      	str	r3, [r7, #32]
}
 800bd76:	bf00      	nop
 800bd78:	e7fe      	b.n	800bd78 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd7a:	f001 fa5d 	bl	800d238 <xTaskGetSchedulerState>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d102      	bne.n	800bd8a <xQueueGenericSend+0xaa>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d101      	bne.n	800bd8e <xQueueGenericSend+0xae>
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	e000      	b.n	800bd90 <xQueueGenericSend+0xb0>
 800bd8e:	2300      	movs	r3, #0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d10c      	bne.n	800bdae <xQueueGenericSend+0xce>
	__asm volatile
 800bd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd98:	b672      	cpsid	i
 800bd9a:	f383 8811 	msr	BASEPRI, r3
 800bd9e:	f3bf 8f6f 	isb	sy
 800bda2:	f3bf 8f4f 	dsb	sy
 800bda6:	b662      	cpsie	i
 800bda8:	61fb      	str	r3, [r7, #28]
}
 800bdaa:	bf00      	nop
 800bdac:	e7fe      	b.n	800bdac <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bdae:	f002 f855 	bl	800de5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d302      	bcc.n	800bdc4 <xQueueGenericSend+0xe4>
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	2b02      	cmp	r3, #2
 800bdc2:	d129      	bne.n	800be18 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bdc4:	683a      	ldr	r2, [r7, #0]
 800bdc6:	68b9      	ldr	r1, [r7, #8]
 800bdc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdca:	f000 fa15 	bl	800c1f8 <prvCopyDataToQueue>
 800bdce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bdd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d010      	beq.n	800bdfa <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bdd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdda:	3324      	adds	r3, #36	; 0x24
 800bddc:	4618      	mov	r0, r3
 800bdde:	f001 f829 	bl	800ce34 <xTaskRemoveFromEventList>
 800bde2:	4603      	mov	r3, r0
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d013      	beq.n	800be10 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bde8:	4b3f      	ldr	r3, [pc, #252]	; (800bee8 <xQueueGenericSend+0x208>)
 800bdea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdee:	601a      	str	r2, [r3, #0]
 800bdf0:	f3bf 8f4f 	dsb	sy
 800bdf4:	f3bf 8f6f 	isb	sy
 800bdf8:	e00a      	b.n	800be10 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d007      	beq.n	800be10 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800be00:	4b39      	ldr	r3, [pc, #228]	; (800bee8 <xQueueGenericSend+0x208>)
 800be02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be06:	601a      	str	r2, [r3, #0]
 800be08:	f3bf 8f4f 	dsb	sy
 800be0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800be10:	f002 f858 	bl	800dec4 <vPortExitCritical>
				return pdPASS;
 800be14:	2301      	movs	r3, #1
 800be16:	e063      	b.n	800bee0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d103      	bne.n	800be26 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be1e:	f002 f851 	bl	800dec4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800be22:	2300      	movs	r3, #0
 800be24:	e05c      	b.n	800bee0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d106      	bne.n	800be3a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be2c:	f107 0314 	add.w	r3, r7, #20
 800be30:	4618      	mov	r0, r3
 800be32:	f001 f865 	bl	800cf00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be36:	2301      	movs	r3, #1
 800be38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be3a:	f002 f843 	bl	800dec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be3e:	f000 fdb3 	bl	800c9a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be42:	f002 f80b 	bl	800de5c <vPortEnterCritical>
 800be46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be4c:	b25b      	sxtb	r3, r3
 800be4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be52:	d103      	bne.n	800be5c <xQueueGenericSend+0x17c>
 800be54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be56:	2200      	movs	r2, #0
 800be58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be62:	b25b      	sxtb	r3, r3
 800be64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be68:	d103      	bne.n	800be72 <xQueueGenericSend+0x192>
 800be6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6c:	2200      	movs	r2, #0
 800be6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be72:	f002 f827 	bl	800dec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be76:	1d3a      	adds	r2, r7, #4
 800be78:	f107 0314 	add.w	r3, r7, #20
 800be7c:	4611      	mov	r1, r2
 800be7e:	4618      	mov	r0, r3
 800be80:	f001 f854 	bl	800cf2c <xTaskCheckForTimeOut>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d124      	bne.n	800bed4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800be8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be8c:	f000 faac 	bl	800c3e8 <prvIsQueueFull>
 800be90:	4603      	mov	r3, r0
 800be92:	2b00      	cmp	r3, #0
 800be94:	d018      	beq.n	800bec8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800be96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be98:	3310      	adds	r3, #16
 800be9a:	687a      	ldr	r2, [r7, #4]
 800be9c:	4611      	mov	r1, r2
 800be9e:	4618      	mov	r0, r3
 800bea0:	f000 ff74 	bl	800cd8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bea6:	f000 fa37 	bl	800c318 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800beaa:	f000 fd8b 	bl	800c9c4 <xTaskResumeAll>
 800beae:	4603      	mov	r3, r0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	f47f af7c 	bne.w	800bdae <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800beb6:	4b0c      	ldr	r3, [pc, #48]	; (800bee8 <xQueueGenericSend+0x208>)
 800beb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bebc:	601a      	str	r2, [r3, #0]
 800bebe:	f3bf 8f4f 	dsb	sy
 800bec2:	f3bf 8f6f 	isb	sy
 800bec6:	e772      	b.n	800bdae <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800beca:	f000 fa25 	bl	800c318 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bece:	f000 fd79 	bl	800c9c4 <xTaskResumeAll>
 800bed2:	e76c      	b.n	800bdae <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bed6:	f000 fa1f 	bl	800c318 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800beda:	f000 fd73 	bl	800c9c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bede:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3738      	adds	r7, #56	; 0x38
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	e000ed04 	.word	0xe000ed04

0800beec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b08e      	sub	sp, #56	; 0x38
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	60b9      	str	r1, [r7, #8]
 800bef6:	607a      	str	r2, [r7, #4]
 800bef8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800befe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d10c      	bne.n	800bf1e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800bf04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf08:	b672      	cpsid	i
 800bf0a:	f383 8811 	msr	BASEPRI, r3
 800bf0e:	f3bf 8f6f 	isb	sy
 800bf12:	f3bf 8f4f 	dsb	sy
 800bf16:	b662      	cpsie	i
 800bf18:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bf1a:	bf00      	nop
 800bf1c:	e7fe      	b.n	800bf1c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d103      	bne.n	800bf2c <xQueueGenericSendFromISR+0x40>
 800bf24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d101      	bne.n	800bf30 <xQueueGenericSendFromISR+0x44>
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	e000      	b.n	800bf32 <xQueueGenericSendFromISR+0x46>
 800bf30:	2300      	movs	r3, #0
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d10c      	bne.n	800bf50 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800bf36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf3a:	b672      	cpsid	i
 800bf3c:	f383 8811 	msr	BASEPRI, r3
 800bf40:	f3bf 8f6f 	isb	sy
 800bf44:	f3bf 8f4f 	dsb	sy
 800bf48:	b662      	cpsie	i
 800bf4a:	623b      	str	r3, [r7, #32]
}
 800bf4c:	bf00      	nop
 800bf4e:	e7fe      	b.n	800bf4e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	2b02      	cmp	r3, #2
 800bf54:	d103      	bne.n	800bf5e <xQueueGenericSendFromISR+0x72>
 800bf56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d101      	bne.n	800bf62 <xQueueGenericSendFromISR+0x76>
 800bf5e:	2301      	movs	r3, #1
 800bf60:	e000      	b.n	800bf64 <xQueueGenericSendFromISR+0x78>
 800bf62:	2300      	movs	r3, #0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d10c      	bne.n	800bf82 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800bf68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf6c:	b672      	cpsid	i
 800bf6e:	f383 8811 	msr	BASEPRI, r3
 800bf72:	f3bf 8f6f 	isb	sy
 800bf76:	f3bf 8f4f 	dsb	sy
 800bf7a:	b662      	cpsie	i
 800bf7c:	61fb      	str	r3, [r7, #28]
}
 800bf7e:	bf00      	nop
 800bf80:	e7fe      	b.n	800bf80 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf82:	f002 f853 	bl	800e02c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bf86:	f3ef 8211 	mrs	r2, BASEPRI
 800bf8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf8e:	b672      	cpsid	i
 800bf90:	f383 8811 	msr	BASEPRI, r3
 800bf94:	f3bf 8f6f 	isb	sy
 800bf98:	f3bf 8f4f 	dsb	sy
 800bf9c:	b662      	cpsie	i
 800bf9e:	61ba      	str	r2, [r7, #24]
 800bfa0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bfa2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bfa4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d302      	bcc.n	800bfb8 <xQueueGenericSendFromISR+0xcc>
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	2b02      	cmp	r3, #2
 800bfb6:	d12c      	bne.n	800c012 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bfc2:	683a      	ldr	r2, [r7, #0]
 800bfc4:	68b9      	ldr	r1, [r7, #8]
 800bfc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfc8:	f000 f916 	bl	800c1f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bfcc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bfd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfd4:	d112      	bne.n	800bffc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bfd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d016      	beq.n	800c00c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe0:	3324      	adds	r3, #36	; 0x24
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f000 ff26 	bl	800ce34 <xTaskRemoveFromEventList>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d00e      	beq.n	800c00c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d00b      	beq.n	800c00c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2201      	movs	r2, #1
 800bff8:	601a      	str	r2, [r3, #0]
 800bffa:	e007      	b.n	800c00c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bffc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c000:	3301      	adds	r3, #1
 800c002:	b2db      	uxtb	r3, r3
 800c004:	b25a      	sxtb	r2, r3
 800c006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c00c:	2301      	movs	r3, #1
 800c00e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c010:	e001      	b.n	800c016 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c012:	2300      	movs	r3, #0
 800c014:	637b      	str	r3, [r7, #52]	; 0x34
 800c016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c018:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c020:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c024:	4618      	mov	r0, r3
 800c026:	3738      	adds	r7, #56	; 0x38
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b08c      	sub	sp, #48	; 0x30
 800c030:	af00      	add	r7, sp, #0
 800c032:	60f8      	str	r0, [r7, #12]
 800c034:	60b9      	str	r1, [r7, #8]
 800c036:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c038:	2300      	movs	r3, #0
 800c03a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c042:	2b00      	cmp	r3, #0
 800c044:	d10c      	bne.n	800c060 <xQueueReceive+0x34>
	__asm volatile
 800c046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c04a:	b672      	cpsid	i
 800c04c:	f383 8811 	msr	BASEPRI, r3
 800c050:	f3bf 8f6f 	isb	sy
 800c054:	f3bf 8f4f 	dsb	sy
 800c058:	b662      	cpsie	i
 800c05a:	623b      	str	r3, [r7, #32]
}
 800c05c:	bf00      	nop
 800c05e:	e7fe      	b.n	800c05e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d103      	bne.n	800c06e <xQueueReceive+0x42>
 800c066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d101      	bne.n	800c072 <xQueueReceive+0x46>
 800c06e:	2301      	movs	r3, #1
 800c070:	e000      	b.n	800c074 <xQueueReceive+0x48>
 800c072:	2300      	movs	r3, #0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d10c      	bne.n	800c092 <xQueueReceive+0x66>
	__asm volatile
 800c078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07c:	b672      	cpsid	i
 800c07e:	f383 8811 	msr	BASEPRI, r3
 800c082:	f3bf 8f6f 	isb	sy
 800c086:	f3bf 8f4f 	dsb	sy
 800c08a:	b662      	cpsie	i
 800c08c:	61fb      	str	r3, [r7, #28]
}
 800c08e:	bf00      	nop
 800c090:	e7fe      	b.n	800c090 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c092:	f001 f8d1 	bl	800d238 <xTaskGetSchedulerState>
 800c096:	4603      	mov	r3, r0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d102      	bne.n	800c0a2 <xQueueReceive+0x76>
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d101      	bne.n	800c0a6 <xQueueReceive+0x7a>
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	e000      	b.n	800c0a8 <xQueueReceive+0x7c>
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d10c      	bne.n	800c0c6 <xQueueReceive+0x9a>
	__asm volatile
 800c0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b0:	b672      	cpsid	i
 800c0b2:	f383 8811 	msr	BASEPRI, r3
 800c0b6:	f3bf 8f6f 	isb	sy
 800c0ba:	f3bf 8f4f 	dsb	sy
 800c0be:	b662      	cpsie	i
 800c0c0:	61bb      	str	r3, [r7, #24]
}
 800c0c2:	bf00      	nop
 800c0c4:	e7fe      	b.n	800c0c4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c0c6:	f001 fec9 	bl	800de5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d01f      	beq.n	800c116 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c0d6:	68b9      	ldr	r1, [r7, #8]
 800c0d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0da:	f000 f8f7 	bl	800c2cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e0:	1e5a      	subs	r2, r3, #1
 800c0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e8:	691b      	ldr	r3, [r3, #16]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d00f      	beq.n	800c10e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f0:	3310      	adds	r3, #16
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f000 fe9e 	bl	800ce34 <xTaskRemoveFromEventList>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d007      	beq.n	800c10e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c0fe:	4b3d      	ldr	r3, [pc, #244]	; (800c1f4 <xQueueReceive+0x1c8>)
 800c100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c104:	601a      	str	r2, [r3, #0]
 800c106:	f3bf 8f4f 	dsb	sy
 800c10a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c10e:	f001 fed9 	bl	800dec4 <vPortExitCritical>
				return pdPASS;
 800c112:	2301      	movs	r3, #1
 800c114:	e069      	b.n	800c1ea <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d103      	bne.n	800c124 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c11c:	f001 fed2 	bl	800dec4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c120:	2300      	movs	r3, #0
 800c122:	e062      	b.n	800c1ea <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c126:	2b00      	cmp	r3, #0
 800c128:	d106      	bne.n	800c138 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c12a:	f107 0310 	add.w	r3, r7, #16
 800c12e:	4618      	mov	r0, r3
 800c130:	f000 fee6 	bl	800cf00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c134:	2301      	movs	r3, #1
 800c136:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c138:	f001 fec4 	bl	800dec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c13c:	f000 fc34 	bl	800c9a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c140:	f001 fe8c 	bl	800de5c <vPortEnterCritical>
 800c144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c146:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c14a:	b25b      	sxtb	r3, r3
 800c14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c150:	d103      	bne.n	800c15a <xQueueReceive+0x12e>
 800c152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c154:	2200      	movs	r2, #0
 800c156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c15c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c160:	b25b      	sxtb	r3, r3
 800c162:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c166:	d103      	bne.n	800c170 <xQueueReceive+0x144>
 800c168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c16a:	2200      	movs	r2, #0
 800c16c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c170:	f001 fea8 	bl	800dec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c174:	1d3a      	adds	r2, r7, #4
 800c176:	f107 0310 	add.w	r3, r7, #16
 800c17a:	4611      	mov	r1, r2
 800c17c:	4618      	mov	r0, r3
 800c17e:	f000 fed5 	bl	800cf2c <xTaskCheckForTimeOut>
 800c182:	4603      	mov	r3, r0
 800c184:	2b00      	cmp	r3, #0
 800c186:	d123      	bne.n	800c1d0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c18a:	f000 f917 	bl	800c3bc <prvIsQueueEmpty>
 800c18e:	4603      	mov	r3, r0
 800c190:	2b00      	cmp	r3, #0
 800c192:	d017      	beq.n	800c1c4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c196:	3324      	adds	r3, #36	; 0x24
 800c198:	687a      	ldr	r2, [r7, #4]
 800c19a:	4611      	mov	r1, r2
 800c19c:	4618      	mov	r0, r3
 800c19e:	f000 fdf5 	bl	800cd8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c1a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1a4:	f000 f8b8 	bl	800c318 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c1a8:	f000 fc0c 	bl	800c9c4 <xTaskResumeAll>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d189      	bne.n	800c0c6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800c1b2:	4b10      	ldr	r3, [pc, #64]	; (800c1f4 <xQueueReceive+0x1c8>)
 800c1b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1b8:	601a      	str	r2, [r3, #0]
 800c1ba:	f3bf 8f4f 	dsb	sy
 800c1be:	f3bf 8f6f 	isb	sy
 800c1c2:	e780      	b.n	800c0c6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c1c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1c6:	f000 f8a7 	bl	800c318 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c1ca:	f000 fbfb 	bl	800c9c4 <xTaskResumeAll>
 800c1ce:	e77a      	b.n	800c0c6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c1d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1d2:	f000 f8a1 	bl	800c318 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c1d6:	f000 fbf5 	bl	800c9c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c1da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1dc:	f000 f8ee 	bl	800c3bc <prvIsQueueEmpty>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	f43f af6f 	beq.w	800c0c6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c1e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3730      	adds	r7, #48	; 0x30
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}
 800c1f2:	bf00      	nop
 800c1f4:	e000ed04 	.word	0xe000ed04

0800c1f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b086      	sub	sp, #24
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c204:	2300      	movs	r3, #0
 800c206:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c20c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c212:	2b00      	cmp	r3, #0
 800c214:	d10d      	bne.n	800c232 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d14d      	bne.n	800c2ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	689b      	ldr	r3, [r3, #8]
 800c222:	4618      	mov	r0, r3
 800c224:	f001 f826 	bl	800d274 <xTaskPriorityDisinherit>
 800c228:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2200      	movs	r2, #0
 800c22e:	609a      	str	r2, [r3, #8]
 800c230:	e043      	b.n	800c2ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d119      	bne.n	800c26c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	6858      	ldr	r0, [r3, #4]
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c240:	461a      	mov	r2, r3
 800c242:	68b9      	ldr	r1, [r7, #8]
 800c244:	f003 f88c 	bl	800f360 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	685a      	ldr	r2, [r3, #4]
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c250:	441a      	add	r2, r3
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	685a      	ldr	r2, [r3, #4]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	689b      	ldr	r3, [r3, #8]
 800c25e:	429a      	cmp	r2, r3
 800c260:	d32b      	bcc.n	800c2ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681a      	ldr	r2, [r3, #0]
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	605a      	str	r2, [r3, #4]
 800c26a:	e026      	b.n	800c2ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	68d8      	ldr	r0, [r3, #12]
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c274:	461a      	mov	r2, r3
 800c276:	68b9      	ldr	r1, [r7, #8]
 800c278:	f003 f872 	bl	800f360 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	68da      	ldr	r2, [r3, #12]
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c284:	425b      	negs	r3, r3
 800c286:	441a      	add	r2, r3
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	68da      	ldr	r2, [r3, #12]
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	429a      	cmp	r2, r3
 800c296:	d207      	bcs.n	800c2a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	689a      	ldr	r2, [r3, #8]
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2a0:	425b      	negs	r3, r3
 800c2a2:	441a      	add	r2, r3
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2b02      	cmp	r3, #2
 800c2ac:	d105      	bne.n	800c2ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d002      	beq.n	800c2ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	3b01      	subs	r3, #1
 800c2b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	1c5a      	adds	r2, r3, #1
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c2c2:	697b      	ldr	r3, [r7, #20]
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3718      	adds	r7, #24
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d018      	beq.n	800c310 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	68da      	ldr	r2, [r3, #12]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2e6:	441a      	add	r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	68da      	ldr	r2, [r3, #12]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	689b      	ldr	r3, [r3, #8]
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d303      	bcc.n	800c300 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681a      	ldr	r2, [r3, #0]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	68d9      	ldr	r1, [r3, #12]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c308:	461a      	mov	r2, r3
 800c30a:	6838      	ldr	r0, [r7, #0]
 800c30c:	f003 f828 	bl	800f360 <memcpy>
	}
}
 800c310:	bf00      	nop
 800c312:	3708      	adds	r7, #8
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c320:	f001 fd9c 	bl	800de5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c32a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c32c:	e011      	b.n	800c352 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c332:	2b00      	cmp	r3, #0
 800c334:	d012      	beq.n	800c35c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	3324      	adds	r3, #36	; 0x24
 800c33a:	4618      	mov	r0, r3
 800c33c:	f000 fd7a 	bl	800ce34 <xTaskRemoveFromEventList>
 800c340:	4603      	mov	r3, r0
 800c342:	2b00      	cmp	r3, #0
 800c344:	d001      	beq.n	800c34a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c346:	f000 fe57 	bl	800cff8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c34a:	7bfb      	ldrb	r3, [r7, #15]
 800c34c:	3b01      	subs	r3, #1
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c356:	2b00      	cmp	r3, #0
 800c358:	dce9      	bgt.n	800c32e <prvUnlockQueue+0x16>
 800c35a:	e000      	b.n	800c35e <prvUnlockQueue+0x46>
					break;
 800c35c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	22ff      	movs	r2, #255	; 0xff
 800c362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c366:	f001 fdad 	bl	800dec4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c36a:	f001 fd77 	bl	800de5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c374:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c376:	e011      	b.n	800c39c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	691b      	ldr	r3, [r3, #16]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d012      	beq.n	800c3a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	3310      	adds	r3, #16
 800c384:	4618      	mov	r0, r3
 800c386:	f000 fd55 	bl	800ce34 <xTaskRemoveFromEventList>
 800c38a:	4603      	mov	r3, r0
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d001      	beq.n	800c394 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c390:	f000 fe32 	bl	800cff8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c394:	7bbb      	ldrb	r3, [r7, #14]
 800c396:	3b01      	subs	r3, #1
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c39c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	dce9      	bgt.n	800c378 <prvUnlockQueue+0x60>
 800c3a4:	e000      	b.n	800c3a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c3a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	22ff      	movs	r2, #255	; 0xff
 800c3ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c3b0:	f001 fd88 	bl	800dec4 <vPortExitCritical>
}
 800c3b4:	bf00      	nop
 800c3b6:	3710      	adds	r7, #16
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c3c4:	f001 fd4a 	bl	800de5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d102      	bne.n	800c3d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	60fb      	str	r3, [r7, #12]
 800c3d4:	e001      	b.n	800c3da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c3da:	f001 fd73 	bl	800dec4 <vPortExitCritical>

	return xReturn;
 800c3de:	68fb      	ldr	r3, [r7, #12]
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3710      	adds	r7, #16
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c3f0:	f001 fd34 	bl	800de5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d102      	bne.n	800c406 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c400:	2301      	movs	r3, #1
 800c402:	60fb      	str	r3, [r7, #12]
 800c404:	e001      	b.n	800c40a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c406:	2300      	movs	r3, #0
 800c408:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c40a:	f001 fd5b 	bl	800dec4 <vPortExitCritical>

	return xReturn;
 800c40e:	68fb      	ldr	r3, [r7, #12]
}
 800c410:	4618      	mov	r0, r3
 800c412:	3710      	adds	r7, #16
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}

0800c418 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c418:	b480      	push	{r7}
 800c41a:	b085      	sub	sp, #20
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c422:	2300      	movs	r3, #0
 800c424:	60fb      	str	r3, [r7, #12]
 800c426:	e014      	b.n	800c452 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c428:	4a0f      	ldr	r2, [pc, #60]	; (800c468 <vQueueAddToRegistry+0x50>)
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d10b      	bne.n	800c44c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c434:	490c      	ldr	r1, [pc, #48]	; (800c468 <vQueueAddToRegistry+0x50>)
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	683a      	ldr	r2, [r7, #0]
 800c43a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c43e:	4a0a      	ldr	r2, [pc, #40]	; (800c468 <vQueueAddToRegistry+0x50>)
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	00db      	lsls	r3, r3, #3
 800c444:	4413      	add	r3, r2
 800c446:	687a      	ldr	r2, [r7, #4]
 800c448:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c44a:	e006      	b.n	800c45a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	3301      	adds	r3, #1
 800c450:	60fb      	str	r3, [r7, #12]
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2b07      	cmp	r3, #7
 800c456:	d9e7      	bls.n	800c428 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c458:	bf00      	nop
 800c45a:	bf00      	nop
 800c45c:	3714      	adds	r7, #20
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr
 800c466:	bf00      	nop
 800c468:	2000174c 	.word	0x2000174c

0800c46c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b086      	sub	sp, #24
 800c470:	af00      	add	r7, sp, #0
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	60b9      	str	r1, [r7, #8]
 800c476:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c47c:	f001 fcee 	bl	800de5c <vPortEnterCritical>
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c486:	b25b      	sxtb	r3, r3
 800c488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c48c:	d103      	bne.n	800c496 <vQueueWaitForMessageRestricted+0x2a>
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	2200      	movs	r2, #0
 800c492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c49c:	b25b      	sxtb	r3, r3
 800c49e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4a2:	d103      	bne.n	800c4ac <vQueueWaitForMessageRestricted+0x40>
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c4ac:	f001 fd0a 	bl	800dec4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d106      	bne.n	800c4c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	3324      	adds	r3, #36	; 0x24
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	68b9      	ldr	r1, [r7, #8]
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f000 fc89 	bl	800cdd8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c4c6:	6978      	ldr	r0, [r7, #20]
 800c4c8:	f7ff ff26 	bl	800c318 <prvUnlockQueue>
	}
 800c4cc:	bf00      	nop
 800c4ce:	3718      	adds	r7, #24
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b08e      	sub	sp, #56	; 0x38
 800c4d8:	af04      	add	r7, sp, #16
 800c4da:	60f8      	str	r0, [r7, #12]
 800c4dc:	60b9      	str	r1, [r7, #8]
 800c4de:	607a      	str	r2, [r7, #4]
 800c4e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d10c      	bne.n	800c502 <xTaskCreateStatic+0x2e>
	__asm volatile
 800c4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ec:	b672      	cpsid	i
 800c4ee:	f383 8811 	msr	BASEPRI, r3
 800c4f2:	f3bf 8f6f 	isb	sy
 800c4f6:	f3bf 8f4f 	dsb	sy
 800c4fa:	b662      	cpsie	i
 800c4fc:	623b      	str	r3, [r7, #32]
}
 800c4fe:	bf00      	nop
 800c500:	e7fe      	b.n	800c500 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c504:	2b00      	cmp	r3, #0
 800c506:	d10c      	bne.n	800c522 <xTaskCreateStatic+0x4e>
	__asm volatile
 800c508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c50c:	b672      	cpsid	i
 800c50e:	f383 8811 	msr	BASEPRI, r3
 800c512:	f3bf 8f6f 	isb	sy
 800c516:	f3bf 8f4f 	dsb	sy
 800c51a:	b662      	cpsie	i
 800c51c:	61fb      	str	r3, [r7, #28]
}
 800c51e:	bf00      	nop
 800c520:	e7fe      	b.n	800c520 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c522:	23a8      	movs	r3, #168	; 0xa8
 800c524:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	2ba8      	cmp	r3, #168	; 0xa8
 800c52a:	d00c      	beq.n	800c546 <xTaskCreateStatic+0x72>
	__asm volatile
 800c52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c530:	b672      	cpsid	i
 800c532:	f383 8811 	msr	BASEPRI, r3
 800c536:	f3bf 8f6f 	isb	sy
 800c53a:	f3bf 8f4f 	dsb	sy
 800c53e:	b662      	cpsie	i
 800c540:	61bb      	str	r3, [r7, #24]
}
 800c542:	bf00      	nop
 800c544:	e7fe      	b.n	800c544 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c546:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d01e      	beq.n	800c58c <xTaskCreateStatic+0xb8>
 800c54e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c550:	2b00      	cmp	r3, #0
 800c552:	d01b      	beq.n	800c58c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c556:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c55c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c560:	2202      	movs	r2, #2
 800c562:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c566:	2300      	movs	r3, #0
 800c568:	9303      	str	r3, [sp, #12]
 800c56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56c:	9302      	str	r3, [sp, #8]
 800c56e:	f107 0314 	add.w	r3, r7, #20
 800c572:	9301      	str	r3, [sp, #4]
 800c574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c576:	9300      	str	r3, [sp, #0]
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	687a      	ldr	r2, [r7, #4]
 800c57c:	68b9      	ldr	r1, [r7, #8]
 800c57e:	68f8      	ldr	r0, [r7, #12]
 800c580:	f000 f850 	bl	800c624 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c584:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c586:	f000 f8f5 	bl	800c774 <prvAddNewTaskToReadyList>
 800c58a:	e001      	b.n	800c590 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800c58c:	2300      	movs	r3, #0
 800c58e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c590:	697b      	ldr	r3, [r7, #20]
	}
 800c592:	4618      	mov	r0, r3
 800c594:	3728      	adds	r7, #40	; 0x28
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}

0800c59a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c59a:	b580      	push	{r7, lr}
 800c59c:	b08c      	sub	sp, #48	; 0x30
 800c59e:	af04      	add	r7, sp, #16
 800c5a0:	60f8      	str	r0, [r7, #12]
 800c5a2:	60b9      	str	r1, [r7, #8]
 800c5a4:	603b      	str	r3, [r7, #0]
 800c5a6:	4613      	mov	r3, r2
 800c5a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c5aa:	88fb      	ldrh	r3, [r7, #6]
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f001 fd80 	bl	800e0b4 <pvPortMalloc>
 800c5b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d00e      	beq.n	800c5da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c5bc:	20a8      	movs	r0, #168	; 0xa8
 800c5be:	f001 fd79 	bl	800e0b4 <pvPortMalloc>
 800c5c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c5c4:	69fb      	ldr	r3, [r7, #28]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d003      	beq.n	800c5d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	697a      	ldr	r2, [r7, #20]
 800c5ce:	631a      	str	r2, [r3, #48]	; 0x30
 800c5d0:	e005      	b.n	800c5de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c5d2:	6978      	ldr	r0, [r7, #20]
 800c5d4:	f001 fe38 	bl	800e248 <vPortFree>
 800c5d8:	e001      	b.n	800c5de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c5de:	69fb      	ldr	r3, [r7, #28]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d017      	beq.n	800c614 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c5e4:	69fb      	ldr	r3, [r7, #28]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c5ec:	88fa      	ldrh	r2, [r7, #6]
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	9303      	str	r3, [sp, #12]
 800c5f2:	69fb      	ldr	r3, [r7, #28]
 800c5f4:	9302      	str	r3, [sp, #8]
 800c5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f8:	9301      	str	r3, [sp, #4]
 800c5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5fc:	9300      	str	r3, [sp, #0]
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	68b9      	ldr	r1, [r7, #8]
 800c602:	68f8      	ldr	r0, [r7, #12]
 800c604:	f000 f80e 	bl	800c624 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c608:	69f8      	ldr	r0, [r7, #28]
 800c60a:	f000 f8b3 	bl	800c774 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c60e:	2301      	movs	r3, #1
 800c610:	61bb      	str	r3, [r7, #24]
 800c612:	e002      	b.n	800c61a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c614:	f04f 33ff 	mov.w	r3, #4294967295
 800c618:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c61a:	69bb      	ldr	r3, [r7, #24]
	}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3720      	adds	r7, #32
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b088      	sub	sp, #32
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	607a      	str	r2, [r7, #4]
 800c630:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c634:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	461a      	mov	r2, r3
 800c63c:	21a5      	movs	r1, #165	; 0xa5
 800c63e:	f002 fdf5 	bl	800f22c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c646:	6879      	ldr	r1, [r7, #4]
 800c648:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c64c:	440b      	add	r3, r1
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	4413      	add	r3, r2
 800c652:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c654:	69bb      	ldr	r3, [r7, #24]
 800c656:	f023 0307 	bic.w	r3, r3, #7
 800c65a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c65c:	69bb      	ldr	r3, [r7, #24]
 800c65e:	f003 0307 	and.w	r3, r3, #7
 800c662:	2b00      	cmp	r3, #0
 800c664:	d00c      	beq.n	800c680 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800c666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66a:	b672      	cpsid	i
 800c66c:	f383 8811 	msr	BASEPRI, r3
 800c670:	f3bf 8f6f 	isb	sy
 800c674:	f3bf 8f4f 	dsb	sy
 800c678:	b662      	cpsie	i
 800c67a:	617b      	str	r3, [r7, #20]
}
 800c67c:	bf00      	nop
 800c67e:	e7fe      	b.n	800c67e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d01f      	beq.n	800c6c6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c686:	2300      	movs	r3, #0
 800c688:	61fb      	str	r3, [r7, #28]
 800c68a:	e012      	b.n	800c6b2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c68c:	68ba      	ldr	r2, [r7, #8]
 800c68e:	69fb      	ldr	r3, [r7, #28]
 800c690:	4413      	add	r3, r2
 800c692:	7819      	ldrb	r1, [r3, #0]
 800c694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c696:	69fb      	ldr	r3, [r7, #28]
 800c698:	4413      	add	r3, r2
 800c69a:	3334      	adds	r3, #52	; 0x34
 800c69c:	460a      	mov	r2, r1
 800c69e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c6a0:	68ba      	ldr	r2, [r7, #8]
 800c6a2:	69fb      	ldr	r3, [r7, #28]
 800c6a4:	4413      	add	r3, r2
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d006      	beq.n	800c6ba <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c6ac:	69fb      	ldr	r3, [r7, #28]
 800c6ae:	3301      	adds	r3, #1
 800c6b0:	61fb      	str	r3, [r7, #28]
 800c6b2:	69fb      	ldr	r3, [r7, #28]
 800c6b4:	2b0f      	cmp	r3, #15
 800c6b6:	d9e9      	bls.n	800c68c <prvInitialiseNewTask+0x68>
 800c6b8:	e000      	b.n	800c6bc <prvInitialiseNewTask+0x98>
			{
				break;
 800c6ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c6c4:	e003      	b.n	800c6ce <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d0:	2b37      	cmp	r3, #55	; 0x37
 800c6d2:	d901      	bls.n	800c6d8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c6d4:	2337      	movs	r3, #55	; 0x37
 800c6d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ec:	3304      	adds	r3, #4
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7ff f910 	bl	800b914 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f6:	3318      	adds	r3, #24
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7ff f90b 	bl	800b914 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c702:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c706:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c70c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c712:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c716:	2200      	movs	r2, #0
 800c718:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c71e:	2200      	movs	r2, #0
 800c720:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c726:	3354      	adds	r3, #84	; 0x54
 800c728:	224c      	movs	r2, #76	; 0x4c
 800c72a:	2100      	movs	r1, #0
 800c72c:	4618      	mov	r0, r3
 800c72e:	f002 fd7d 	bl	800f22c <memset>
 800c732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c734:	4a0c      	ldr	r2, [pc, #48]	; (800c768 <prvInitialiseNewTask+0x144>)
 800c736:	659a      	str	r2, [r3, #88]	; 0x58
 800c738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c73a:	4a0c      	ldr	r2, [pc, #48]	; (800c76c <prvInitialiseNewTask+0x148>)
 800c73c:	65da      	str	r2, [r3, #92]	; 0x5c
 800c73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c740:	4a0b      	ldr	r2, [pc, #44]	; (800c770 <prvInitialiseNewTask+0x14c>)
 800c742:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c744:	683a      	ldr	r2, [r7, #0]
 800c746:	68f9      	ldr	r1, [r7, #12]
 800c748:	69b8      	ldr	r0, [r7, #24]
 800c74a:	f001 fa77 	bl	800dc3c <pxPortInitialiseStack>
 800c74e:	4602      	mov	r2, r0
 800c750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c752:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c756:	2b00      	cmp	r3, #0
 800c758:	d002      	beq.n	800c760 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c75c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c75e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c760:	bf00      	nop
 800c762:	3720      	adds	r7, #32
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}
 800c768:	200073c4 	.word	0x200073c4
 800c76c:	2000742c 	.word	0x2000742c
 800c770:	20007494 	.word	0x20007494

0800c774 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b082      	sub	sp, #8
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c77c:	f001 fb6e 	bl	800de5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c780:	4b2d      	ldr	r3, [pc, #180]	; (800c838 <prvAddNewTaskToReadyList+0xc4>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	3301      	adds	r3, #1
 800c786:	4a2c      	ldr	r2, [pc, #176]	; (800c838 <prvAddNewTaskToReadyList+0xc4>)
 800c788:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c78a:	4b2c      	ldr	r3, [pc, #176]	; (800c83c <prvAddNewTaskToReadyList+0xc8>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d109      	bne.n	800c7a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c792:	4a2a      	ldr	r2, [pc, #168]	; (800c83c <prvAddNewTaskToReadyList+0xc8>)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c798:	4b27      	ldr	r3, [pc, #156]	; (800c838 <prvAddNewTaskToReadyList+0xc4>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	2b01      	cmp	r3, #1
 800c79e:	d110      	bne.n	800c7c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c7a0:	f000 fc4e 	bl	800d040 <prvInitialiseTaskLists>
 800c7a4:	e00d      	b.n	800c7c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c7a6:	4b26      	ldr	r3, [pc, #152]	; (800c840 <prvAddNewTaskToReadyList+0xcc>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d109      	bne.n	800c7c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c7ae:	4b23      	ldr	r3, [pc, #140]	; (800c83c <prvAddNewTaskToReadyList+0xc8>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d802      	bhi.n	800c7c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c7bc:	4a1f      	ldr	r2, [pc, #124]	; (800c83c <prvAddNewTaskToReadyList+0xc8>)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c7c2:	4b20      	ldr	r3, [pc, #128]	; (800c844 <prvAddNewTaskToReadyList+0xd0>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	3301      	adds	r3, #1
 800c7c8:	4a1e      	ldr	r2, [pc, #120]	; (800c844 <prvAddNewTaskToReadyList+0xd0>)
 800c7ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c7cc:	4b1d      	ldr	r3, [pc, #116]	; (800c844 <prvAddNewTaskToReadyList+0xd0>)
 800c7ce:	681a      	ldr	r2, [r3, #0]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7d8:	4b1b      	ldr	r3, [pc, #108]	; (800c848 <prvAddNewTaskToReadyList+0xd4>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d903      	bls.n	800c7e8 <prvAddNewTaskToReadyList+0x74>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e4:	4a18      	ldr	r2, [pc, #96]	; (800c848 <prvAddNewTaskToReadyList+0xd4>)
 800c7e6:	6013      	str	r3, [r2, #0]
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ec:	4613      	mov	r3, r2
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	4413      	add	r3, r2
 800c7f2:	009b      	lsls	r3, r3, #2
 800c7f4:	4a15      	ldr	r2, [pc, #84]	; (800c84c <prvAddNewTaskToReadyList+0xd8>)
 800c7f6:	441a      	add	r2, r3
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	3304      	adds	r3, #4
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	4610      	mov	r0, r2
 800c800:	f7ff f895 	bl	800b92e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c804:	f001 fb5e 	bl	800dec4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c808:	4b0d      	ldr	r3, [pc, #52]	; (800c840 <prvAddNewTaskToReadyList+0xcc>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d00e      	beq.n	800c82e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c810:	4b0a      	ldr	r3, [pc, #40]	; (800c83c <prvAddNewTaskToReadyList+0xc8>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c81a:	429a      	cmp	r2, r3
 800c81c:	d207      	bcs.n	800c82e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c81e:	4b0c      	ldr	r3, [pc, #48]	; (800c850 <prvAddNewTaskToReadyList+0xdc>)
 800c820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c824:	601a      	str	r2, [r3, #0]
 800c826:	f3bf 8f4f 	dsb	sy
 800c82a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c82e:	bf00      	nop
 800c830:	3708      	adds	r7, #8
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	20001c60 	.word	0x20001c60
 800c83c:	2000178c 	.word	0x2000178c
 800c840:	20001c6c 	.word	0x20001c6c
 800c844:	20001c7c 	.word	0x20001c7c
 800c848:	20001c68 	.word	0x20001c68
 800c84c:	20001790 	.word	0x20001790
 800c850:	e000ed04 	.word	0xe000ed04

0800c854 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c854:	b580      	push	{r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c85c:	2300      	movs	r3, #0
 800c85e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d019      	beq.n	800c89a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c866:	4b14      	ldr	r3, [pc, #80]	; (800c8b8 <vTaskDelay+0x64>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d00c      	beq.n	800c888 <vTaskDelay+0x34>
	__asm volatile
 800c86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c872:	b672      	cpsid	i
 800c874:	f383 8811 	msr	BASEPRI, r3
 800c878:	f3bf 8f6f 	isb	sy
 800c87c:	f3bf 8f4f 	dsb	sy
 800c880:	b662      	cpsie	i
 800c882:	60bb      	str	r3, [r7, #8]
}
 800c884:	bf00      	nop
 800c886:	e7fe      	b.n	800c886 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c888:	f000 f88e 	bl	800c9a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c88c:	2100      	movs	r1, #0
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 fd62 	bl	800d358 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c894:	f000 f896 	bl	800c9c4 <xTaskResumeAll>
 800c898:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d107      	bne.n	800c8b0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800c8a0:	4b06      	ldr	r3, [pc, #24]	; (800c8bc <vTaskDelay+0x68>)
 800c8a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8a6:	601a      	str	r2, [r3, #0]
 800c8a8:	f3bf 8f4f 	dsb	sy
 800c8ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c8b0:	bf00      	nop
 800c8b2:	3710      	adds	r7, #16
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}
 800c8b8:	20001c88 	.word	0x20001c88
 800c8bc:	e000ed04 	.word	0xe000ed04

0800c8c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b08a      	sub	sp, #40	; 0x28
 800c8c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c8ce:	463a      	mov	r2, r7
 800c8d0:	1d39      	adds	r1, r7, #4
 800c8d2:	f107 0308 	add.w	r3, r7, #8
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f7fe ffc8 	bl	800b86c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c8dc:	6839      	ldr	r1, [r7, #0]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	68ba      	ldr	r2, [r7, #8]
 800c8e2:	9202      	str	r2, [sp, #8]
 800c8e4:	9301      	str	r3, [sp, #4]
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	9300      	str	r3, [sp, #0]
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	460a      	mov	r2, r1
 800c8ee:	4926      	ldr	r1, [pc, #152]	; (800c988 <vTaskStartScheduler+0xc8>)
 800c8f0:	4826      	ldr	r0, [pc, #152]	; (800c98c <vTaskStartScheduler+0xcc>)
 800c8f2:	f7ff fdef 	bl	800c4d4 <xTaskCreateStatic>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	4a25      	ldr	r2, [pc, #148]	; (800c990 <vTaskStartScheduler+0xd0>)
 800c8fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c8fc:	4b24      	ldr	r3, [pc, #144]	; (800c990 <vTaskStartScheduler+0xd0>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d002      	beq.n	800c90a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c904:	2301      	movs	r3, #1
 800c906:	617b      	str	r3, [r7, #20]
 800c908:	e001      	b.n	800c90e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c90a:	2300      	movs	r3, #0
 800c90c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	2b01      	cmp	r3, #1
 800c912:	d102      	bne.n	800c91a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c914:	f000 fd74 	bl	800d400 <xTimerCreateTimerTask>
 800c918:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d11d      	bne.n	800c95c <vTaskStartScheduler+0x9c>
	__asm volatile
 800c920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c924:	b672      	cpsid	i
 800c926:	f383 8811 	msr	BASEPRI, r3
 800c92a:	f3bf 8f6f 	isb	sy
 800c92e:	f3bf 8f4f 	dsb	sy
 800c932:	b662      	cpsie	i
 800c934:	613b      	str	r3, [r7, #16]
}
 800c936:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c938:	4b16      	ldr	r3, [pc, #88]	; (800c994 <vTaskStartScheduler+0xd4>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	3354      	adds	r3, #84	; 0x54
 800c93e:	4a16      	ldr	r2, [pc, #88]	; (800c998 <vTaskStartScheduler+0xd8>)
 800c940:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c942:	4b16      	ldr	r3, [pc, #88]	; (800c99c <vTaskStartScheduler+0xdc>)
 800c944:	f04f 32ff 	mov.w	r2, #4294967295
 800c948:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c94a:	4b15      	ldr	r3, [pc, #84]	; (800c9a0 <vTaskStartScheduler+0xe0>)
 800c94c:	2201      	movs	r2, #1
 800c94e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c950:	4b14      	ldr	r3, [pc, #80]	; (800c9a4 <vTaskStartScheduler+0xe4>)
 800c952:	2200      	movs	r2, #0
 800c954:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c956:	f001 fa03 	bl	800dd60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c95a:	e010      	b.n	800c97e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c962:	d10c      	bne.n	800c97e <vTaskStartScheduler+0xbe>
	__asm volatile
 800c964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c968:	b672      	cpsid	i
 800c96a:	f383 8811 	msr	BASEPRI, r3
 800c96e:	f3bf 8f6f 	isb	sy
 800c972:	f3bf 8f4f 	dsb	sy
 800c976:	b662      	cpsie	i
 800c978:	60fb      	str	r3, [r7, #12]
}
 800c97a:	bf00      	nop
 800c97c:	e7fe      	b.n	800c97c <vTaskStartScheduler+0xbc>
}
 800c97e:	bf00      	nop
 800c980:	3718      	adds	r7, #24
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}
 800c986:	bf00      	nop
 800c988:	0800fb5c 	.word	0x0800fb5c
 800c98c:	0800d011 	.word	0x0800d011
 800c990:	20001c84 	.word	0x20001c84
 800c994:	2000178c 	.word	0x2000178c
 800c998:	2000015c 	.word	0x2000015c
 800c99c:	20001c80 	.word	0x20001c80
 800c9a0:	20001c6c 	.word	0x20001c6c
 800c9a4:	20001c64 	.word	0x20001c64

0800c9a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c9ac:	4b04      	ldr	r3, [pc, #16]	; (800c9c0 <vTaskSuspendAll+0x18>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	4a03      	ldr	r2, [pc, #12]	; (800c9c0 <vTaskSuspendAll+0x18>)
 800c9b4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c9b6:	bf00      	nop
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9be:	4770      	bx	lr
 800c9c0:	20001c88 	.word	0x20001c88

0800c9c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b084      	sub	sp, #16
 800c9c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c9d2:	4b43      	ldr	r3, [pc, #268]	; (800cae0 <xTaskResumeAll+0x11c>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d10c      	bne.n	800c9f4 <xTaskResumeAll+0x30>
	__asm volatile
 800c9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9de:	b672      	cpsid	i
 800c9e0:	f383 8811 	msr	BASEPRI, r3
 800c9e4:	f3bf 8f6f 	isb	sy
 800c9e8:	f3bf 8f4f 	dsb	sy
 800c9ec:	b662      	cpsie	i
 800c9ee:	603b      	str	r3, [r7, #0]
}
 800c9f0:	bf00      	nop
 800c9f2:	e7fe      	b.n	800c9f2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c9f4:	f001 fa32 	bl	800de5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c9f8:	4b39      	ldr	r3, [pc, #228]	; (800cae0 <xTaskResumeAll+0x11c>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	3b01      	subs	r3, #1
 800c9fe:	4a38      	ldr	r2, [pc, #224]	; (800cae0 <xTaskResumeAll+0x11c>)
 800ca00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca02:	4b37      	ldr	r3, [pc, #220]	; (800cae0 <xTaskResumeAll+0x11c>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d162      	bne.n	800cad0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ca0a:	4b36      	ldr	r3, [pc, #216]	; (800cae4 <xTaskResumeAll+0x120>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d05e      	beq.n	800cad0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca12:	e02f      	b.n	800ca74 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca14:	4b34      	ldr	r3, [pc, #208]	; (800cae8 <xTaskResumeAll+0x124>)
 800ca16:	68db      	ldr	r3, [r3, #12]
 800ca18:	68db      	ldr	r3, [r3, #12]
 800ca1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	3318      	adds	r3, #24
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7fe ffe1 	bl	800b9e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	3304      	adds	r3, #4
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f7fe ffdc 	bl	800b9e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca34:	4b2d      	ldr	r3, [pc, #180]	; (800caec <xTaskResumeAll+0x128>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d903      	bls.n	800ca44 <xTaskResumeAll+0x80>
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca40:	4a2a      	ldr	r2, [pc, #168]	; (800caec <xTaskResumeAll+0x128>)
 800ca42:	6013      	str	r3, [r2, #0]
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca48:	4613      	mov	r3, r2
 800ca4a:	009b      	lsls	r3, r3, #2
 800ca4c:	4413      	add	r3, r2
 800ca4e:	009b      	lsls	r3, r3, #2
 800ca50:	4a27      	ldr	r2, [pc, #156]	; (800caf0 <xTaskResumeAll+0x12c>)
 800ca52:	441a      	add	r2, r3
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	3304      	adds	r3, #4
 800ca58:	4619      	mov	r1, r3
 800ca5a:	4610      	mov	r0, r2
 800ca5c:	f7fe ff67 	bl	800b92e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca64:	4b23      	ldr	r3, [pc, #140]	; (800caf4 <xTaskResumeAll+0x130>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d302      	bcc.n	800ca74 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800ca6e:	4b22      	ldr	r3, [pc, #136]	; (800caf8 <xTaskResumeAll+0x134>)
 800ca70:	2201      	movs	r2, #1
 800ca72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca74:	4b1c      	ldr	r3, [pc, #112]	; (800cae8 <xTaskResumeAll+0x124>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d1cb      	bne.n	800ca14 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d001      	beq.n	800ca86 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ca82:	f000 fbb9 	bl	800d1f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ca86:	4b1d      	ldr	r3, [pc, #116]	; (800cafc <xTaskResumeAll+0x138>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d010      	beq.n	800cab4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ca92:	f000 f859 	bl	800cb48 <xTaskIncrementTick>
 800ca96:	4603      	mov	r3, r0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d002      	beq.n	800caa2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800ca9c:	4b16      	ldr	r3, [pc, #88]	; (800caf8 <xTaskResumeAll+0x134>)
 800ca9e:	2201      	movs	r2, #1
 800caa0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	3b01      	subs	r3, #1
 800caa6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d1f1      	bne.n	800ca92 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800caae:	4b13      	ldr	r3, [pc, #76]	; (800cafc <xTaskResumeAll+0x138>)
 800cab0:	2200      	movs	r2, #0
 800cab2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cab4:	4b10      	ldr	r3, [pc, #64]	; (800caf8 <xTaskResumeAll+0x134>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d009      	beq.n	800cad0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cabc:	2301      	movs	r3, #1
 800cabe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cac0:	4b0f      	ldr	r3, [pc, #60]	; (800cb00 <xTaskResumeAll+0x13c>)
 800cac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cac6:	601a      	str	r2, [r3, #0]
 800cac8:	f3bf 8f4f 	dsb	sy
 800cacc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cad0:	f001 f9f8 	bl	800dec4 <vPortExitCritical>

	return xAlreadyYielded;
 800cad4:	68bb      	ldr	r3, [r7, #8]
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3710      	adds	r7, #16
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	20001c88 	.word	0x20001c88
 800cae4:	20001c60 	.word	0x20001c60
 800cae8:	20001c20 	.word	0x20001c20
 800caec:	20001c68 	.word	0x20001c68
 800caf0:	20001790 	.word	0x20001790
 800caf4:	2000178c 	.word	0x2000178c
 800caf8:	20001c74 	.word	0x20001c74
 800cafc:	20001c70 	.word	0x20001c70
 800cb00:	e000ed04 	.word	0xe000ed04

0800cb04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cb04:	b480      	push	{r7}
 800cb06:	b083      	sub	sp, #12
 800cb08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cb0a:	4b05      	ldr	r3, [pc, #20]	; (800cb20 <xTaskGetTickCount+0x1c>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cb10:	687b      	ldr	r3, [r7, #4]
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	370c      	adds	r7, #12
 800cb16:	46bd      	mov	sp, r7
 800cb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1c:	4770      	bx	lr
 800cb1e:	bf00      	nop
 800cb20:	20001c64 	.word	0x20001c64

0800cb24 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b082      	sub	sp, #8
 800cb28:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cb2a:	f001 fa7f 	bl	800e02c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800cb2e:	2300      	movs	r3, #0
 800cb30:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800cb32:	4b04      	ldr	r3, [pc, #16]	; (800cb44 <xTaskGetTickCountFromISR+0x20>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cb38:	683b      	ldr	r3, [r7, #0]
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3708      	adds	r7, #8
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
 800cb42:	bf00      	nop
 800cb44:	20001c64 	.word	0x20001c64

0800cb48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b086      	sub	sp, #24
 800cb4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb52:	4b50      	ldr	r3, [pc, #320]	; (800cc94 <xTaskIncrementTick+0x14c>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	f040 808b 	bne.w	800cc72 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cb5c:	4b4e      	ldr	r3, [pc, #312]	; (800cc98 <xTaskIncrementTick+0x150>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	3301      	adds	r3, #1
 800cb62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cb64:	4a4c      	ldr	r2, [pc, #304]	; (800cc98 <xTaskIncrementTick+0x150>)
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d122      	bne.n	800cbb6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800cb70:	4b4a      	ldr	r3, [pc, #296]	; (800cc9c <xTaskIncrementTick+0x154>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d00c      	beq.n	800cb94 <xTaskIncrementTick+0x4c>
	__asm volatile
 800cb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb7e:	b672      	cpsid	i
 800cb80:	f383 8811 	msr	BASEPRI, r3
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	f3bf 8f4f 	dsb	sy
 800cb8c:	b662      	cpsie	i
 800cb8e:	603b      	str	r3, [r7, #0]
}
 800cb90:	bf00      	nop
 800cb92:	e7fe      	b.n	800cb92 <xTaskIncrementTick+0x4a>
 800cb94:	4b41      	ldr	r3, [pc, #260]	; (800cc9c <xTaskIncrementTick+0x154>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	60fb      	str	r3, [r7, #12]
 800cb9a:	4b41      	ldr	r3, [pc, #260]	; (800cca0 <xTaskIncrementTick+0x158>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	4a3f      	ldr	r2, [pc, #252]	; (800cc9c <xTaskIncrementTick+0x154>)
 800cba0:	6013      	str	r3, [r2, #0]
 800cba2:	4a3f      	ldr	r2, [pc, #252]	; (800cca0 <xTaskIncrementTick+0x158>)
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	6013      	str	r3, [r2, #0]
 800cba8:	4b3e      	ldr	r3, [pc, #248]	; (800cca4 <xTaskIncrementTick+0x15c>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	3301      	adds	r3, #1
 800cbae:	4a3d      	ldr	r2, [pc, #244]	; (800cca4 <xTaskIncrementTick+0x15c>)
 800cbb0:	6013      	str	r3, [r2, #0]
 800cbb2:	f000 fb21 	bl	800d1f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cbb6:	4b3c      	ldr	r3, [pc, #240]	; (800cca8 <xTaskIncrementTick+0x160>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	693a      	ldr	r2, [r7, #16]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d349      	bcc.n	800cc54 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cbc0:	4b36      	ldr	r3, [pc, #216]	; (800cc9c <xTaskIncrementTick+0x154>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d104      	bne.n	800cbd4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbca:	4b37      	ldr	r3, [pc, #220]	; (800cca8 <xTaskIncrementTick+0x160>)
 800cbcc:	f04f 32ff 	mov.w	r2, #4294967295
 800cbd0:	601a      	str	r2, [r3, #0]
					break;
 800cbd2:	e03f      	b.n	800cc54 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbd4:	4b31      	ldr	r3, [pc, #196]	; (800cc9c <xTaskIncrementTick+0x154>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	68db      	ldr	r3, [r3, #12]
 800cbda:	68db      	ldr	r3, [r3, #12]
 800cbdc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cbe4:	693a      	ldr	r2, [r7, #16]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d203      	bcs.n	800cbf4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cbec:	4a2e      	ldr	r2, [pc, #184]	; (800cca8 <xTaskIncrementTick+0x160>)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cbf2:	e02f      	b.n	800cc54 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	3304      	adds	r3, #4
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f7fe fef5 	bl	800b9e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d004      	beq.n	800cc10 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	3318      	adds	r3, #24
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7fe feec 	bl	800b9e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc14:	4b25      	ldr	r3, [pc, #148]	; (800ccac <xTaskIncrementTick+0x164>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d903      	bls.n	800cc24 <xTaskIncrementTick+0xdc>
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc20:	4a22      	ldr	r2, [pc, #136]	; (800ccac <xTaskIncrementTick+0x164>)
 800cc22:	6013      	str	r3, [r2, #0]
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc28:	4613      	mov	r3, r2
 800cc2a:	009b      	lsls	r3, r3, #2
 800cc2c:	4413      	add	r3, r2
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	4a1f      	ldr	r2, [pc, #124]	; (800ccb0 <xTaskIncrementTick+0x168>)
 800cc32:	441a      	add	r2, r3
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	3304      	adds	r3, #4
 800cc38:	4619      	mov	r1, r3
 800cc3a:	4610      	mov	r0, r2
 800cc3c:	f7fe fe77 	bl	800b92e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc44:	4b1b      	ldr	r3, [pc, #108]	; (800ccb4 <xTaskIncrementTick+0x16c>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d3b8      	bcc.n	800cbc0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800cc4e:	2301      	movs	r3, #1
 800cc50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc52:	e7b5      	b.n	800cbc0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cc54:	4b17      	ldr	r3, [pc, #92]	; (800ccb4 <xTaskIncrementTick+0x16c>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc5a:	4915      	ldr	r1, [pc, #84]	; (800ccb0 <xTaskIncrementTick+0x168>)
 800cc5c:	4613      	mov	r3, r2
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	4413      	add	r3, r2
 800cc62:	009b      	lsls	r3, r3, #2
 800cc64:	440b      	add	r3, r1
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d907      	bls.n	800cc7c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	617b      	str	r3, [r7, #20]
 800cc70:	e004      	b.n	800cc7c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cc72:	4b11      	ldr	r3, [pc, #68]	; (800ccb8 <xTaskIncrementTick+0x170>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	3301      	adds	r3, #1
 800cc78:	4a0f      	ldr	r2, [pc, #60]	; (800ccb8 <xTaskIncrementTick+0x170>)
 800cc7a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cc7c:	4b0f      	ldr	r3, [pc, #60]	; (800ccbc <xTaskIncrementTick+0x174>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d001      	beq.n	800cc88 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800cc84:	2301      	movs	r3, #1
 800cc86:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cc88:	697b      	ldr	r3, [r7, #20]
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3718      	adds	r7, #24
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop
 800cc94:	20001c88 	.word	0x20001c88
 800cc98:	20001c64 	.word	0x20001c64
 800cc9c:	20001c18 	.word	0x20001c18
 800cca0:	20001c1c 	.word	0x20001c1c
 800cca4:	20001c78 	.word	0x20001c78
 800cca8:	20001c80 	.word	0x20001c80
 800ccac:	20001c68 	.word	0x20001c68
 800ccb0:	20001790 	.word	0x20001790
 800ccb4:	2000178c 	.word	0x2000178c
 800ccb8:	20001c70 	.word	0x20001c70
 800ccbc:	20001c74 	.word	0x20001c74

0800ccc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b085      	sub	sp, #20
 800ccc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ccc6:	4b2b      	ldr	r3, [pc, #172]	; (800cd74 <vTaskSwitchContext+0xb4>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d003      	beq.n	800ccd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ccce:	4b2a      	ldr	r3, [pc, #168]	; (800cd78 <vTaskSwitchContext+0xb8>)
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ccd4:	e048      	b.n	800cd68 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800ccd6:	4b28      	ldr	r3, [pc, #160]	; (800cd78 <vTaskSwitchContext+0xb8>)
 800ccd8:	2200      	movs	r2, #0
 800ccda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccdc:	4b27      	ldr	r3, [pc, #156]	; (800cd7c <vTaskSwitchContext+0xbc>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	60fb      	str	r3, [r7, #12]
 800cce2:	e012      	b.n	800cd0a <vTaskSwitchContext+0x4a>
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d10c      	bne.n	800cd04 <vTaskSwitchContext+0x44>
	__asm volatile
 800ccea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccee:	b672      	cpsid	i
 800ccf0:	f383 8811 	msr	BASEPRI, r3
 800ccf4:	f3bf 8f6f 	isb	sy
 800ccf8:	f3bf 8f4f 	dsb	sy
 800ccfc:	b662      	cpsie	i
 800ccfe:	607b      	str	r3, [r7, #4]
}
 800cd00:	bf00      	nop
 800cd02:	e7fe      	b.n	800cd02 <vTaskSwitchContext+0x42>
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	3b01      	subs	r3, #1
 800cd08:	60fb      	str	r3, [r7, #12]
 800cd0a:	491d      	ldr	r1, [pc, #116]	; (800cd80 <vTaskSwitchContext+0xc0>)
 800cd0c:	68fa      	ldr	r2, [r7, #12]
 800cd0e:	4613      	mov	r3, r2
 800cd10:	009b      	lsls	r3, r3, #2
 800cd12:	4413      	add	r3, r2
 800cd14:	009b      	lsls	r3, r3, #2
 800cd16:	440b      	add	r3, r1
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d0e2      	beq.n	800cce4 <vTaskSwitchContext+0x24>
 800cd1e:	68fa      	ldr	r2, [r7, #12]
 800cd20:	4613      	mov	r3, r2
 800cd22:	009b      	lsls	r3, r3, #2
 800cd24:	4413      	add	r3, r2
 800cd26:	009b      	lsls	r3, r3, #2
 800cd28:	4a15      	ldr	r2, [pc, #84]	; (800cd80 <vTaskSwitchContext+0xc0>)
 800cd2a:	4413      	add	r3, r2
 800cd2c:	60bb      	str	r3, [r7, #8]
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	685b      	ldr	r3, [r3, #4]
 800cd32:	685a      	ldr	r2, [r3, #4]
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	605a      	str	r2, [r3, #4]
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	685a      	ldr	r2, [r3, #4]
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	3308      	adds	r3, #8
 800cd40:	429a      	cmp	r2, r3
 800cd42:	d104      	bne.n	800cd4e <vTaskSwitchContext+0x8e>
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	685a      	ldr	r2, [r3, #4]
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	605a      	str	r2, [r3, #4]
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	68db      	ldr	r3, [r3, #12]
 800cd54:	4a0b      	ldr	r2, [pc, #44]	; (800cd84 <vTaskSwitchContext+0xc4>)
 800cd56:	6013      	str	r3, [r2, #0]
 800cd58:	4a08      	ldr	r2, [pc, #32]	; (800cd7c <vTaskSwitchContext+0xbc>)
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cd5e:	4b09      	ldr	r3, [pc, #36]	; (800cd84 <vTaskSwitchContext+0xc4>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	3354      	adds	r3, #84	; 0x54
 800cd64:	4a08      	ldr	r2, [pc, #32]	; (800cd88 <vTaskSwitchContext+0xc8>)
 800cd66:	6013      	str	r3, [r2, #0]
}
 800cd68:	bf00      	nop
 800cd6a:	3714      	adds	r7, #20
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd72:	4770      	bx	lr
 800cd74:	20001c88 	.word	0x20001c88
 800cd78:	20001c74 	.word	0x20001c74
 800cd7c:	20001c68 	.word	0x20001c68
 800cd80:	20001790 	.word	0x20001790
 800cd84:	2000178c 	.word	0x2000178c
 800cd88:	2000015c 	.word	0x2000015c

0800cd8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d10c      	bne.n	800cdb6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800cd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda0:	b672      	cpsid	i
 800cda2:	f383 8811 	msr	BASEPRI, r3
 800cda6:	f3bf 8f6f 	isb	sy
 800cdaa:	f3bf 8f4f 	dsb	sy
 800cdae:	b662      	cpsie	i
 800cdb0:	60fb      	str	r3, [r7, #12]
}
 800cdb2:	bf00      	nop
 800cdb4:	e7fe      	b.n	800cdb4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cdb6:	4b07      	ldr	r3, [pc, #28]	; (800cdd4 <vTaskPlaceOnEventList+0x48>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	3318      	adds	r3, #24
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f7fe fdd9 	bl	800b976 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cdc4:	2101      	movs	r1, #1
 800cdc6:	6838      	ldr	r0, [r7, #0]
 800cdc8:	f000 fac6 	bl	800d358 <prvAddCurrentTaskToDelayedList>
}
 800cdcc:	bf00      	nop
 800cdce:	3710      	adds	r7, #16
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}
 800cdd4:	2000178c 	.word	0x2000178c

0800cdd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b086      	sub	sp, #24
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	60f8      	str	r0, [r7, #12]
 800cde0:	60b9      	str	r1, [r7, #8]
 800cde2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d10c      	bne.n	800ce04 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800cdea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdee:	b672      	cpsid	i
 800cdf0:	f383 8811 	msr	BASEPRI, r3
 800cdf4:	f3bf 8f6f 	isb	sy
 800cdf8:	f3bf 8f4f 	dsb	sy
 800cdfc:	b662      	cpsie	i
 800cdfe:	617b      	str	r3, [r7, #20]
}
 800ce00:	bf00      	nop
 800ce02:	e7fe      	b.n	800ce02 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce04:	4b0a      	ldr	r3, [pc, #40]	; (800ce30 <vTaskPlaceOnEventListRestricted+0x58>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	3318      	adds	r3, #24
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	68f8      	ldr	r0, [r7, #12]
 800ce0e:	f7fe fd8e 	bl	800b92e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d002      	beq.n	800ce1e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800ce18:	f04f 33ff 	mov.w	r3, #4294967295
 800ce1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ce1e:	6879      	ldr	r1, [r7, #4]
 800ce20:	68b8      	ldr	r0, [r7, #8]
 800ce22:	f000 fa99 	bl	800d358 <prvAddCurrentTaskToDelayedList>
	}
 800ce26:	bf00      	nop
 800ce28:	3718      	adds	r7, #24
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop
 800ce30:	2000178c 	.word	0x2000178c

0800ce34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b086      	sub	sp, #24
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	68db      	ldr	r3, [r3, #12]
 800ce40:	68db      	ldr	r3, [r3, #12]
 800ce42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d10c      	bne.n	800ce64 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800ce4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce4e:	b672      	cpsid	i
 800ce50:	f383 8811 	msr	BASEPRI, r3
 800ce54:	f3bf 8f6f 	isb	sy
 800ce58:	f3bf 8f4f 	dsb	sy
 800ce5c:	b662      	cpsie	i
 800ce5e:	60fb      	str	r3, [r7, #12]
}
 800ce60:	bf00      	nop
 800ce62:	e7fe      	b.n	800ce62 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	3318      	adds	r3, #24
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f7fe fdbd 	bl	800b9e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce6e:	4b1e      	ldr	r3, [pc, #120]	; (800cee8 <xTaskRemoveFromEventList+0xb4>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d11d      	bne.n	800ceb2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ce76:	693b      	ldr	r3, [r7, #16]
 800ce78:	3304      	adds	r3, #4
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7fe fdb4 	bl	800b9e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce84:	4b19      	ldr	r3, [pc, #100]	; (800ceec <xTaskRemoveFromEventList+0xb8>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	d903      	bls.n	800ce94 <xTaskRemoveFromEventList+0x60>
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce90:	4a16      	ldr	r2, [pc, #88]	; (800ceec <xTaskRemoveFromEventList+0xb8>)
 800ce92:	6013      	str	r3, [r2, #0]
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce98:	4613      	mov	r3, r2
 800ce9a:	009b      	lsls	r3, r3, #2
 800ce9c:	4413      	add	r3, r2
 800ce9e:	009b      	lsls	r3, r3, #2
 800cea0:	4a13      	ldr	r2, [pc, #76]	; (800cef0 <xTaskRemoveFromEventList+0xbc>)
 800cea2:	441a      	add	r2, r3
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	3304      	adds	r3, #4
 800cea8:	4619      	mov	r1, r3
 800ceaa:	4610      	mov	r0, r2
 800ceac:	f7fe fd3f 	bl	800b92e <vListInsertEnd>
 800ceb0:	e005      	b.n	800cebe <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	3318      	adds	r3, #24
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	480e      	ldr	r0, [pc, #56]	; (800cef4 <xTaskRemoveFromEventList+0xc0>)
 800ceba:	f7fe fd38 	bl	800b92e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cec2:	4b0d      	ldr	r3, [pc, #52]	; (800cef8 <xTaskRemoveFromEventList+0xc4>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d905      	bls.n	800ced8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cecc:	2301      	movs	r3, #1
 800cece:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ced0:	4b0a      	ldr	r3, [pc, #40]	; (800cefc <xTaskRemoveFromEventList+0xc8>)
 800ced2:	2201      	movs	r2, #1
 800ced4:	601a      	str	r2, [r3, #0]
 800ced6:	e001      	b.n	800cedc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800ced8:	2300      	movs	r3, #0
 800ceda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cedc:	697b      	ldr	r3, [r7, #20]
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3718      	adds	r7, #24
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	20001c88 	.word	0x20001c88
 800ceec:	20001c68 	.word	0x20001c68
 800cef0:	20001790 	.word	0x20001790
 800cef4:	20001c20 	.word	0x20001c20
 800cef8:	2000178c 	.word	0x2000178c
 800cefc:	20001c74 	.word	0x20001c74

0800cf00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cf00:	b480      	push	{r7}
 800cf02:	b083      	sub	sp, #12
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cf08:	4b06      	ldr	r3, [pc, #24]	; (800cf24 <vTaskInternalSetTimeOutState+0x24>)
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cf10:	4b05      	ldr	r3, [pc, #20]	; (800cf28 <vTaskInternalSetTimeOutState+0x28>)
 800cf12:	681a      	ldr	r2, [r3, #0]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	605a      	str	r2, [r3, #4]
}
 800cf18:	bf00      	nop
 800cf1a:	370c      	adds	r7, #12
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr
 800cf24:	20001c78 	.word	0x20001c78
 800cf28:	20001c64 	.word	0x20001c64

0800cf2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b088      	sub	sp, #32
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d10c      	bne.n	800cf56 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800cf3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf40:	b672      	cpsid	i
 800cf42:	f383 8811 	msr	BASEPRI, r3
 800cf46:	f3bf 8f6f 	isb	sy
 800cf4a:	f3bf 8f4f 	dsb	sy
 800cf4e:	b662      	cpsie	i
 800cf50:	613b      	str	r3, [r7, #16]
}
 800cf52:	bf00      	nop
 800cf54:	e7fe      	b.n	800cf54 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d10c      	bne.n	800cf76 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800cf5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf60:	b672      	cpsid	i
 800cf62:	f383 8811 	msr	BASEPRI, r3
 800cf66:	f3bf 8f6f 	isb	sy
 800cf6a:	f3bf 8f4f 	dsb	sy
 800cf6e:	b662      	cpsie	i
 800cf70:	60fb      	str	r3, [r7, #12]
}
 800cf72:	bf00      	nop
 800cf74:	e7fe      	b.n	800cf74 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800cf76:	f000 ff71 	bl	800de5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cf7a:	4b1d      	ldr	r3, [pc, #116]	; (800cff0 <xTaskCheckForTimeOut+0xc4>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	685b      	ldr	r3, [r3, #4]
 800cf84:	69ba      	ldr	r2, [r7, #24]
 800cf86:	1ad3      	subs	r3, r2, r3
 800cf88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf92:	d102      	bne.n	800cf9a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cf94:	2300      	movs	r3, #0
 800cf96:	61fb      	str	r3, [r7, #28]
 800cf98:	e023      	b.n	800cfe2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681a      	ldr	r2, [r3, #0]
 800cf9e:	4b15      	ldr	r3, [pc, #84]	; (800cff4 <xTaskCheckForTimeOut+0xc8>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d007      	beq.n	800cfb6 <xTaskCheckForTimeOut+0x8a>
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	685b      	ldr	r3, [r3, #4]
 800cfaa:	69ba      	ldr	r2, [r7, #24]
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d302      	bcc.n	800cfb6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	61fb      	str	r3, [r7, #28]
 800cfb4:	e015      	b.n	800cfe2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	697a      	ldr	r2, [r7, #20]
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d20b      	bcs.n	800cfd8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	681a      	ldr	r2, [r3, #0]
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	1ad2      	subs	r2, r2, r3
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f7ff ff97 	bl	800cf00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	61fb      	str	r3, [r7, #28]
 800cfd6:	e004      	b.n	800cfe2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cfde:	2301      	movs	r3, #1
 800cfe0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cfe2:	f000 ff6f 	bl	800dec4 <vPortExitCritical>

	return xReturn;
 800cfe6:	69fb      	ldr	r3, [r7, #28]
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3720      	adds	r7, #32
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}
 800cff0:	20001c64 	.word	0x20001c64
 800cff4:	20001c78 	.word	0x20001c78

0800cff8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cff8:	b480      	push	{r7}
 800cffa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cffc:	4b03      	ldr	r3, [pc, #12]	; (800d00c <vTaskMissedYield+0x14>)
 800cffe:	2201      	movs	r2, #1
 800d000:	601a      	str	r2, [r3, #0]
}
 800d002:	bf00      	nop
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr
 800d00c:	20001c74 	.word	0x20001c74

0800d010 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b082      	sub	sp, #8
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d018:	f000 f852 	bl	800d0c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d01c:	4b06      	ldr	r3, [pc, #24]	; (800d038 <prvIdleTask+0x28>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	2b01      	cmp	r3, #1
 800d022:	d9f9      	bls.n	800d018 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d024:	4b05      	ldr	r3, [pc, #20]	; (800d03c <prvIdleTask+0x2c>)
 800d026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d02a:	601a      	str	r2, [r3, #0]
 800d02c:	f3bf 8f4f 	dsb	sy
 800d030:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d034:	e7f0      	b.n	800d018 <prvIdleTask+0x8>
 800d036:	bf00      	nop
 800d038:	20001790 	.word	0x20001790
 800d03c:	e000ed04 	.word	0xe000ed04

0800d040 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b082      	sub	sp, #8
 800d044:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d046:	2300      	movs	r3, #0
 800d048:	607b      	str	r3, [r7, #4]
 800d04a:	e00c      	b.n	800d066 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d04c:	687a      	ldr	r2, [r7, #4]
 800d04e:	4613      	mov	r3, r2
 800d050:	009b      	lsls	r3, r3, #2
 800d052:	4413      	add	r3, r2
 800d054:	009b      	lsls	r3, r3, #2
 800d056:	4a12      	ldr	r2, [pc, #72]	; (800d0a0 <prvInitialiseTaskLists+0x60>)
 800d058:	4413      	add	r3, r2
 800d05a:	4618      	mov	r0, r3
 800d05c:	f7fe fc3a 	bl	800b8d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	3301      	adds	r3, #1
 800d064:	607b      	str	r3, [r7, #4]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2b37      	cmp	r3, #55	; 0x37
 800d06a:	d9ef      	bls.n	800d04c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d06c:	480d      	ldr	r0, [pc, #52]	; (800d0a4 <prvInitialiseTaskLists+0x64>)
 800d06e:	f7fe fc31 	bl	800b8d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d072:	480d      	ldr	r0, [pc, #52]	; (800d0a8 <prvInitialiseTaskLists+0x68>)
 800d074:	f7fe fc2e 	bl	800b8d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d078:	480c      	ldr	r0, [pc, #48]	; (800d0ac <prvInitialiseTaskLists+0x6c>)
 800d07a:	f7fe fc2b 	bl	800b8d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d07e:	480c      	ldr	r0, [pc, #48]	; (800d0b0 <prvInitialiseTaskLists+0x70>)
 800d080:	f7fe fc28 	bl	800b8d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d084:	480b      	ldr	r0, [pc, #44]	; (800d0b4 <prvInitialiseTaskLists+0x74>)
 800d086:	f7fe fc25 	bl	800b8d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d08a:	4b0b      	ldr	r3, [pc, #44]	; (800d0b8 <prvInitialiseTaskLists+0x78>)
 800d08c:	4a05      	ldr	r2, [pc, #20]	; (800d0a4 <prvInitialiseTaskLists+0x64>)
 800d08e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d090:	4b0a      	ldr	r3, [pc, #40]	; (800d0bc <prvInitialiseTaskLists+0x7c>)
 800d092:	4a05      	ldr	r2, [pc, #20]	; (800d0a8 <prvInitialiseTaskLists+0x68>)
 800d094:	601a      	str	r2, [r3, #0]
}
 800d096:	bf00      	nop
 800d098:	3708      	adds	r7, #8
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
 800d09e:	bf00      	nop
 800d0a0:	20001790 	.word	0x20001790
 800d0a4:	20001bf0 	.word	0x20001bf0
 800d0a8:	20001c04 	.word	0x20001c04
 800d0ac:	20001c20 	.word	0x20001c20
 800d0b0:	20001c34 	.word	0x20001c34
 800d0b4:	20001c4c 	.word	0x20001c4c
 800d0b8:	20001c18 	.word	0x20001c18
 800d0bc:	20001c1c 	.word	0x20001c1c

0800d0c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d0c6:	e019      	b.n	800d0fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d0c8:	f000 fec8 	bl	800de5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0cc:	4b10      	ldr	r3, [pc, #64]	; (800d110 <prvCheckTasksWaitingTermination+0x50>)
 800d0ce:	68db      	ldr	r3, [r3, #12]
 800d0d0:	68db      	ldr	r3, [r3, #12]
 800d0d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	3304      	adds	r3, #4
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f7fe fc85 	bl	800b9e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d0de:	4b0d      	ldr	r3, [pc, #52]	; (800d114 <prvCheckTasksWaitingTermination+0x54>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	3b01      	subs	r3, #1
 800d0e4:	4a0b      	ldr	r2, [pc, #44]	; (800d114 <prvCheckTasksWaitingTermination+0x54>)
 800d0e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d0e8:	4b0b      	ldr	r3, [pc, #44]	; (800d118 <prvCheckTasksWaitingTermination+0x58>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	3b01      	subs	r3, #1
 800d0ee:	4a0a      	ldr	r2, [pc, #40]	; (800d118 <prvCheckTasksWaitingTermination+0x58>)
 800d0f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d0f2:	f000 fee7 	bl	800dec4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f000 f848 	bl	800d18c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d0fc:	4b06      	ldr	r3, [pc, #24]	; (800d118 <prvCheckTasksWaitingTermination+0x58>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d1e1      	bne.n	800d0c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d104:	bf00      	nop
 800d106:	bf00      	nop
 800d108:	3708      	adds	r7, #8
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	20001c34 	.word	0x20001c34
 800d114:	20001c60 	.word	0x20001c60
 800d118:	20001c48 	.word	0x20001c48

0800d11c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800d11c:	b480      	push	{r7}
 800d11e:	b085      	sub	sp, #20
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800d124:	2300      	movs	r3, #0
 800d126:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d128:	e005      	b.n	800d136 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	3301      	adds	r3, #1
 800d12e:	607b      	str	r3, [r7, #4]
			ulCount++;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	3301      	adds	r3, #1
 800d134:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	2ba5      	cmp	r3, #165	; 0xa5
 800d13c:	d0f5      	beq.n	800d12a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	089b      	lsrs	r3, r3, #2
 800d142:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	b29b      	uxth	r3, r3
	}
 800d148:	4618      	mov	r0, r3
 800d14a:	3714      	adds	r7, #20
 800d14c:	46bd      	mov	sp, r7
 800d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d152:	4770      	bx	lr

0800d154 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800d154:	b580      	push	{r7, lr}
 800d156:	b086      	sub	sp, #24
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d102      	bne.n	800d168 <uxTaskGetStackHighWaterMark+0x14>
 800d162:	4b09      	ldr	r3, [pc, #36]	; (800d188 <uxTaskGetStackHighWaterMark+0x34>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	e000      	b.n	800d16a <uxTaskGetStackHighWaterMark+0x16>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d170:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800d172:	6938      	ldr	r0, [r7, #16]
 800d174:	f7ff ffd2 	bl	800d11c <prvTaskCheckFreeStackSpace>
 800d178:	4603      	mov	r3, r0
 800d17a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800d17c:	68fb      	ldr	r3, [r7, #12]
	}
 800d17e:	4618      	mov	r0, r3
 800d180:	3718      	adds	r7, #24
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}
 800d186:	bf00      	nop
 800d188:	2000178c 	.word	0x2000178c

0800d18c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b084      	sub	sp, #16
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	3354      	adds	r3, #84	; 0x54
 800d198:	4618      	mov	r0, r3
 800d19a:	f002 f84f 	bl	800f23c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d108      	bne.n	800d1ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f001 f84b 	bl	800e248 <vPortFree>
				vPortFree( pxTCB );
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f001 f848 	bl	800e248 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d1b8:	e01a      	b.n	800d1f0 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	d103      	bne.n	800d1cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f001 f83f 	bl	800e248 <vPortFree>
	}
 800d1ca:	e011      	b.n	800d1f0 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d1d2:	2b02      	cmp	r3, #2
 800d1d4:	d00c      	beq.n	800d1f0 <prvDeleteTCB+0x64>
	__asm volatile
 800d1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1da:	b672      	cpsid	i
 800d1dc:	f383 8811 	msr	BASEPRI, r3
 800d1e0:	f3bf 8f6f 	isb	sy
 800d1e4:	f3bf 8f4f 	dsb	sy
 800d1e8:	b662      	cpsie	i
 800d1ea:	60fb      	str	r3, [r7, #12]
}
 800d1ec:	bf00      	nop
 800d1ee:	e7fe      	b.n	800d1ee <prvDeleteTCB+0x62>
	}
 800d1f0:	bf00      	nop
 800d1f2:	3710      	adds	r7, #16
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}

0800d1f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b083      	sub	sp, #12
 800d1fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1fe:	4b0c      	ldr	r3, [pc, #48]	; (800d230 <prvResetNextTaskUnblockTime+0x38>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d104      	bne.n	800d212 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d208:	4b0a      	ldr	r3, [pc, #40]	; (800d234 <prvResetNextTaskUnblockTime+0x3c>)
 800d20a:	f04f 32ff 	mov.w	r2, #4294967295
 800d20e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d210:	e008      	b.n	800d224 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d212:	4b07      	ldr	r3, [pc, #28]	; (800d230 <prvResetNextTaskUnblockTime+0x38>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	68db      	ldr	r3, [r3, #12]
 800d218:	68db      	ldr	r3, [r3, #12]
 800d21a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	4a04      	ldr	r2, [pc, #16]	; (800d234 <prvResetNextTaskUnblockTime+0x3c>)
 800d222:	6013      	str	r3, [r2, #0]
}
 800d224:	bf00      	nop
 800d226:	370c      	adds	r7, #12
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr
 800d230:	20001c18 	.word	0x20001c18
 800d234:	20001c80 	.word	0x20001c80

0800d238 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d238:	b480      	push	{r7}
 800d23a:	b083      	sub	sp, #12
 800d23c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d23e:	4b0b      	ldr	r3, [pc, #44]	; (800d26c <xTaskGetSchedulerState+0x34>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d102      	bne.n	800d24c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d246:	2301      	movs	r3, #1
 800d248:	607b      	str	r3, [r7, #4]
 800d24a:	e008      	b.n	800d25e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d24c:	4b08      	ldr	r3, [pc, #32]	; (800d270 <xTaskGetSchedulerState+0x38>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d102      	bne.n	800d25a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d254:	2302      	movs	r3, #2
 800d256:	607b      	str	r3, [r7, #4]
 800d258:	e001      	b.n	800d25e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d25a:	2300      	movs	r3, #0
 800d25c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d25e:	687b      	ldr	r3, [r7, #4]
	}
 800d260:	4618      	mov	r0, r3
 800d262:	370c      	adds	r7, #12
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr
 800d26c:	20001c6c 	.word	0x20001c6c
 800d270:	20001c88 	.word	0x20001c88

0800d274 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d274:	b580      	push	{r7, lr}
 800d276:	b086      	sub	sp, #24
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d280:	2300      	movs	r3, #0
 800d282:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d05a      	beq.n	800d340 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d28a:	4b30      	ldr	r3, [pc, #192]	; (800d34c <xTaskPriorityDisinherit+0xd8>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	693a      	ldr	r2, [r7, #16]
 800d290:	429a      	cmp	r2, r3
 800d292:	d00c      	beq.n	800d2ae <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800d294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d298:	b672      	cpsid	i
 800d29a:	f383 8811 	msr	BASEPRI, r3
 800d29e:	f3bf 8f6f 	isb	sy
 800d2a2:	f3bf 8f4f 	dsb	sy
 800d2a6:	b662      	cpsie	i
 800d2a8:	60fb      	str	r3, [r7, #12]
}
 800d2aa:	bf00      	nop
 800d2ac:	e7fe      	b.n	800d2ac <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d10c      	bne.n	800d2d0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800d2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ba:	b672      	cpsid	i
 800d2bc:	f383 8811 	msr	BASEPRI, r3
 800d2c0:	f3bf 8f6f 	isb	sy
 800d2c4:	f3bf 8f4f 	dsb	sy
 800d2c8:	b662      	cpsie	i
 800d2ca:	60bb      	str	r3, [r7, #8]
}
 800d2cc:	bf00      	nop
 800d2ce:	e7fe      	b.n	800d2ce <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2d4:	1e5a      	subs	r2, r3, #1
 800d2d6:	693b      	ldr	r3, [r7, #16]
 800d2d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d02c      	beq.n	800d340 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d128      	bne.n	800d340 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	3304      	adds	r3, #4
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7fe fb78 	bl	800b9e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d300:	693b      	ldr	r3, [r7, #16]
 800d302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d304:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d310:	4b0f      	ldr	r3, [pc, #60]	; (800d350 <xTaskPriorityDisinherit+0xdc>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	429a      	cmp	r2, r3
 800d316:	d903      	bls.n	800d320 <xTaskPriorityDisinherit+0xac>
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d31c:	4a0c      	ldr	r2, [pc, #48]	; (800d350 <xTaskPriorityDisinherit+0xdc>)
 800d31e:	6013      	str	r3, [r2, #0]
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d324:	4613      	mov	r3, r2
 800d326:	009b      	lsls	r3, r3, #2
 800d328:	4413      	add	r3, r2
 800d32a:	009b      	lsls	r3, r3, #2
 800d32c:	4a09      	ldr	r2, [pc, #36]	; (800d354 <xTaskPriorityDisinherit+0xe0>)
 800d32e:	441a      	add	r2, r3
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	3304      	adds	r3, #4
 800d334:	4619      	mov	r1, r3
 800d336:	4610      	mov	r0, r2
 800d338:	f7fe faf9 	bl	800b92e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d33c:	2301      	movs	r3, #1
 800d33e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d340:	697b      	ldr	r3, [r7, #20]
	}
 800d342:	4618      	mov	r0, r3
 800d344:	3718      	adds	r7, #24
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
 800d34a:	bf00      	nop
 800d34c:	2000178c 	.word	0x2000178c
 800d350:	20001c68 	.word	0x20001c68
 800d354:	20001790 	.word	0x20001790

0800d358 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b084      	sub	sp, #16
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d362:	4b21      	ldr	r3, [pc, #132]	; (800d3e8 <prvAddCurrentTaskToDelayedList+0x90>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d368:	4b20      	ldr	r3, [pc, #128]	; (800d3ec <prvAddCurrentTaskToDelayedList+0x94>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	3304      	adds	r3, #4
 800d36e:	4618      	mov	r0, r3
 800d370:	f7fe fb3a 	bl	800b9e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d37a:	d10a      	bne.n	800d392 <prvAddCurrentTaskToDelayedList+0x3a>
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d007      	beq.n	800d392 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d382:	4b1a      	ldr	r3, [pc, #104]	; (800d3ec <prvAddCurrentTaskToDelayedList+0x94>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	3304      	adds	r3, #4
 800d388:	4619      	mov	r1, r3
 800d38a:	4819      	ldr	r0, [pc, #100]	; (800d3f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800d38c:	f7fe facf 	bl	800b92e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d390:	e026      	b.n	800d3e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d392:	68fa      	ldr	r2, [r7, #12]
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	4413      	add	r3, r2
 800d398:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d39a:	4b14      	ldr	r3, [pc, #80]	; (800d3ec <prvAddCurrentTaskToDelayedList+0x94>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	68ba      	ldr	r2, [r7, #8]
 800d3a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d3a2:	68ba      	ldr	r2, [r7, #8]
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d209      	bcs.n	800d3be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3aa:	4b12      	ldr	r3, [pc, #72]	; (800d3f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d3ac:	681a      	ldr	r2, [r3, #0]
 800d3ae:	4b0f      	ldr	r3, [pc, #60]	; (800d3ec <prvAddCurrentTaskToDelayedList+0x94>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	3304      	adds	r3, #4
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	4610      	mov	r0, r2
 800d3b8:	f7fe fadd 	bl	800b976 <vListInsert>
}
 800d3bc:	e010      	b.n	800d3e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3be:	4b0e      	ldr	r3, [pc, #56]	; (800d3f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d3c0:	681a      	ldr	r2, [r3, #0]
 800d3c2:	4b0a      	ldr	r3, [pc, #40]	; (800d3ec <prvAddCurrentTaskToDelayedList+0x94>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	3304      	adds	r3, #4
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	4610      	mov	r0, r2
 800d3cc:	f7fe fad3 	bl	800b976 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d3d0:	4b0a      	ldr	r3, [pc, #40]	; (800d3fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	68ba      	ldr	r2, [r7, #8]
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d202      	bcs.n	800d3e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d3da:	4a08      	ldr	r2, [pc, #32]	; (800d3fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	6013      	str	r3, [r2, #0]
}
 800d3e0:	bf00      	nop
 800d3e2:	3710      	adds	r7, #16
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}
 800d3e8:	20001c64 	.word	0x20001c64
 800d3ec:	2000178c 	.word	0x2000178c
 800d3f0:	20001c4c 	.word	0x20001c4c
 800d3f4:	20001c1c 	.word	0x20001c1c
 800d3f8:	20001c18 	.word	0x20001c18
 800d3fc:	20001c80 	.word	0x20001c80

0800d400 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b08a      	sub	sp, #40	; 0x28
 800d404:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d406:	2300      	movs	r3, #0
 800d408:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d40a:	f000 fbb5 	bl	800db78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d40e:	4b1d      	ldr	r3, [pc, #116]	; (800d484 <xTimerCreateTimerTask+0x84>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d021      	beq.n	800d45a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d416:	2300      	movs	r3, #0
 800d418:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d41a:	2300      	movs	r3, #0
 800d41c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d41e:	1d3a      	adds	r2, r7, #4
 800d420:	f107 0108 	add.w	r1, r7, #8
 800d424:	f107 030c 	add.w	r3, r7, #12
 800d428:	4618      	mov	r0, r3
 800d42a:	f7fe fa39 	bl	800b8a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d42e:	6879      	ldr	r1, [r7, #4]
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	68fa      	ldr	r2, [r7, #12]
 800d434:	9202      	str	r2, [sp, #8]
 800d436:	9301      	str	r3, [sp, #4]
 800d438:	2302      	movs	r3, #2
 800d43a:	9300      	str	r3, [sp, #0]
 800d43c:	2300      	movs	r3, #0
 800d43e:	460a      	mov	r2, r1
 800d440:	4911      	ldr	r1, [pc, #68]	; (800d488 <xTimerCreateTimerTask+0x88>)
 800d442:	4812      	ldr	r0, [pc, #72]	; (800d48c <xTimerCreateTimerTask+0x8c>)
 800d444:	f7ff f846 	bl	800c4d4 <xTaskCreateStatic>
 800d448:	4603      	mov	r3, r0
 800d44a:	4a11      	ldr	r2, [pc, #68]	; (800d490 <xTimerCreateTimerTask+0x90>)
 800d44c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d44e:	4b10      	ldr	r3, [pc, #64]	; (800d490 <xTimerCreateTimerTask+0x90>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d001      	beq.n	800d45a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d456:	2301      	movs	r3, #1
 800d458:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d10c      	bne.n	800d47a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800d460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d464:	b672      	cpsid	i
 800d466:	f383 8811 	msr	BASEPRI, r3
 800d46a:	f3bf 8f6f 	isb	sy
 800d46e:	f3bf 8f4f 	dsb	sy
 800d472:	b662      	cpsie	i
 800d474:	613b      	str	r3, [r7, #16]
}
 800d476:	bf00      	nop
 800d478:	e7fe      	b.n	800d478 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800d47a:	697b      	ldr	r3, [r7, #20]
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3718      	adds	r7, #24
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}
 800d484:	20001cbc 	.word	0x20001cbc
 800d488:	0800fb64 	.word	0x0800fb64
 800d48c:	0800d711 	.word	0x0800d711
 800d490:	20001cc0 	.word	0x20001cc0

0800d494 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800d494:	b580      	push	{r7, lr}
 800d496:	b088      	sub	sp, #32
 800d498:	af02      	add	r7, sp, #8
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	607a      	str	r2, [r7, #4]
 800d4a0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800d4a2:	202c      	movs	r0, #44	; 0x2c
 800d4a4:	f000 fe06 	bl	800e0b4 <pvPortMalloc>
 800d4a8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d00d      	beq.n	800d4cc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	9301      	str	r3, [sp, #4]
 800d4bc:	6a3b      	ldr	r3, [r7, #32]
 800d4be:	9300      	str	r3, [sp, #0]
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	687a      	ldr	r2, [r7, #4]
 800d4c4:	68b9      	ldr	r1, [r7, #8]
 800d4c6:	68f8      	ldr	r0, [r7, #12]
 800d4c8:	f000 f847 	bl	800d55a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d4cc:	697b      	ldr	r3, [r7, #20]
	}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3718      	adds	r7, #24
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}

0800d4d6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800d4d6:	b580      	push	{r7, lr}
 800d4d8:	b08a      	sub	sp, #40	; 0x28
 800d4da:	af02      	add	r7, sp, #8
 800d4dc:	60f8      	str	r0, [r7, #12]
 800d4de:	60b9      	str	r1, [r7, #8]
 800d4e0:	607a      	str	r2, [r7, #4]
 800d4e2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800d4e4:	232c      	movs	r3, #44	; 0x2c
 800d4e6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	2b2c      	cmp	r3, #44	; 0x2c
 800d4ec:	d00c      	beq.n	800d508 <xTimerCreateStatic+0x32>
	__asm volatile
 800d4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f2:	b672      	cpsid	i
 800d4f4:	f383 8811 	msr	BASEPRI, r3
 800d4f8:	f3bf 8f6f 	isb	sy
 800d4fc:	f3bf 8f4f 	dsb	sy
 800d500:	b662      	cpsie	i
 800d502:	61bb      	str	r3, [r7, #24]
}
 800d504:	bf00      	nop
 800d506:	e7fe      	b.n	800d506 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d508:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800d50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d10c      	bne.n	800d52a <xTimerCreateStatic+0x54>
	__asm volatile
 800d510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d514:	b672      	cpsid	i
 800d516:	f383 8811 	msr	BASEPRI, r3
 800d51a:	f3bf 8f6f 	isb	sy
 800d51e:	f3bf 8f4f 	dsb	sy
 800d522:	b662      	cpsie	i
 800d524:	617b      	str	r3, [r7, #20]
}
 800d526:	bf00      	nop
 800d528:	e7fe      	b.n	800d528 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800d52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d52c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800d52e:	69fb      	ldr	r3, [r7, #28]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d00d      	beq.n	800d550 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800d534:	69fb      	ldr	r3, [r7, #28]
 800d536:	2202      	movs	r2, #2
 800d538:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d53c:	69fb      	ldr	r3, [r7, #28]
 800d53e:	9301      	str	r3, [sp, #4]
 800d540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d542:	9300      	str	r3, [sp, #0]
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	687a      	ldr	r2, [r7, #4]
 800d548:	68b9      	ldr	r1, [r7, #8]
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	f000 f805 	bl	800d55a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d550:	69fb      	ldr	r3, [r7, #28]
	}
 800d552:	4618      	mov	r0, r3
 800d554:	3720      	adds	r7, #32
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}

0800d55a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800d55a:	b580      	push	{r7, lr}
 800d55c:	b086      	sub	sp, #24
 800d55e:	af00      	add	r7, sp, #0
 800d560:	60f8      	str	r0, [r7, #12]
 800d562:	60b9      	str	r1, [r7, #8]
 800d564:	607a      	str	r2, [r7, #4]
 800d566:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d10c      	bne.n	800d588 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800d56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d572:	b672      	cpsid	i
 800d574:	f383 8811 	msr	BASEPRI, r3
 800d578:	f3bf 8f6f 	isb	sy
 800d57c:	f3bf 8f4f 	dsb	sy
 800d580:	b662      	cpsie	i
 800d582:	617b      	str	r3, [r7, #20]
}
 800d584:	bf00      	nop
 800d586:	e7fe      	b.n	800d586 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800d588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d01e      	beq.n	800d5cc <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800d58e:	f000 faf3 	bl	800db78 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800d592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d594:	68fa      	ldr	r2, [r7, #12]
 800d596:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800d598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59a:	68ba      	ldr	r2, [r7, #8]
 800d59c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800d59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a0:	683a      	ldr	r2, [r7, #0]
 800d5a2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800d5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a6:	6a3a      	ldr	r2, [r7, #32]
 800d5a8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800d5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ac:	3304      	adds	r3, #4
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7fe f9b0 	bl	800b914 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d008      	beq.n	800d5cc <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800d5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5c0:	f043 0304 	orr.w	r3, r3, #4
 800d5c4:	b2da      	uxtb	r2, r3
 800d5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800d5cc:	bf00      	nop
 800d5ce:	3718      	adds	r7, #24
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b08a      	sub	sp, #40	; 0x28
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	60f8      	str	r0, [r7, #12]
 800d5dc:	60b9      	str	r1, [r7, #8]
 800d5de:	607a      	str	r2, [r7, #4]
 800d5e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d10c      	bne.n	800d606 <xTimerGenericCommand+0x32>
	__asm volatile
 800d5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f0:	b672      	cpsid	i
 800d5f2:	f383 8811 	msr	BASEPRI, r3
 800d5f6:	f3bf 8f6f 	isb	sy
 800d5fa:	f3bf 8f4f 	dsb	sy
 800d5fe:	b662      	cpsie	i
 800d600:	623b      	str	r3, [r7, #32]
}
 800d602:	bf00      	nop
 800d604:	e7fe      	b.n	800d604 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d606:	4b1a      	ldr	r3, [pc, #104]	; (800d670 <xTimerGenericCommand+0x9c>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d02a      	beq.n	800d664 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	2b05      	cmp	r3, #5
 800d61e:	dc18      	bgt.n	800d652 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d620:	f7ff fe0a 	bl	800d238 <xTaskGetSchedulerState>
 800d624:	4603      	mov	r3, r0
 800d626:	2b02      	cmp	r3, #2
 800d628:	d109      	bne.n	800d63e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d62a:	4b11      	ldr	r3, [pc, #68]	; (800d670 <xTimerGenericCommand+0x9c>)
 800d62c:	6818      	ldr	r0, [r3, #0]
 800d62e:	f107 0110 	add.w	r1, r7, #16
 800d632:	2300      	movs	r3, #0
 800d634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d636:	f7fe fb53 	bl	800bce0 <xQueueGenericSend>
 800d63a:	6278      	str	r0, [r7, #36]	; 0x24
 800d63c:	e012      	b.n	800d664 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d63e:	4b0c      	ldr	r3, [pc, #48]	; (800d670 <xTimerGenericCommand+0x9c>)
 800d640:	6818      	ldr	r0, [r3, #0]
 800d642:	f107 0110 	add.w	r1, r7, #16
 800d646:	2300      	movs	r3, #0
 800d648:	2200      	movs	r2, #0
 800d64a:	f7fe fb49 	bl	800bce0 <xQueueGenericSend>
 800d64e:	6278      	str	r0, [r7, #36]	; 0x24
 800d650:	e008      	b.n	800d664 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d652:	4b07      	ldr	r3, [pc, #28]	; (800d670 <xTimerGenericCommand+0x9c>)
 800d654:	6818      	ldr	r0, [r3, #0]
 800d656:	f107 0110 	add.w	r1, r7, #16
 800d65a:	2300      	movs	r3, #0
 800d65c:	683a      	ldr	r2, [r7, #0]
 800d65e:	f7fe fc45 	bl	800beec <xQueueGenericSendFromISR>
 800d662:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d666:	4618      	mov	r0, r3
 800d668:	3728      	adds	r7, #40	; 0x28
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}
 800d66e:	bf00      	nop
 800d670:	20001cbc 	.word	0x20001cbc

0800d674 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b088      	sub	sp, #32
 800d678:	af02      	add	r7, sp, #8
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d67e:	4b23      	ldr	r3, [pc, #140]	; (800d70c <prvProcessExpiredTimer+0x98>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	68db      	ldr	r3, [r3, #12]
 800d684:	68db      	ldr	r3, [r3, #12]
 800d686:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	3304      	adds	r3, #4
 800d68c:	4618      	mov	r0, r3
 800d68e:	f7fe f9ab 	bl	800b9e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d698:	f003 0304 	and.w	r3, r3, #4
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d024      	beq.n	800d6ea <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	699a      	ldr	r2, [r3, #24]
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	18d1      	adds	r1, r2, r3
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	683a      	ldr	r2, [r7, #0]
 800d6ac:	6978      	ldr	r0, [r7, #20]
 800d6ae:	f000 f8d3 	bl	800d858 <prvInsertTimerInActiveList>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d021      	beq.n	800d6fc <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	9300      	str	r3, [sp, #0]
 800d6bc:	2300      	movs	r3, #0
 800d6be:	687a      	ldr	r2, [r7, #4]
 800d6c0:	2100      	movs	r1, #0
 800d6c2:	6978      	ldr	r0, [r7, #20]
 800d6c4:	f7ff ff86 	bl	800d5d4 <xTimerGenericCommand>
 800d6c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d115      	bne.n	800d6fc <prvProcessExpiredTimer+0x88>
	__asm volatile
 800d6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d4:	b672      	cpsid	i
 800d6d6:	f383 8811 	msr	BASEPRI, r3
 800d6da:	f3bf 8f6f 	isb	sy
 800d6de:	f3bf 8f4f 	dsb	sy
 800d6e2:	b662      	cpsie	i
 800d6e4:	60fb      	str	r3, [r7, #12]
}
 800d6e6:	bf00      	nop
 800d6e8:	e7fe      	b.n	800d6e8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6f0:	f023 0301 	bic.w	r3, r3, #1
 800d6f4:	b2da      	uxtb	r2, r3
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	6a1b      	ldr	r3, [r3, #32]
 800d700:	6978      	ldr	r0, [r7, #20]
 800d702:	4798      	blx	r3
}
 800d704:	bf00      	nop
 800d706:	3718      	adds	r7, #24
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}
 800d70c:	20001cb4 	.word	0x20001cb4

0800d710 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b084      	sub	sp, #16
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d718:	f107 0308 	add.w	r3, r7, #8
 800d71c:	4618      	mov	r0, r3
 800d71e:	f000 f857 	bl	800d7d0 <prvGetNextExpireTime>
 800d722:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	4619      	mov	r1, r3
 800d728:	68f8      	ldr	r0, [r7, #12]
 800d72a:	f000 f803 	bl	800d734 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d72e:	f000 f8d5 	bl	800d8dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d732:	e7f1      	b.n	800d718 <prvTimerTask+0x8>

0800d734 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b084      	sub	sp, #16
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d73e:	f7ff f933 	bl	800c9a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d742:	f107 0308 	add.w	r3, r7, #8
 800d746:	4618      	mov	r0, r3
 800d748:	f000 f866 	bl	800d818 <prvSampleTimeNow>
 800d74c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d130      	bne.n	800d7b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d10a      	bne.n	800d770 <prvProcessTimerOrBlockTask+0x3c>
 800d75a:	687a      	ldr	r2, [r7, #4]
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	429a      	cmp	r2, r3
 800d760:	d806      	bhi.n	800d770 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d762:	f7ff f92f 	bl	800c9c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d766:	68f9      	ldr	r1, [r7, #12]
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f7ff ff83 	bl	800d674 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d76e:	e024      	b.n	800d7ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d008      	beq.n	800d788 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d776:	4b13      	ldr	r3, [pc, #76]	; (800d7c4 <prvProcessTimerOrBlockTask+0x90>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d101      	bne.n	800d784 <prvProcessTimerOrBlockTask+0x50>
 800d780:	2301      	movs	r3, #1
 800d782:	e000      	b.n	800d786 <prvProcessTimerOrBlockTask+0x52>
 800d784:	2300      	movs	r3, #0
 800d786:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d788:	4b0f      	ldr	r3, [pc, #60]	; (800d7c8 <prvProcessTimerOrBlockTask+0x94>)
 800d78a:	6818      	ldr	r0, [r3, #0]
 800d78c:	687a      	ldr	r2, [r7, #4]
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	1ad3      	subs	r3, r2, r3
 800d792:	683a      	ldr	r2, [r7, #0]
 800d794:	4619      	mov	r1, r3
 800d796:	f7fe fe69 	bl	800c46c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d79a:	f7ff f913 	bl	800c9c4 <xTaskResumeAll>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d10a      	bne.n	800d7ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d7a4:	4b09      	ldr	r3, [pc, #36]	; (800d7cc <prvProcessTimerOrBlockTask+0x98>)
 800d7a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7aa:	601a      	str	r2, [r3, #0]
 800d7ac:	f3bf 8f4f 	dsb	sy
 800d7b0:	f3bf 8f6f 	isb	sy
}
 800d7b4:	e001      	b.n	800d7ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d7b6:	f7ff f905 	bl	800c9c4 <xTaskResumeAll>
}
 800d7ba:	bf00      	nop
 800d7bc:	3710      	adds	r7, #16
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
 800d7c2:	bf00      	nop
 800d7c4:	20001cb8 	.word	0x20001cb8
 800d7c8:	20001cbc 	.word	0x20001cbc
 800d7cc:	e000ed04 	.word	0xe000ed04

0800d7d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b085      	sub	sp, #20
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d7d8:	4b0e      	ldr	r3, [pc, #56]	; (800d814 <prvGetNextExpireTime+0x44>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d101      	bne.n	800d7e6 <prvGetNextExpireTime+0x16>
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	e000      	b.n	800d7e8 <prvGetNextExpireTime+0x18>
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d105      	bne.n	800d800 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d7f4:	4b07      	ldr	r3, [pc, #28]	; (800d814 <prvGetNextExpireTime+0x44>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	68db      	ldr	r3, [r3, #12]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	60fb      	str	r3, [r7, #12]
 800d7fe:	e001      	b.n	800d804 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d800:	2300      	movs	r3, #0
 800d802:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d804:	68fb      	ldr	r3, [r7, #12]
}
 800d806:	4618      	mov	r0, r3
 800d808:	3714      	adds	r7, #20
 800d80a:	46bd      	mov	sp, r7
 800d80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d810:	4770      	bx	lr
 800d812:	bf00      	nop
 800d814:	20001cb4 	.word	0x20001cb4

0800d818 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d820:	f7ff f970 	bl	800cb04 <xTaskGetTickCount>
 800d824:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d826:	4b0b      	ldr	r3, [pc, #44]	; (800d854 <prvSampleTimeNow+0x3c>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	68fa      	ldr	r2, [r7, #12]
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d205      	bcs.n	800d83c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d830:	f000 f93c 	bl	800daac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2201      	movs	r2, #1
 800d838:	601a      	str	r2, [r3, #0]
 800d83a:	e002      	b.n	800d842 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2200      	movs	r2, #0
 800d840:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d842:	4a04      	ldr	r2, [pc, #16]	; (800d854 <prvSampleTimeNow+0x3c>)
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d848:	68fb      	ldr	r3, [r7, #12]
}
 800d84a:	4618      	mov	r0, r3
 800d84c:	3710      	adds	r7, #16
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
 800d852:	bf00      	nop
 800d854:	20001cc4 	.word	0x20001cc4

0800d858 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b086      	sub	sp, #24
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	60f8      	str	r0, [r7, #12]
 800d860:	60b9      	str	r1, [r7, #8]
 800d862:	607a      	str	r2, [r7, #4]
 800d864:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d866:	2300      	movs	r3, #0
 800d868:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	68ba      	ldr	r2, [r7, #8]
 800d86e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	68fa      	ldr	r2, [r7, #12]
 800d874:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d876:	68ba      	ldr	r2, [r7, #8]
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d812      	bhi.n	800d8a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d87e:	687a      	ldr	r2, [r7, #4]
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	1ad2      	subs	r2, r2, r3
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	699b      	ldr	r3, [r3, #24]
 800d888:	429a      	cmp	r2, r3
 800d88a:	d302      	bcc.n	800d892 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d88c:	2301      	movs	r3, #1
 800d88e:	617b      	str	r3, [r7, #20]
 800d890:	e01b      	b.n	800d8ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d892:	4b10      	ldr	r3, [pc, #64]	; (800d8d4 <prvInsertTimerInActiveList+0x7c>)
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	3304      	adds	r3, #4
 800d89a:	4619      	mov	r1, r3
 800d89c:	4610      	mov	r0, r2
 800d89e:	f7fe f86a 	bl	800b976 <vListInsert>
 800d8a2:	e012      	b.n	800d8ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d8a4:	687a      	ldr	r2, [r7, #4]
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d206      	bcs.n	800d8ba <prvInsertTimerInActiveList+0x62>
 800d8ac:	68ba      	ldr	r2, [r7, #8]
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d302      	bcc.n	800d8ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	617b      	str	r3, [r7, #20]
 800d8b8:	e007      	b.n	800d8ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d8ba:	4b07      	ldr	r3, [pc, #28]	; (800d8d8 <prvInsertTimerInActiveList+0x80>)
 800d8bc:	681a      	ldr	r2, [r3, #0]
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	3304      	adds	r3, #4
 800d8c2:	4619      	mov	r1, r3
 800d8c4:	4610      	mov	r0, r2
 800d8c6:	f7fe f856 	bl	800b976 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d8ca:	697b      	ldr	r3, [r7, #20]
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3718      	adds	r7, #24
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}
 800d8d4:	20001cb8 	.word	0x20001cb8
 800d8d8:	20001cb4 	.word	0x20001cb4

0800d8dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b08e      	sub	sp, #56	; 0x38
 800d8e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d8e2:	e0d0      	b.n	800da86 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	da1a      	bge.n	800d920 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d8ea:	1d3b      	adds	r3, r7, #4
 800d8ec:	3304      	adds	r3, #4
 800d8ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d10c      	bne.n	800d910 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800d8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8fa:	b672      	cpsid	i
 800d8fc:	f383 8811 	msr	BASEPRI, r3
 800d900:	f3bf 8f6f 	isb	sy
 800d904:	f3bf 8f4f 	dsb	sy
 800d908:	b662      	cpsie	i
 800d90a:	61fb      	str	r3, [r7, #28]
}
 800d90c:	bf00      	nop
 800d90e:	e7fe      	b.n	800d90e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d916:	6850      	ldr	r0, [r2, #4]
 800d918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d91a:	6892      	ldr	r2, [r2, #8]
 800d91c:	4611      	mov	r1, r2
 800d91e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2b00      	cmp	r3, #0
 800d924:	f2c0 80af 	blt.w	800da86 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d92e:	695b      	ldr	r3, [r3, #20]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d004      	beq.n	800d93e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d936:	3304      	adds	r3, #4
 800d938:	4618      	mov	r0, r3
 800d93a:	f7fe f855 	bl	800b9e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d93e:	463b      	mov	r3, r7
 800d940:	4618      	mov	r0, r3
 800d942:	f7ff ff69 	bl	800d818 <prvSampleTimeNow>
 800d946:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2b09      	cmp	r3, #9
 800d94c:	f200 809a 	bhi.w	800da84 <prvProcessReceivedCommands+0x1a8>
 800d950:	a201      	add	r2, pc, #4	; (adr r2, 800d958 <prvProcessReceivedCommands+0x7c>)
 800d952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d956:	bf00      	nop
 800d958:	0800d981 	.word	0x0800d981
 800d95c:	0800d981 	.word	0x0800d981
 800d960:	0800d981 	.word	0x0800d981
 800d964:	0800d9f9 	.word	0x0800d9f9
 800d968:	0800da0d 	.word	0x0800da0d
 800d96c:	0800da5b 	.word	0x0800da5b
 800d970:	0800d981 	.word	0x0800d981
 800d974:	0800d981 	.word	0x0800d981
 800d978:	0800d9f9 	.word	0x0800d9f9
 800d97c:	0800da0d 	.word	0x0800da0d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d982:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d986:	f043 0301 	orr.w	r3, r3, #1
 800d98a:	b2da      	uxtb	r2, r3
 800d98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d98e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d992:	68ba      	ldr	r2, [r7, #8]
 800d994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d996:	699b      	ldr	r3, [r3, #24]
 800d998:	18d1      	adds	r1, r2, r3
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d99e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9a0:	f7ff ff5a 	bl	800d858 <prvInsertTimerInActiveList>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d06d      	beq.n	800da86 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ac:	6a1b      	ldr	r3, [r3, #32]
 800d9ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9b8:	f003 0304 	and.w	r3, r3, #4
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d062      	beq.n	800da86 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d9c0:	68ba      	ldr	r2, [r7, #8]
 800d9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c4:	699b      	ldr	r3, [r3, #24]
 800d9c6:	441a      	add	r2, r3
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	9300      	str	r3, [sp, #0]
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	2100      	movs	r1, #0
 800d9d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9d2:	f7ff fdff 	bl	800d5d4 <xTimerGenericCommand>
 800d9d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d9d8:	6a3b      	ldr	r3, [r7, #32]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d153      	bne.n	800da86 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800d9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e2:	b672      	cpsid	i
 800d9e4:	f383 8811 	msr	BASEPRI, r3
 800d9e8:	f3bf 8f6f 	isb	sy
 800d9ec:	f3bf 8f4f 	dsb	sy
 800d9f0:	b662      	cpsie	i
 800d9f2:	61bb      	str	r3, [r7, #24]
}
 800d9f4:	bf00      	nop
 800d9f6:	e7fe      	b.n	800d9f6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9fe:	f023 0301 	bic.w	r3, r3, #1
 800da02:	b2da      	uxtb	r2, r3
 800da04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800da0a:	e03c      	b.n	800da86 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800da0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da12:	f043 0301 	orr.w	r3, r3, #1
 800da16:	b2da      	uxtb	r2, r3
 800da18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800da1e:	68ba      	ldr	r2, [r7, #8]
 800da20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da22:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800da24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da26:	699b      	ldr	r3, [r3, #24]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d10c      	bne.n	800da46 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800da2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da30:	b672      	cpsid	i
 800da32:	f383 8811 	msr	BASEPRI, r3
 800da36:	f3bf 8f6f 	isb	sy
 800da3a:	f3bf 8f4f 	dsb	sy
 800da3e:	b662      	cpsie	i
 800da40:	617b      	str	r3, [r7, #20]
}
 800da42:	bf00      	nop
 800da44:	e7fe      	b.n	800da44 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800da46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da48:	699a      	ldr	r2, [r3, #24]
 800da4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4c:	18d1      	adds	r1, r2, r3
 800da4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da54:	f7ff ff00 	bl	800d858 <prvInsertTimerInActiveList>
					break;
 800da58:	e015      	b.n	800da86 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800da5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da60:	f003 0302 	and.w	r3, r3, #2
 800da64:	2b00      	cmp	r3, #0
 800da66:	d103      	bne.n	800da70 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800da68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da6a:	f000 fbed 	bl	800e248 <vPortFree>
 800da6e:	e00a      	b.n	800da86 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da76:	f023 0301 	bic.w	r3, r3, #1
 800da7a:	b2da      	uxtb	r2, r3
 800da7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800da82:	e000      	b.n	800da86 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800da84:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800da86:	4b08      	ldr	r3, [pc, #32]	; (800daa8 <prvProcessReceivedCommands+0x1cc>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	1d39      	adds	r1, r7, #4
 800da8c:	2200      	movs	r2, #0
 800da8e:	4618      	mov	r0, r3
 800da90:	f7fe facc 	bl	800c02c <xQueueReceive>
 800da94:	4603      	mov	r3, r0
 800da96:	2b00      	cmp	r3, #0
 800da98:	f47f af24 	bne.w	800d8e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800da9c:	bf00      	nop
 800da9e:	bf00      	nop
 800daa0:	3730      	adds	r7, #48	; 0x30
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	bf00      	nop
 800daa8:	20001cbc 	.word	0x20001cbc

0800daac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b088      	sub	sp, #32
 800dab0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dab2:	e04a      	b.n	800db4a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dab4:	4b2e      	ldr	r3, [pc, #184]	; (800db70 <prvSwitchTimerLists+0xc4>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dabe:	4b2c      	ldr	r3, [pc, #176]	; (800db70 <prvSwitchTimerLists+0xc4>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	68db      	ldr	r3, [r3, #12]
 800dac4:	68db      	ldr	r3, [r3, #12]
 800dac6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	3304      	adds	r3, #4
 800dacc:	4618      	mov	r0, r3
 800dace:	f7fd ff8b 	bl	800b9e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	6a1b      	ldr	r3, [r3, #32]
 800dad6:	68f8      	ldr	r0, [r7, #12]
 800dad8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dae0:	f003 0304 	and.w	r3, r3, #4
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d030      	beq.n	800db4a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	699b      	ldr	r3, [r3, #24]
 800daec:	693a      	ldr	r2, [r7, #16]
 800daee:	4413      	add	r3, r2
 800daf0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800daf2:	68ba      	ldr	r2, [r7, #8]
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	429a      	cmp	r2, r3
 800daf8:	d90e      	bls.n	800db18 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	68ba      	ldr	r2, [r7, #8]
 800dafe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	68fa      	ldr	r2, [r7, #12]
 800db04:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800db06:	4b1a      	ldr	r3, [pc, #104]	; (800db70 <prvSwitchTimerLists+0xc4>)
 800db08:	681a      	ldr	r2, [r3, #0]
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	3304      	adds	r3, #4
 800db0e:	4619      	mov	r1, r3
 800db10:	4610      	mov	r0, r2
 800db12:	f7fd ff30 	bl	800b976 <vListInsert>
 800db16:	e018      	b.n	800db4a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800db18:	2300      	movs	r3, #0
 800db1a:	9300      	str	r3, [sp, #0]
 800db1c:	2300      	movs	r3, #0
 800db1e:	693a      	ldr	r2, [r7, #16]
 800db20:	2100      	movs	r1, #0
 800db22:	68f8      	ldr	r0, [r7, #12]
 800db24:	f7ff fd56 	bl	800d5d4 <xTimerGenericCommand>
 800db28:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d10c      	bne.n	800db4a <prvSwitchTimerLists+0x9e>
	__asm volatile
 800db30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db34:	b672      	cpsid	i
 800db36:	f383 8811 	msr	BASEPRI, r3
 800db3a:	f3bf 8f6f 	isb	sy
 800db3e:	f3bf 8f4f 	dsb	sy
 800db42:	b662      	cpsie	i
 800db44:	603b      	str	r3, [r7, #0]
}
 800db46:	bf00      	nop
 800db48:	e7fe      	b.n	800db48 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800db4a:	4b09      	ldr	r3, [pc, #36]	; (800db70 <prvSwitchTimerLists+0xc4>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d1af      	bne.n	800dab4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800db54:	4b06      	ldr	r3, [pc, #24]	; (800db70 <prvSwitchTimerLists+0xc4>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800db5a:	4b06      	ldr	r3, [pc, #24]	; (800db74 <prvSwitchTimerLists+0xc8>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	4a04      	ldr	r2, [pc, #16]	; (800db70 <prvSwitchTimerLists+0xc4>)
 800db60:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800db62:	4a04      	ldr	r2, [pc, #16]	; (800db74 <prvSwitchTimerLists+0xc8>)
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	6013      	str	r3, [r2, #0]
}
 800db68:	bf00      	nop
 800db6a:	3718      	adds	r7, #24
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}
 800db70:	20001cb4 	.word	0x20001cb4
 800db74:	20001cb8 	.word	0x20001cb8

0800db78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b082      	sub	sp, #8
 800db7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800db7e:	f000 f96d 	bl	800de5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800db82:	4b15      	ldr	r3, [pc, #84]	; (800dbd8 <prvCheckForValidListAndQueue+0x60>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d120      	bne.n	800dbcc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800db8a:	4814      	ldr	r0, [pc, #80]	; (800dbdc <prvCheckForValidListAndQueue+0x64>)
 800db8c:	f7fd fea2 	bl	800b8d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800db90:	4813      	ldr	r0, [pc, #76]	; (800dbe0 <prvCheckForValidListAndQueue+0x68>)
 800db92:	f7fd fe9f 	bl	800b8d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800db96:	4b13      	ldr	r3, [pc, #76]	; (800dbe4 <prvCheckForValidListAndQueue+0x6c>)
 800db98:	4a10      	ldr	r2, [pc, #64]	; (800dbdc <prvCheckForValidListAndQueue+0x64>)
 800db9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800db9c:	4b12      	ldr	r3, [pc, #72]	; (800dbe8 <prvCheckForValidListAndQueue+0x70>)
 800db9e:	4a10      	ldr	r2, [pc, #64]	; (800dbe0 <prvCheckForValidListAndQueue+0x68>)
 800dba0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dba2:	2300      	movs	r3, #0
 800dba4:	9300      	str	r3, [sp, #0]
 800dba6:	4b11      	ldr	r3, [pc, #68]	; (800dbec <prvCheckForValidListAndQueue+0x74>)
 800dba8:	4a11      	ldr	r2, [pc, #68]	; (800dbf0 <prvCheckForValidListAndQueue+0x78>)
 800dbaa:	2110      	movs	r1, #16
 800dbac:	200a      	movs	r0, #10
 800dbae:	f7fd ffaf 	bl	800bb10 <xQueueGenericCreateStatic>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	4a08      	ldr	r2, [pc, #32]	; (800dbd8 <prvCheckForValidListAndQueue+0x60>)
 800dbb6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dbb8:	4b07      	ldr	r3, [pc, #28]	; (800dbd8 <prvCheckForValidListAndQueue+0x60>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d005      	beq.n	800dbcc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dbc0:	4b05      	ldr	r3, [pc, #20]	; (800dbd8 <prvCheckForValidListAndQueue+0x60>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	490b      	ldr	r1, [pc, #44]	; (800dbf4 <prvCheckForValidListAndQueue+0x7c>)
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7fe fc26 	bl	800c418 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dbcc:	f000 f97a 	bl	800dec4 <vPortExitCritical>
}
 800dbd0:	bf00      	nop
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}
 800dbd6:	bf00      	nop
 800dbd8:	20001cbc 	.word	0x20001cbc
 800dbdc:	20001c8c 	.word	0x20001c8c
 800dbe0:	20001ca0 	.word	0x20001ca0
 800dbe4:	20001cb4 	.word	0x20001cb4
 800dbe8:	20001cb8 	.word	0x20001cb8
 800dbec:	20001d68 	.word	0x20001d68
 800dbf0:	20001cc8 	.word	0x20001cc8
 800dbf4:	0800fb6c 	.word	0x0800fb6c

0800dbf8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b086      	sub	sp, #24
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d10c      	bne.n	800dc24 <pvTimerGetTimerID+0x2c>
	__asm volatile
 800dc0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc0e:	b672      	cpsid	i
 800dc10:	f383 8811 	msr	BASEPRI, r3
 800dc14:	f3bf 8f6f 	isb	sy
 800dc18:	f3bf 8f4f 	dsb	sy
 800dc1c:	b662      	cpsie	i
 800dc1e:	60fb      	str	r3, [r7, #12]
}
 800dc20:	bf00      	nop
 800dc22:	e7fe      	b.n	800dc22 <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800dc24:	f000 f91a 	bl	800de5c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	69db      	ldr	r3, [r3, #28]
 800dc2c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800dc2e:	f000 f949 	bl	800dec4 <vPortExitCritical>

	return pvReturn;
 800dc32:	693b      	ldr	r3, [r7, #16]
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3718      	adds	r7, #24
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}

0800dc3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b085      	sub	sp, #20
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	60f8      	str	r0, [r7, #12]
 800dc44:	60b9      	str	r1, [r7, #8]
 800dc46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	3b04      	subs	r3, #4
 800dc4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dc54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	3b04      	subs	r3, #4
 800dc5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	f023 0201 	bic.w	r2, r3, #1
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	3b04      	subs	r3, #4
 800dc6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dc6c:	4a0c      	ldr	r2, [pc, #48]	; (800dca0 <pxPortInitialiseStack+0x64>)
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	3b14      	subs	r3, #20
 800dc76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dc78:	687a      	ldr	r2, [r7, #4]
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	3b04      	subs	r3, #4
 800dc82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	f06f 0202 	mvn.w	r2, #2
 800dc8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	3b20      	subs	r3, #32
 800dc90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dc92:	68fb      	ldr	r3, [r7, #12]
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3714      	adds	r7, #20
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9e:	4770      	bx	lr
 800dca0:	0800dca5 	.word	0x0800dca5

0800dca4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dca4:	b480      	push	{r7}
 800dca6:	b085      	sub	sp, #20
 800dca8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dcae:	4b14      	ldr	r3, [pc, #80]	; (800dd00 <prvTaskExitError+0x5c>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcb6:	d00c      	beq.n	800dcd2 <prvTaskExitError+0x2e>
	__asm volatile
 800dcb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcbc:	b672      	cpsid	i
 800dcbe:	f383 8811 	msr	BASEPRI, r3
 800dcc2:	f3bf 8f6f 	isb	sy
 800dcc6:	f3bf 8f4f 	dsb	sy
 800dcca:	b662      	cpsie	i
 800dccc:	60fb      	str	r3, [r7, #12]
}
 800dcce:	bf00      	nop
 800dcd0:	e7fe      	b.n	800dcd0 <prvTaskExitError+0x2c>
	__asm volatile
 800dcd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd6:	b672      	cpsid	i
 800dcd8:	f383 8811 	msr	BASEPRI, r3
 800dcdc:	f3bf 8f6f 	isb	sy
 800dce0:	f3bf 8f4f 	dsb	sy
 800dce4:	b662      	cpsie	i
 800dce6:	60bb      	str	r3, [r7, #8]
}
 800dce8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dcea:	bf00      	nop
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d0fc      	beq.n	800dcec <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dcf2:	bf00      	nop
 800dcf4:	bf00      	nop
 800dcf6:	3714      	adds	r7, #20
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr
 800dd00:	20000098 	.word	0x20000098
	...

0800dd10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dd10:	4b07      	ldr	r3, [pc, #28]	; (800dd30 <pxCurrentTCBConst2>)
 800dd12:	6819      	ldr	r1, [r3, #0]
 800dd14:	6808      	ldr	r0, [r1, #0]
 800dd16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd1a:	f380 8809 	msr	PSP, r0
 800dd1e:	f3bf 8f6f 	isb	sy
 800dd22:	f04f 0000 	mov.w	r0, #0
 800dd26:	f380 8811 	msr	BASEPRI, r0
 800dd2a:	4770      	bx	lr
 800dd2c:	f3af 8000 	nop.w

0800dd30 <pxCurrentTCBConst2>:
 800dd30:	2000178c 	.word	0x2000178c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dd34:	bf00      	nop
 800dd36:	bf00      	nop

0800dd38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dd38:	4808      	ldr	r0, [pc, #32]	; (800dd5c <prvPortStartFirstTask+0x24>)
 800dd3a:	6800      	ldr	r0, [r0, #0]
 800dd3c:	6800      	ldr	r0, [r0, #0]
 800dd3e:	f380 8808 	msr	MSP, r0
 800dd42:	f04f 0000 	mov.w	r0, #0
 800dd46:	f380 8814 	msr	CONTROL, r0
 800dd4a:	b662      	cpsie	i
 800dd4c:	b661      	cpsie	f
 800dd4e:	f3bf 8f4f 	dsb	sy
 800dd52:	f3bf 8f6f 	isb	sy
 800dd56:	df00      	svc	0
 800dd58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dd5a:	bf00      	nop
 800dd5c:	e000ed08 	.word	0xe000ed08

0800dd60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b084      	sub	sp, #16
 800dd64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dd66:	4b37      	ldr	r3, [pc, #220]	; (800de44 <xPortStartScheduler+0xe4>)
 800dd68:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	781b      	ldrb	r3, [r3, #0]
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	22ff      	movs	r2, #255	; 0xff
 800dd76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dd80:	78fb      	ldrb	r3, [r7, #3]
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dd88:	b2da      	uxtb	r2, r3
 800dd8a:	4b2f      	ldr	r3, [pc, #188]	; (800de48 <xPortStartScheduler+0xe8>)
 800dd8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dd8e:	4b2f      	ldr	r3, [pc, #188]	; (800de4c <xPortStartScheduler+0xec>)
 800dd90:	2207      	movs	r2, #7
 800dd92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dd94:	e009      	b.n	800ddaa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800dd96:	4b2d      	ldr	r3, [pc, #180]	; (800de4c <xPortStartScheduler+0xec>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	3b01      	subs	r3, #1
 800dd9c:	4a2b      	ldr	r2, [pc, #172]	; (800de4c <xPortStartScheduler+0xec>)
 800dd9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dda0:	78fb      	ldrb	r3, [r7, #3]
 800dda2:	b2db      	uxtb	r3, r3
 800dda4:	005b      	lsls	r3, r3, #1
 800dda6:	b2db      	uxtb	r3, r3
 800dda8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ddaa:	78fb      	ldrb	r3, [r7, #3]
 800ddac:	b2db      	uxtb	r3, r3
 800ddae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddb2:	2b80      	cmp	r3, #128	; 0x80
 800ddb4:	d0ef      	beq.n	800dd96 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ddb6:	4b25      	ldr	r3, [pc, #148]	; (800de4c <xPortStartScheduler+0xec>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	f1c3 0307 	rsb	r3, r3, #7
 800ddbe:	2b04      	cmp	r3, #4
 800ddc0:	d00c      	beq.n	800dddc <xPortStartScheduler+0x7c>
	__asm volatile
 800ddc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc6:	b672      	cpsid	i
 800ddc8:	f383 8811 	msr	BASEPRI, r3
 800ddcc:	f3bf 8f6f 	isb	sy
 800ddd0:	f3bf 8f4f 	dsb	sy
 800ddd4:	b662      	cpsie	i
 800ddd6:	60bb      	str	r3, [r7, #8]
}
 800ddd8:	bf00      	nop
 800ddda:	e7fe      	b.n	800ddda <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dddc:	4b1b      	ldr	r3, [pc, #108]	; (800de4c <xPortStartScheduler+0xec>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	021b      	lsls	r3, r3, #8
 800dde2:	4a1a      	ldr	r2, [pc, #104]	; (800de4c <xPortStartScheduler+0xec>)
 800dde4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dde6:	4b19      	ldr	r3, [pc, #100]	; (800de4c <xPortStartScheduler+0xec>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ddee:	4a17      	ldr	r2, [pc, #92]	; (800de4c <xPortStartScheduler+0xec>)
 800ddf0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	b2da      	uxtb	r2, r3
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ddfa:	4b15      	ldr	r3, [pc, #84]	; (800de50 <xPortStartScheduler+0xf0>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	4a14      	ldr	r2, [pc, #80]	; (800de50 <xPortStartScheduler+0xf0>)
 800de00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800de04:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800de06:	4b12      	ldr	r3, [pc, #72]	; (800de50 <xPortStartScheduler+0xf0>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	4a11      	ldr	r2, [pc, #68]	; (800de50 <xPortStartScheduler+0xf0>)
 800de0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800de10:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800de12:	f000 f8dd 	bl	800dfd0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800de16:	4b0f      	ldr	r3, [pc, #60]	; (800de54 <xPortStartScheduler+0xf4>)
 800de18:	2200      	movs	r2, #0
 800de1a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800de1c:	f000 f8fc 	bl	800e018 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800de20:	4b0d      	ldr	r3, [pc, #52]	; (800de58 <xPortStartScheduler+0xf8>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	4a0c      	ldr	r2, [pc, #48]	; (800de58 <xPortStartScheduler+0xf8>)
 800de26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800de2a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800de2c:	f7ff ff84 	bl	800dd38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800de30:	f7fe ff46 	bl	800ccc0 <vTaskSwitchContext>
	prvTaskExitError();
 800de34:	f7ff ff36 	bl	800dca4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800de38:	2300      	movs	r3, #0
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3710      	adds	r7, #16
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
 800de42:	bf00      	nop
 800de44:	e000e400 	.word	0xe000e400
 800de48:	20001db8 	.word	0x20001db8
 800de4c:	20001dbc 	.word	0x20001dbc
 800de50:	e000ed20 	.word	0xe000ed20
 800de54:	20000098 	.word	0x20000098
 800de58:	e000ef34 	.word	0xe000ef34

0800de5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800de5c:	b480      	push	{r7}
 800de5e:	b083      	sub	sp, #12
 800de60:	af00      	add	r7, sp, #0
	__asm volatile
 800de62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de66:	b672      	cpsid	i
 800de68:	f383 8811 	msr	BASEPRI, r3
 800de6c:	f3bf 8f6f 	isb	sy
 800de70:	f3bf 8f4f 	dsb	sy
 800de74:	b662      	cpsie	i
 800de76:	607b      	str	r3, [r7, #4]
}
 800de78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800de7a:	4b10      	ldr	r3, [pc, #64]	; (800debc <vPortEnterCritical+0x60>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	3301      	adds	r3, #1
 800de80:	4a0e      	ldr	r2, [pc, #56]	; (800debc <vPortEnterCritical+0x60>)
 800de82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800de84:	4b0d      	ldr	r3, [pc, #52]	; (800debc <vPortEnterCritical+0x60>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	2b01      	cmp	r3, #1
 800de8a:	d111      	bne.n	800deb0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800de8c:	4b0c      	ldr	r3, [pc, #48]	; (800dec0 <vPortEnterCritical+0x64>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	b2db      	uxtb	r3, r3
 800de92:	2b00      	cmp	r3, #0
 800de94:	d00c      	beq.n	800deb0 <vPortEnterCritical+0x54>
	__asm volatile
 800de96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de9a:	b672      	cpsid	i
 800de9c:	f383 8811 	msr	BASEPRI, r3
 800dea0:	f3bf 8f6f 	isb	sy
 800dea4:	f3bf 8f4f 	dsb	sy
 800dea8:	b662      	cpsie	i
 800deaa:	603b      	str	r3, [r7, #0]
}
 800deac:	bf00      	nop
 800deae:	e7fe      	b.n	800deae <vPortEnterCritical+0x52>
	}
}
 800deb0:	bf00      	nop
 800deb2:	370c      	adds	r7, #12
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr
 800debc:	20000098 	.word	0x20000098
 800dec0:	e000ed04 	.word	0xe000ed04

0800dec4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dec4:	b480      	push	{r7}
 800dec6:	b083      	sub	sp, #12
 800dec8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800deca:	4b13      	ldr	r3, [pc, #76]	; (800df18 <vPortExitCritical+0x54>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d10c      	bne.n	800deec <vPortExitCritical+0x28>
	__asm volatile
 800ded2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded6:	b672      	cpsid	i
 800ded8:	f383 8811 	msr	BASEPRI, r3
 800dedc:	f3bf 8f6f 	isb	sy
 800dee0:	f3bf 8f4f 	dsb	sy
 800dee4:	b662      	cpsie	i
 800dee6:	607b      	str	r3, [r7, #4]
}
 800dee8:	bf00      	nop
 800deea:	e7fe      	b.n	800deea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800deec:	4b0a      	ldr	r3, [pc, #40]	; (800df18 <vPortExitCritical+0x54>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	3b01      	subs	r3, #1
 800def2:	4a09      	ldr	r2, [pc, #36]	; (800df18 <vPortExitCritical+0x54>)
 800def4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800def6:	4b08      	ldr	r3, [pc, #32]	; (800df18 <vPortExitCritical+0x54>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d105      	bne.n	800df0a <vPortExitCritical+0x46>
 800defe:	2300      	movs	r3, #0
 800df00:	603b      	str	r3, [r7, #0]
	__asm volatile
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	f383 8811 	msr	BASEPRI, r3
}
 800df08:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800df0a:	bf00      	nop
 800df0c:	370c      	adds	r7, #12
 800df0e:	46bd      	mov	sp, r7
 800df10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df14:	4770      	bx	lr
 800df16:	bf00      	nop
 800df18:	20000098 	.word	0x20000098
 800df1c:	00000000 	.word	0x00000000

0800df20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800df20:	f3ef 8009 	mrs	r0, PSP
 800df24:	f3bf 8f6f 	isb	sy
 800df28:	4b15      	ldr	r3, [pc, #84]	; (800df80 <pxCurrentTCBConst>)
 800df2a:	681a      	ldr	r2, [r3, #0]
 800df2c:	f01e 0f10 	tst.w	lr, #16
 800df30:	bf08      	it	eq
 800df32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800df36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df3a:	6010      	str	r0, [r2, #0]
 800df3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800df40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800df44:	b672      	cpsid	i
 800df46:	f380 8811 	msr	BASEPRI, r0
 800df4a:	f3bf 8f4f 	dsb	sy
 800df4e:	f3bf 8f6f 	isb	sy
 800df52:	b662      	cpsie	i
 800df54:	f7fe feb4 	bl	800ccc0 <vTaskSwitchContext>
 800df58:	f04f 0000 	mov.w	r0, #0
 800df5c:	f380 8811 	msr	BASEPRI, r0
 800df60:	bc09      	pop	{r0, r3}
 800df62:	6819      	ldr	r1, [r3, #0]
 800df64:	6808      	ldr	r0, [r1, #0]
 800df66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df6a:	f01e 0f10 	tst.w	lr, #16
 800df6e:	bf08      	it	eq
 800df70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800df74:	f380 8809 	msr	PSP, r0
 800df78:	f3bf 8f6f 	isb	sy
 800df7c:	4770      	bx	lr
 800df7e:	bf00      	nop

0800df80 <pxCurrentTCBConst>:
 800df80:	2000178c 	.word	0x2000178c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800df84:	bf00      	nop
 800df86:	bf00      	nop

0800df88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b082      	sub	sp, #8
 800df8c:	af00      	add	r7, sp, #0
	__asm volatile
 800df8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df92:	b672      	cpsid	i
 800df94:	f383 8811 	msr	BASEPRI, r3
 800df98:	f3bf 8f6f 	isb	sy
 800df9c:	f3bf 8f4f 	dsb	sy
 800dfa0:	b662      	cpsie	i
 800dfa2:	607b      	str	r3, [r7, #4]
}
 800dfa4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dfa6:	f7fe fdcf 	bl	800cb48 <xTaskIncrementTick>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d003      	beq.n	800dfb8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dfb0:	4b06      	ldr	r3, [pc, #24]	; (800dfcc <SysTick_Handler+0x44>)
 800dfb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfb6:	601a      	str	r2, [r3, #0]
 800dfb8:	2300      	movs	r3, #0
 800dfba:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	f383 8811 	msr	BASEPRI, r3
}
 800dfc2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dfc4:	bf00      	nop
 800dfc6:	3708      	adds	r7, #8
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}
 800dfcc:	e000ed04 	.word	0xe000ed04

0800dfd0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dfd0:	b480      	push	{r7}
 800dfd2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dfd4:	4b0b      	ldr	r3, [pc, #44]	; (800e004 <vPortSetupTimerInterrupt+0x34>)
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dfda:	4b0b      	ldr	r3, [pc, #44]	; (800e008 <vPortSetupTimerInterrupt+0x38>)
 800dfdc:	2200      	movs	r2, #0
 800dfde:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dfe0:	4b0a      	ldr	r3, [pc, #40]	; (800e00c <vPortSetupTimerInterrupt+0x3c>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	4a0a      	ldr	r2, [pc, #40]	; (800e010 <vPortSetupTimerInterrupt+0x40>)
 800dfe6:	fba2 2303 	umull	r2, r3, r2, r3
 800dfea:	099b      	lsrs	r3, r3, #6
 800dfec:	4a09      	ldr	r2, [pc, #36]	; (800e014 <vPortSetupTimerInterrupt+0x44>)
 800dfee:	3b01      	subs	r3, #1
 800dff0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dff2:	4b04      	ldr	r3, [pc, #16]	; (800e004 <vPortSetupTimerInterrupt+0x34>)
 800dff4:	2207      	movs	r2, #7
 800dff6:	601a      	str	r2, [r3, #0]
}
 800dff8:	bf00      	nop
 800dffa:	46bd      	mov	sp, r7
 800dffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e000:	4770      	bx	lr
 800e002:	bf00      	nop
 800e004:	e000e010 	.word	0xe000e010
 800e008:	e000e018 	.word	0xe000e018
 800e00c:	20000000 	.word	0x20000000
 800e010:	10624dd3 	.word	0x10624dd3
 800e014:	e000e014 	.word	0xe000e014

0800e018 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e018:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e028 <vPortEnableVFP+0x10>
 800e01c:	6801      	ldr	r1, [r0, #0]
 800e01e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e022:	6001      	str	r1, [r0, #0]
 800e024:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e026:	bf00      	nop
 800e028:	e000ed88 	.word	0xe000ed88

0800e02c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e02c:	b480      	push	{r7}
 800e02e:	b085      	sub	sp, #20
 800e030:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e032:	f3ef 8305 	mrs	r3, IPSR
 800e036:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	2b0f      	cmp	r3, #15
 800e03c:	d916      	bls.n	800e06c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e03e:	4a19      	ldr	r2, [pc, #100]	; (800e0a4 <vPortValidateInterruptPriority+0x78>)
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	4413      	add	r3, r2
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e048:	4b17      	ldr	r3, [pc, #92]	; (800e0a8 <vPortValidateInterruptPriority+0x7c>)
 800e04a:	781b      	ldrb	r3, [r3, #0]
 800e04c:	7afa      	ldrb	r2, [r7, #11]
 800e04e:	429a      	cmp	r2, r3
 800e050:	d20c      	bcs.n	800e06c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800e052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e056:	b672      	cpsid	i
 800e058:	f383 8811 	msr	BASEPRI, r3
 800e05c:	f3bf 8f6f 	isb	sy
 800e060:	f3bf 8f4f 	dsb	sy
 800e064:	b662      	cpsie	i
 800e066:	607b      	str	r3, [r7, #4]
}
 800e068:	bf00      	nop
 800e06a:	e7fe      	b.n	800e06a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e06c:	4b0f      	ldr	r3, [pc, #60]	; (800e0ac <vPortValidateInterruptPriority+0x80>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e074:	4b0e      	ldr	r3, [pc, #56]	; (800e0b0 <vPortValidateInterruptPriority+0x84>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	429a      	cmp	r2, r3
 800e07a:	d90c      	bls.n	800e096 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800e07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e080:	b672      	cpsid	i
 800e082:	f383 8811 	msr	BASEPRI, r3
 800e086:	f3bf 8f6f 	isb	sy
 800e08a:	f3bf 8f4f 	dsb	sy
 800e08e:	b662      	cpsie	i
 800e090:	603b      	str	r3, [r7, #0]
}
 800e092:	bf00      	nop
 800e094:	e7fe      	b.n	800e094 <vPortValidateInterruptPriority+0x68>
	}
 800e096:	bf00      	nop
 800e098:	3714      	adds	r7, #20
 800e09a:	46bd      	mov	sp, r7
 800e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a0:	4770      	bx	lr
 800e0a2:	bf00      	nop
 800e0a4:	e000e3f0 	.word	0xe000e3f0
 800e0a8:	20001db8 	.word	0x20001db8
 800e0ac:	e000ed0c 	.word	0xe000ed0c
 800e0b0:	20001dbc 	.word	0x20001dbc

0800e0b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b08a      	sub	sp, #40	; 0x28
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e0c0:	f7fe fc72 	bl	800c9a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e0c4:	4b5b      	ldr	r3, [pc, #364]	; (800e234 <pvPortMalloc+0x180>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d101      	bne.n	800e0d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e0cc:	f000 f91a 	bl	800e304 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e0d0:	4b59      	ldr	r3, [pc, #356]	; (800e238 <pvPortMalloc+0x184>)
 800e0d2:	681a      	ldr	r2, [r3, #0]
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	4013      	ands	r3, r2
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	f040 8092 	bne.w	800e202 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d01f      	beq.n	800e124 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800e0e4:	2208      	movs	r2, #8
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	4413      	add	r3, r2
 800e0ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f003 0307 	and.w	r3, r3, #7
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d016      	beq.n	800e124 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f023 0307 	bic.w	r3, r3, #7
 800e0fc:	3308      	adds	r3, #8
 800e0fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f003 0307 	and.w	r3, r3, #7
 800e106:	2b00      	cmp	r3, #0
 800e108:	d00c      	beq.n	800e124 <pvPortMalloc+0x70>
	__asm volatile
 800e10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e10e:	b672      	cpsid	i
 800e110:	f383 8811 	msr	BASEPRI, r3
 800e114:	f3bf 8f6f 	isb	sy
 800e118:	f3bf 8f4f 	dsb	sy
 800e11c:	b662      	cpsie	i
 800e11e:	617b      	str	r3, [r7, #20]
}
 800e120:	bf00      	nop
 800e122:	e7fe      	b.n	800e122 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d06b      	beq.n	800e202 <pvPortMalloc+0x14e>
 800e12a:	4b44      	ldr	r3, [pc, #272]	; (800e23c <pvPortMalloc+0x188>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	687a      	ldr	r2, [r7, #4]
 800e130:	429a      	cmp	r2, r3
 800e132:	d866      	bhi.n	800e202 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e134:	4b42      	ldr	r3, [pc, #264]	; (800e240 <pvPortMalloc+0x18c>)
 800e136:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e138:	4b41      	ldr	r3, [pc, #260]	; (800e240 <pvPortMalloc+0x18c>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e13e:	e004      	b.n	800e14a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800e140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e142:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e14c:	685b      	ldr	r3, [r3, #4]
 800e14e:	687a      	ldr	r2, [r7, #4]
 800e150:	429a      	cmp	r2, r3
 800e152:	d903      	bls.n	800e15c <pvPortMalloc+0xa8>
 800e154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d1f1      	bne.n	800e140 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e15c:	4b35      	ldr	r3, [pc, #212]	; (800e234 <pvPortMalloc+0x180>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e162:	429a      	cmp	r2, r3
 800e164:	d04d      	beq.n	800e202 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e166:	6a3b      	ldr	r3, [r7, #32]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	2208      	movs	r2, #8
 800e16c:	4413      	add	r3, r2
 800e16e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	6a3b      	ldr	r3, [r7, #32]
 800e176:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17a:	685a      	ldr	r2, [r3, #4]
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	1ad2      	subs	r2, r2, r3
 800e180:	2308      	movs	r3, #8
 800e182:	005b      	lsls	r3, r3, #1
 800e184:	429a      	cmp	r2, r3
 800e186:	d921      	bls.n	800e1cc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	4413      	add	r3, r2
 800e18e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e190:	69bb      	ldr	r3, [r7, #24]
 800e192:	f003 0307 	and.w	r3, r3, #7
 800e196:	2b00      	cmp	r3, #0
 800e198:	d00c      	beq.n	800e1b4 <pvPortMalloc+0x100>
	__asm volatile
 800e19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e19e:	b672      	cpsid	i
 800e1a0:	f383 8811 	msr	BASEPRI, r3
 800e1a4:	f3bf 8f6f 	isb	sy
 800e1a8:	f3bf 8f4f 	dsb	sy
 800e1ac:	b662      	cpsie	i
 800e1ae:	613b      	str	r3, [r7, #16]
}
 800e1b0:	bf00      	nop
 800e1b2:	e7fe      	b.n	800e1b2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b6:	685a      	ldr	r2, [r3, #4]
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	1ad2      	subs	r2, r2, r3
 800e1bc:	69bb      	ldr	r3, [r7, #24]
 800e1be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c2:	687a      	ldr	r2, [r7, #4]
 800e1c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e1c6:	69b8      	ldr	r0, [r7, #24]
 800e1c8:	f000 f8fe 	bl	800e3c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e1cc:	4b1b      	ldr	r3, [pc, #108]	; (800e23c <pvPortMalloc+0x188>)
 800e1ce:	681a      	ldr	r2, [r3, #0]
 800e1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d2:	685b      	ldr	r3, [r3, #4]
 800e1d4:	1ad3      	subs	r3, r2, r3
 800e1d6:	4a19      	ldr	r2, [pc, #100]	; (800e23c <pvPortMalloc+0x188>)
 800e1d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e1da:	4b18      	ldr	r3, [pc, #96]	; (800e23c <pvPortMalloc+0x188>)
 800e1dc:	681a      	ldr	r2, [r3, #0]
 800e1de:	4b19      	ldr	r3, [pc, #100]	; (800e244 <pvPortMalloc+0x190>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	429a      	cmp	r2, r3
 800e1e4:	d203      	bcs.n	800e1ee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e1e6:	4b15      	ldr	r3, [pc, #84]	; (800e23c <pvPortMalloc+0x188>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	4a16      	ldr	r2, [pc, #88]	; (800e244 <pvPortMalloc+0x190>)
 800e1ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f0:	685a      	ldr	r2, [r3, #4]
 800e1f2:	4b11      	ldr	r3, [pc, #68]	; (800e238 <pvPortMalloc+0x184>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	431a      	orrs	r2, r3
 800e1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fe:	2200      	movs	r2, #0
 800e200:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e202:	f7fe fbdf 	bl	800c9c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e206:	69fb      	ldr	r3, [r7, #28]
 800e208:	f003 0307 	and.w	r3, r3, #7
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d00c      	beq.n	800e22a <pvPortMalloc+0x176>
	__asm volatile
 800e210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e214:	b672      	cpsid	i
 800e216:	f383 8811 	msr	BASEPRI, r3
 800e21a:	f3bf 8f6f 	isb	sy
 800e21e:	f3bf 8f4f 	dsb	sy
 800e222:	b662      	cpsie	i
 800e224:	60fb      	str	r3, [r7, #12]
}
 800e226:	bf00      	nop
 800e228:	e7fe      	b.n	800e228 <pvPortMalloc+0x174>
	return pvReturn;
 800e22a:	69fb      	ldr	r3, [r7, #28]
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3728      	adds	r7, #40	; 0x28
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}
 800e234:	200059c8 	.word	0x200059c8
 800e238:	200059d4 	.word	0x200059d4
 800e23c:	200059cc 	.word	0x200059cc
 800e240:	200059c0 	.word	0x200059c0
 800e244:	200059d0 	.word	0x200059d0

0800e248 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b086      	sub	sp, #24
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d04c      	beq.n	800e2f4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e25a:	2308      	movs	r3, #8
 800e25c:	425b      	negs	r3, r3
 800e25e:	697a      	ldr	r2, [r7, #20]
 800e260:	4413      	add	r3, r2
 800e262:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	685a      	ldr	r2, [r3, #4]
 800e26c:	4b23      	ldr	r3, [pc, #140]	; (800e2fc <vPortFree+0xb4>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	4013      	ands	r3, r2
 800e272:	2b00      	cmp	r3, #0
 800e274:	d10c      	bne.n	800e290 <vPortFree+0x48>
	__asm volatile
 800e276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e27a:	b672      	cpsid	i
 800e27c:	f383 8811 	msr	BASEPRI, r3
 800e280:	f3bf 8f6f 	isb	sy
 800e284:	f3bf 8f4f 	dsb	sy
 800e288:	b662      	cpsie	i
 800e28a:	60fb      	str	r3, [r7, #12]
}
 800e28c:	bf00      	nop
 800e28e:	e7fe      	b.n	800e28e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d00c      	beq.n	800e2b2 <vPortFree+0x6a>
	__asm volatile
 800e298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e29c:	b672      	cpsid	i
 800e29e:	f383 8811 	msr	BASEPRI, r3
 800e2a2:	f3bf 8f6f 	isb	sy
 800e2a6:	f3bf 8f4f 	dsb	sy
 800e2aa:	b662      	cpsie	i
 800e2ac:	60bb      	str	r3, [r7, #8]
}
 800e2ae:	bf00      	nop
 800e2b0:	e7fe      	b.n	800e2b0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	685a      	ldr	r2, [r3, #4]
 800e2b6:	4b11      	ldr	r3, [pc, #68]	; (800e2fc <vPortFree+0xb4>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	4013      	ands	r3, r2
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d019      	beq.n	800e2f4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e2c0:	693b      	ldr	r3, [r7, #16]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d115      	bne.n	800e2f4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e2c8:	693b      	ldr	r3, [r7, #16]
 800e2ca:	685a      	ldr	r2, [r3, #4]
 800e2cc:	4b0b      	ldr	r3, [pc, #44]	; (800e2fc <vPortFree+0xb4>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	43db      	mvns	r3, r3
 800e2d2:	401a      	ands	r2, r3
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e2d8:	f7fe fb66 	bl	800c9a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	685a      	ldr	r2, [r3, #4]
 800e2e0:	4b07      	ldr	r3, [pc, #28]	; (800e300 <vPortFree+0xb8>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	4413      	add	r3, r2
 800e2e6:	4a06      	ldr	r2, [pc, #24]	; (800e300 <vPortFree+0xb8>)
 800e2e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e2ea:	6938      	ldr	r0, [r7, #16]
 800e2ec:	f000 f86c 	bl	800e3c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e2f0:	f7fe fb68 	bl	800c9c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e2f4:	bf00      	nop
 800e2f6:	3718      	adds	r7, #24
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}
 800e2fc:	200059d4 	.word	0x200059d4
 800e300:	200059cc 	.word	0x200059cc

0800e304 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e304:	b480      	push	{r7}
 800e306:	b085      	sub	sp, #20
 800e308:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e30a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e30e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e310:	4b27      	ldr	r3, [pc, #156]	; (800e3b0 <prvHeapInit+0xac>)
 800e312:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f003 0307 	and.w	r3, r3, #7
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d00c      	beq.n	800e338 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	3307      	adds	r3, #7
 800e322:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	f023 0307 	bic.w	r3, r3, #7
 800e32a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e32c:	68ba      	ldr	r2, [r7, #8]
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	1ad3      	subs	r3, r2, r3
 800e332:	4a1f      	ldr	r2, [pc, #124]	; (800e3b0 <prvHeapInit+0xac>)
 800e334:	4413      	add	r3, r2
 800e336:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e33c:	4a1d      	ldr	r2, [pc, #116]	; (800e3b4 <prvHeapInit+0xb0>)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e342:	4b1c      	ldr	r3, [pc, #112]	; (800e3b4 <prvHeapInit+0xb0>)
 800e344:	2200      	movs	r2, #0
 800e346:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	68ba      	ldr	r2, [r7, #8]
 800e34c:	4413      	add	r3, r2
 800e34e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e350:	2208      	movs	r2, #8
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	1a9b      	subs	r3, r3, r2
 800e356:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f023 0307 	bic.w	r3, r3, #7
 800e35e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	4a15      	ldr	r2, [pc, #84]	; (800e3b8 <prvHeapInit+0xb4>)
 800e364:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e366:	4b14      	ldr	r3, [pc, #80]	; (800e3b8 <prvHeapInit+0xb4>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	2200      	movs	r2, #0
 800e36c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e36e:	4b12      	ldr	r3, [pc, #72]	; (800e3b8 <prvHeapInit+0xb4>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	2200      	movs	r2, #0
 800e374:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	68fa      	ldr	r2, [r7, #12]
 800e37e:	1ad2      	subs	r2, r2, r3
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e384:	4b0c      	ldr	r3, [pc, #48]	; (800e3b8 <prvHeapInit+0xb4>)
 800e386:	681a      	ldr	r2, [r3, #0]
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	685b      	ldr	r3, [r3, #4]
 800e390:	4a0a      	ldr	r2, [pc, #40]	; (800e3bc <prvHeapInit+0xb8>)
 800e392:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	4a09      	ldr	r2, [pc, #36]	; (800e3c0 <prvHeapInit+0xbc>)
 800e39a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e39c:	4b09      	ldr	r3, [pc, #36]	; (800e3c4 <prvHeapInit+0xc0>)
 800e39e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e3a2:	601a      	str	r2, [r3, #0]
}
 800e3a4:	bf00      	nop
 800e3a6:	3714      	adds	r7, #20
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ae:	4770      	bx	lr
 800e3b0:	20001dc0 	.word	0x20001dc0
 800e3b4:	200059c0 	.word	0x200059c0
 800e3b8:	200059c8 	.word	0x200059c8
 800e3bc:	200059d0 	.word	0x200059d0
 800e3c0:	200059cc 	.word	0x200059cc
 800e3c4:	200059d4 	.word	0x200059d4

0800e3c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b085      	sub	sp, #20
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e3d0:	4b28      	ldr	r3, [pc, #160]	; (800e474 <prvInsertBlockIntoFreeList+0xac>)
 800e3d2:	60fb      	str	r3, [r7, #12]
 800e3d4:	e002      	b.n	800e3dc <prvInsertBlockIntoFreeList+0x14>
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	60fb      	str	r3, [r7, #12]
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	687a      	ldr	r2, [r7, #4]
 800e3e2:	429a      	cmp	r2, r3
 800e3e4:	d8f7      	bhi.n	800e3d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	685b      	ldr	r3, [r3, #4]
 800e3ee:	68ba      	ldr	r2, [r7, #8]
 800e3f0:	4413      	add	r3, r2
 800e3f2:	687a      	ldr	r2, [r7, #4]
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	d108      	bne.n	800e40a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	685a      	ldr	r2, [r3, #4]
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	685b      	ldr	r3, [r3, #4]
 800e400:	441a      	add	r2, r3
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	685b      	ldr	r3, [r3, #4]
 800e412:	68ba      	ldr	r2, [r7, #8]
 800e414:	441a      	add	r2, r3
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d118      	bne.n	800e450 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	4b15      	ldr	r3, [pc, #84]	; (800e478 <prvInsertBlockIntoFreeList+0xb0>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	429a      	cmp	r2, r3
 800e428:	d00d      	beq.n	800e446 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	685a      	ldr	r2, [r3, #4]
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	685b      	ldr	r3, [r3, #4]
 800e434:	441a      	add	r2, r3
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	681a      	ldr	r2, [r3, #0]
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	601a      	str	r2, [r3, #0]
 800e444:	e008      	b.n	800e458 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e446:	4b0c      	ldr	r3, [pc, #48]	; (800e478 <prvInsertBlockIntoFreeList+0xb0>)
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	601a      	str	r2, [r3, #0]
 800e44e:	e003      	b.n	800e458 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681a      	ldr	r2, [r3, #0]
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e458:	68fa      	ldr	r2, [r7, #12]
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	429a      	cmp	r2, r3
 800e45e:	d002      	beq.n	800e466 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e466:	bf00      	nop
 800e468:	3714      	adds	r7, #20
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr
 800e472:	bf00      	nop
 800e474:	200059c0 	.word	0x200059c0
 800e478:	200059c8 	.word	0x200059c8

0800e47c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e480:	2200      	movs	r2, #0
 800e482:	4912      	ldr	r1, [pc, #72]	; (800e4cc <MX_USB_DEVICE_Init+0x50>)
 800e484:	4812      	ldr	r0, [pc, #72]	; (800e4d0 <MX_USB_DEVICE_Init+0x54>)
 800e486:	f7fb fc6f 	bl	8009d68 <USBD_Init>
 800e48a:	4603      	mov	r3, r0
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d001      	beq.n	800e494 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e490:	f7f3 ffe2 	bl	8002458 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e494:	490f      	ldr	r1, [pc, #60]	; (800e4d4 <MX_USB_DEVICE_Init+0x58>)
 800e496:	480e      	ldr	r0, [pc, #56]	; (800e4d0 <MX_USB_DEVICE_Init+0x54>)
 800e498:	f7fb fc96 	bl	8009dc8 <USBD_RegisterClass>
 800e49c:	4603      	mov	r3, r0
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d001      	beq.n	800e4a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e4a2:	f7f3 ffd9 	bl	8002458 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e4a6:	490c      	ldr	r1, [pc, #48]	; (800e4d8 <MX_USB_DEVICE_Init+0x5c>)
 800e4a8:	4809      	ldr	r0, [pc, #36]	; (800e4d0 <MX_USB_DEVICE_Init+0x54>)
 800e4aa:	f7fb fbcd 	bl	8009c48 <USBD_CDC_RegisterInterface>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d001      	beq.n	800e4b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e4b4:	f7f3 ffd0 	bl	8002458 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e4b8:	4805      	ldr	r0, [pc, #20]	; (800e4d0 <MX_USB_DEVICE_Init+0x54>)
 800e4ba:	f7fb fcbb 	bl	8009e34 <USBD_Start>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d001      	beq.n	800e4c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e4c4:	f7f3 ffc8 	bl	8002458 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e4c8:	bf00      	nop
 800e4ca:	bd80      	pop	{r7, pc}
 800e4cc:	200000b0 	.word	0x200000b0
 800e4d0:	200059d8 	.word	0x200059d8
 800e4d4:	20000018 	.word	0x20000018
 800e4d8:	2000009c 	.word	0x2000009c

0800e4dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	4905      	ldr	r1, [pc, #20]	; (800e4f8 <CDC_Init_FS+0x1c>)
 800e4e4:	4805      	ldr	r0, [pc, #20]	; (800e4fc <CDC_Init_FS+0x20>)
 800e4e6:	f7fb fbc9 	bl	8009c7c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e4ea:	4905      	ldr	r1, [pc, #20]	; (800e500 <CDC_Init_FS+0x24>)
 800e4ec:	4803      	ldr	r0, [pc, #12]	; (800e4fc <CDC_Init_FS+0x20>)
 800e4ee:	f7fb fbe7 	bl	8009cc0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e4f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	bd80      	pop	{r7, pc}
 800e4f8:	200064b4 	.word	0x200064b4
 800e4fc:	200059d8 	.word	0x200059d8
 800e500:	20005cb4 	.word	0x20005cb4

0800e504 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e504:	b480      	push	{r7}
 800e506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e508:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	46bd      	mov	sp, r7
 800e50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e512:	4770      	bx	lr

0800e514 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e514:	b480      	push	{r7}
 800e516:	b083      	sub	sp, #12
 800e518:	af00      	add	r7, sp, #0
 800e51a:	4603      	mov	r3, r0
 800e51c:	6039      	str	r1, [r7, #0]
 800e51e:	71fb      	strb	r3, [r7, #7]
 800e520:	4613      	mov	r3, r2
 800e522:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e524:	79fb      	ldrb	r3, [r7, #7]
 800e526:	2b23      	cmp	r3, #35	; 0x23
 800e528:	d84a      	bhi.n	800e5c0 <CDC_Control_FS+0xac>
 800e52a:	a201      	add	r2, pc, #4	; (adr r2, 800e530 <CDC_Control_FS+0x1c>)
 800e52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e530:	0800e5c1 	.word	0x0800e5c1
 800e534:	0800e5c1 	.word	0x0800e5c1
 800e538:	0800e5c1 	.word	0x0800e5c1
 800e53c:	0800e5c1 	.word	0x0800e5c1
 800e540:	0800e5c1 	.word	0x0800e5c1
 800e544:	0800e5c1 	.word	0x0800e5c1
 800e548:	0800e5c1 	.word	0x0800e5c1
 800e54c:	0800e5c1 	.word	0x0800e5c1
 800e550:	0800e5c1 	.word	0x0800e5c1
 800e554:	0800e5c1 	.word	0x0800e5c1
 800e558:	0800e5c1 	.word	0x0800e5c1
 800e55c:	0800e5c1 	.word	0x0800e5c1
 800e560:	0800e5c1 	.word	0x0800e5c1
 800e564:	0800e5c1 	.word	0x0800e5c1
 800e568:	0800e5c1 	.word	0x0800e5c1
 800e56c:	0800e5c1 	.word	0x0800e5c1
 800e570:	0800e5c1 	.word	0x0800e5c1
 800e574:	0800e5c1 	.word	0x0800e5c1
 800e578:	0800e5c1 	.word	0x0800e5c1
 800e57c:	0800e5c1 	.word	0x0800e5c1
 800e580:	0800e5c1 	.word	0x0800e5c1
 800e584:	0800e5c1 	.word	0x0800e5c1
 800e588:	0800e5c1 	.word	0x0800e5c1
 800e58c:	0800e5c1 	.word	0x0800e5c1
 800e590:	0800e5c1 	.word	0x0800e5c1
 800e594:	0800e5c1 	.word	0x0800e5c1
 800e598:	0800e5c1 	.word	0x0800e5c1
 800e59c:	0800e5c1 	.word	0x0800e5c1
 800e5a0:	0800e5c1 	.word	0x0800e5c1
 800e5a4:	0800e5c1 	.word	0x0800e5c1
 800e5a8:	0800e5c1 	.word	0x0800e5c1
 800e5ac:	0800e5c1 	.word	0x0800e5c1
 800e5b0:	0800e5c1 	.word	0x0800e5c1
 800e5b4:	0800e5c1 	.word	0x0800e5c1
 800e5b8:	0800e5c1 	.word	0x0800e5c1
 800e5bc:	0800e5c1 	.word	0x0800e5c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e5c0:	bf00      	nop
  }

  return (USBD_OK);
 800e5c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	370c      	adds	r7, #12
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ce:	4770      	bx	lr

0800e5d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b08a      	sub	sp, #40	; 0x28
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
 800e5d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e5da:	6879      	ldr	r1, [r7, #4]
 800e5dc:	480b      	ldr	r0, [pc, #44]	; (800e60c <CDC_Receive_FS+0x3c>)
 800e5de:	f7fb fb6f 	bl	8009cc0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e5e2:	480a      	ldr	r0, [pc, #40]	; (800e60c <CDC_Receive_FS+0x3c>)
 800e5e4:	f7fb fb8a 	bl	8009cfc <USBD_CDC_ReceivePacket>
  //uint8_t *data = "Hello World from USB CDC\n";
  uint8_t * command[8];
  //strcpy(command, Buf);
  //command[*Len] = "\0";
  SEGGER_SYSVIEW_PrintfHost("%d\n", *Len );
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	4808      	ldr	r0, [pc, #32]	; (800e610 <CDC_Receive_FS+0x40>)
 800e5f0:	f7f3 f9f2 	bl	80019d8 <SEGGER_SYSVIEW_PrintfHost>

  //SEGGER_SYSVIEW_PrintfHost(command);

  xQueueSendFromISR(commandQueueHandle, Buf, 100);
 800e5f4:	4b07      	ldr	r3, [pc, #28]	; (800e614 <CDC_Receive_FS+0x44>)
 800e5f6:	6818      	ldr	r0, [r3, #0]
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	2264      	movs	r2, #100	; 0x64
 800e5fc:	6879      	ldr	r1, [r7, #4]
 800e5fe:	f7fd fc75 	bl	800beec <xQueueGenericSendFromISR>



  return (USBD_OK);
 800e602:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e604:	4618      	mov	r0, r3
 800e606:	3728      	adds	r7, #40	; 0x28
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}
 800e60c:	200059d8 	.word	0x200059d8
 800e610:	0800fb74 	.word	0x0800fb74
 800e614:	20000f90 	.word	0x20000f90

0800e618 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e618:	b480      	push	{r7}
 800e61a:	b087      	sub	sp, #28
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	60f8      	str	r0, [r7, #12]
 800e620:	60b9      	str	r1, [r7, #8]
 800e622:	4613      	mov	r3, r2
 800e624:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e626:	2300      	movs	r3, #0
 800e628:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e62a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e62e:	4618      	mov	r0, r3
 800e630:	371c      	adds	r7, #28
 800e632:	46bd      	mov	sp, r7
 800e634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e638:	4770      	bx	lr
	...

0800e63c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e63c:	b480      	push	{r7}
 800e63e:	b083      	sub	sp, #12
 800e640:	af00      	add	r7, sp, #0
 800e642:	4603      	mov	r3, r0
 800e644:	6039      	str	r1, [r7, #0]
 800e646:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	2212      	movs	r2, #18
 800e64c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e64e:	4b03      	ldr	r3, [pc, #12]	; (800e65c <USBD_FS_DeviceDescriptor+0x20>)
}
 800e650:	4618      	mov	r0, r3
 800e652:	370c      	adds	r7, #12
 800e654:	46bd      	mov	sp, r7
 800e656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65a:	4770      	bx	lr
 800e65c:	200000d0 	.word	0x200000d0

0800e660 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e660:	b480      	push	{r7}
 800e662:	b083      	sub	sp, #12
 800e664:	af00      	add	r7, sp, #0
 800e666:	4603      	mov	r3, r0
 800e668:	6039      	str	r1, [r7, #0]
 800e66a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	2204      	movs	r2, #4
 800e670:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e672:	4b03      	ldr	r3, [pc, #12]	; (800e680 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e674:	4618      	mov	r0, r3
 800e676:	370c      	adds	r7, #12
 800e678:	46bd      	mov	sp, r7
 800e67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67e:	4770      	bx	lr
 800e680:	200000f0 	.word	0x200000f0

0800e684 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b082      	sub	sp, #8
 800e688:	af00      	add	r7, sp, #0
 800e68a:	4603      	mov	r3, r0
 800e68c:	6039      	str	r1, [r7, #0]
 800e68e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e690:	79fb      	ldrb	r3, [r7, #7]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d105      	bne.n	800e6a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e696:	683a      	ldr	r2, [r7, #0]
 800e698:	4907      	ldr	r1, [pc, #28]	; (800e6b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800e69a:	4808      	ldr	r0, [pc, #32]	; (800e6bc <USBD_FS_ProductStrDescriptor+0x38>)
 800e69c:	f7fc fda0 	bl	800b1e0 <USBD_GetString>
 800e6a0:	e004      	b.n	800e6ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e6a2:	683a      	ldr	r2, [r7, #0]
 800e6a4:	4904      	ldr	r1, [pc, #16]	; (800e6b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800e6a6:	4805      	ldr	r0, [pc, #20]	; (800e6bc <USBD_FS_ProductStrDescriptor+0x38>)
 800e6a8:	f7fc fd9a 	bl	800b1e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e6ac:	4b02      	ldr	r3, [pc, #8]	; (800e6b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3708      	adds	r7, #8
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	bf00      	nop
 800e6b8:	20006cb4 	.word	0x20006cb4
 800e6bc:	0800fb78 	.word	0x0800fb78

0800e6c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b082      	sub	sp, #8
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	6039      	str	r1, [r7, #0]
 800e6ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e6cc:	683a      	ldr	r2, [r7, #0]
 800e6ce:	4904      	ldr	r1, [pc, #16]	; (800e6e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e6d0:	4804      	ldr	r0, [pc, #16]	; (800e6e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e6d2:	f7fc fd85 	bl	800b1e0 <USBD_GetString>
  return USBD_StrDesc;
 800e6d6:	4b02      	ldr	r3, [pc, #8]	; (800e6e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3708      	adds	r7, #8
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}
 800e6e0:	20006cb4 	.word	0x20006cb4
 800e6e4:	0800fb90 	.word	0x0800fb90

0800e6e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b082      	sub	sp, #8
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	6039      	str	r1, [r7, #0]
 800e6f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	221a      	movs	r2, #26
 800e6f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e6fa:	f000 f855 	bl	800e7a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e6fe:	4b02      	ldr	r3, [pc, #8]	; (800e708 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e700:	4618      	mov	r0, r3
 800e702:	3708      	adds	r7, #8
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}
 800e708:	200000f4 	.word	0x200000f4

0800e70c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b082      	sub	sp, #8
 800e710:	af00      	add	r7, sp, #0
 800e712:	4603      	mov	r3, r0
 800e714:	6039      	str	r1, [r7, #0]
 800e716:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e718:	79fb      	ldrb	r3, [r7, #7]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d105      	bne.n	800e72a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e71e:	683a      	ldr	r2, [r7, #0]
 800e720:	4907      	ldr	r1, [pc, #28]	; (800e740 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e722:	4808      	ldr	r0, [pc, #32]	; (800e744 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e724:	f7fc fd5c 	bl	800b1e0 <USBD_GetString>
 800e728:	e004      	b.n	800e734 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e72a:	683a      	ldr	r2, [r7, #0]
 800e72c:	4904      	ldr	r1, [pc, #16]	; (800e740 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e72e:	4805      	ldr	r0, [pc, #20]	; (800e744 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e730:	f7fc fd56 	bl	800b1e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e734:	4b02      	ldr	r3, [pc, #8]	; (800e740 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e736:	4618      	mov	r0, r3
 800e738:	3708      	adds	r7, #8
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}
 800e73e:	bf00      	nop
 800e740:	20006cb4 	.word	0x20006cb4
 800e744:	0800fba4 	.word	0x0800fba4

0800e748 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b082      	sub	sp, #8
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	4603      	mov	r3, r0
 800e750:	6039      	str	r1, [r7, #0]
 800e752:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e754:	79fb      	ldrb	r3, [r7, #7]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d105      	bne.n	800e766 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e75a:	683a      	ldr	r2, [r7, #0]
 800e75c:	4907      	ldr	r1, [pc, #28]	; (800e77c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e75e:	4808      	ldr	r0, [pc, #32]	; (800e780 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e760:	f7fc fd3e 	bl	800b1e0 <USBD_GetString>
 800e764:	e004      	b.n	800e770 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e766:	683a      	ldr	r2, [r7, #0]
 800e768:	4904      	ldr	r1, [pc, #16]	; (800e77c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e76a:	4805      	ldr	r0, [pc, #20]	; (800e780 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e76c:	f7fc fd38 	bl	800b1e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e770:	4b02      	ldr	r3, [pc, #8]	; (800e77c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e772:	4618      	mov	r0, r3
 800e774:	3708      	adds	r7, #8
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}
 800e77a:	bf00      	nop
 800e77c:	20006cb4 	.word	0x20006cb4
 800e780:	0800fbb0 	.word	0x0800fbb0

0800e784 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e784:	b480      	push	{r7}
 800e786:	b083      	sub	sp, #12
 800e788:	af00      	add	r7, sp, #0
 800e78a:	4603      	mov	r3, r0
 800e78c:	6039      	str	r1, [r7, #0]
 800e78e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	220c      	movs	r2, #12
 800e794:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800e796:	4b03      	ldr	r3, [pc, #12]	; (800e7a4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800e798:	4618      	mov	r0, r3
 800e79a:	370c      	adds	r7, #12
 800e79c:	46bd      	mov	sp, r7
 800e79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a2:	4770      	bx	lr
 800e7a4:	200000e4 	.word	0x200000e4

0800e7a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b084      	sub	sp, #16
 800e7ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e7ae:	4b0f      	ldr	r3, [pc, #60]	; (800e7ec <Get_SerialNum+0x44>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e7b4:	4b0e      	ldr	r3, [pc, #56]	; (800e7f0 <Get_SerialNum+0x48>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e7ba:	4b0e      	ldr	r3, [pc, #56]	; (800e7f4 <Get_SerialNum+0x4c>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e7c0:	68fa      	ldr	r2, [r7, #12]
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	4413      	add	r3, r2
 800e7c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d009      	beq.n	800e7e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e7ce:	2208      	movs	r2, #8
 800e7d0:	4909      	ldr	r1, [pc, #36]	; (800e7f8 <Get_SerialNum+0x50>)
 800e7d2:	68f8      	ldr	r0, [r7, #12]
 800e7d4:	f000 f814 	bl	800e800 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e7d8:	2204      	movs	r2, #4
 800e7da:	4908      	ldr	r1, [pc, #32]	; (800e7fc <Get_SerialNum+0x54>)
 800e7dc:	68b8      	ldr	r0, [r7, #8]
 800e7de:	f000 f80f 	bl	800e800 <IntToUnicode>
  }
}
 800e7e2:	bf00      	nop
 800e7e4:	3710      	adds	r7, #16
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bd80      	pop	{r7, pc}
 800e7ea:	bf00      	nop
 800e7ec:	1ff0f420 	.word	0x1ff0f420
 800e7f0:	1ff0f424 	.word	0x1ff0f424
 800e7f4:	1ff0f428 	.word	0x1ff0f428
 800e7f8:	200000f6 	.word	0x200000f6
 800e7fc:	20000106 	.word	0x20000106

0800e800 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e800:	b480      	push	{r7}
 800e802:	b087      	sub	sp, #28
 800e804:	af00      	add	r7, sp, #0
 800e806:	60f8      	str	r0, [r7, #12]
 800e808:	60b9      	str	r1, [r7, #8]
 800e80a:	4613      	mov	r3, r2
 800e80c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e80e:	2300      	movs	r3, #0
 800e810:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e812:	2300      	movs	r3, #0
 800e814:	75fb      	strb	r3, [r7, #23]
 800e816:	e027      	b.n	800e868 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	0f1b      	lsrs	r3, r3, #28
 800e81c:	2b09      	cmp	r3, #9
 800e81e:	d80b      	bhi.n	800e838 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	0f1b      	lsrs	r3, r3, #28
 800e824:	b2da      	uxtb	r2, r3
 800e826:	7dfb      	ldrb	r3, [r7, #23]
 800e828:	005b      	lsls	r3, r3, #1
 800e82a:	4619      	mov	r1, r3
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	440b      	add	r3, r1
 800e830:	3230      	adds	r2, #48	; 0x30
 800e832:	b2d2      	uxtb	r2, r2
 800e834:	701a      	strb	r2, [r3, #0]
 800e836:	e00a      	b.n	800e84e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	0f1b      	lsrs	r3, r3, #28
 800e83c:	b2da      	uxtb	r2, r3
 800e83e:	7dfb      	ldrb	r3, [r7, #23]
 800e840:	005b      	lsls	r3, r3, #1
 800e842:	4619      	mov	r1, r3
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	440b      	add	r3, r1
 800e848:	3237      	adds	r2, #55	; 0x37
 800e84a:	b2d2      	uxtb	r2, r2
 800e84c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	011b      	lsls	r3, r3, #4
 800e852:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e854:	7dfb      	ldrb	r3, [r7, #23]
 800e856:	005b      	lsls	r3, r3, #1
 800e858:	3301      	adds	r3, #1
 800e85a:	68ba      	ldr	r2, [r7, #8]
 800e85c:	4413      	add	r3, r2
 800e85e:	2200      	movs	r2, #0
 800e860:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e862:	7dfb      	ldrb	r3, [r7, #23]
 800e864:	3301      	adds	r3, #1
 800e866:	75fb      	strb	r3, [r7, #23]
 800e868:	7dfa      	ldrb	r2, [r7, #23]
 800e86a:	79fb      	ldrb	r3, [r7, #7]
 800e86c:	429a      	cmp	r2, r3
 800e86e:	d3d3      	bcc.n	800e818 <IntToUnicode+0x18>
  }
}
 800e870:	bf00      	nop
 800e872:	bf00      	nop
 800e874:	371c      	adds	r7, #28
 800e876:	46bd      	mov	sp, r7
 800e878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87c:	4770      	bx	lr
	...

0800e880 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b0ae      	sub	sp, #184	; 0xb8
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e888:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e88c:	2200      	movs	r2, #0
 800e88e:	601a      	str	r2, [r3, #0]
 800e890:	605a      	str	r2, [r3, #4]
 800e892:	609a      	str	r2, [r3, #8]
 800e894:	60da      	str	r2, [r3, #12]
 800e896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e898:	f107 0314 	add.w	r3, r7, #20
 800e89c:	2290      	movs	r2, #144	; 0x90
 800e89e:	2100      	movs	r1, #0
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f000 fcc3 	bl	800f22c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e8ae:	d161      	bne.n	800e974 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800e8b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e8b4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e8bc:	f107 0314 	add.w	r3, r7, #20
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7f6 ff29 	bl	8005718 <HAL_RCCEx_PeriphCLKConfig>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d001      	beq.n	800e8d0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800e8cc:	f7f3 fdc4 	bl	8002458 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e8d0:	4b2a      	ldr	r3, [pc, #168]	; (800e97c <HAL_PCD_MspInit+0xfc>)
 800e8d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8d4:	4a29      	ldr	r2, [pc, #164]	; (800e97c <HAL_PCD_MspInit+0xfc>)
 800e8d6:	f043 0301 	orr.w	r3, r3, #1
 800e8da:	6313      	str	r3, [r2, #48]	; 0x30
 800e8dc:	4b27      	ldr	r3, [pc, #156]	; (800e97c <HAL_PCD_MspInit+0xfc>)
 800e8de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8e0:	f003 0301 	and.w	r3, r3, #1
 800e8e4:	613b      	str	r3, [r7, #16]
 800e8e6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800e8e8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800e8ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8f0:	2302      	movs	r3, #2
 800e8f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e8fc:	2303      	movs	r3, #3
 800e8fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e902:	230a      	movs	r3, #10
 800e904:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e908:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e90c:	4619      	mov	r1, r3
 800e90e:	481c      	ldr	r0, [pc, #112]	; (800e980 <HAL_PCD_MspInit+0x100>)
 800e910:	f7f4 fd1e 	bl	8003350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800e914:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e918:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e91c:	2300      	movs	r3, #0
 800e91e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e922:	2300      	movs	r3, #0
 800e924:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800e928:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e92c:	4619      	mov	r1, r3
 800e92e:	4814      	ldr	r0, [pc, #80]	; (800e980 <HAL_PCD_MspInit+0x100>)
 800e930:	f7f4 fd0e 	bl	8003350 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e934:	4b11      	ldr	r3, [pc, #68]	; (800e97c <HAL_PCD_MspInit+0xfc>)
 800e936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e938:	4a10      	ldr	r2, [pc, #64]	; (800e97c <HAL_PCD_MspInit+0xfc>)
 800e93a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e93e:	6353      	str	r3, [r2, #52]	; 0x34
 800e940:	4b0e      	ldr	r3, [pc, #56]	; (800e97c <HAL_PCD_MspInit+0xfc>)
 800e942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e948:	60fb      	str	r3, [r7, #12]
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	4b0b      	ldr	r3, [pc, #44]	; (800e97c <HAL_PCD_MspInit+0xfc>)
 800e94e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e950:	4a0a      	ldr	r2, [pc, #40]	; (800e97c <HAL_PCD_MspInit+0xfc>)
 800e952:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e956:	6453      	str	r3, [r2, #68]	; 0x44
 800e958:	4b08      	ldr	r3, [pc, #32]	; (800e97c <HAL_PCD_MspInit+0xfc>)
 800e95a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e95c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e960:	60bb      	str	r3, [r7, #8]
 800e962:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e964:	2200      	movs	r2, #0
 800e966:	2105      	movs	r1, #5
 800e968:	2043      	movs	r0, #67	; 0x43
 800e96a:	f7f4 f9a1 	bl	8002cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e96e:	2043      	movs	r0, #67	; 0x43
 800e970:	f7f4 f9ba 	bl	8002ce8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e974:	bf00      	nop
 800e976:	37b8      	adds	r7, #184	; 0xb8
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}
 800e97c:	40023800 	.word	0x40023800
 800e980:	40020000 	.word	0x40020000

0800e984 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b082      	sub	sp, #8
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e998:	4619      	mov	r1, r3
 800e99a:	4610      	mov	r0, r2
 800e99c:	f7fb fa97 	bl	8009ece <USBD_LL_SetupStage>
}
 800e9a0:	bf00      	nop
 800e9a2:	3708      	adds	r7, #8
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}

0800e9a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b082      	sub	sp, #8
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	460b      	mov	r3, r1
 800e9b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800e9ba:	78fa      	ldrb	r2, [r7, #3]
 800e9bc:	6879      	ldr	r1, [r7, #4]
 800e9be:	4613      	mov	r3, r2
 800e9c0:	00db      	lsls	r3, r3, #3
 800e9c2:	4413      	add	r3, r2
 800e9c4:	009b      	lsls	r3, r3, #2
 800e9c6:	440b      	add	r3, r1
 800e9c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e9cc:	681a      	ldr	r2, [r3, #0]
 800e9ce:	78fb      	ldrb	r3, [r7, #3]
 800e9d0:	4619      	mov	r1, r3
 800e9d2:	f7fb fad1 	bl	8009f78 <USBD_LL_DataOutStage>
}
 800e9d6:	bf00      	nop
 800e9d8:	3708      	adds	r7, #8
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}

0800e9de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9de:	b580      	push	{r7, lr}
 800e9e0:	b082      	sub	sp, #8
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	6078      	str	r0, [r7, #4]
 800e9e6:	460b      	mov	r3, r1
 800e9e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800e9f0:	78fa      	ldrb	r2, [r7, #3]
 800e9f2:	6879      	ldr	r1, [r7, #4]
 800e9f4:	4613      	mov	r3, r2
 800e9f6:	00db      	lsls	r3, r3, #3
 800e9f8:	4413      	add	r3, r2
 800e9fa:	009b      	lsls	r3, r3, #2
 800e9fc:	440b      	add	r3, r1
 800e9fe:	334c      	adds	r3, #76	; 0x4c
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	78fb      	ldrb	r3, [r7, #3]
 800ea04:	4619      	mov	r1, r3
 800ea06:	f7fb fb6a 	bl	800a0de <USBD_LL_DataInStage>
}
 800ea0a:	bf00      	nop
 800ea0c:	3708      	adds	r7, #8
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}

0800ea12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea12:	b580      	push	{r7, lr}
 800ea14:	b082      	sub	sp, #8
 800ea16:	af00      	add	r7, sp, #0
 800ea18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ea20:	4618      	mov	r0, r3
 800ea22:	f7fb fc9e 	bl	800a362 <USBD_LL_SOF>
}
 800ea26:	bf00      	nop
 800ea28:	3708      	adds	r7, #8
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}

0800ea2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea2e:	b580      	push	{r7, lr}
 800ea30:	b084      	sub	sp, #16
 800ea32:	af00      	add	r7, sp, #0
 800ea34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ea36:	2301      	movs	r3, #1
 800ea38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	68db      	ldr	r3, [r3, #12]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d102      	bne.n	800ea48 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ea42:	2300      	movs	r3, #0
 800ea44:	73fb      	strb	r3, [r7, #15]
 800ea46:	e008      	b.n	800ea5a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	68db      	ldr	r3, [r3, #12]
 800ea4c:	2b02      	cmp	r3, #2
 800ea4e:	d102      	bne.n	800ea56 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ea50:	2301      	movs	r3, #1
 800ea52:	73fb      	strb	r3, [r7, #15]
 800ea54:	e001      	b.n	800ea5a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ea56:	f7f3 fcff 	bl	8002458 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ea60:	7bfa      	ldrb	r2, [r7, #15]
 800ea62:	4611      	mov	r1, r2
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7fb fc3e 	bl	800a2e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ea70:	4618      	mov	r0, r3
 800ea72:	f7fb fbe6 	bl	800a242 <USBD_LL_Reset>
}
 800ea76:	bf00      	nop
 800ea78:	3710      	adds	r7, #16
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}
	...

0800ea80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b082      	sub	sp, #8
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f7fb fc39 	bl	800a306 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	687a      	ldr	r2, [r7, #4]
 800eaa0:	6812      	ldr	r2, [r2, #0]
 800eaa2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800eaa6:	f043 0301 	orr.w	r3, r3, #1
 800eaaa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	6a1b      	ldr	r3, [r3, #32]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d005      	beq.n	800eac0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eab4:	4b04      	ldr	r3, [pc, #16]	; (800eac8 <HAL_PCD_SuspendCallback+0x48>)
 800eab6:	691b      	ldr	r3, [r3, #16]
 800eab8:	4a03      	ldr	r2, [pc, #12]	; (800eac8 <HAL_PCD_SuspendCallback+0x48>)
 800eaba:	f043 0306 	orr.w	r3, r3, #6
 800eabe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800eac0:	bf00      	nop
 800eac2:	3708      	adds	r7, #8
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}
 800eac8:	e000ed00 	.word	0xe000ed00

0800eacc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b082      	sub	sp, #8
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800eada:	4618      	mov	r0, r3
 800eadc:	f7fb fc29 	bl	800a332 <USBD_LL_Resume>
}
 800eae0:	bf00      	nop
 800eae2:	3708      	adds	r7, #8
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bd80      	pop	{r7, pc}

0800eae8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b082      	sub	sp, #8
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
 800eaf0:	460b      	mov	r3, r1
 800eaf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800eafa:	78fa      	ldrb	r2, [r7, #3]
 800eafc:	4611      	mov	r1, r2
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7fb fc81 	bl	800a406 <USBD_LL_IsoOUTIncomplete>
}
 800eb04:	bf00      	nop
 800eb06:	3708      	adds	r7, #8
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}

0800eb0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b082      	sub	sp, #8
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
 800eb14:	460b      	mov	r3, r1
 800eb16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800eb1e:	78fa      	ldrb	r2, [r7, #3]
 800eb20:	4611      	mov	r1, r2
 800eb22:	4618      	mov	r0, r3
 800eb24:	f7fb fc3d 	bl	800a3a2 <USBD_LL_IsoINIncomplete>
}
 800eb28:	bf00      	nop
 800eb2a:	3708      	adds	r7, #8
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}

0800eb30 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b082      	sub	sp, #8
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7fb fc93 	bl	800a46a <USBD_LL_DevConnected>
}
 800eb44:	bf00      	nop
 800eb46:	3708      	adds	r7, #8
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b082      	sub	sp, #8
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f7fb fc90 	bl	800a480 <USBD_LL_DevDisconnected>
}
 800eb60:	bf00      	nop
 800eb62:	3708      	adds	r7, #8
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}

0800eb68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b082      	sub	sp, #8
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	781b      	ldrb	r3, [r3, #0]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d13c      	bne.n	800ebf2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800eb78:	4a20      	ldr	r2, [pc, #128]	; (800ebfc <USBD_LL_Init+0x94>)
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	4a1e      	ldr	r2, [pc, #120]	; (800ebfc <USBD_LL_Init+0x94>)
 800eb84:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800eb88:	4b1c      	ldr	r3, [pc, #112]	; (800ebfc <USBD_LL_Init+0x94>)
 800eb8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800eb8e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800eb90:	4b1a      	ldr	r3, [pc, #104]	; (800ebfc <USBD_LL_Init+0x94>)
 800eb92:	2206      	movs	r2, #6
 800eb94:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800eb96:	4b19      	ldr	r3, [pc, #100]	; (800ebfc <USBD_LL_Init+0x94>)
 800eb98:	2202      	movs	r2, #2
 800eb9a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800eb9c:	4b17      	ldr	r3, [pc, #92]	; (800ebfc <USBD_LL_Init+0x94>)
 800eb9e:	2200      	movs	r2, #0
 800eba0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800eba2:	4b16      	ldr	r3, [pc, #88]	; (800ebfc <USBD_LL_Init+0x94>)
 800eba4:	2202      	movs	r2, #2
 800eba6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800eba8:	4b14      	ldr	r3, [pc, #80]	; (800ebfc <USBD_LL_Init+0x94>)
 800ebaa:	2201      	movs	r2, #1
 800ebac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ebae:	4b13      	ldr	r3, [pc, #76]	; (800ebfc <USBD_LL_Init+0x94>)
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ebb4:	4b11      	ldr	r3, [pc, #68]	; (800ebfc <USBD_LL_Init+0x94>)
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800ebba:	4b10      	ldr	r3, [pc, #64]	; (800ebfc <USBD_LL_Init+0x94>)
 800ebbc:	2201      	movs	r2, #1
 800ebbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ebc0:	4b0e      	ldr	r3, [pc, #56]	; (800ebfc <USBD_LL_Init+0x94>)
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ebc6:	480d      	ldr	r0, [pc, #52]	; (800ebfc <USBD_LL_Init+0x94>)
 800ebc8:	f7f4 fd87 	bl	80036da <HAL_PCD_Init>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d001      	beq.n	800ebd6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ebd2:	f7f3 fc41 	bl	8002458 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ebd6:	2180      	movs	r1, #128	; 0x80
 800ebd8:	4808      	ldr	r0, [pc, #32]	; (800ebfc <USBD_LL_Init+0x94>)
 800ebda:	f7f6 f802 	bl	8004be2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ebde:	2240      	movs	r2, #64	; 0x40
 800ebe0:	2100      	movs	r1, #0
 800ebe2:	4806      	ldr	r0, [pc, #24]	; (800ebfc <USBD_LL_Init+0x94>)
 800ebe4:	f7f5 ffb6 	bl	8004b54 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ebe8:	2280      	movs	r2, #128	; 0x80
 800ebea:	2101      	movs	r1, #1
 800ebec:	4803      	ldr	r0, [pc, #12]	; (800ebfc <USBD_LL_Init+0x94>)
 800ebee:	f7f5 ffb1 	bl	8004b54 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ebf2:	2300      	movs	r3, #0
}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	3708      	adds	r7, #8
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}
 800ebfc:	20006eb4 	.word	0x20006eb4

0800ec00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b084      	sub	sp, #16
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec08:	2300      	movs	r3, #0
 800ec0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7f4 fe83 	bl	8003922 <HAL_PCD_Start>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec20:	7bfb      	ldrb	r3, [r7, #15]
 800ec22:	4618      	mov	r0, r3
 800ec24:	f000 f97e 	bl	800ef24 <USBD_Get_USB_Status>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3710      	adds	r7, #16
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}

0800ec36 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ec36:	b580      	push	{r7, lr}
 800ec38:	b084      	sub	sp, #16
 800ec3a:	af00      	add	r7, sp, #0
 800ec3c:	6078      	str	r0, [r7, #4]
 800ec3e:	4608      	mov	r0, r1
 800ec40:	4611      	mov	r1, r2
 800ec42:	461a      	mov	r2, r3
 800ec44:	4603      	mov	r3, r0
 800ec46:	70fb      	strb	r3, [r7, #3]
 800ec48:	460b      	mov	r3, r1
 800ec4a:	70bb      	strb	r3, [r7, #2]
 800ec4c:	4613      	mov	r3, r2
 800ec4e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec50:	2300      	movs	r3, #0
 800ec52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec54:	2300      	movs	r3, #0
 800ec56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ec5e:	78bb      	ldrb	r3, [r7, #2]
 800ec60:	883a      	ldrh	r2, [r7, #0]
 800ec62:	78f9      	ldrb	r1, [r7, #3]
 800ec64:	f7f5 fb70 	bl	8004348 <HAL_PCD_EP_Open>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec6c:	7bfb      	ldrb	r3, [r7, #15]
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f000 f958 	bl	800ef24 <USBD_Get_USB_Status>
 800ec74:	4603      	mov	r3, r0
 800ec76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec78:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3710      	adds	r7, #16
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}

0800ec82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec82:	b580      	push	{r7, lr}
 800ec84:	b084      	sub	sp, #16
 800ec86:	af00      	add	r7, sp, #0
 800ec88:	6078      	str	r0, [r7, #4]
 800ec8a:	460b      	mov	r3, r1
 800ec8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec92:	2300      	movs	r3, #0
 800ec94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec9c:	78fa      	ldrb	r2, [r7, #3]
 800ec9e:	4611      	mov	r1, r2
 800eca0:	4618      	mov	r0, r3
 800eca2:	f7f5 fbb9 	bl	8004418 <HAL_PCD_EP_Close>
 800eca6:	4603      	mov	r3, r0
 800eca8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecaa:	7bfb      	ldrb	r3, [r7, #15]
 800ecac:	4618      	mov	r0, r3
 800ecae:	f000 f939 	bl	800ef24 <USBD_Get_USB_Status>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecb6:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecb8:	4618      	mov	r0, r3
 800ecba:	3710      	adds	r7, #16
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd80      	pop	{r7, pc}

0800ecc0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b084      	sub	sp, #16
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
 800ecc8:	460b      	mov	r3, r1
 800ecca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eccc:	2300      	movs	r3, #0
 800ecce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ecda:	78fa      	ldrb	r2, [r7, #3]
 800ecdc:	4611      	mov	r1, r2
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7f5 fc91 	bl	8004606 <HAL_PCD_EP_SetStall>
 800ece4:	4603      	mov	r3, r0
 800ece6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ece8:	7bfb      	ldrb	r3, [r7, #15]
 800ecea:	4618      	mov	r0, r3
 800ecec:	f000 f91a 	bl	800ef24 <USBD_Get_USB_Status>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3710      	adds	r7, #16
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}

0800ecfe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ecfe:	b580      	push	{r7, lr}
 800ed00:	b084      	sub	sp, #16
 800ed02:	af00      	add	r7, sp, #0
 800ed04:	6078      	str	r0, [r7, #4]
 800ed06:	460b      	mov	r3, r1
 800ed08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ed18:	78fa      	ldrb	r2, [r7, #3]
 800ed1a:	4611      	mov	r1, r2
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7f5 fcd6 	bl	80046ce <HAL_PCD_EP_ClrStall>
 800ed22:	4603      	mov	r3, r0
 800ed24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed26:	7bfb      	ldrb	r3, [r7, #15]
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f000 f8fb 	bl	800ef24 <USBD_Get_USB_Status>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed32:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	3710      	adds	r7, #16
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}

0800ed3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b085      	sub	sp, #20
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
 800ed44:	460b      	mov	r3, r1
 800ed46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ed4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ed50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	da0b      	bge.n	800ed70 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ed58:	78fb      	ldrb	r3, [r7, #3]
 800ed5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed5e:	68f9      	ldr	r1, [r7, #12]
 800ed60:	4613      	mov	r3, r2
 800ed62:	00db      	lsls	r3, r3, #3
 800ed64:	4413      	add	r3, r2
 800ed66:	009b      	lsls	r3, r3, #2
 800ed68:	440b      	add	r3, r1
 800ed6a:	333e      	adds	r3, #62	; 0x3e
 800ed6c:	781b      	ldrb	r3, [r3, #0]
 800ed6e:	e00b      	b.n	800ed88 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ed70:	78fb      	ldrb	r3, [r7, #3]
 800ed72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed76:	68f9      	ldr	r1, [r7, #12]
 800ed78:	4613      	mov	r3, r2
 800ed7a:	00db      	lsls	r3, r3, #3
 800ed7c:	4413      	add	r3, r2
 800ed7e:	009b      	lsls	r3, r3, #2
 800ed80:	440b      	add	r3, r1
 800ed82:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ed86:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ed88:	4618      	mov	r0, r3
 800ed8a:	3714      	adds	r7, #20
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed92:	4770      	bx	lr

0800ed94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b084      	sub	sp, #16
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
 800ed9c:	460b      	mov	r3, r1
 800ed9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eda0:	2300      	movs	r3, #0
 800eda2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eda4:	2300      	movs	r3, #0
 800eda6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800edae:	78fa      	ldrb	r2, [r7, #3]
 800edb0:	4611      	mov	r1, r2
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7f5 faa3 	bl	80042fe <HAL_PCD_SetAddress>
 800edb8:	4603      	mov	r3, r0
 800edba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edbc:	7bfb      	ldrb	r3, [r7, #15]
 800edbe:	4618      	mov	r0, r3
 800edc0:	f000 f8b0 	bl	800ef24 <USBD_Get_USB_Status>
 800edc4:	4603      	mov	r3, r0
 800edc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800edca:	4618      	mov	r0, r3
 800edcc:	3710      	adds	r7, #16
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}

0800edd2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800edd2:	b580      	push	{r7, lr}
 800edd4:	b086      	sub	sp, #24
 800edd6:	af00      	add	r7, sp, #0
 800edd8:	60f8      	str	r0, [r7, #12]
 800edda:	607a      	str	r2, [r7, #4]
 800eddc:	603b      	str	r3, [r7, #0]
 800edde:	460b      	mov	r3, r1
 800ede0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ede2:	2300      	movs	r3, #0
 800ede4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ede6:	2300      	movs	r3, #0
 800ede8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800edf0:	7af9      	ldrb	r1, [r7, #11]
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	687a      	ldr	r2, [r7, #4]
 800edf6:	f7f5 fbbc 	bl	8004572 <HAL_PCD_EP_Transmit>
 800edfa:	4603      	mov	r3, r0
 800edfc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edfe:	7dfb      	ldrb	r3, [r7, #23]
 800ee00:	4618      	mov	r0, r3
 800ee02:	f000 f88f 	bl	800ef24 <USBD_Get_USB_Status>
 800ee06:	4603      	mov	r3, r0
 800ee08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ee0a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3718      	adds	r7, #24
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}

0800ee14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b086      	sub	sp, #24
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	60f8      	str	r0, [r7, #12]
 800ee1c:	607a      	str	r2, [r7, #4]
 800ee1e:	603b      	str	r3, [r7, #0]
 800ee20:	460b      	mov	r3, r1
 800ee22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee24:	2300      	movs	r3, #0
 800ee26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee28:	2300      	movs	r3, #0
 800ee2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ee32:	7af9      	ldrb	r1, [r7, #11]
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	687a      	ldr	r2, [r7, #4]
 800ee38:	f7f5 fb38 	bl	80044ac <HAL_PCD_EP_Receive>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee40:	7dfb      	ldrb	r3, [r7, #23]
 800ee42:	4618      	mov	r0, r3
 800ee44:	f000 f86e 	bl	800ef24 <USBD_Get_USB_Status>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ee4c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3718      	adds	r7, #24
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}

0800ee56 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee56:	b580      	push	{r7, lr}
 800ee58:	b082      	sub	sp, #8
 800ee5a:	af00      	add	r7, sp, #0
 800ee5c:	6078      	str	r0, [r7, #4]
 800ee5e:	460b      	mov	r3, r1
 800ee60:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ee68:	78fa      	ldrb	r2, [r7, #3]
 800ee6a:	4611      	mov	r1, r2
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f7f5 fb68 	bl	8004542 <HAL_PCD_EP_GetRxCount>
 800ee72:	4603      	mov	r3, r0
}
 800ee74:	4618      	mov	r0, r3
 800ee76:	3708      	adds	r7, #8
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}

0800ee7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b082      	sub	sp, #8
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
 800ee84:	460b      	mov	r3, r1
 800ee86:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ee88:	78fb      	ldrb	r3, [r7, #3]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d002      	beq.n	800ee94 <HAL_PCDEx_LPM_Callback+0x18>
 800ee8e:	2b01      	cmp	r3, #1
 800ee90:	d01f      	beq.n	800eed2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ee92:	e03b      	b.n	800ef0c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6a1b      	ldr	r3, [r3, #32]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d007      	beq.n	800eeac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ee9c:	f000 f83c 	bl	800ef18 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eea0:	4b1c      	ldr	r3, [pc, #112]	; (800ef14 <HAL_PCDEx_LPM_Callback+0x98>)
 800eea2:	691b      	ldr	r3, [r3, #16]
 800eea4:	4a1b      	ldr	r2, [pc, #108]	; (800ef14 <HAL_PCDEx_LPM_Callback+0x98>)
 800eea6:	f023 0306 	bic.w	r3, r3, #6
 800eeaa:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	687a      	ldr	r2, [r7, #4]
 800eeb8:	6812      	ldr	r2, [r2, #0]
 800eeba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800eebe:	f023 0301 	bic.w	r3, r3, #1
 800eec2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7fb fa31 	bl	800a332 <USBD_LL_Resume>
    break;
 800eed0:	e01c      	b.n	800ef0c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	687a      	ldr	r2, [r7, #4]
 800eede:	6812      	ldr	r2, [r2, #0]
 800eee0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800eee4:	f043 0301 	orr.w	r3, r3, #1
 800eee8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800eef0:	4618      	mov	r0, r3
 800eef2:	f7fb fa08 	bl	800a306 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6a1b      	ldr	r3, [r3, #32]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d005      	beq.n	800ef0a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eefe:	4b05      	ldr	r3, [pc, #20]	; (800ef14 <HAL_PCDEx_LPM_Callback+0x98>)
 800ef00:	691b      	ldr	r3, [r3, #16]
 800ef02:	4a04      	ldr	r2, [pc, #16]	; (800ef14 <HAL_PCDEx_LPM_Callback+0x98>)
 800ef04:	f043 0306 	orr.w	r3, r3, #6
 800ef08:	6113      	str	r3, [r2, #16]
    break;
 800ef0a:	bf00      	nop
}
 800ef0c:	bf00      	nop
 800ef0e:	3708      	adds	r7, #8
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}
 800ef14:	e000ed00 	.word	0xe000ed00

0800ef18 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ef1c:	f7f2 ff3e 	bl	8001d9c <SystemClock_Config>
}
 800ef20:	bf00      	nop
 800ef22:	bd80      	pop	{r7, pc}

0800ef24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ef24:	b480      	push	{r7}
 800ef26:	b085      	sub	sp, #20
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef2e:	2300      	movs	r3, #0
 800ef30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ef32:	79fb      	ldrb	r3, [r7, #7]
 800ef34:	2b03      	cmp	r3, #3
 800ef36:	d817      	bhi.n	800ef68 <USBD_Get_USB_Status+0x44>
 800ef38:	a201      	add	r2, pc, #4	; (adr r2, 800ef40 <USBD_Get_USB_Status+0x1c>)
 800ef3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef3e:	bf00      	nop
 800ef40:	0800ef51 	.word	0x0800ef51
 800ef44:	0800ef57 	.word	0x0800ef57
 800ef48:	0800ef5d 	.word	0x0800ef5d
 800ef4c:	0800ef63 	.word	0x0800ef63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ef50:	2300      	movs	r3, #0
 800ef52:	73fb      	strb	r3, [r7, #15]
    break;
 800ef54:	e00b      	b.n	800ef6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ef56:	2303      	movs	r3, #3
 800ef58:	73fb      	strb	r3, [r7, #15]
    break;
 800ef5a:	e008      	b.n	800ef6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ef60:	e005      	b.n	800ef6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ef62:	2303      	movs	r3, #3
 800ef64:	73fb      	strb	r3, [r7, #15]
    break;
 800ef66:	e002      	b.n	800ef6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ef68:	2303      	movs	r3, #3
 800ef6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ef6c:	bf00      	nop
  }
  return usb_status;
 800ef6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3714      	adds	r7, #20
 800ef74:	46bd      	mov	sp, r7
 800ef76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7a:	4770      	bx	lr

0800ef7c <malloc>:
 800ef7c:	4b02      	ldr	r3, [pc, #8]	; (800ef88 <malloc+0xc>)
 800ef7e:	4601      	mov	r1, r0
 800ef80:	6818      	ldr	r0, [r3, #0]
 800ef82:	f000 b82b 	b.w	800efdc <_malloc_r>
 800ef86:	bf00      	nop
 800ef88:	2000015c 	.word	0x2000015c

0800ef8c <free>:
 800ef8c:	4b02      	ldr	r3, [pc, #8]	; (800ef98 <free+0xc>)
 800ef8e:	4601      	mov	r1, r0
 800ef90:	6818      	ldr	r0, [r3, #0]
 800ef92:	f000 b9f3 	b.w	800f37c <_free_r>
 800ef96:	bf00      	nop
 800ef98:	2000015c 	.word	0x2000015c

0800ef9c <sbrk_aligned>:
 800ef9c:	b570      	push	{r4, r5, r6, lr}
 800ef9e:	4e0e      	ldr	r6, [pc, #56]	; (800efd8 <sbrk_aligned+0x3c>)
 800efa0:	460c      	mov	r4, r1
 800efa2:	6831      	ldr	r1, [r6, #0]
 800efa4:	4605      	mov	r5, r0
 800efa6:	b911      	cbnz	r1, 800efae <sbrk_aligned+0x12>
 800efa8:	f000 f99e 	bl	800f2e8 <_sbrk_r>
 800efac:	6030      	str	r0, [r6, #0]
 800efae:	4621      	mov	r1, r4
 800efb0:	4628      	mov	r0, r5
 800efb2:	f000 f999 	bl	800f2e8 <_sbrk_r>
 800efb6:	1c43      	adds	r3, r0, #1
 800efb8:	d00a      	beq.n	800efd0 <sbrk_aligned+0x34>
 800efba:	1cc4      	adds	r4, r0, #3
 800efbc:	f024 0403 	bic.w	r4, r4, #3
 800efc0:	42a0      	cmp	r0, r4
 800efc2:	d007      	beq.n	800efd4 <sbrk_aligned+0x38>
 800efc4:	1a21      	subs	r1, r4, r0
 800efc6:	4628      	mov	r0, r5
 800efc8:	f000 f98e 	bl	800f2e8 <_sbrk_r>
 800efcc:	3001      	adds	r0, #1
 800efce:	d101      	bne.n	800efd4 <sbrk_aligned+0x38>
 800efd0:	f04f 34ff 	mov.w	r4, #4294967295
 800efd4:	4620      	mov	r0, r4
 800efd6:	bd70      	pop	{r4, r5, r6, pc}
 800efd8:	200073c0 	.word	0x200073c0

0800efdc <_malloc_r>:
 800efdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efe0:	1ccd      	adds	r5, r1, #3
 800efe2:	f025 0503 	bic.w	r5, r5, #3
 800efe6:	3508      	adds	r5, #8
 800efe8:	2d0c      	cmp	r5, #12
 800efea:	bf38      	it	cc
 800efec:	250c      	movcc	r5, #12
 800efee:	2d00      	cmp	r5, #0
 800eff0:	4607      	mov	r7, r0
 800eff2:	db01      	blt.n	800eff8 <_malloc_r+0x1c>
 800eff4:	42a9      	cmp	r1, r5
 800eff6:	d905      	bls.n	800f004 <_malloc_r+0x28>
 800eff8:	230c      	movs	r3, #12
 800effa:	603b      	str	r3, [r7, #0]
 800effc:	2600      	movs	r6, #0
 800effe:	4630      	mov	r0, r6
 800f000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f004:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f0d8 <_malloc_r+0xfc>
 800f008:	f000 f868 	bl	800f0dc <__malloc_lock>
 800f00c:	f8d8 3000 	ldr.w	r3, [r8]
 800f010:	461c      	mov	r4, r3
 800f012:	bb5c      	cbnz	r4, 800f06c <_malloc_r+0x90>
 800f014:	4629      	mov	r1, r5
 800f016:	4638      	mov	r0, r7
 800f018:	f7ff ffc0 	bl	800ef9c <sbrk_aligned>
 800f01c:	1c43      	adds	r3, r0, #1
 800f01e:	4604      	mov	r4, r0
 800f020:	d155      	bne.n	800f0ce <_malloc_r+0xf2>
 800f022:	f8d8 4000 	ldr.w	r4, [r8]
 800f026:	4626      	mov	r6, r4
 800f028:	2e00      	cmp	r6, #0
 800f02a:	d145      	bne.n	800f0b8 <_malloc_r+0xdc>
 800f02c:	2c00      	cmp	r4, #0
 800f02e:	d048      	beq.n	800f0c2 <_malloc_r+0xe6>
 800f030:	6823      	ldr	r3, [r4, #0]
 800f032:	4631      	mov	r1, r6
 800f034:	4638      	mov	r0, r7
 800f036:	eb04 0903 	add.w	r9, r4, r3
 800f03a:	f000 f955 	bl	800f2e8 <_sbrk_r>
 800f03e:	4581      	cmp	r9, r0
 800f040:	d13f      	bne.n	800f0c2 <_malloc_r+0xe6>
 800f042:	6821      	ldr	r1, [r4, #0]
 800f044:	1a6d      	subs	r5, r5, r1
 800f046:	4629      	mov	r1, r5
 800f048:	4638      	mov	r0, r7
 800f04a:	f7ff ffa7 	bl	800ef9c <sbrk_aligned>
 800f04e:	3001      	adds	r0, #1
 800f050:	d037      	beq.n	800f0c2 <_malloc_r+0xe6>
 800f052:	6823      	ldr	r3, [r4, #0]
 800f054:	442b      	add	r3, r5
 800f056:	6023      	str	r3, [r4, #0]
 800f058:	f8d8 3000 	ldr.w	r3, [r8]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d038      	beq.n	800f0d2 <_malloc_r+0xf6>
 800f060:	685a      	ldr	r2, [r3, #4]
 800f062:	42a2      	cmp	r2, r4
 800f064:	d12b      	bne.n	800f0be <_malloc_r+0xe2>
 800f066:	2200      	movs	r2, #0
 800f068:	605a      	str	r2, [r3, #4]
 800f06a:	e00f      	b.n	800f08c <_malloc_r+0xb0>
 800f06c:	6822      	ldr	r2, [r4, #0]
 800f06e:	1b52      	subs	r2, r2, r5
 800f070:	d41f      	bmi.n	800f0b2 <_malloc_r+0xd6>
 800f072:	2a0b      	cmp	r2, #11
 800f074:	d917      	bls.n	800f0a6 <_malloc_r+0xca>
 800f076:	1961      	adds	r1, r4, r5
 800f078:	42a3      	cmp	r3, r4
 800f07a:	6025      	str	r5, [r4, #0]
 800f07c:	bf18      	it	ne
 800f07e:	6059      	strne	r1, [r3, #4]
 800f080:	6863      	ldr	r3, [r4, #4]
 800f082:	bf08      	it	eq
 800f084:	f8c8 1000 	streq.w	r1, [r8]
 800f088:	5162      	str	r2, [r4, r5]
 800f08a:	604b      	str	r3, [r1, #4]
 800f08c:	4638      	mov	r0, r7
 800f08e:	f104 060b 	add.w	r6, r4, #11
 800f092:	f000 f829 	bl	800f0e8 <__malloc_unlock>
 800f096:	f026 0607 	bic.w	r6, r6, #7
 800f09a:	1d23      	adds	r3, r4, #4
 800f09c:	1af2      	subs	r2, r6, r3
 800f09e:	d0ae      	beq.n	800effe <_malloc_r+0x22>
 800f0a0:	1b9b      	subs	r3, r3, r6
 800f0a2:	50a3      	str	r3, [r4, r2]
 800f0a4:	e7ab      	b.n	800effe <_malloc_r+0x22>
 800f0a6:	42a3      	cmp	r3, r4
 800f0a8:	6862      	ldr	r2, [r4, #4]
 800f0aa:	d1dd      	bne.n	800f068 <_malloc_r+0x8c>
 800f0ac:	f8c8 2000 	str.w	r2, [r8]
 800f0b0:	e7ec      	b.n	800f08c <_malloc_r+0xb0>
 800f0b2:	4623      	mov	r3, r4
 800f0b4:	6864      	ldr	r4, [r4, #4]
 800f0b6:	e7ac      	b.n	800f012 <_malloc_r+0x36>
 800f0b8:	4634      	mov	r4, r6
 800f0ba:	6876      	ldr	r6, [r6, #4]
 800f0bc:	e7b4      	b.n	800f028 <_malloc_r+0x4c>
 800f0be:	4613      	mov	r3, r2
 800f0c0:	e7cc      	b.n	800f05c <_malloc_r+0x80>
 800f0c2:	230c      	movs	r3, #12
 800f0c4:	603b      	str	r3, [r7, #0]
 800f0c6:	4638      	mov	r0, r7
 800f0c8:	f000 f80e 	bl	800f0e8 <__malloc_unlock>
 800f0cc:	e797      	b.n	800effe <_malloc_r+0x22>
 800f0ce:	6025      	str	r5, [r4, #0]
 800f0d0:	e7dc      	b.n	800f08c <_malloc_r+0xb0>
 800f0d2:	605b      	str	r3, [r3, #4]
 800f0d4:	deff      	udf	#255	; 0xff
 800f0d6:	bf00      	nop
 800f0d8:	200073bc 	.word	0x200073bc

0800f0dc <__malloc_lock>:
 800f0dc:	4801      	ldr	r0, [pc, #4]	; (800f0e4 <__malloc_lock+0x8>)
 800f0de:	f000 b93d 	b.w	800f35c <__retarget_lock_acquire_recursive>
 800f0e2:	bf00      	nop
 800f0e4:	20007500 	.word	0x20007500

0800f0e8 <__malloc_unlock>:
 800f0e8:	4801      	ldr	r0, [pc, #4]	; (800f0f0 <__malloc_unlock+0x8>)
 800f0ea:	f000 b938 	b.w	800f35e <__retarget_lock_release_recursive>
 800f0ee:	bf00      	nop
 800f0f0:	20007500 	.word	0x20007500

0800f0f4 <_strtoul_l.constprop.0>:
 800f0f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f0f8:	4f36      	ldr	r7, [pc, #216]	; (800f1d4 <_strtoul_l.constprop.0+0xe0>)
 800f0fa:	4686      	mov	lr, r0
 800f0fc:	460d      	mov	r5, r1
 800f0fe:	4628      	mov	r0, r5
 800f100:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f104:	5d3e      	ldrb	r6, [r7, r4]
 800f106:	f016 0608 	ands.w	r6, r6, #8
 800f10a:	d1f8      	bne.n	800f0fe <_strtoul_l.constprop.0+0xa>
 800f10c:	2c2d      	cmp	r4, #45	; 0x2d
 800f10e:	d130      	bne.n	800f172 <_strtoul_l.constprop.0+0x7e>
 800f110:	782c      	ldrb	r4, [r5, #0]
 800f112:	2601      	movs	r6, #1
 800f114:	1c85      	adds	r5, r0, #2
 800f116:	2b00      	cmp	r3, #0
 800f118:	d057      	beq.n	800f1ca <_strtoul_l.constprop.0+0xd6>
 800f11a:	2b10      	cmp	r3, #16
 800f11c:	d109      	bne.n	800f132 <_strtoul_l.constprop.0+0x3e>
 800f11e:	2c30      	cmp	r4, #48	; 0x30
 800f120:	d107      	bne.n	800f132 <_strtoul_l.constprop.0+0x3e>
 800f122:	7828      	ldrb	r0, [r5, #0]
 800f124:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800f128:	2858      	cmp	r0, #88	; 0x58
 800f12a:	d149      	bne.n	800f1c0 <_strtoul_l.constprop.0+0xcc>
 800f12c:	786c      	ldrb	r4, [r5, #1]
 800f12e:	2310      	movs	r3, #16
 800f130:	3502      	adds	r5, #2
 800f132:	f04f 38ff 	mov.w	r8, #4294967295
 800f136:	2700      	movs	r7, #0
 800f138:	fbb8 f8f3 	udiv	r8, r8, r3
 800f13c:	fb03 f908 	mul.w	r9, r3, r8
 800f140:	ea6f 0909 	mvn.w	r9, r9
 800f144:	4638      	mov	r0, r7
 800f146:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f14a:	f1bc 0f09 	cmp.w	ip, #9
 800f14e:	d815      	bhi.n	800f17c <_strtoul_l.constprop.0+0x88>
 800f150:	4664      	mov	r4, ip
 800f152:	42a3      	cmp	r3, r4
 800f154:	dd23      	ble.n	800f19e <_strtoul_l.constprop.0+0xaa>
 800f156:	f1b7 3fff 	cmp.w	r7, #4294967295
 800f15a:	d007      	beq.n	800f16c <_strtoul_l.constprop.0+0x78>
 800f15c:	4580      	cmp	r8, r0
 800f15e:	d31b      	bcc.n	800f198 <_strtoul_l.constprop.0+0xa4>
 800f160:	d101      	bne.n	800f166 <_strtoul_l.constprop.0+0x72>
 800f162:	45a1      	cmp	r9, r4
 800f164:	db18      	blt.n	800f198 <_strtoul_l.constprop.0+0xa4>
 800f166:	fb00 4003 	mla	r0, r0, r3, r4
 800f16a:	2701      	movs	r7, #1
 800f16c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f170:	e7e9      	b.n	800f146 <_strtoul_l.constprop.0+0x52>
 800f172:	2c2b      	cmp	r4, #43	; 0x2b
 800f174:	bf04      	itt	eq
 800f176:	782c      	ldrbeq	r4, [r5, #0]
 800f178:	1c85      	addeq	r5, r0, #2
 800f17a:	e7cc      	b.n	800f116 <_strtoul_l.constprop.0+0x22>
 800f17c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f180:	f1bc 0f19 	cmp.w	ip, #25
 800f184:	d801      	bhi.n	800f18a <_strtoul_l.constprop.0+0x96>
 800f186:	3c37      	subs	r4, #55	; 0x37
 800f188:	e7e3      	b.n	800f152 <_strtoul_l.constprop.0+0x5e>
 800f18a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f18e:	f1bc 0f19 	cmp.w	ip, #25
 800f192:	d804      	bhi.n	800f19e <_strtoul_l.constprop.0+0xaa>
 800f194:	3c57      	subs	r4, #87	; 0x57
 800f196:	e7dc      	b.n	800f152 <_strtoul_l.constprop.0+0x5e>
 800f198:	f04f 37ff 	mov.w	r7, #4294967295
 800f19c:	e7e6      	b.n	800f16c <_strtoul_l.constprop.0+0x78>
 800f19e:	1c7b      	adds	r3, r7, #1
 800f1a0:	d106      	bne.n	800f1b0 <_strtoul_l.constprop.0+0xbc>
 800f1a2:	2322      	movs	r3, #34	; 0x22
 800f1a4:	f8ce 3000 	str.w	r3, [lr]
 800f1a8:	4638      	mov	r0, r7
 800f1aa:	b932      	cbnz	r2, 800f1ba <_strtoul_l.constprop.0+0xc6>
 800f1ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1b0:	b106      	cbz	r6, 800f1b4 <_strtoul_l.constprop.0+0xc0>
 800f1b2:	4240      	negs	r0, r0
 800f1b4:	2a00      	cmp	r2, #0
 800f1b6:	d0f9      	beq.n	800f1ac <_strtoul_l.constprop.0+0xb8>
 800f1b8:	b107      	cbz	r7, 800f1bc <_strtoul_l.constprop.0+0xc8>
 800f1ba:	1e69      	subs	r1, r5, #1
 800f1bc:	6011      	str	r1, [r2, #0]
 800f1be:	e7f5      	b.n	800f1ac <_strtoul_l.constprop.0+0xb8>
 800f1c0:	2430      	movs	r4, #48	; 0x30
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d1b5      	bne.n	800f132 <_strtoul_l.constprop.0+0x3e>
 800f1c6:	2308      	movs	r3, #8
 800f1c8:	e7b3      	b.n	800f132 <_strtoul_l.constprop.0+0x3e>
 800f1ca:	2c30      	cmp	r4, #48	; 0x30
 800f1cc:	d0a9      	beq.n	800f122 <_strtoul_l.constprop.0+0x2e>
 800f1ce:	230a      	movs	r3, #10
 800f1d0:	e7af      	b.n	800f132 <_strtoul_l.constprop.0+0x3e>
 800f1d2:	bf00      	nop
 800f1d4:	08010071 	.word	0x08010071

0800f1d8 <strtoul>:
 800f1d8:	4613      	mov	r3, r2
 800f1da:	460a      	mov	r2, r1
 800f1dc:	4601      	mov	r1, r0
 800f1de:	4802      	ldr	r0, [pc, #8]	; (800f1e8 <strtoul+0x10>)
 800f1e0:	6800      	ldr	r0, [r0, #0]
 800f1e2:	f7ff bf87 	b.w	800f0f4 <_strtoul_l.constprop.0>
 800f1e6:	bf00      	nop
 800f1e8:	2000015c 	.word	0x2000015c

0800f1ec <siprintf>:
 800f1ec:	b40e      	push	{r1, r2, r3}
 800f1ee:	b500      	push	{lr}
 800f1f0:	b09c      	sub	sp, #112	; 0x70
 800f1f2:	ab1d      	add	r3, sp, #116	; 0x74
 800f1f4:	9002      	str	r0, [sp, #8]
 800f1f6:	9006      	str	r0, [sp, #24]
 800f1f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f1fc:	4809      	ldr	r0, [pc, #36]	; (800f224 <siprintf+0x38>)
 800f1fe:	9107      	str	r1, [sp, #28]
 800f200:	9104      	str	r1, [sp, #16]
 800f202:	4909      	ldr	r1, [pc, #36]	; (800f228 <siprintf+0x3c>)
 800f204:	f853 2b04 	ldr.w	r2, [r3], #4
 800f208:	9105      	str	r1, [sp, #20]
 800f20a:	6800      	ldr	r0, [r0, #0]
 800f20c:	9301      	str	r3, [sp, #4]
 800f20e:	a902      	add	r1, sp, #8
 800f210:	f000 f95a 	bl	800f4c8 <_svfiprintf_r>
 800f214:	9b02      	ldr	r3, [sp, #8]
 800f216:	2200      	movs	r2, #0
 800f218:	701a      	strb	r2, [r3, #0]
 800f21a:	b01c      	add	sp, #112	; 0x70
 800f21c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f220:	b003      	add	sp, #12
 800f222:	4770      	bx	lr
 800f224:	2000015c 	.word	0x2000015c
 800f228:	ffff0208 	.word	0xffff0208

0800f22c <memset>:
 800f22c:	4402      	add	r2, r0
 800f22e:	4603      	mov	r3, r0
 800f230:	4293      	cmp	r3, r2
 800f232:	d100      	bne.n	800f236 <memset+0xa>
 800f234:	4770      	bx	lr
 800f236:	f803 1b01 	strb.w	r1, [r3], #1
 800f23a:	e7f9      	b.n	800f230 <memset+0x4>

0800f23c <_reclaim_reent>:
 800f23c:	4b29      	ldr	r3, [pc, #164]	; (800f2e4 <_reclaim_reent+0xa8>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	4283      	cmp	r3, r0
 800f242:	b570      	push	{r4, r5, r6, lr}
 800f244:	4604      	mov	r4, r0
 800f246:	d04b      	beq.n	800f2e0 <_reclaim_reent+0xa4>
 800f248:	69c3      	ldr	r3, [r0, #28]
 800f24a:	b143      	cbz	r3, 800f25e <_reclaim_reent+0x22>
 800f24c:	68db      	ldr	r3, [r3, #12]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d144      	bne.n	800f2dc <_reclaim_reent+0xa0>
 800f252:	69e3      	ldr	r3, [r4, #28]
 800f254:	6819      	ldr	r1, [r3, #0]
 800f256:	b111      	cbz	r1, 800f25e <_reclaim_reent+0x22>
 800f258:	4620      	mov	r0, r4
 800f25a:	f000 f88f 	bl	800f37c <_free_r>
 800f25e:	6961      	ldr	r1, [r4, #20]
 800f260:	b111      	cbz	r1, 800f268 <_reclaim_reent+0x2c>
 800f262:	4620      	mov	r0, r4
 800f264:	f000 f88a 	bl	800f37c <_free_r>
 800f268:	69e1      	ldr	r1, [r4, #28]
 800f26a:	b111      	cbz	r1, 800f272 <_reclaim_reent+0x36>
 800f26c:	4620      	mov	r0, r4
 800f26e:	f000 f885 	bl	800f37c <_free_r>
 800f272:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f274:	b111      	cbz	r1, 800f27c <_reclaim_reent+0x40>
 800f276:	4620      	mov	r0, r4
 800f278:	f000 f880 	bl	800f37c <_free_r>
 800f27c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f27e:	b111      	cbz	r1, 800f286 <_reclaim_reent+0x4a>
 800f280:	4620      	mov	r0, r4
 800f282:	f000 f87b 	bl	800f37c <_free_r>
 800f286:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f288:	b111      	cbz	r1, 800f290 <_reclaim_reent+0x54>
 800f28a:	4620      	mov	r0, r4
 800f28c:	f000 f876 	bl	800f37c <_free_r>
 800f290:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f292:	b111      	cbz	r1, 800f29a <_reclaim_reent+0x5e>
 800f294:	4620      	mov	r0, r4
 800f296:	f000 f871 	bl	800f37c <_free_r>
 800f29a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f29c:	b111      	cbz	r1, 800f2a4 <_reclaim_reent+0x68>
 800f29e:	4620      	mov	r0, r4
 800f2a0:	f000 f86c 	bl	800f37c <_free_r>
 800f2a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f2a6:	b111      	cbz	r1, 800f2ae <_reclaim_reent+0x72>
 800f2a8:	4620      	mov	r0, r4
 800f2aa:	f000 f867 	bl	800f37c <_free_r>
 800f2ae:	6a23      	ldr	r3, [r4, #32]
 800f2b0:	b1b3      	cbz	r3, 800f2e0 <_reclaim_reent+0xa4>
 800f2b2:	4620      	mov	r0, r4
 800f2b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f2b8:	4718      	bx	r3
 800f2ba:	5949      	ldr	r1, [r1, r5]
 800f2bc:	b941      	cbnz	r1, 800f2d0 <_reclaim_reent+0x94>
 800f2be:	3504      	adds	r5, #4
 800f2c0:	69e3      	ldr	r3, [r4, #28]
 800f2c2:	2d80      	cmp	r5, #128	; 0x80
 800f2c4:	68d9      	ldr	r1, [r3, #12]
 800f2c6:	d1f8      	bne.n	800f2ba <_reclaim_reent+0x7e>
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	f000 f857 	bl	800f37c <_free_r>
 800f2ce:	e7c0      	b.n	800f252 <_reclaim_reent+0x16>
 800f2d0:	680e      	ldr	r6, [r1, #0]
 800f2d2:	4620      	mov	r0, r4
 800f2d4:	f000 f852 	bl	800f37c <_free_r>
 800f2d8:	4631      	mov	r1, r6
 800f2da:	e7ef      	b.n	800f2bc <_reclaim_reent+0x80>
 800f2dc:	2500      	movs	r5, #0
 800f2de:	e7ef      	b.n	800f2c0 <_reclaim_reent+0x84>
 800f2e0:	bd70      	pop	{r4, r5, r6, pc}
 800f2e2:	bf00      	nop
 800f2e4:	2000015c 	.word	0x2000015c

0800f2e8 <_sbrk_r>:
 800f2e8:	b538      	push	{r3, r4, r5, lr}
 800f2ea:	4d06      	ldr	r5, [pc, #24]	; (800f304 <_sbrk_r+0x1c>)
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	4604      	mov	r4, r0
 800f2f0:	4608      	mov	r0, r1
 800f2f2:	602b      	str	r3, [r5, #0]
 800f2f4:	f7f3 fb62 	bl	80029bc <_sbrk>
 800f2f8:	1c43      	adds	r3, r0, #1
 800f2fa:	d102      	bne.n	800f302 <_sbrk_r+0x1a>
 800f2fc:	682b      	ldr	r3, [r5, #0]
 800f2fe:	b103      	cbz	r3, 800f302 <_sbrk_r+0x1a>
 800f300:	6023      	str	r3, [r4, #0]
 800f302:	bd38      	pop	{r3, r4, r5, pc}
 800f304:	200074fc 	.word	0x200074fc

0800f308 <__errno>:
 800f308:	4b01      	ldr	r3, [pc, #4]	; (800f310 <__errno+0x8>)
 800f30a:	6818      	ldr	r0, [r3, #0]
 800f30c:	4770      	bx	lr
 800f30e:	bf00      	nop
 800f310:	2000015c 	.word	0x2000015c

0800f314 <__libc_init_array>:
 800f314:	b570      	push	{r4, r5, r6, lr}
 800f316:	4d0d      	ldr	r5, [pc, #52]	; (800f34c <__libc_init_array+0x38>)
 800f318:	4c0d      	ldr	r4, [pc, #52]	; (800f350 <__libc_init_array+0x3c>)
 800f31a:	1b64      	subs	r4, r4, r5
 800f31c:	10a4      	asrs	r4, r4, #2
 800f31e:	2600      	movs	r6, #0
 800f320:	42a6      	cmp	r6, r4
 800f322:	d109      	bne.n	800f338 <__libc_init_array+0x24>
 800f324:	4d0b      	ldr	r5, [pc, #44]	; (800f354 <__libc_init_array+0x40>)
 800f326:	4c0c      	ldr	r4, [pc, #48]	; (800f358 <__libc_init_array+0x44>)
 800f328:	f000 fbae 	bl	800fa88 <_init>
 800f32c:	1b64      	subs	r4, r4, r5
 800f32e:	10a4      	asrs	r4, r4, #2
 800f330:	2600      	movs	r6, #0
 800f332:	42a6      	cmp	r6, r4
 800f334:	d105      	bne.n	800f342 <__libc_init_array+0x2e>
 800f336:	bd70      	pop	{r4, r5, r6, pc}
 800f338:	f855 3b04 	ldr.w	r3, [r5], #4
 800f33c:	4798      	blx	r3
 800f33e:	3601      	adds	r6, #1
 800f340:	e7ee      	b.n	800f320 <__libc_init_array+0xc>
 800f342:	f855 3b04 	ldr.w	r3, [r5], #4
 800f346:	4798      	blx	r3
 800f348:	3601      	adds	r6, #1
 800f34a:	e7f2      	b.n	800f332 <__libc_init_array+0x1e>
 800f34c:	080101ac 	.word	0x080101ac
 800f350:	080101ac 	.word	0x080101ac
 800f354:	080101ac 	.word	0x080101ac
 800f358:	080101b0 	.word	0x080101b0

0800f35c <__retarget_lock_acquire_recursive>:
 800f35c:	4770      	bx	lr

0800f35e <__retarget_lock_release_recursive>:
 800f35e:	4770      	bx	lr

0800f360 <memcpy>:
 800f360:	440a      	add	r2, r1
 800f362:	4291      	cmp	r1, r2
 800f364:	f100 33ff 	add.w	r3, r0, #4294967295
 800f368:	d100      	bne.n	800f36c <memcpy+0xc>
 800f36a:	4770      	bx	lr
 800f36c:	b510      	push	{r4, lr}
 800f36e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f372:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f376:	4291      	cmp	r1, r2
 800f378:	d1f9      	bne.n	800f36e <memcpy+0xe>
 800f37a:	bd10      	pop	{r4, pc}

0800f37c <_free_r>:
 800f37c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f37e:	2900      	cmp	r1, #0
 800f380:	d044      	beq.n	800f40c <_free_r+0x90>
 800f382:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f386:	9001      	str	r0, [sp, #4]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	f1a1 0404 	sub.w	r4, r1, #4
 800f38e:	bfb8      	it	lt
 800f390:	18e4      	addlt	r4, r4, r3
 800f392:	f7ff fea3 	bl	800f0dc <__malloc_lock>
 800f396:	4a1e      	ldr	r2, [pc, #120]	; (800f410 <_free_r+0x94>)
 800f398:	9801      	ldr	r0, [sp, #4]
 800f39a:	6813      	ldr	r3, [r2, #0]
 800f39c:	b933      	cbnz	r3, 800f3ac <_free_r+0x30>
 800f39e:	6063      	str	r3, [r4, #4]
 800f3a0:	6014      	str	r4, [r2, #0]
 800f3a2:	b003      	add	sp, #12
 800f3a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f3a8:	f7ff be9e 	b.w	800f0e8 <__malloc_unlock>
 800f3ac:	42a3      	cmp	r3, r4
 800f3ae:	d908      	bls.n	800f3c2 <_free_r+0x46>
 800f3b0:	6825      	ldr	r5, [r4, #0]
 800f3b2:	1961      	adds	r1, r4, r5
 800f3b4:	428b      	cmp	r3, r1
 800f3b6:	bf01      	itttt	eq
 800f3b8:	6819      	ldreq	r1, [r3, #0]
 800f3ba:	685b      	ldreq	r3, [r3, #4]
 800f3bc:	1949      	addeq	r1, r1, r5
 800f3be:	6021      	streq	r1, [r4, #0]
 800f3c0:	e7ed      	b.n	800f39e <_free_r+0x22>
 800f3c2:	461a      	mov	r2, r3
 800f3c4:	685b      	ldr	r3, [r3, #4]
 800f3c6:	b10b      	cbz	r3, 800f3cc <_free_r+0x50>
 800f3c8:	42a3      	cmp	r3, r4
 800f3ca:	d9fa      	bls.n	800f3c2 <_free_r+0x46>
 800f3cc:	6811      	ldr	r1, [r2, #0]
 800f3ce:	1855      	adds	r5, r2, r1
 800f3d0:	42a5      	cmp	r5, r4
 800f3d2:	d10b      	bne.n	800f3ec <_free_r+0x70>
 800f3d4:	6824      	ldr	r4, [r4, #0]
 800f3d6:	4421      	add	r1, r4
 800f3d8:	1854      	adds	r4, r2, r1
 800f3da:	42a3      	cmp	r3, r4
 800f3dc:	6011      	str	r1, [r2, #0]
 800f3de:	d1e0      	bne.n	800f3a2 <_free_r+0x26>
 800f3e0:	681c      	ldr	r4, [r3, #0]
 800f3e2:	685b      	ldr	r3, [r3, #4]
 800f3e4:	6053      	str	r3, [r2, #4]
 800f3e6:	440c      	add	r4, r1
 800f3e8:	6014      	str	r4, [r2, #0]
 800f3ea:	e7da      	b.n	800f3a2 <_free_r+0x26>
 800f3ec:	d902      	bls.n	800f3f4 <_free_r+0x78>
 800f3ee:	230c      	movs	r3, #12
 800f3f0:	6003      	str	r3, [r0, #0]
 800f3f2:	e7d6      	b.n	800f3a2 <_free_r+0x26>
 800f3f4:	6825      	ldr	r5, [r4, #0]
 800f3f6:	1961      	adds	r1, r4, r5
 800f3f8:	428b      	cmp	r3, r1
 800f3fa:	bf04      	itt	eq
 800f3fc:	6819      	ldreq	r1, [r3, #0]
 800f3fe:	685b      	ldreq	r3, [r3, #4]
 800f400:	6063      	str	r3, [r4, #4]
 800f402:	bf04      	itt	eq
 800f404:	1949      	addeq	r1, r1, r5
 800f406:	6021      	streq	r1, [r4, #0]
 800f408:	6054      	str	r4, [r2, #4]
 800f40a:	e7ca      	b.n	800f3a2 <_free_r+0x26>
 800f40c:	b003      	add	sp, #12
 800f40e:	bd30      	pop	{r4, r5, pc}
 800f410:	200073bc 	.word	0x200073bc

0800f414 <__ssputs_r>:
 800f414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f418:	688e      	ldr	r6, [r1, #8]
 800f41a:	461f      	mov	r7, r3
 800f41c:	42be      	cmp	r6, r7
 800f41e:	680b      	ldr	r3, [r1, #0]
 800f420:	4682      	mov	sl, r0
 800f422:	460c      	mov	r4, r1
 800f424:	4690      	mov	r8, r2
 800f426:	d82c      	bhi.n	800f482 <__ssputs_r+0x6e>
 800f428:	898a      	ldrh	r2, [r1, #12]
 800f42a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f42e:	d026      	beq.n	800f47e <__ssputs_r+0x6a>
 800f430:	6965      	ldr	r5, [r4, #20]
 800f432:	6909      	ldr	r1, [r1, #16]
 800f434:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f438:	eba3 0901 	sub.w	r9, r3, r1
 800f43c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f440:	1c7b      	adds	r3, r7, #1
 800f442:	444b      	add	r3, r9
 800f444:	106d      	asrs	r5, r5, #1
 800f446:	429d      	cmp	r5, r3
 800f448:	bf38      	it	cc
 800f44a:	461d      	movcc	r5, r3
 800f44c:	0553      	lsls	r3, r2, #21
 800f44e:	d527      	bpl.n	800f4a0 <__ssputs_r+0x8c>
 800f450:	4629      	mov	r1, r5
 800f452:	f7ff fdc3 	bl	800efdc <_malloc_r>
 800f456:	4606      	mov	r6, r0
 800f458:	b360      	cbz	r0, 800f4b4 <__ssputs_r+0xa0>
 800f45a:	6921      	ldr	r1, [r4, #16]
 800f45c:	464a      	mov	r2, r9
 800f45e:	f7ff ff7f 	bl	800f360 <memcpy>
 800f462:	89a3      	ldrh	r3, [r4, #12]
 800f464:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f46c:	81a3      	strh	r3, [r4, #12]
 800f46e:	6126      	str	r6, [r4, #16]
 800f470:	6165      	str	r5, [r4, #20]
 800f472:	444e      	add	r6, r9
 800f474:	eba5 0509 	sub.w	r5, r5, r9
 800f478:	6026      	str	r6, [r4, #0]
 800f47a:	60a5      	str	r5, [r4, #8]
 800f47c:	463e      	mov	r6, r7
 800f47e:	42be      	cmp	r6, r7
 800f480:	d900      	bls.n	800f484 <__ssputs_r+0x70>
 800f482:	463e      	mov	r6, r7
 800f484:	6820      	ldr	r0, [r4, #0]
 800f486:	4632      	mov	r2, r6
 800f488:	4641      	mov	r1, r8
 800f48a:	f000 faab 	bl	800f9e4 <memmove>
 800f48e:	68a3      	ldr	r3, [r4, #8]
 800f490:	1b9b      	subs	r3, r3, r6
 800f492:	60a3      	str	r3, [r4, #8]
 800f494:	6823      	ldr	r3, [r4, #0]
 800f496:	4433      	add	r3, r6
 800f498:	6023      	str	r3, [r4, #0]
 800f49a:	2000      	movs	r0, #0
 800f49c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4a0:	462a      	mov	r2, r5
 800f4a2:	f000 fab9 	bl	800fa18 <_realloc_r>
 800f4a6:	4606      	mov	r6, r0
 800f4a8:	2800      	cmp	r0, #0
 800f4aa:	d1e0      	bne.n	800f46e <__ssputs_r+0x5a>
 800f4ac:	6921      	ldr	r1, [r4, #16]
 800f4ae:	4650      	mov	r0, sl
 800f4b0:	f7ff ff64 	bl	800f37c <_free_r>
 800f4b4:	230c      	movs	r3, #12
 800f4b6:	f8ca 3000 	str.w	r3, [sl]
 800f4ba:	89a3      	ldrh	r3, [r4, #12]
 800f4bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4c0:	81a3      	strh	r3, [r4, #12]
 800f4c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f4c6:	e7e9      	b.n	800f49c <__ssputs_r+0x88>

0800f4c8 <_svfiprintf_r>:
 800f4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4cc:	4698      	mov	r8, r3
 800f4ce:	898b      	ldrh	r3, [r1, #12]
 800f4d0:	061b      	lsls	r3, r3, #24
 800f4d2:	b09d      	sub	sp, #116	; 0x74
 800f4d4:	4607      	mov	r7, r0
 800f4d6:	460d      	mov	r5, r1
 800f4d8:	4614      	mov	r4, r2
 800f4da:	d50e      	bpl.n	800f4fa <_svfiprintf_r+0x32>
 800f4dc:	690b      	ldr	r3, [r1, #16]
 800f4de:	b963      	cbnz	r3, 800f4fa <_svfiprintf_r+0x32>
 800f4e0:	2140      	movs	r1, #64	; 0x40
 800f4e2:	f7ff fd7b 	bl	800efdc <_malloc_r>
 800f4e6:	6028      	str	r0, [r5, #0]
 800f4e8:	6128      	str	r0, [r5, #16]
 800f4ea:	b920      	cbnz	r0, 800f4f6 <_svfiprintf_r+0x2e>
 800f4ec:	230c      	movs	r3, #12
 800f4ee:	603b      	str	r3, [r7, #0]
 800f4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f4f4:	e0d0      	b.n	800f698 <_svfiprintf_r+0x1d0>
 800f4f6:	2340      	movs	r3, #64	; 0x40
 800f4f8:	616b      	str	r3, [r5, #20]
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	9309      	str	r3, [sp, #36]	; 0x24
 800f4fe:	2320      	movs	r3, #32
 800f500:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f504:	f8cd 800c 	str.w	r8, [sp, #12]
 800f508:	2330      	movs	r3, #48	; 0x30
 800f50a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f6b0 <_svfiprintf_r+0x1e8>
 800f50e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f512:	f04f 0901 	mov.w	r9, #1
 800f516:	4623      	mov	r3, r4
 800f518:	469a      	mov	sl, r3
 800f51a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f51e:	b10a      	cbz	r2, 800f524 <_svfiprintf_r+0x5c>
 800f520:	2a25      	cmp	r2, #37	; 0x25
 800f522:	d1f9      	bne.n	800f518 <_svfiprintf_r+0x50>
 800f524:	ebba 0b04 	subs.w	fp, sl, r4
 800f528:	d00b      	beq.n	800f542 <_svfiprintf_r+0x7a>
 800f52a:	465b      	mov	r3, fp
 800f52c:	4622      	mov	r2, r4
 800f52e:	4629      	mov	r1, r5
 800f530:	4638      	mov	r0, r7
 800f532:	f7ff ff6f 	bl	800f414 <__ssputs_r>
 800f536:	3001      	adds	r0, #1
 800f538:	f000 80a9 	beq.w	800f68e <_svfiprintf_r+0x1c6>
 800f53c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f53e:	445a      	add	r2, fp
 800f540:	9209      	str	r2, [sp, #36]	; 0x24
 800f542:	f89a 3000 	ldrb.w	r3, [sl]
 800f546:	2b00      	cmp	r3, #0
 800f548:	f000 80a1 	beq.w	800f68e <_svfiprintf_r+0x1c6>
 800f54c:	2300      	movs	r3, #0
 800f54e:	f04f 32ff 	mov.w	r2, #4294967295
 800f552:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f556:	f10a 0a01 	add.w	sl, sl, #1
 800f55a:	9304      	str	r3, [sp, #16]
 800f55c:	9307      	str	r3, [sp, #28]
 800f55e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f562:	931a      	str	r3, [sp, #104]	; 0x68
 800f564:	4654      	mov	r4, sl
 800f566:	2205      	movs	r2, #5
 800f568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f56c:	4850      	ldr	r0, [pc, #320]	; (800f6b0 <_svfiprintf_r+0x1e8>)
 800f56e:	f7f0 feb7 	bl	80002e0 <memchr>
 800f572:	9a04      	ldr	r2, [sp, #16]
 800f574:	b9d8      	cbnz	r0, 800f5ae <_svfiprintf_r+0xe6>
 800f576:	06d0      	lsls	r0, r2, #27
 800f578:	bf44      	itt	mi
 800f57a:	2320      	movmi	r3, #32
 800f57c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f580:	0711      	lsls	r1, r2, #28
 800f582:	bf44      	itt	mi
 800f584:	232b      	movmi	r3, #43	; 0x2b
 800f586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f58a:	f89a 3000 	ldrb.w	r3, [sl]
 800f58e:	2b2a      	cmp	r3, #42	; 0x2a
 800f590:	d015      	beq.n	800f5be <_svfiprintf_r+0xf6>
 800f592:	9a07      	ldr	r2, [sp, #28]
 800f594:	4654      	mov	r4, sl
 800f596:	2000      	movs	r0, #0
 800f598:	f04f 0c0a 	mov.w	ip, #10
 800f59c:	4621      	mov	r1, r4
 800f59e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f5a2:	3b30      	subs	r3, #48	; 0x30
 800f5a4:	2b09      	cmp	r3, #9
 800f5a6:	d94d      	bls.n	800f644 <_svfiprintf_r+0x17c>
 800f5a8:	b1b0      	cbz	r0, 800f5d8 <_svfiprintf_r+0x110>
 800f5aa:	9207      	str	r2, [sp, #28]
 800f5ac:	e014      	b.n	800f5d8 <_svfiprintf_r+0x110>
 800f5ae:	eba0 0308 	sub.w	r3, r0, r8
 800f5b2:	fa09 f303 	lsl.w	r3, r9, r3
 800f5b6:	4313      	orrs	r3, r2
 800f5b8:	9304      	str	r3, [sp, #16]
 800f5ba:	46a2      	mov	sl, r4
 800f5bc:	e7d2      	b.n	800f564 <_svfiprintf_r+0x9c>
 800f5be:	9b03      	ldr	r3, [sp, #12]
 800f5c0:	1d19      	adds	r1, r3, #4
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	9103      	str	r1, [sp, #12]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	bfbb      	ittet	lt
 800f5ca:	425b      	neglt	r3, r3
 800f5cc:	f042 0202 	orrlt.w	r2, r2, #2
 800f5d0:	9307      	strge	r3, [sp, #28]
 800f5d2:	9307      	strlt	r3, [sp, #28]
 800f5d4:	bfb8      	it	lt
 800f5d6:	9204      	strlt	r2, [sp, #16]
 800f5d8:	7823      	ldrb	r3, [r4, #0]
 800f5da:	2b2e      	cmp	r3, #46	; 0x2e
 800f5dc:	d10c      	bne.n	800f5f8 <_svfiprintf_r+0x130>
 800f5de:	7863      	ldrb	r3, [r4, #1]
 800f5e0:	2b2a      	cmp	r3, #42	; 0x2a
 800f5e2:	d134      	bne.n	800f64e <_svfiprintf_r+0x186>
 800f5e4:	9b03      	ldr	r3, [sp, #12]
 800f5e6:	1d1a      	adds	r2, r3, #4
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	9203      	str	r2, [sp, #12]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	bfb8      	it	lt
 800f5f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f5f4:	3402      	adds	r4, #2
 800f5f6:	9305      	str	r3, [sp, #20]
 800f5f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f6c0 <_svfiprintf_r+0x1f8>
 800f5fc:	7821      	ldrb	r1, [r4, #0]
 800f5fe:	2203      	movs	r2, #3
 800f600:	4650      	mov	r0, sl
 800f602:	f7f0 fe6d 	bl	80002e0 <memchr>
 800f606:	b138      	cbz	r0, 800f618 <_svfiprintf_r+0x150>
 800f608:	9b04      	ldr	r3, [sp, #16]
 800f60a:	eba0 000a 	sub.w	r0, r0, sl
 800f60e:	2240      	movs	r2, #64	; 0x40
 800f610:	4082      	lsls	r2, r0
 800f612:	4313      	orrs	r3, r2
 800f614:	3401      	adds	r4, #1
 800f616:	9304      	str	r3, [sp, #16]
 800f618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f61c:	4825      	ldr	r0, [pc, #148]	; (800f6b4 <_svfiprintf_r+0x1ec>)
 800f61e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f622:	2206      	movs	r2, #6
 800f624:	f7f0 fe5c 	bl	80002e0 <memchr>
 800f628:	2800      	cmp	r0, #0
 800f62a:	d038      	beq.n	800f69e <_svfiprintf_r+0x1d6>
 800f62c:	4b22      	ldr	r3, [pc, #136]	; (800f6b8 <_svfiprintf_r+0x1f0>)
 800f62e:	bb1b      	cbnz	r3, 800f678 <_svfiprintf_r+0x1b0>
 800f630:	9b03      	ldr	r3, [sp, #12]
 800f632:	3307      	adds	r3, #7
 800f634:	f023 0307 	bic.w	r3, r3, #7
 800f638:	3308      	adds	r3, #8
 800f63a:	9303      	str	r3, [sp, #12]
 800f63c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f63e:	4433      	add	r3, r6
 800f640:	9309      	str	r3, [sp, #36]	; 0x24
 800f642:	e768      	b.n	800f516 <_svfiprintf_r+0x4e>
 800f644:	fb0c 3202 	mla	r2, ip, r2, r3
 800f648:	460c      	mov	r4, r1
 800f64a:	2001      	movs	r0, #1
 800f64c:	e7a6      	b.n	800f59c <_svfiprintf_r+0xd4>
 800f64e:	2300      	movs	r3, #0
 800f650:	3401      	adds	r4, #1
 800f652:	9305      	str	r3, [sp, #20]
 800f654:	4619      	mov	r1, r3
 800f656:	f04f 0c0a 	mov.w	ip, #10
 800f65a:	4620      	mov	r0, r4
 800f65c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f660:	3a30      	subs	r2, #48	; 0x30
 800f662:	2a09      	cmp	r2, #9
 800f664:	d903      	bls.n	800f66e <_svfiprintf_r+0x1a6>
 800f666:	2b00      	cmp	r3, #0
 800f668:	d0c6      	beq.n	800f5f8 <_svfiprintf_r+0x130>
 800f66a:	9105      	str	r1, [sp, #20]
 800f66c:	e7c4      	b.n	800f5f8 <_svfiprintf_r+0x130>
 800f66e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f672:	4604      	mov	r4, r0
 800f674:	2301      	movs	r3, #1
 800f676:	e7f0      	b.n	800f65a <_svfiprintf_r+0x192>
 800f678:	ab03      	add	r3, sp, #12
 800f67a:	9300      	str	r3, [sp, #0]
 800f67c:	462a      	mov	r2, r5
 800f67e:	4b0f      	ldr	r3, [pc, #60]	; (800f6bc <_svfiprintf_r+0x1f4>)
 800f680:	a904      	add	r1, sp, #16
 800f682:	4638      	mov	r0, r7
 800f684:	f3af 8000 	nop.w
 800f688:	1c42      	adds	r2, r0, #1
 800f68a:	4606      	mov	r6, r0
 800f68c:	d1d6      	bne.n	800f63c <_svfiprintf_r+0x174>
 800f68e:	89ab      	ldrh	r3, [r5, #12]
 800f690:	065b      	lsls	r3, r3, #25
 800f692:	f53f af2d 	bmi.w	800f4f0 <_svfiprintf_r+0x28>
 800f696:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f698:	b01d      	add	sp, #116	; 0x74
 800f69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f69e:	ab03      	add	r3, sp, #12
 800f6a0:	9300      	str	r3, [sp, #0]
 800f6a2:	462a      	mov	r2, r5
 800f6a4:	4b05      	ldr	r3, [pc, #20]	; (800f6bc <_svfiprintf_r+0x1f4>)
 800f6a6:	a904      	add	r1, sp, #16
 800f6a8:	4638      	mov	r0, r7
 800f6aa:	f000 f879 	bl	800f7a0 <_printf_i>
 800f6ae:	e7eb      	b.n	800f688 <_svfiprintf_r+0x1c0>
 800f6b0:	08010171 	.word	0x08010171
 800f6b4:	0801017b 	.word	0x0801017b
 800f6b8:	00000000 	.word	0x00000000
 800f6bc:	0800f415 	.word	0x0800f415
 800f6c0:	08010177 	.word	0x08010177

0800f6c4 <_printf_common>:
 800f6c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6c8:	4616      	mov	r6, r2
 800f6ca:	4699      	mov	r9, r3
 800f6cc:	688a      	ldr	r2, [r1, #8]
 800f6ce:	690b      	ldr	r3, [r1, #16]
 800f6d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f6d4:	4293      	cmp	r3, r2
 800f6d6:	bfb8      	it	lt
 800f6d8:	4613      	movlt	r3, r2
 800f6da:	6033      	str	r3, [r6, #0]
 800f6dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f6e0:	4607      	mov	r7, r0
 800f6e2:	460c      	mov	r4, r1
 800f6e4:	b10a      	cbz	r2, 800f6ea <_printf_common+0x26>
 800f6e6:	3301      	adds	r3, #1
 800f6e8:	6033      	str	r3, [r6, #0]
 800f6ea:	6823      	ldr	r3, [r4, #0]
 800f6ec:	0699      	lsls	r1, r3, #26
 800f6ee:	bf42      	ittt	mi
 800f6f0:	6833      	ldrmi	r3, [r6, #0]
 800f6f2:	3302      	addmi	r3, #2
 800f6f4:	6033      	strmi	r3, [r6, #0]
 800f6f6:	6825      	ldr	r5, [r4, #0]
 800f6f8:	f015 0506 	ands.w	r5, r5, #6
 800f6fc:	d106      	bne.n	800f70c <_printf_common+0x48>
 800f6fe:	f104 0a19 	add.w	sl, r4, #25
 800f702:	68e3      	ldr	r3, [r4, #12]
 800f704:	6832      	ldr	r2, [r6, #0]
 800f706:	1a9b      	subs	r3, r3, r2
 800f708:	42ab      	cmp	r3, r5
 800f70a:	dc26      	bgt.n	800f75a <_printf_common+0x96>
 800f70c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f710:	1e13      	subs	r3, r2, #0
 800f712:	6822      	ldr	r2, [r4, #0]
 800f714:	bf18      	it	ne
 800f716:	2301      	movne	r3, #1
 800f718:	0692      	lsls	r2, r2, #26
 800f71a:	d42b      	bmi.n	800f774 <_printf_common+0xb0>
 800f71c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f720:	4649      	mov	r1, r9
 800f722:	4638      	mov	r0, r7
 800f724:	47c0      	blx	r8
 800f726:	3001      	adds	r0, #1
 800f728:	d01e      	beq.n	800f768 <_printf_common+0xa4>
 800f72a:	6823      	ldr	r3, [r4, #0]
 800f72c:	6922      	ldr	r2, [r4, #16]
 800f72e:	f003 0306 	and.w	r3, r3, #6
 800f732:	2b04      	cmp	r3, #4
 800f734:	bf02      	ittt	eq
 800f736:	68e5      	ldreq	r5, [r4, #12]
 800f738:	6833      	ldreq	r3, [r6, #0]
 800f73a:	1aed      	subeq	r5, r5, r3
 800f73c:	68a3      	ldr	r3, [r4, #8]
 800f73e:	bf0c      	ite	eq
 800f740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f744:	2500      	movne	r5, #0
 800f746:	4293      	cmp	r3, r2
 800f748:	bfc4      	itt	gt
 800f74a:	1a9b      	subgt	r3, r3, r2
 800f74c:	18ed      	addgt	r5, r5, r3
 800f74e:	2600      	movs	r6, #0
 800f750:	341a      	adds	r4, #26
 800f752:	42b5      	cmp	r5, r6
 800f754:	d11a      	bne.n	800f78c <_printf_common+0xc8>
 800f756:	2000      	movs	r0, #0
 800f758:	e008      	b.n	800f76c <_printf_common+0xa8>
 800f75a:	2301      	movs	r3, #1
 800f75c:	4652      	mov	r2, sl
 800f75e:	4649      	mov	r1, r9
 800f760:	4638      	mov	r0, r7
 800f762:	47c0      	blx	r8
 800f764:	3001      	adds	r0, #1
 800f766:	d103      	bne.n	800f770 <_printf_common+0xac>
 800f768:	f04f 30ff 	mov.w	r0, #4294967295
 800f76c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f770:	3501      	adds	r5, #1
 800f772:	e7c6      	b.n	800f702 <_printf_common+0x3e>
 800f774:	18e1      	adds	r1, r4, r3
 800f776:	1c5a      	adds	r2, r3, #1
 800f778:	2030      	movs	r0, #48	; 0x30
 800f77a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f77e:	4422      	add	r2, r4
 800f780:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f784:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f788:	3302      	adds	r3, #2
 800f78a:	e7c7      	b.n	800f71c <_printf_common+0x58>
 800f78c:	2301      	movs	r3, #1
 800f78e:	4622      	mov	r2, r4
 800f790:	4649      	mov	r1, r9
 800f792:	4638      	mov	r0, r7
 800f794:	47c0      	blx	r8
 800f796:	3001      	adds	r0, #1
 800f798:	d0e6      	beq.n	800f768 <_printf_common+0xa4>
 800f79a:	3601      	adds	r6, #1
 800f79c:	e7d9      	b.n	800f752 <_printf_common+0x8e>
	...

0800f7a0 <_printf_i>:
 800f7a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f7a4:	7e0f      	ldrb	r7, [r1, #24]
 800f7a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f7a8:	2f78      	cmp	r7, #120	; 0x78
 800f7aa:	4691      	mov	r9, r2
 800f7ac:	4680      	mov	r8, r0
 800f7ae:	460c      	mov	r4, r1
 800f7b0:	469a      	mov	sl, r3
 800f7b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f7b6:	d807      	bhi.n	800f7c8 <_printf_i+0x28>
 800f7b8:	2f62      	cmp	r7, #98	; 0x62
 800f7ba:	d80a      	bhi.n	800f7d2 <_printf_i+0x32>
 800f7bc:	2f00      	cmp	r7, #0
 800f7be:	f000 80d4 	beq.w	800f96a <_printf_i+0x1ca>
 800f7c2:	2f58      	cmp	r7, #88	; 0x58
 800f7c4:	f000 80c0 	beq.w	800f948 <_printf_i+0x1a8>
 800f7c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f7cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f7d0:	e03a      	b.n	800f848 <_printf_i+0xa8>
 800f7d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f7d6:	2b15      	cmp	r3, #21
 800f7d8:	d8f6      	bhi.n	800f7c8 <_printf_i+0x28>
 800f7da:	a101      	add	r1, pc, #4	; (adr r1, 800f7e0 <_printf_i+0x40>)
 800f7dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f7e0:	0800f839 	.word	0x0800f839
 800f7e4:	0800f84d 	.word	0x0800f84d
 800f7e8:	0800f7c9 	.word	0x0800f7c9
 800f7ec:	0800f7c9 	.word	0x0800f7c9
 800f7f0:	0800f7c9 	.word	0x0800f7c9
 800f7f4:	0800f7c9 	.word	0x0800f7c9
 800f7f8:	0800f84d 	.word	0x0800f84d
 800f7fc:	0800f7c9 	.word	0x0800f7c9
 800f800:	0800f7c9 	.word	0x0800f7c9
 800f804:	0800f7c9 	.word	0x0800f7c9
 800f808:	0800f7c9 	.word	0x0800f7c9
 800f80c:	0800f951 	.word	0x0800f951
 800f810:	0800f879 	.word	0x0800f879
 800f814:	0800f90b 	.word	0x0800f90b
 800f818:	0800f7c9 	.word	0x0800f7c9
 800f81c:	0800f7c9 	.word	0x0800f7c9
 800f820:	0800f973 	.word	0x0800f973
 800f824:	0800f7c9 	.word	0x0800f7c9
 800f828:	0800f879 	.word	0x0800f879
 800f82c:	0800f7c9 	.word	0x0800f7c9
 800f830:	0800f7c9 	.word	0x0800f7c9
 800f834:	0800f913 	.word	0x0800f913
 800f838:	682b      	ldr	r3, [r5, #0]
 800f83a:	1d1a      	adds	r2, r3, #4
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	602a      	str	r2, [r5, #0]
 800f840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f848:	2301      	movs	r3, #1
 800f84a:	e09f      	b.n	800f98c <_printf_i+0x1ec>
 800f84c:	6820      	ldr	r0, [r4, #0]
 800f84e:	682b      	ldr	r3, [r5, #0]
 800f850:	0607      	lsls	r7, r0, #24
 800f852:	f103 0104 	add.w	r1, r3, #4
 800f856:	6029      	str	r1, [r5, #0]
 800f858:	d501      	bpl.n	800f85e <_printf_i+0xbe>
 800f85a:	681e      	ldr	r6, [r3, #0]
 800f85c:	e003      	b.n	800f866 <_printf_i+0xc6>
 800f85e:	0646      	lsls	r6, r0, #25
 800f860:	d5fb      	bpl.n	800f85a <_printf_i+0xba>
 800f862:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f866:	2e00      	cmp	r6, #0
 800f868:	da03      	bge.n	800f872 <_printf_i+0xd2>
 800f86a:	232d      	movs	r3, #45	; 0x2d
 800f86c:	4276      	negs	r6, r6
 800f86e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f872:	485a      	ldr	r0, [pc, #360]	; (800f9dc <_printf_i+0x23c>)
 800f874:	230a      	movs	r3, #10
 800f876:	e012      	b.n	800f89e <_printf_i+0xfe>
 800f878:	682b      	ldr	r3, [r5, #0]
 800f87a:	6820      	ldr	r0, [r4, #0]
 800f87c:	1d19      	adds	r1, r3, #4
 800f87e:	6029      	str	r1, [r5, #0]
 800f880:	0605      	lsls	r5, r0, #24
 800f882:	d501      	bpl.n	800f888 <_printf_i+0xe8>
 800f884:	681e      	ldr	r6, [r3, #0]
 800f886:	e002      	b.n	800f88e <_printf_i+0xee>
 800f888:	0641      	lsls	r1, r0, #25
 800f88a:	d5fb      	bpl.n	800f884 <_printf_i+0xe4>
 800f88c:	881e      	ldrh	r6, [r3, #0]
 800f88e:	4853      	ldr	r0, [pc, #332]	; (800f9dc <_printf_i+0x23c>)
 800f890:	2f6f      	cmp	r7, #111	; 0x6f
 800f892:	bf0c      	ite	eq
 800f894:	2308      	moveq	r3, #8
 800f896:	230a      	movne	r3, #10
 800f898:	2100      	movs	r1, #0
 800f89a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f89e:	6865      	ldr	r5, [r4, #4]
 800f8a0:	60a5      	str	r5, [r4, #8]
 800f8a2:	2d00      	cmp	r5, #0
 800f8a4:	bfa2      	ittt	ge
 800f8a6:	6821      	ldrge	r1, [r4, #0]
 800f8a8:	f021 0104 	bicge.w	r1, r1, #4
 800f8ac:	6021      	strge	r1, [r4, #0]
 800f8ae:	b90e      	cbnz	r6, 800f8b4 <_printf_i+0x114>
 800f8b0:	2d00      	cmp	r5, #0
 800f8b2:	d04b      	beq.n	800f94c <_printf_i+0x1ac>
 800f8b4:	4615      	mov	r5, r2
 800f8b6:	fbb6 f1f3 	udiv	r1, r6, r3
 800f8ba:	fb03 6711 	mls	r7, r3, r1, r6
 800f8be:	5dc7      	ldrb	r7, [r0, r7]
 800f8c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f8c4:	4637      	mov	r7, r6
 800f8c6:	42bb      	cmp	r3, r7
 800f8c8:	460e      	mov	r6, r1
 800f8ca:	d9f4      	bls.n	800f8b6 <_printf_i+0x116>
 800f8cc:	2b08      	cmp	r3, #8
 800f8ce:	d10b      	bne.n	800f8e8 <_printf_i+0x148>
 800f8d0:	6823      	ldr	r3, [r4, #0]
 800f8d2:	07de      	lsls	r6, r3, #31
 800f8d4:	d508      	bpl.n	800f8e8 <_printf_i+0x148>
 800f8d6:	6923      	ldr	r3, [r4, #16]
 800f8d8:	6861      	ldr	r1, [r4, #4]
 800f8da:	4299      	cmp	r1, r3
 800f8dc:	bfde      	ittt	le
 800f8de:	2330      	movle	r3, #48	; 0x30
 800f8e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f8e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f8e8:	1b52      	subs	r2, r2, r5
 800f8ea:	6122      	str	r2, [r4, #16]
 800f8ec:	f8cd a000 	str.w	sl, [sp]
 800f8f0:	464b      	mov	r3, r9
 800f8f2:	aa03      	add	r2, sp, #12
 800f8f4:	4621      	mov	r1, r4
 800f8f6:	4640      	mov	r0, r8
 800f8f8:	f7ff fee4 	bl	800f6c4 <_printf_common>
 800f8fc:	3001      	adds	r0, #1
 800f8fe:	d14a      	bne.n	800f996 <_printf_i+0x1f6>
 800f900:	f04f 30ff 	mov.w	r0, #4294967295
 800f904:	b004      	add	sp, #16
 800f906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f90a:	6823      	ldr	r3, [r4, #0]
 800f90c:	f043 0320 	orr.w	r3, r3, #32
 800f910:	6023      	str	r3, [r4, #0]
 800f912:	4833      	ldr	r0, [pc, #204]	; (800f9e0 <_printf_i+0x240>)
 800f914:	2778      	movs	r7, #120	; 0x78
 800f916:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f91a:	6823      	ldr	r3, [r4, #0]
 800f91c:	6829      	ldr	r1, [r5, #0]
 800f91e:	061f      	lsls	r7, r3, #24
 800f920:	f851 6b04 	ldr.w	r6, [r1], #4
 800f924:	d402      	bmi.n	800f92c <_printf_i+0x18c>
 800f926:	065f      	lsls	r7, r3, #25
 800f928:	bf48      	it	mi
 800f92a:	b2b6      	uxthmi	r6, r6
 800f92c:	07df      	lsls	r7, r3, #31
 800f92e:	bf48      	it	mi
 800f930:	f043 0320 	orrmi.w	r3, r3, #32
 800f934:	6029      	str	r1, [r5, #0]
 800f936:	bf48      	it	mi
 800f938:	6023      	strmi	r3, [r4, #0]
 800f93a:	b91e      	cbnz	r6, 800f944 <_printf_i+0x1a4>
 800f93c:	6823      	ldr	r3, [r4, #0]
 800f93e:	f023 0320 	bic.w	r3, r3, #32
 800f942:	6023      	str	r3, [r4, #0]
 800f944:	2310      	movs	r3, #16
 800f946:	e7a7      	b.n	800f898 <_printf_i+0xf8>
 800f948:	4824      	ldr	r0, [pc, #144]	; (800f9dc <_printf_i+0x23c>)
 800f94a:	e7e4      	b.n	800f916 <_printf_i+0x176>
 800f94c:	4615      	mov	r5, r2
 800f94e:	e7bd      	b.n	800f8cc <_printf_i+0x12c>
 800f950:	682b      	ldr	r3, [r5, #0]
 800f952:	6826      	ldr	r6, [r4, #0]
 800f954:	6961      	ldr	r1, [r4, #20]
 800f956:	1d18      	adds	r0, r3, #4
 800f958:	6028      	str	r0, [r5, #0]
 800f95a:	0635      	lsls	r5, r6, #24
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	d501      	bpl.n	800f964 <_printf_i+0x1c4>
 800f960:	6019      	str	r1, [r3, #0]
 800f962:	e002      	b.n	800f96a <_printf_i+0x1ca>
 800f964:	0670      	lsls	r0, r6, #25
 800f966:	d5fb      	bpl.n	800f960 <_printf_i+0x1c0>
 800f968:	8019      	strh	r1, [r3, #0]
 800f96a:	2300      	movs	r3, #0
 800f96c:	6123      	str	r3, [r4, #16]
 800f96e:	4615      	mov	r5, r2
 800f970:	e7bc      	b.n	800f8ec <_printf_i+0x14c>
 800f972:	682b      	ldr	r3, [r5, #0]
 800f974:	1d1a      	adds	r2, r3, #4
 800f976:	602a      	str	r2, [r5, #0]
 800f978:	681d      	ldr	r5, [r3, #0]
 800f97a:	6862      	ldr	r2, [r4, #4]
 800f97c:	2100      	movs	r1, #0
 800f97e:	4628      	mov	r0, r5
 800f980:	f7f0 fcae 	bl	80002e0 <memchr>
 800f984:	b108      	cbz	r0, 800f98a <_printf_i+0x1ea>
 800f986:	1b40      	subs	r0, r0, r5
 800f988:	6060      	str	r0, [r4, #4]
 800f98a:	6863      	ldr	r3, [r4, #4]
 800f98c:	6123      	str	r3, [r4, #16]
 800f98e:	2300      	movs	r3, #0
 800f990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f994:	e7aa      	b.n	800f8ec <_printf_i+0x14c>
 800f996:	6923      	ldr	r3, [r4, #16]
 800f998:	462a      	mov	r2, r5
 800f99a:	4649      	mov	r1, r9
 800f99c:	4640      	mov	r0, r8
 800f99e:	47d0      	blx	sl
 800f9a0:	3001      	adds	r0, #1
 800f9a2:	d0ad      	beq.n	800f900 <_printf_i+0x160>
 800f9a4:	6823      	ldr	r3, [r4, #0]
 800f9a6:	079b      	lsls	r3, r3, #30
 800f9a8:	d413      	bmi.n	800f9d2 <_printf_i+0x232>
 800f9aa:	68e0      	ldr	r0, [r4, #12]
 800f9ac:	9b03      	ldr	r3, [sp, #12]
 800f9ae:	4298      	cmp	r0, r3
 800f9b0:	bfb8      	it	lt
 800f9b2:	4618      	movlt	r0, r3
 800f9b4:	e7a6      	b.n	800f904 <_printf_i+0x164>
 800f9b6:	2301      	movs	r3, #1
 800f9b8:	4632      	mov	r2, r6
 800f9ba:	4649      	mov	r1, r9
 800f9bc:	4640      	mov	r0, r8
 800f9be:	47d0      	blx	sl
 800f9c0:	3001      	adds	r0, #1
 800f9c2:	d09d      	beq.n	800f900 <_printf_i+0x160>
 800f9c4:	3501      	adds	r5, #1
 800f9c6:	68e3      	ldr	r3, [r4, #12]
 800f9c8:	9903      	ldr	r1, [sp, #12]
 800f9ca:	1a5b      	subs	r3, r3, r1
 800f9cc:	42ab      	cmp	r3, r5
 800f9ce:	dcf2      	bgt.n	800f9b6 <_printf_i+0x216>
 800f9d0:	e7eb      	b.n	800f9aa <_printf_i+0x20a>
 800f9d2:	2500      	movs	r5, #0
 800f9d4:	f104 0619 	add.w	r6, r4, #25
 800f9d8:	e7f5      	b.n	800f9c6 <_printf_i+0x226>
 800f9da:	bf00      	nop
 800f9dc:	08010182 	.word	0x08010182
 800f9e0:	08010193 	.word	0x08010193

0800f9e4 <memmove>:
 800f9e4:	4288      	cmp	r0, r1
 800f9e6:	b510      	push	{r4, lr}
 800f9e8:	eb01 0402 	add.w	r4, r1, r2
 800f9ec:	d902      	bls.n	800f9f4 <memmove+0x10>
 800f9ee:	4284      	cmp	r4, r0
 800f9f0:	4623      	mov	r3, r4
 800f9f2:	d807      	bhi.n	800fa04 <memmove+0x20>
 800f9f4:	1e43      	subs	r3, r0, #1
 800f9f6:	42a1      	cmp	r1, r4
 800f9f8:	d008      	beq.n	800fa0c <memmove+0x28>
 800f9fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f9fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fa02:	e7f8      	b.n	800f9f6 <memmove+0x12>
 800fa04:	4402      	add	r2, r0
 800fa06:	4601      	mov	r1, r0
 800fa08:	428a      	cmp	r2, r1
 800fa0a:	d100      	bne.n	800fa0e <memmove+0x2a>
 800fa0c:	bd10      	pop	{r4, pc}
 800fa0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fa12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fa16:	e7f7      	b.n	800fa08 <memmove+0x24>

0800fa18 <_realloc_r>:
 800fa18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa1c:	4680      	mov	r8, r0
 800fa1e:	4614      	mov	r4, r2
 800fa20:	460e      	mov	r6, r1
 800fa22:	b921      	cbnz	r1, 800fa2e <_realloc_r+0x16>
 800fa24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa28:	4611      	mov	r1, r2
 800fa2a:	f7ff bad7 	b.w	800efdc <_malloc_r>
 800fa2e:	b92a      	cbnz	r2, 800fa3c <_realloc_r+0x24>
 800fa30:	f7ff fca4 	bl	800f37c <_free_r>
 800fa34:	4625      	mov	r5, r4
 800fa36:	4628      	mov	r0, r5
 800fa38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa3c:	f000 f81b 	bl	800fa76 <_malloc_usable_size_r>
 800fa40:	4284      	cmp	r4, r0
 800fa42:	4607      	mov	r7, r0
 800fa44:	d802      	bhi.n	800fa4c <_realloc_r+0x34>
 800fa46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fa4a:	d812      	bhi.n	800fa72 <_realloc_r+0x5a>
 800fa4c:	4621      	mov	r1, r4
 800fa4e:	4640      	mov	r0, r8
 800fa50:	f7ff fac4 	bl	800efdc <_malloc_r>
 800fa54:	4605      	mov	r5, r0
 800fa56:	2800      	cmp	r0, #0
 800fa58:	d0ed      	beq.n	800fa36 <_realloc_r+0x1e>
 800fa5a:	42bc      	cmp	r4, r7
 800fa5c:	4622      	mov	r2, r4
 800fa5e:	4631      	mov	r1, r6
 800fa60:	bf28      	it	cs
 800fa62:	463a      	movcs	r2, r7
 800fa64:	f7ff fc7c 	bl	800f360 <memcpy>
 800fa68:	4631      	mov	r1, r6
 800fa6a:	4640      	mov	r0, r8
 800fa6c:	f7ff fc86 	bl	800f37c <_free_r>
 800fa70:	e7e1      	b.n	800fa36 <_realloc_r+0x1e>
 800fa72:	4635      	mov	r5, r6
 800fa74:	e7df      	b.n	800fa36 <_realloc_r+0x1e>

0800fa76 <_malloc_usable_size_r>:
 800fa76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa7a:	1f18      	subs	r0, r3, #4
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	bfbc      	itt	lt
 800fa80:	580b      	ldrlt	r3, [r1, r0]
 800fa82:	18c0      	addlt	r0, r0, r3
 800fa84:	4770      	bx	lr
	...

0800fa88 <_init>:
 800fa88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa8a:	bf00      	nop
 800fa8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa8e:	bc08      	pop	{r3}
 800fa90:	469e      	mov	lr, r3
 800fa92:	4770      	bx	lr

0800fa94 <_fini>:
 800fa94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa96:	bf00      	nop
 800fa98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa9a:	bc08      	pop	{r3}
 800fa9c:	469e      	mov	lr, r3
 800fa9e:	4770      	bx	lr
