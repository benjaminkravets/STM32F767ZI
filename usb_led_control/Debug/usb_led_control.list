
usb_led_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dcf0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  0800def0  0800def0  0001def0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e130  0800e130  000202b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e130  0800e130  0001e130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e138  0800e138  000202b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e138  0800e138  0001e138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e13c  0800e13c  0001e13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800e140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000174  0800e2b4  00020174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000214  0800e354  00020214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00007070  200002b4  0800e3f4  000202b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20007324  0800e3f4  00027324  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00030117  00000000  00000000  000202e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005a64  00000000  00000000  000503f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002300  00000000  00000000  00055e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002098  00000000  00000000  00058160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000ac78  00000000  00000000  0005a1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002915b  00000000  00000000  00064e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00117866  00000000  00000000  0008dfcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001a5831  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000096ec  00000000  00000000  001a5884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002b4 	.word	0x200002b4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ded8 	.word	0x0800ded8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002b8 	.word	0x200002b8
 800023c:	0800ded8 	.word	0x0800ded8

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	200002d0 	.word	0x200002d0

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b974 	b.w	80005d4 <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9d08      	ldr	r5, [sp, #32]
 800030a:	4604      	mov	r4, r0
 800030c:	468e      	mov	lr, r1
 800030e:	2b00      	cmp	r3, #0
 8000310:	d14d      	bne.n	80003ae <__udivmoddi4+0xaa>
 8000312:	428a      	cmp	r2, r1
 8000314:	4694      	mov	ip, r2
 8000316:	d969      	bls.n	80003ec <__udivmoddi4+0xe8>
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	b152      	cbz	r2, 8000334 <__udivmoddi4+0x30>
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	f1c2 0120 	rsb	r1, r2, #32
 8000326:	fa20 f101 	lsr.w	r1, r0, r1
 800032a:	fa0c fc02 	lsl.w	ip, ip, r2
 800032e:	ea41 0e03 	orr.w	lr, r1, r3
 8000332:	4094      	lsls	r4, r2
 8000334:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000338:	0c21      	lsrs	r1, r4, #16
 800033a:	fbbe f6f8 	udiv	r6, lr, r8
 800033e:	fa1f f78c 	uxth.w	r7, ip
 8000342:	fb08 e316 	mls	r3, r8, r6, lr
 8000346:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034a:	fb06 f107 	mul.w	r1, r6, r7
 800034e:	4299      	cmp	r1, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x64>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 811f 	bcs.w	800059c <__udivmoddi4+0x298>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 811c 	bls.w	800059c <__udivmoddi4+0x298>
 8000364:	3e02      	subs	r6, #2
 8000366:	4463      	add	r3, ip
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 f707 	mul.w	r7, r0, r7
 800037c:	42a7      	cmp	r7, r4
 800037e:	d90a      	bls.n	8000396 <__udivmoddi4+0x92>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 33ff 	add.w	r3, r0, #4294967295
 8000388:	f080 810a 	bcs.w	80005a0 <__udivmoddi4+0x29c>
 800038c:	42a7      	cmp	r7, r4
 800038e:	f240 8107 	bls.w	80005a0 <__udivmoddi4+0x29c>
 8000392:	4464      	add	r4, ip
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039a:	1be4      	subs	r4, r4, r7
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa4>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xc2>
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	f000 80ef 	beq.w	8000596 <__udivmoddi4+0x292>
 80003b8:	2600      	movs	r6, #0
 80003ba:	e9c5 0100 	strd	r0, r1, [r5]
 80003be:	4630      	mov	r0, r6
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f683 	clz	r6, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d14a      	bne.n	8000464 <__udivmoddi4+0x160>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd4>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80f9 	bhi.w	80005ca <__udivmoddi4+0x2c6>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	469e      	mov	lr, r3
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa4>
 80003e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa4>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xec>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 8092 	bne.w	800051e <__udivmoddi4+0x21a>
 80003fa:	eba1 010c 	sub.w	r1, r1, ip
 80003fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000402:	fa1f fe8c 	uxth.w	lr, ip
 8000406:	2601      	movs	r6, #1
 8000408:	0c20      	lsrs	r0, r4, #16
 800040a:	fbb1 f3f7 	udiv	r3, r1, r7
 800040e:	fb07 1113 	mls	r1, r7, r3, r1
 8000412:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000416:	fb0e f003 	mul.w	r0, lr, r3
 800041a:	4288      	cmp	r0, r1
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x12c>
 800041e:	eb1c 0101 	adds.w	r1, ip, r1
 8000422:	f103 38ff 	add.w	r8, r3, #4294967295
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0x12a>
 8000428:	4288      	cmp	r0, r1
 800042a:	f200 80cb 	bhi.w	80005c4 <__udivmoddi4+0x2c0>
 800042e:	4643      	mov	r3, r8
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1110 	mls	r1, r7, r0, r1
 800043c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000440:	fb0e fe00 	mul.w	lr, lr, r0
 8000444:	45a6      	cmp	lr, r4
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x156>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d202      	bcs.n	8000458 <__udivmoddi4+0x154>
 8000452:	45a6      	cmp	lr, r4
 8000454:	f200 80bb 	bhi.w	80005ce <__udivmoddi4+0x2ca>
 8000458:	4608      	mov	r0, r1
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000462:	e79c      	b.n	800039e <__udivmoddi4+0x9a>
 8000464:	f1c6 0720 	rsb	r7, r6, #32
 8000468:	40b3      	lsls	r3, r6
 800046a:	fa22 fc07 	lsr.w	ip, r2, r7
 800046e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000472:	fa20 f407 	lsr.w	r4, r0, r7
 8000476:	fa01 f306 	lsl.w	r3, r1, r6
 800047a:	431c      	orrs	r4, r3
 800047c:	40f9      	lsrs	r1, r7
 800047e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000482:	fa00 f306 	lsl.w	r3, r0, r6
 8000486:	fbb1 f8f9 	udiv	r8, r1, r9
 800048a:	0c20      	lsrs	r0, r4, #16
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	fb09 1118 	mls	r1, r9, r8, r1
 8000494:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000498:	fb08 f00e 	mul.w	r0, r8, lr
 800049c:	4288      	cmp	r0, r1
 800049e:	fa02 f206 	lsl.w	r2, r2, r6
 80004a2:	d90b      	bls.n	80004bc <__udivmoddi4+0x1b8>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004ac:	f080 8088 	bcs.w	80005c0 <__udivmoddi4+0x2bc>
 80004b0:	4288      	cmp	r0, r1
 80004b2:	f240 8085 	bls.w	80005c0 <__udivmoddi4+0x2bc>
 80004b6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	1a09      	subs	r1, r1, r0
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c4:	fb09 1110 	mls	r1, r9, r0, r1
 80004c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d0:	458e      	cmp	lr, r1
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x1e2>
 80004d4:	eb1c 0101 	adds.w	r1, ip, r1
 80004d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80004dc:	d26c      	bcs.n	80005b8 <__udivmoddi4+0x2b4>
 80004de:	458e      	cmp	lr, r1
 80004e0:	d96a      	bls.n	80005b8 <__udivmoddi4+0x2b4>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4461      	add	r1, ip
 80004e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ea:	fba0 9402 	umull	r9, r4, r0, r2
 80004ee:	eba1 010e 	sub.w	r1, r1, lr
 80004f2:	42a1      	cmp	r1, r4
 80004f4:	46c8      	mov	r8, r9
 80004f6:	46a6      	mov	lr, r4
 80004f8:	d356      	bcc.n	80005a8 <__udivmoddi4+0x2a4>
 80004fa:	d053      	beq.n	80005a4 <__udivmoddi4+0x2a0>
 80004fc:	b15d      	cbz	r5, 8000516 <__udivmoddi4+0x212>
 80004fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000502:	eb61 010e 	sbc.w	r1, r1, lr
 8000506:	fa01 f707 	lsl.w	r7, r1, r7
 800050a:	fa22 f306 	lsr.w	r3, r2, r6
 800050e:	40f1      	lsrs	r1, r6
 8000510:	431f      	orrs	r7, r3
 8000512:	e9c5 7100 	strd	r7, r1, [r5]
 8000516:	2600      	movs	r6, #0
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	f1c2 0320 	rsb	r3, r2, #32
 8000522:	40d8      	lsrs	r0, r3
 8000524:	fa0c fc02 	lsl.w	ip, ip, r2
 8000528:	fa21 f303 	lsr.w	r3, r1, r3
 800052c:	4091      	lsls	r1, r2
 800052e:	4301      	orrs	r1, r0
 8000530:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000534:	fa1f fe8c 	uxth.w	lr, ip
 8000538:	fbb3 f0f7 	udiv	r0, r3, r7
 800053c:	fb07 3610 	mls	r6, r7, r0, r3
 8000540:	0c0b      	lsrs	r3, r1, #16
 8000542:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000546:	fb00 f60e 	mul.w	r6, r0, lr
 800054a:	429e      	cmp	r6, r3
 800054c:	fa04 f402 	lsl.w	r4, r4, r2
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x260>
 8000552:	eb1c 0303 	adds.w	r3, ip, r3
 8000556:	f100 38ff 	add.w	r8, r0, #4294967295
 800055a:	d22f      	bcs.n	80005bc <__udivmoddi4+0x2b8>
 800055c:	429e      	cmp	r6, r3
 800055e:	d92d      	bls.n	80005bc <__udivmoddi4+0x2b8>
 8000560:	3802      	subs	r0, #2
 8000562:	4463      	add	r3, ip
 8000564:	1b9b      	subs	r3, r3, r6
 8000566:	b289      	uxth	r1, r1
 8000568:	fbb3 f6f7 	udiv	r6, r3, r7
 800056c:	fb07 3316 	mls	r3, r7, r6, r3
 8000570:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000574:	fb06 f30e 	mul.w	r3, r6, lr
 8000578:	428b      	cmp	r3, r1
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x28a>
 800057c:	eb1c 0101 	adds.w	r1, ip, r1
 8000580:	f106 38ff 	add.w	r8, r6, #4294967295
 8000584:	d216      	bcs.n	80005b4 <__udivmoddi4+0x2b0>
 8000586:	428b      	cmp	r3, r1
 8000588:	d914      	bls.n	80005b4 <__udivmoddi4+0x2b0>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000594:	e738      	b.n	8000408 <__udivmoddi4+0x104>
 8000596:	462e      	mov	r6, r5
 8000598:	4628      	mov	r0, r5
 800059a:	e705      	b.n	80003a8 <__udivmoddi4+0xa4>
 800059c:	4606      	mov	r6, r0
 800059e:	e6e3      	b.n	8000368 <__udivmoddi4+0x64>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6f8      	b.n	8000396 <__udivmoddi4+0x92>
 80005a4:	454b      	cmp	r3, r9
 80005a6:	d2a9      	bcs.n	80004fc <__udivmoddi4+0x1f8>
 80005a8:	ebb9 0802 	subs.w	r8, r9, r2
 80005ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b0:	3801      	subs	r0, #1
 80005b2:	e7a3      	b.n	80004fc <__udivmoddi4+0x1f8>
 80005b4:	4646      	mov	r6, r8
 80005b6:	e7ea      	b.n	800058e <__udivmoddi4+0x28a>
 80005b8:	4620      	mov	r0, r4
 80005ba:	e794      	b.n	80004e6 <__udivmoddi4+0x1e2>
 80005bc:	4640      	mov	r0, r8
 80005be:	e7d1      	b.n	8000564 <__udivmoddi4+0x260>
 80005c0:	46d0      	mov	r8, sl
 80005c2:	e77b      	b.n	80004bc <__udivmoddi4+0x1b8>
 80005c4:	3b02      	subs	r3, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	e732      	b.n	8000430 <__udivmoddi4+0x12c>
 80005ca:	4630      	mov	r0, r6
 80005cc:	e709      	b.n	80003e2 <__udivmoddi4+0xde>
 80005ce:	4464      	add	r4, ip
 80005d0:	3802      	subs	r0, #2
 80005d2:	e742      	b.n	800045a <__udivmoddi4+0x156>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80005de:	4b26      	ldr	r3, [pc, #152]	; (8000678 <_DoInit+0xa0>)
 80005e0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80005e2:	22a8      	movs	r2, #168	; 0xa8
 80005e4:	2100      	movs	r1, #0
 80005e6:	6838      	ldr	r0, [r7, #0]
 80005e8:	f00d fb08 	bl	800dbfc <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	2203      	movs	r2, #3
 80005f0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	2203      	movs	r2, #3
 80005f6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	4a20      	ldr	r2, [pc, #128]	; (800067c <_DoInit+0xa4>)
 80005fc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	4a1f      	ldr	r2, [pc, #124]	; (8000680 <_DoInit+0xa8>)
 8000602:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800060a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	2200      	movs	r2, #0
 8000610:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	2200      	movs	r2, #0
 8000616:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	2200      	movs	r2, #0
 800061c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	4a16      	ldr	r2, [pc, #88]	; (800067c <_DoInit+0xa4>)
 8000622:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <_DoInit+0xac>)
 8000628:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	2210      	movs	r2, #16
 800062e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	2200      	movs	r2, #0
 8000634:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	2200      	movs	r2, #0
 800063a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	2200      	movs	r2, #0
 8000640:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000642:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	e00c      	b.n	8000666 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f1c3 030f 	rsb	r3, r3, #15
 8000652:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <_DoInit+0xb0>)
 8000654:	5cd1      	ldrb	r1, [r2, r3]
 8000656:	683a      	ldr	r2, [r7, #0]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4413      	add	r3, r2
 800065c:	460a      	mov	r2, r1
 800065e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3301      	adds	r3, #1
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b0f      	cmp	r3, #15
 800066a:	d9ef      	bls.n	800064c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800066c:	f3bf 8f5f 	dmb	sy
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200002d0 	.word	0x200002d0
 800067c:	0800def0 	.word	0x0800def0
 8000680:	20000378 	.word	0x20000378
 8000684:	20000778 	.word	0x20000778
 8000688:	0800e020 	.word	0x0800e020

0800068c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	; 0x30
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8000698:	4b3e      	ldr	r3, [pc, #248]	; (8000794 <SEGGER_RTT_ReadNoLock+0x108>)
 800069a:	623b      	str	r3, [r7, #32]
 800069c:	6a3b      	ldr	r3, [r7, #32]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d101      	bne.n	80006aa <SEGGER_RTT_ReadNoLock+0x1e>
 80006a6:	f7ff ff97 	bl	80005d8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	4613      	mov	r3, r2
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	4413      	add	r3, r2
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	3360      	adds	r3, #96	; 0x60
 80006b6:	4a37      	ldr	r2, [pc, #220]	; (8000794 <SEGGER_RTT_ReadNoLock+0x108>)
 80006b8:	4413      	add	r3, r2
 80006ba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80006d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d92b      	bls.n	8000730 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	689a      	ldr	r2, [r3, #8]
 80006dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80006e2:	697a      	ldr	r2, [r7, #20]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4293      	cmp	r3, r2
 80006e8:	bf28      	it	cs
 80006ea:	4613      	movcs	r3, r2
 80006ec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	685a      	ldr	r2, [r3, #4]
 80006f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f4:	4413      	add	r3, r2
 80006f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80006f8:	697a      	ldr	r2, [r7, #20]
 80006fa:	6939      	ldr	r1, [r7, #16]
 80006fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006fe:	f00d fa6f 	bl	800dbe0 <memcpy>
    NumBytesRead += NumBytesRem;
 8000702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	4413      	add	r3, r2
 8000708:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800070a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	4413      	add	r3, r2
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800071a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	4413      	add	r3, r2
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000728:	429a      	cmp	r2, r3
 800072a:	d101      	bne.n	8000730 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800072c:	2300      	movs	r3, #0
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8000730:	69ba      	ldr	r2, [r7, #24]
 8000732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000738:	697a      	ldr	r2, [r7, #20]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4293      	cmp	r3, r2
 800073e:	bf28      	it	cs
 8000740:	4613      	movcs	r3, r2
 8000742:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d019      	beq.n	800077e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	685a      	ldr	r2, [r3, #4]
 800074e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000750:	4413      	add	r3, r2
 8000752:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	6939      	ldr	r1, [r7, #16]
 8000758:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800075a:	f00d fa41 	bl	800dbe0 <memcpy>
    NumBytesRead += NumBytesRem;
 800075e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	4413      	add	r3, r2
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8000766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	4413      	add	r3, r2
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	4413      	add	r3, r2
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800077e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000780:	2b00      	cmp	r3, #0
 8000782:	d002      	beq.n	800078a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000788:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800078a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800078c:	4618      	mov	r0, r3
 800078e:	3730      	adds	r7, #48	; 0x30
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200002d0 	.word	0x200002d0

08000798 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
 80007a4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80007a6:	4b3d      	ldr	r3, [pc, #244]	; (800089c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007a8:	61bb      	str	r3, [r7, #24]
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d101      	bne.n	80007b8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80007b4:	f7ff ff10 	bl	80005d8 <_DoInit>
  SEGGER_RTT_LOCK();
 80007b8:	f3ef 8311 	mrs	r3, BASEPRI
 80007bc:	f04f 0120 	mov.w	r1, #32
 80007c0:	f381 8811 	msr	BASEPRI, r1
 80007c4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80007c6:	4b35      	ldr	r3, [pc, #212]	; (800089c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007c8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80007ce:	6939      	ldr	r1, [r7, #16]
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	4613      	mov	r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	4413      	add	r3, r2
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	440b      	add	r3, r1
 80007de:	3304      	adds	r3, #4
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d008      	beq.n	80007f8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	3301      	adds	r3, #1
 80007ea:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	691b      	ldr	r3, [r3, #16]
 80007f0:	69fa      	ldr	r2, [r7, #28]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	dbeb      	blt.n	80007ce <SEGGER_RTT_AllocUpBuffer+0x36>
 80007f6:	e000      	b.n	80007fa <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80007f8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	691b      	ldr	r3, [r3, #16]
 80007fe:	69fa      	ldr	r2, [r7, #28]
 8000800:	429a      	cmp	r2, r3
 8000802:	da3f      	bge.n	8000884 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8000804:	6939      	ldr	r1, [r7, #16]
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	4613      	mov	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	4413      	add	r3, r2
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	440b      	add	r3, r1
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8000818:	6939      	ldr	r1, [r7, #16]
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	1c5a      	adds	r2, r3, #1
 800081e:	4613      	mov	r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	4413      	add	r3, r2
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	440b      	add	r3, r1
 8000828:	3304      	adds	r3, #4
 800082a:	68ba      	ldr	r2, [r7, #8]
 800082c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800082e:	6939      	ldr	r1, [r7, #16]
 8000830:	69fa      	ldr	r2, [r7, #28]
 8000832:	4613      	mov	r3, r2
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	4413      	add	r3, r2
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	440b      	add	r3, r1
 800083c:	3320      	adds	r3, #32
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8000842:	6939      	ldr	r1, [r7, #16]
 8000844:	69fa      	ldr	r2, [r7, #28]
 8000846:	4613      	mov	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	4413      	add	r3, r2
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	440b      	add	r3, r1
 8000850:	3328      	adds	r3, #40	; 0x28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8000856:	6939      	ldr	r1, [r7, #16]
 8000858:	69fa      	ldr	r2, [r7, #28]
 800085a:	4613      	mov	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4413      	add	r3, r2
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	440b      	add	r3, r1
 8000864:	3324      	adds	r3, #36	; 0x24
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800086a:	6939      	ldr	r1, [r7, #16]
 800086c:	69fa      	ldr	r2, [r7, #28]
 800086e:	4613      	mov	r3, r2
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4413      	add	r3, r2
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	440b      	add	r3, r1
 8000878:	332c      	adds	r3, #44	; 0x2c
 800087a:	683a      	ldr	r2, [r7, #0]
 800087c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800087e:	f3bf 8f5f 	dmb	sy
 8000882:	e002      	b.n	800088a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8000884:	f04f 33ff 	mov.w	r3, #4294967295
 8000888:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8000890:	69fb      	ldr	r3, [r7, #28]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3720      	adds	r7, #32
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200002d0 	.word	0x200002d0

080008a0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
 80008ac:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008b0:	623b      	str	r3, [r7, #32]
 80008b2:	6a3b      	ldr	r3, [r7, #32]
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d101      	bne.n	80008c0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80008bc:	f7ff fe8c 	bl	80005d8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80008c0:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008c2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d82c      	bhi.n	8000924 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80008ca:	f3ef 8311 	mrs	r3, BASEPRI
 80008ce:	f04f 0120 	mov.w	r1, #32
 80008d2:	f381 8811 	msr	BASEPRI, r1
 80008d6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80008d8:	68fa      	ldr	r2, [r7, #12]
 80008da:	4613      	mov	r3, r2
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	4413      	add	r3, r2
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	3360      	adds	r3, #96	; 0x60
 80008e4:	69fa      	ldr	r2, [r7, #28]
 80008e6:	4413      	add	r3, r2
 80008e8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d00e      	beq.n	800090e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	683a      	ldr	r2, [r7, #0]
 8000900:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000912:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000914:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
 8000922:	e002      	b.n	800092a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8000924:	f04f 33ff 	mov.w	r3, #4294967295
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800092c:	4618      	mov	r0, r3
 800092e:	3728      	adds	r7, #40	; 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200002d0 	.word	0x200002d0

08000938 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8000938:	b480      	push	{r7}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	60fa      	str	r2, [r7, #12]
 800094e:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b80      	cmp	r3, #128	; 0x80
 8000954:	d90a      	bls.n	800096c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8000956:	2380      	movs	r3, #128	; 0x80
 8000958:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800095a:	e007      	b.n	800096c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 800095c:	68ba      	ldr	r2, [r7, #8]
 800095e:	1c53      	adds	r3, r2, #1
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	1c59      	adds	r1, r3, #1
 8000966:	60f9      	str	r1, [r7, #12]
 8000968:	7812      	ldrb	r2, [r2, #0]
 800096a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	1e5a      	subs	r2, r3, #1
 8000970:	607a      	str	r2, [r7, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d003      	beq.n	800097e <_EncodeStr+0x46>
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1ee      	bne.n	800095c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	b2da      	uxtb	r2, r3
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800098a:	68fb      	ldr	r3, [r7, #12]
}
 800098c:	4618      	mov	r0, r3
 800098e:	371c      	adds	r7, #28
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3307      	adds	r3, #7
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80009b6:	4b35      	ldr	r3, [pc, #212]	; (8000a8c <_HandleIncomingPacket+0xdc>)
 80009b8:	7e1b      	ldrb	r3, [r3, #24]
 80009ba:	4618      	mov	r0, r3
 80009bc:	1cfb      	adds	r3, r7, #3
 80009be:	2201      	movs	r2, #1
 80009c0:	4619      	mov	r1, r3
 80009c2:	f7ff fe63 	bl	800068c <SEGGER_RTT_ReadNoLock>
 80009c6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d052      	beq.n	8000a74 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80009ce:	78fb      	ldrb	r3, [r7, #3]
 80009d0:	2b80      	cmp	r3, #128	; 0x80
 80009d2:	d031      	beq.n	8000a38 <_HandleIncomingPacket+0x88>
 80009d4:	2b80      	cmp	r3, #128	; 0x80
 80009d6:	dc40      	bgt.n	8000a5a <_HandleIncomingPacket+0xaa>
 80009d8:	2b07      	cmp	r3, #7
 80009da:	dc15      	bgt.n	8000a08 <_HandleIncomingPacket+0x58>
 80009dc:	2b00      	cmp	r3, #0
 80009de:	dd3c      	ble.n	8000a5a <_HandleIncomingPacket+0xaa>
 80009e0:	3b01      	subs	r3, #1
 80009e2:	2b06      	cmp	r3, #6
 80009e4:	d839      	bhi.n	8000a5a <_HandleIncomingPacket+0xaa>
 80009e6:	a201      	add	r2, pc, #4	; (adr r2, 80009ec <_HandleIncomingPacket+0x3c>)
 80009e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ec:	08000a0f 	.word	0x08000a0f
 80009f0:	08000a15 	.word	0x08000a15
 80009f4:	08000a1b 	.word	0x08000a1b
 80009f8:	08000a21 	.word	0x08000a21
 80009fc:	08000a27 	.word	0x08000a27
 8000a00:	08000a2d 	.word	0x08000a2d
 8000a04:	08000a33 	.word	0x08000a33
 8000a08:	2b7f      	cmp	r3, #127	; 0x7f
 8000a0a:	d035      	beq.n	8000a78 <_HandleIncomingPacket+0xc8>
 8000a0c:	e025      	b.n	8000a5a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8000a0e:	f000 fbe5 	bl	80011dc <SEGGER_SYSVIEW_Start>
      break;
 8000a12:	e036      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8000a14:	f000 fc9c 	bl	8001350 <SEGGER_SYSVIEW_Stop>
      break;
 8000a18:	e033      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8000a1a:	f000 fe75 	bl	8001708 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8000a1e:	e030      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8000a20:	f000 fe3a 	bl	8001698 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8000a24:	e02d      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8000a26:	f000 fcb9 	bl	800139c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8000a2a:	e02a      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8000a2c:	f000 ff46 	bl	80018bc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8000a30:	e027      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8000a32:	f000 ff25 	bl	8001880 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8000a36:	e024      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <_HandleIncomingPacket+0xdc>)
 8000a3a:	7e1b      	ldrb	r3, [r3, #24]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	1cfb      	adds	r3, r7, #3
 8000a40:	2201      	movs	r2, #1
 8000a42:	4619      	mov	r1, r3
 8000a44:	f7ff fe22 	bl	800068c <SEGGER_RTT_ReadNoLock>
 8000a48:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d015      	beq.n	8000a7c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8000a50:	78fb      	ldrb	r3, [r7, #3]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 fe8a 	bl	800176c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8000a58:	e010      	b.n	8000a7c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8000a5a:	78fb      	ldrb	r3, [r7, #3]
 8000a5c:	b25b      	sxtb	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	da0e      	bge.n	8000a80 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <_HandleIncomingPacket+0xdc>)
 8000a64:	7e1b      	ldrb	r3, [r3, #24]
 8000a66:	4618      	mov	r0, r3
 8000a68:	1cfb      	adds	r3, r7, #3
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f7ff fe0d 	bl	800068c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8000a72:	e005      	b.n	8000a80 <_HandleIncomingPacket+0xd0>
    }
  }
 8000a74:	bf00      	nop
 8000a76:	e004      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
      break;
 8000a78:	bf00      	nop
 8000a7a:	e002      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
      break;
 8000a7c:	bf00      	nop
 8000a7e:	e000      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
      break;
 8000a80:	bf00      	nop
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000b90 	.word	0x20000b90

08000a90 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08c      	sub	sp, #48	; 0x30
 8000a94:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8000a96:	2301      	movs	r3, #1
 8000a98:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000aa4:	4b31      	ldr	r3, [pc, #196]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000aa6:	695b      	ldr	r3, [r3, #20]
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000aaa:	e00b      	b.n	8000ac4 <_TrySendOverflowPacket+0x34>
 8000aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab2:	1c59      	adds	r1, r3, #1
 8000ab4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000ab6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	701a      	strb	r2, [r3, #0]
 8000abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac0:	09db      	lsrs	r3, r3, #7
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ac8:	d8f0      	bhi.n	8000aac <_TrySendOverflowPacket+0x1c>
 8000aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000acc:	1c5a      	adds	r2, r3, #1
 8000ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ad2:	b2d2      	uxtb	r2, r2
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000ada:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <_TrySendOverflowPacket+0xe0>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	623b      	str	r3, [r7, #32]
 8000af2:	e00b      	b.n	8000b0c <_TrySendOverflowPacket+0x7c>
 8000af4:	6a3b      	ldr	r3, [r7, #32]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afa:	1c59      	adds	r1, r3, #1
 8000afc:	6279      	str	r1, [r7, #36]	; 0x24
 8000afe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	701a      	strb	r2, [r3, #0]
 8000b06:	6a3b      	ldr	r3, [r7, #32]
 8000b08:	09db      	lsrs	r3, r3, #7
 8000b0a:	623b      	str	r3, [r7, #32]
 8000b0c:	6a3b      	ldr	r3, [r7, #32]
 8000b0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b10:	d8f0      	bhi.n	8000af4 <_TrySendOverflowPacket+0x64>
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	627a      	str	r2, [r7, #36]	; 0x24
 8000b18:	6a3a      	ldr	r2, [r7, #32]
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	701a      	strb	r2, [r3, #0]
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b24:	785b      	ldrb	r3, [r3, #1]
 8000b26:	4618      	mov	r0, r3
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	f7ff fb84 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d009      	beq.n	8000b56 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b52:	701a      	strb	r2, [r3, #0]
 8000b54:	e004      	b.n	8000b60 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	4a03      	ldr	r2, [pc, #12]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b5e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8000b60:	693b      	ldr	r3, [r7, #16]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3730      	adds	r7, #48	; 0x30
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000b90 	.word	0x20000b90
 8000b70:	e0001004 	.word	0xe0001004

08000b74 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8000b80:	4b98      	ldr	r3, [pc, #608]	; (8000de4 <_SendPacket+0x270>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d010      	beq.n	8000baa <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8000b88:	4b96      	ldr	r3, [pc, #600]	; (8000de4 <_SendPacket+0x270>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f000 812d 	beq.w	8000dec <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8000b92:	4b94      	ldr	r3, [pc, #592]	; (8000de4 <_SendPacket+0x270>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d109      	bne.n	8000bae <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8000b9a:	f7ff ff79 	bl	8000a90 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8000b9e:	4b91      	ldr	r3, [pc, #580]	; (8000de4 <_SendPacket+0x270>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	f040 8124 	bne.w	8000df0 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8000ba8:	e001      	b.n	8000bae <_SendPacket+0x3a>
    goto Send;
 8000baa:	bf00      	nop
 8000bac:	e000      	b.n	8000bb0 <_SendPacket+0x3c>
Send:
 8000bae:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b1f      	cmp	r3, #31
 8000bb4:	d809      	bhi.n	8000bca <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8000bb6:	4b8b      	ldr	r3, [pc, #556]	; (8000de4 <_SendPacket+0x270>)
 8000bb8:	69da      	ldr	r2, [r3, #28]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f040 8115 	bne.w	8000df4 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b17      	cmp	r3, #23
 8000bce:	d807      	bhi.n	8000be0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	e0c4      	b.n	8000d6a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	2b7f      	cmp	r3, #127	; 0x7f
 8000bec:	d912      	bls.n	8000c14 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	09da      	lsrs	r2, r3, #7
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	3a01      	subs	r2, #1
 8000c06:	60fa      	str	r2, [r7, #12]
 8000c08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e006      	b.n	8000c22 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b7e      	cmp	r3, #126	; 0x7e
 8000c26:	d807      	bhi.n	8000c38 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	e098      	b.n	8000d6a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c3e:	d212      	bcs.n	8000c66 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	09da      	lsrs	r2, r3, #7
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	3a01      	subs	r2, #1
 8000c58:	60fa      	str	r2, [r7, #12]
 8000c5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	e081      	b.n	8000d6a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000c6c:	d21d      	bcs.n	8000caa <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	0b9a      	lsrs	r2, r3, #14
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	3b01      	subs	r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	09db      	lsrs	r3, r3, #7
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	3a01      	subs	r2, #1
 8000c88:	60fa      	str	r2, [r7, #12]
 8000c8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	3a01      	subs	r2, #1
 8000c9c:	60fa      	str	r2, [r7, #12]
 8000c9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	e05f      	b.n	8000d6a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000cb0:	d228      	bcs.n	8000d04 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	0d5a      	lsrs	r2, r3, #21
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	0b9b      	lsrs	r3, r3, #14
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	3a01      	subs	r2, #1
 8000ccc:	60fa      	str	r2, [r7, #12]
 8000cce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	09db      	lsrs	r3, r3, #7
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	3a01      	subs	r2, #1
 8000ce2:	60fa      	str	r2, [r7, #12]
 8000ce4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	3a01      	subs	r2, #1
 8000cf6:	60fa      	str	r2, [r7, #12]
 8000cf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	e032      	b.n	8000d6a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	0f1a      	lsrs	r2, r3, #28
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	0d5b      	lsrs	r3, r3, #21
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	3a01      	subs	r2, #1
 8000d1e:	60fa      	str	r2, [r7, #12]
 8000d20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	0b9b      	lsrs	r3, r3, #14
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	3a01      	subs	r2, #1
 8000d34:	60fa      	str	r2, [r7, #12]
 8000d36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	09db      	lsrs	r3, r3, #7
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	60fa      	str	r2, [r7, #12]
 8000d4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	3a01      	subs	r2, #1
 8000d5e:	60fa      	str	r2, [r7, #12]
 8000d60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000d6a:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <_SendPacket+0x274>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000d70:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <_SendPacket+0x270>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	623b      	str	r3, [r7, #32]
 8000d82:	e00b      	b.n	8000d9c <_SendPacket+0x228>
 8000d84:	6a3b      	ldr	r3, [r7, #32]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8a:	1c59      	adds	r1, r3, #1
 8000d8c:	6279      	str	r1, [r7, #36]	; 0x24
 8000d8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	6a3b      	ldr	r3, [r7, #32]
 8000d98:	09db      	lsrs	r3, r3, #7
 8000d9a:	623b      	str	r3, [r7, #32]
 8000d9c:	6a3b      	ldr	r3, [r7, #32]
 8000d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8000da0:	d8f0      	bhi.n	8000d84 <_SendPacket+0x210>
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	1c5a      	adds	r2, r3, #1
 8000da6:	627a      	str	r2, [r7, #36]	; 0x24
 8000da8:	6a3a      	ldr	r2, [r7, #32]
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	701a      	strb	r2, [r3, #0]
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <_SendPacket+0x270>)
 8000db4:	785b      	ldrb	r3, [r3, #1]
 8000db6:	4618      	mov	r0, r3
 8000db8:	68ba      	ldr	r2, [r7, #8]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	68f9      	ldr	r1, [r7, #12]
 8000dc2:	f7ff fa3d 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000dc6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <_SendPacket+0x270>)
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	60d3      	str	r3, [r2, #12]
 8000dd4:	e00f      	b.n	8000df6 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8000dd6:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <_SendPacket+0x270>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4b01      	ldr	r3, [pc, #4]	; (8000de4 <_SendPacket+0x270>)
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	e008      	b.n	8000df6 <_SendPacket+0x282>
 8000de4:	20000b90 	.word	0x20000b90
 8000de8:	e0001004 	.word	0xe0001004
    goto SendDone;
 8000dec:	bf00      	nop
 8000dee:	e002      	b.n	8000df6 <_SendPacket+0x282>
      goto SendDone;
 8000df0:	bf00      	nop
 8000df2:	e000      	b.n	8000df6 <_SendPacket+0x282>
      goto SendDone;
 8000df4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <_SendPacket+0x2d4>)
 8000df8:	7e1b      	ldrb	r3, [r3, #24]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <_SendPacket+0x2d8>)
 8000dfe:	460b      	mov	r3, r1
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	440b      	add	r3, r1
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	4413      	add	r3, r2
 8000e08:	336c      	adds	r3, #108	; 0x6c
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <_SendPacket+0x2d4>)
 8000e0e:	7e1b      	ldrb	r3, [r3, #24]
 8000e10:	4618      	mov	r0, r3
 8000e12:	490e      	ldr	r1, [pc, #56]	; (8000e4c <_SendPacket+0x2d8>)
 8000e14:	4603      	mov	r3, r0
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	4403      	add	r3, r0
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	440b      	add	r3, r1
 8000e1e:	3370      	adds	r3, #112	; 0x70
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d00b      	beq.n	8000e3e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <_SendPacket+0x2d4>)
 8000e28:	789b      	ldrb	r3, [r3, #2]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d107      	bne.n	8000e3e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <_SendPacket+0x2d4>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8000e34:	f7ff fdbc 	bl	80009b0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <_SendPacket+0x2d4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	; 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000b90 	.word	0x20000b90
 8000e4c:	200002d0 	.word	0x200002d0

08000e50 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b0a2      	sub	sp, #136	; 0x88
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8000e66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e68:	1c5a      	adds	r2, r3, #1
 8000e6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8000e72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d01d      	beq.n	8000eb6 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8000e7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e7e:	2b25      	cmp	r3, #37	; 0x25
 8000e80:	d1f1      	bne.n	8000e66 <_VPrintHost+0x16>
      c = *p;
 8000e82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	1d19      	adds	r1, r3, #4
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	6011      	str	r1, [r2, #0]
 8000e94:	6819      	ldr	r1, [r3, #0]
 8000e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000ea0:	460a      	mov	r2, r1
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	3388      	adds	r3, #136	; 0x88
 8000ea6:	443b      	add	r3, r7
 8000ea8:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8000eac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000eb0:	2b10      	cmp	r3, #16
 8000eb2:	d002      	beq.n	8000eba <_VPrintHost+0x6a>
    c = *p++;
 8000eb4:	e7d7      	b.n	8000e66 <_VPrintHost+0x16>
      break;
 8000eb6:	bf00      	nop
 8000eb8:	e000      	b.n	8000ebc <_VPrintHost+0x6c>
        break;
 8000eba:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8000ebc:	f3ef 8311 	mrs	r3, BASEPRI
 8000ec0:	f04f 0120 	mov.w	r1, #32
 8000ec4:	f381 8811 	msr	BASEPRI, r1
 8000ec8:	65bb      	str	r3, [r7, #88]	; 0x58
 8000eca:	483f      	ldr	r0, [pc, #252]	; (8000fc8 <_VPrintHost+0x178>)
 8000ecc:	f7ff fd64 	bl	8000998 <_PreparePacket>
 8000ed0:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8000ed2:	2280      	movs	r2, #128	; 0x80
 8000ed4:	68f9      	ldr	r1, [r7, #12]
 8000ed6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000ed8:	f7ff fd2e 	bl	8000938 <_EncodeStr>
 8000edc:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8000ede:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ee0:	677b      	str	r3, [r7, #116]	; 0x74
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	673b      	str	r3, [r7, #112]	; 0x70
 8000ee6:	e00b      	b.n	8000f00 <_VPrintHost+0xb0>
 8000ee8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000eee:	1c59      	adds	r1, r3, #1
 8000ef0:	6779      	str	r1, [r7, #116]	; 0x74
 8000ef2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	701a      	strb	r2, [r3, #0]
 8000efa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000efc:	09db      	lsrs	r3, r3, #7
 8000efe:	673b      	str	r3, [r7, #112]	; 0x70
 8000f00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f02:	2b7f      	cmp	r3, #127	; 0x7f
 8000f04:	d8f0      	bhi.n	8000ee8 <_VPrintHost+0x98>
 8000f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	677a      	str	r2, [r7, #116]	; 0x74
 8000f0c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	701a      	strb	r2, [r3, #0]
 8000f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f14:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8000f16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f20:	e00b      	b.n	8000f3a <_VPrintHost+0xea>
 8000f22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f28:	1c59      	adds	r1, r3, #1
 8000f2a:	66f9      	str	r1, [r7, #108]	; 0x6c
 8000f2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	701a      	strb	r2, [r3, #0]
 8000f34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f36:	09db      	lsrs	r3, r3, #7
 8000f38:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f3e:	d8f0      	bhi.n	8000f22 <_VPrintHost+0xd2>
 8000f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f42:	1c5a      	adds	r2, r3, #1
 8000f44:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000f46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f4e:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000f58:	e022      	b.n	8000fa0 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8000f5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f5c:	667b      	str	r3, [r7, #100]	; 0x64
 8000f5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	663b      	str	r3, [r7, #96]	; 0x60
 8000f66:	e00b      	b.n	8000f80 <_VPrintHost+0x130>
 8000f68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f6e:	1c59      	adds	r1, r3, #1
 8000f70:	6679      	str	r1, [r7, #100]	; 0x64
 8000f72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f7c:	09db      	lsrs	r3, r3, #7
 8000f7e:	663b      	str	r3, [r7, #96]	; 0x60
 8000f80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f82:	2b7f      	cmp	r3, #127	; 0x7f
 8000f84:	d8f0      	bhi.n	8000f68 <_VPrintHost+0x118>
 8000f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f88:	1c5a      	adds	r2, r3, #1
 8000f8a:	667a      	str	r2, [r7, #100]	; 0x64
 8000f8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	701a      	strb	r2, [r3, #0]
 8000f92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f94:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8000f96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000fa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000fa4:	1e5a      	subs	r2, r3, #1
 8000fa6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1d5      	bne.n	8000f5a <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8000fae:	221a      	movs	r2, #26
 8000fb0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000fb2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000fb4:	f7ff fdde 	bl	8000b74 <_SendPacket>
    RECORD_END();
 8000fb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fba:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3788      	adds	r7, #136	; 0x88
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000bc0 	.word	0x20000bc0

08000fcc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
 8000fd8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe0:	4917      	ldr	r1, [pc, #92]	; (8001040 <SEGGER_SYSVIEW_Init+0x74>)
 8000fe2:	4818      	ldr	r0, [pc, #96]	; (8001044 <SEGGER_SYSVIEW_Init+0x78>)
 8000fe4:	f7ff fbd8 	bl	8000798 <SEGGER_RTT_AllocUpBuffer>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000fee:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000ff2:	785a      	ldrb	r2, [r3, #1]
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000ff6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000ffa:	7e1b      	ldrb	r3, [r3, #24]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	2300      	movs	r3, #0
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2308      	movs	r3, #8
 8001004:	4a11      	ldr	r2, [pc, #68]	; (800104c <SEGGER_SYSVIEW_Init+0x80>)
 8001006:	490f      	ldr	r1, [pc, #60]	; (8001044 <SEGGER_SYSVIEW_Init+0x78>)
 8001008:	f7ff fc4a 	bl	80008a0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <SEGGER_SYSVIEW_Init+0x84>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a0c      	ldr	r2, [pc, #48]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001018:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8001020:	4a09      	ldr	r2, [pc, #36]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8001026:	4a08      	ldr	r2, [pc, #32]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8001032:	4b05      	ldr	r3, [pc, #20]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000788 	.word	0x20000788
 8001044:	0800df04 	.word	0x0800df04
 8001048:	20000b90 	.word	0x20000b90
 800104c:	20000b88 	.word	0x20000b88
 8001050:	e0001004 	.word	0xe0001004

08001054 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6113      	str	r3, [r2, #16]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000b90 	.word	0x20000b90

08001074 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800107c:	f3ef 8311 	mrs	r3, BASEPRI
 8001080:	f04f 0120 	mov.w	r1, #32
 8001084:	f381 8811 	msr	BASEPRI, r1
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4808      	ldr	r0, [pc, #32]	; (80010ac <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800108c:	f7ff fc84 	bl	8000998 <_PreparePacket>
 8001090:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	68b8      	ldr	r0, [r7, #8]
 8001098:	f7ff fd6c 	bl	8000b74 <_SendPacket>
  RECORD_END();
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f383 8811 	msr	BASEPRI, r3
}
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000bc0 	.word	0x20000bc0

080010b0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80010ba:	f3ef 8311 	mrs	r3, BASEPRI
 80010be:	f04f 0120 	mov.w	r1, #32
 80010c2:	f381 8811 	msr	BASEPRI, r1
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	4816      	ldr	r0, [pc, #88]	; (8001124 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80010ca:	f7ff fc65 	bl	8000998 <_PreparePacket>
 80010ce:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	61fb      	str	r3, [r7, #28]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	e00b      	b.n	80010f6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	1c59      	adds	r1, r3, #1
 80010e6:	61f9      	str	r1, [r7, #28]
 80010e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	09db      	lsrs	r3, r3, #7
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	2b7f      	cmp	r3, #127	; 0x7f
 80010fa:	d8f0      	bhi.n	80010de <SEGGER_SYSVIEW_RecordU32+0x2e>
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	61fa      	str	r2, [r7, #28]
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	701a      	strb	r2, [r3, #0]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	68f9      	ldr	r1, [r7, #12]
 8001110:	6938      	ldr	r0, [r7, #16]
 8001112:	f7ff fd2f 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f383 8811 	msr	BASEPRI, r3
}
 800111c:	bf00      	nop
 800111e:	3720      	adds	r7, #32
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000bc0 	.word	0x20000bc0

08001128 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b08c      	sub	sp, #48	; 0x30
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8001134:	f3ef 8311 	mrs	r3, BASEPRI
 8001138:	f04f 0120 	mov.w	r1, #32
 800113c:	f381 8811 	msr	BASEPRI, r1
 8001140:	61fb      	str	r3, [r7, #28]
 8001142:	4825      	ldr	r0, [pc, #148]	; (80011d8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8001144:	f7ff fc28 	bl	8000998 <_PreparePacket>
 8001148:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
 8001156:	e00b      	b.n	8001170 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8001158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115a:	b2da      	uxtb	r2, r3
 800115c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800115e:	1c59      	adds	r1, r3, #1
 8001160:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001162:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	701a      	strb	r2, [r3, #0]
 800116a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116c:	09db      	lsrs	r3, r3, #7
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001172:	2b7f      	cmp	r3, #127	; 0x7f
 8001174:	d8f0      	bhi.n	8001158 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8001176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001178:	1c5a      	adds	r2, r3, #1
 800117a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800117c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	701a      	strb	r2, [r3, #0]
 8001182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001184:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	623b      	str	r3, [r7, #32]
 800118e:	e00b      	b.n	80011a8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	1c59      	adds	r1, r3, #1
 8001198:	6279      	str	r1, [r7, #36]	; 0x24
 800119a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	701a      	strb	r2, [r3, #0]
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	09db      	lsrs	r3, r3, #7
 80011a6:	623b      	str	r3, [r7, #32]
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	2b7f      	cmp	r3, #127	; 0x7f
 80011ac:	d8f0      	bhi.n	8001190 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	627a      	str	r2, [r7, #36]	; 0x24
 80011b4:	6a3a      	ldr	r2, [r7, #32]
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011bc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	6979      	ldr	r1, [r7, #20]
 80011c2:	69b8      	ldr	r0, [r7, #24]
 80011c4:	f7ff fcd6 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f383 8811 	msr	BASEPRI, r3
}
 80011ce:	bf00      	nop
 80011d0:	3730      	adds	r7, #48	; 0x30
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000bc0 	.word	0x20000bc0

080011dc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08c      	sub	sp, #48	; 0x30
 80011e0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80011e2:	4b58      	ldr	r3, [pc, #352]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80011e8:	f3ef 8311 	mrs	r3, BASEPRI
 80011ec:	f04f 0120 	mov.w	r1, #32
 80011f0:	f381 8811 	msr	BASEPRI, r1
 80011f4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80011f6:	4b53      	ldr	r3, [pc, #332]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 80011f8:	785b      	ldrb	r3, [r3, #1]
 80011fa:	220a      	movs	r2, #10
 80011fc:	4952      	ldr	r1, [pc, #328]	; (8001348 <SEGGER_SYSVIEW_Start+0x16c>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f81e 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800120a:	200a      	movs	r0, #10
 800120c:	f7ff ff32 	bl	8001074 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001210:	f3ef 8311 	mrs	r3, BASEPRI
 8001214:	f04f 0120 	mov.w	r1, #32
 8001218:	f381 8811 	msr	BASEPRI, r1
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	484b      	ldr	r0, [pc, #300]	; (800134c <SEGGER_SYSVIEW_Start+0x170>)
 8001220:	f7ff fbba 	bl	8000998 <_PreparePacket>
 8001224:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800122e:	4b45      	ldr	r3, [pc, #276]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
 8001234:	e00b      	b.n	800124e <SEGGER_SYSVIEW_Start+0x72>
 8001236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001238:	b2da      	uxtb	r2, r3
 800123a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123c:	1c59      	adds	r1, r3, #1
 800123e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001240:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	701a      	strb	r2, [r3, #0]
 8001248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124a:	09db      	lsrs	r3, r3, #7
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
 800124e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001250:	2b7f      	cmp	r3, #127	; 0x7f
 8001252:	d8f0      	bhi.n	8001236 <SEGGER_SYSVIEW_Start+0x5a>
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	62fa      	str	r2, [r7, #44]	; 0x2c
 800125a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	701a      	strb	r2, [r3, #0]
 8001260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001262:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
 8001268:	4b36      	ldr	r3, [pc, #216]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	e00b      	b.n	8001288 <SEGGER_SYSVIEW_Start+0xac>
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	1c59      	adds	r1, r3, #1
 8001278:	6279      	str	r1, [r7, #36]	; 0x24
 800127a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	701a      	strb	r2, [r3, #0]
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	09db      	lsrs	r3, r3, #7
 8001286:	623b      	str	r3, [r7, #32]
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	2b7f      	cmp	r3, #127	; 0x7f
 800128c:	d8f0      	bhi.n	8001270 <SEGGER_SYSVIEW_Start+0x94>
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	627a      	str	r2, [r7, #36]	; 0x24
 8001294:	6a3a      	ldr	r2, [r7, #32]
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	701a      	strb	r2, [r3, #0]
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	61fb      	str	r3, [r7, #28]
 80012a2:	4b28      	ldr	r3, [pc, #160]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	e00b      	b.n	80012c2 <SEGGER_SYSVIEW_Start+0xe6>
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	1c59      	adds	r1, r3, #1
 80012b2:	61f9      	str	r1, [r7, #28]
 80012b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	701a      	strb	r2, [r3, #0]
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	09db      	lsrs	r3, r3, #7
 80012c0:	61bb      	str	r3, [r7, #24]
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	2b7f      	cmp	r3, #127	; 0x7f
 80012c6:	d8f0      	bhi.n	80012aa <SEGGER_SYSVIEW_Start+0xce>
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	61fa      	str	r2, [r7, #28]
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	701a      	strb	r2, [r3, #0]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	e00b      	b.n	80012fa <SEGGER_SYSVIEW_Start+0x11e>
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	1c59      	adds	r1, r3, #1
 80012ea:	6179      	str	r1, [r7, #20]
 80012ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	701a      	strb	r2, [r3, #0]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	09db      	lsrs	r3, r3, #7
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	2b7f      	cmp	r3, #127	; 0x7f
 80012fe:	d8f0      	bhi.n	80012e2 <SEGGER_SYSVIEW_Start+0x106>
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	617a      	str	r2, [r7, #20]
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	701a      	strb	r2, [r3, #0]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001310:	2218      	movs	r2, #24
 8001312:	6839      	ldr	r1, [r7, #0]
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff fc2d 	bl	8000b74 <_SendPacket>
      RECORD_END();
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800132e:	f000 f9eb 	bl	8001708 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8001332:	f000 f9b1 	bl	8001698 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8001336:	f000 fac1 	bl	80018bc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800133a:	bf00      	nop
 800133c:	3730      	adds	r7, #48	; 0x30
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000b90 	.word	0x20000b90
 8001348:	0800e034 	.word	0x0800e034
 800134c:	20000bc0 	.word	0x20000bc0

08001350 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001356:	f3ef 8311 	mrs	r3, BASEPRI
 800135a:	f04f 0120 	mov.w	r1, #32
 800135e:	f381 8811 	msr	BASEPRI, r1
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	480b      	ldr	r0, [pc, #44]	; (8001394 <SEGGER_SYSVIEW_Stop+0x44>)
 8001366:	f7ff fb17 	bl	8000998 <_PreparePacket>
 800136a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <SEGGER_SYSVIEW_Stop+0x48>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d007      	beq.n	8001384 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8001374:	220b      	movs	r2, #11
 8001376:	6839      	ldr	r1, [r7, #0]
 8001378:	6838      	ldr	r0, [r7, #0]
 800137a:	f7ff fbfb 	bl	8000b74 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <SEGGER_SYSVIEW_Stop+0x48>)
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f383 8811 	msr	BASEPRI, r3
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000bc0 	.word	0x20000bc0
 8001398:	20000b90 	.word	0x20000b90

0800139c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b08c      	sub	sp, #48	; 0x30
 80013a0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80013a2:	f3ef 8311 	mrs	r3, BASEPRI
 80013a6:	f04f 0120 	mov.w	r1, #32
 80013aa:	f381 8811 	msr	BASEPRI, r1
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	4845      	ldr	r0, [pc, #276]	; (80014c8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80013b2:	f7ff faf1 	bl	8000998 <_PreparePacket>
 80013b6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013c0:	4b42      	ldr	r3, [pc, #264]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80013c6:	e00b      	b.n	80013e0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80013c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ce:	1c59      	adds	r1, r3, #1
 80013d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80013d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	701a      	strb	r2, [r3, #0]
 80013da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013dc:	09db      	lsrs	r3, r3, #7
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
 80013e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e2:	2b7f      	cmp	r3, #127	; 0x7f
 80013e4:	d8f0      	bhi.n	80013c8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80013e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]
 80013f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
 80013fa:	4b34      	ldr	r3, [pc, #208]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	623b      	str	r3, [r7, #32]
 8001400:	e00b      	b.n	800141a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	1c59      	adds	r1, r3, #1
 800140a:	6279      	str	r1, [r7, #36]	; 0x24
 800140c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	701a      	strb	r2, [r3, #0]
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	09db      	lsrs	r3, r3, #7
 8001418:	623b      	str	r3, [r7, #32]
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	2b7f      	cmp	r3, #127	; 0x7f
 800141e:	d8f0      	bhi.n	8001402 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	627a      	str	r2, [r7, #36]	; 0x24
 8001426:	6a3a      	ldr	r2, [r7, #32]
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	701a      	strb	r2, [r3, #0]
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	4b25      	ldr	r3, [pc, #148]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	e00b      	b.n	8001454 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	1c59      	adds	r1, r3, #1
 8001444:	61f9      	str	r1, [r7, #28]
 8001446:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	09db      	lsrs	r3, r3, #7
 8001452:	61bb      	str	r3, [r7, #24]
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	2b7f      	cmp	r3, #127	; 0x7f
 8001458:	d8f0      	bhi.n	800143c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	61fa      	str	r2, [r7, #28]
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	701a      	strb	r2, [r3, #0]
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	e00b      	b.n	800148c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	1c59      	adds	r1, r3, #1
 800147c:	6179      	str	r1, [r7, #20]
 800147e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	701a      	strb	r2, [r3, #0]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	09db      	lsrs	r3, r3, #7
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	2b7f      	cmp	r3, #127	; 0x7f
 8001490:	d8f0      	bhi.n	8001474 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	1c5a      	adds	r2, r3, #1
 8001496:	617a      	str	r2, [r7, #20]
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	701a      	strb	r2, [r3, #0]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80014a2:	2218      	movs	r2, #24
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	68b8      	ldr	r0, [r7, #8]
 80014a8:	f7ff fb64 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d002      	beq.n	80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	4798      	blx	r3
  }
}
 80014c0:	bf00      	nop
 80014c2:	3730      	adds	r7, #48	; 0x30
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000bc0 	.word	0x20000bc0
 80014cc:	20000b90 	.word	0x20000b90

080014d0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b092      	sub	sp, #72	; 0x48
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80014d8:	f3ef 8311 	mrs	r3, BASEPRI
 80014dc:	f04f 0120 	mov.w	r1, #32
 80014e0:	f381 8811 	msr	BASEPRI, r1
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	486a      	ldr	r0, [pc, #424]	; (8001690 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80014e8:	f7ff fa56 	bl	8000998 <_PreparePacket>
 80014ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	647b      	str	r3, [r7, #68]	; 0x44
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4b66      	ldr	r3, [pc, #408]	; (8001694 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	643b      	str	r3, [r7, #64]	; 0x40
 8001502:	e00b      	b.n	800151c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8001504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001506:	b2da      	uxtb	r2, r3
 8001508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800150a:	1c59      	adds	r1, r3, #1
 800150c:	6479      	str	r1, [r7, #68]	; 0x44
 800150e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	701a      	strb	r2, [r3, #0]
 8001516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001518:	09db      	lsrs	r3, r3, #7
 800151a:	643b      	str	r3, [r7, #64]	; 0x40
 800151c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800151e:	2b7f      	cmp	r3, #127	; 0x7f
 8001520:	d8f0      	bhi.n	8001504 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8001522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	647a      	str	r2, [r7, #68]	; 0x44
 8001528:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	701a      	strb	r2, [r3, #0]
 800152e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001530:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	63bb      	str	r3, [r7, #56]	; 0x38
 800153c:	e00b      	b.n	8001556 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800153e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001540:	b2da      	uxtb	r2, r3
 8001542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001544:	1c59      	adds	r1, r3, #1
 8001546:	63f9      	str	r1, [r7, #60]	; 0x3c
 8001548:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001552:	09db      	lsrs	r3, r3, #7
 8001554:	63bb      	str	r3, [r7, #56]	; 0x38
 8001556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001558:	2b7f      	cmp	r3, #127	; 0x7f
 800155a:	d8f0      	bhi.n	800153e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800155c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	701a      	strb	r2, [r3, #0]
 8001568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800156a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2220      	movs	r2, #32
 8001572:	4619      	mov	r1, r3
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f7ff f9df 	bl	8000938 <_EncodeStr>
 800157a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800157c:	2209      	movs	r2, #9
 800157e:	68f9      	ldr	r1, [r7, #12]
 8001580:	6938      	ldr	r0, [r7, #16]
 8001582:	f7ff faf7 	bl	8000b74 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	637b      	str	r3, [r7, #52]	; 0x34
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4b40      	ldr	r3, [pc, #256]	; (8001694 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	633b      	str	r3, [r7, #48]	; 0x30
 800159a:	e00b      	b.n	80015b4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800159c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a2:	1c59      	adds	r1, r3, #1
 80015a4:	6379      	str	r1, [r7, #52]	; 0x34
 80015a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	701a      	strb	r2, [r3, #0]
 80015ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b0:	09db      	lsrs	r3, r3, #7
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
 80015b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b6:	2b7f      	cmp	r3, #127	; 0x7f
 80015b8:	d8f0      	bhi.n	800159c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80015ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	637a      	str	r2, [r7, #52]	; 0x34
 80015c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80015d4:	e00b      	b.n	80015ee <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80015d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015dc:	1c59      	adds	r1, r3, #1
 80015de:	62f9      	str	r1, [r7, #44]	; 0x2c
 80015e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	701a      	strb	r2, [r3, #0]
 80015e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ea:	09db      	lsrs	r3, r3, #7
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80015ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f0:	2b7f      	cmp	r3, #127	; 0x7f
 80015f2:	d8f0      	bhi.n	80015d6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80015f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80015fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001602:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	623b      	str	r3, [r7, #32]
 800160e:	e00b      	b.n	8001628 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	1c59      	adds	r1, r3, #1
 8001618:	6279      	str	r1, [r7, #36]	; 0x24
 800161a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	701a      	strb	r2, [r3, #0]
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	09db      	lsrs	r3, r3, #7
 8001626:	623b      	str	r3, [r7, #32]
 8001628:	6a3b      	ldr	r3, [r7, #32]
 800162a:	2b7f      	cmp	r3, #127	; 0x7f
 800162c:	d8f0      	bhi.n	8001610 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	627a      	str	r2, [r7, #36]	; 0x24
 8001634:	6a3a      	ldr	r2, [r7, #32]
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	701a      	strb	r2, [r3, #0]
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	61fb      	str	r3, [r7, #28]
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	e00b      	b.n	8001660 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	1c59      	adds	r1, r3, #1
 8001650:	61f9      	str	r1, [r7, #28]
 8001652:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	701a      	strb	r2, [r3, #0]
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	09db      	lsrs	r3, r3, #7
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2b7f      	cmp	r3, #127	; 0x7f
 8001664:	d8f0      	bhi.n	8001648 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	61fa      	str	r2, [r7, #28]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	701a      	strb	r2, [r3, #0]
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8001676:	2215      	movs	r2, #21
 8001678:	68f9      	ldr	r1, [r7, #12]
 800167a:	6938      	ldr	r0, [r7, #16]
 800167c:	f7ff fa7a 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f383 8811 	msr	BASEPRI, r3
}
 8001686:	bf00      	nop
 8001688:	3748      	adds	r7, #72	; 0x48
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000bc0 	.word	0x20000bc0
 8001694:	20000b90 	.word	0x20000b90

08001698 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d008      	beq.n	80016b6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80016ae:	4b03      	ldr	r3, [pc, #12]	; (80016bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	4798      	blx	r3
  }
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000b90 	.word	0x20000b90

080016c0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016c8:	f3ef 8311 	mrs	r3, BASEPRI
 80016cc:	f04f 0120 	mov.w	r1, #32
 80016d0:	f381 8811 	msr	BASEPRI, r1
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	480b      	ldr	r0, [pc, #44]	; (8001704 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80016d8:	f7ff f95e 	bl	8000998 <_PreparePacket>
 80016dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016de:	2280      	movs	r2, #128	; 0x80
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	6938      	ldr	r0, [r7, #16]
 80016e4:	f7ff f928 	bl	8000938 <_EncodeStr>
 80016e8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80016ea:	220e      	movs	r2, #14
 80016ec:	68f9      	ldr	r1, [r7, #12]
 80016ee:	6938      	ldr	r0, [r7, #16]
 80016f0:	f7ff fa40 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f383 8811 	msr	BASEPRI, r3
}
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000bc0 	.word	0x20000bc0

08001708 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d01a      	beq.n	800174c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d015      	beq.n	800174c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8001720:	4b10      	ldr	r3, [pc, #64]	; (8001764 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4798      	blx	r3
 8001728:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800172c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800172e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	000a      	movs	r2, r1
 800173c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800173e:	4613      	mov	r3, r2
 8001740:	461a      	mov	r2, r3
 8001742:	4621      	mov	r1, r4
 8001744:	200d      	movs	r0, #13
 8001746:	f7ff fcef 	bl	8001128 <SEGGER_SYSVIEW_RecordU32x2>
 800174a:	e006      	b.n	800175a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	200c      	movs	r0, #12
 8001754:	f7ff fcac 	bl	80010b0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bd90      	pop	{r4, r7, pc}
 8001762:	bf00      	nop
 8001764:	20000b90 	.word	0x20000b90
 8001768:	e0001004 	.word	0xe0001004

0800176c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8001776:	4b40      	ldr	r3, [pc, #256]	; (8001878 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d077      	beq.n	800186e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800177e:	4b3e      	ldr	r3, [pc, #248]	; (8001878 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
 8001788:	e008      	b.n	800179c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800178a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8001790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001792:	2b00      	cmp	r3, #0
 8001794:	d007      	beq.n	80017a6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8001796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001798:	3301      	adds	r3, #1
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d3f2      	bcc.n	800178a <SEGGER_SYSVIEW_SendModule+0x1e>
 80017a4:	e000      	b.n	80017a8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80017a6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80017a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d055      	beq.n	800185a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80017ae:	f3ef 8311 	mrs	r3, BASEPRI
 80017b2:	f04f 0120 	mov.w	r1, #32
 80017b6:	f381 8811 	msr	BASEPRI, r1
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	482f      	ldr	r0, [pc, #188]	; (800187c <SEGGER_SYSVIEW_SendModule+0x110>)
 80017be:	f7ff f8eb 	bl	8000998 <_PreparePacket>
 80017c2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	623b      	str	r3, [r7, #32]
 80017d0:	e00b      	b.n	80017ea <SEGGER_SYSVIEW_SendModule+0x7e>
 80017d2:	6a3b      	ldr	r3, [r7, #32]
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	1c59      	adds	r1, r3, #1
 80017da:	6279      	str	r1, [r7, #36]	; 0x24
 80017dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	701a      	strb	r2, [r3, #0]
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	09db      	lsrs	r3, r3, #7
 80017e8:	623b      	str	r3, [r7, #32]
 80017ea:	6a3b      	ldr	r3, [r7, #32]
 80017ec:	2b7f      	cmp	r3, #127	; 0x7f
 80017ee:	d8f0      	bhi.n	80017d2 <SEGGER_SYSVIEW_SendModule+0x66>
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	627a      	str	r2, [r7, #36]	; 0x24
 80017f6:	6a3a      	ldr	r2, [r7, #32]
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	701a      	strb	r2, [r3, #0]
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	61fb      	str	r3, [r7, #28]
 8001804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	61bb      	str	r3, [r7, #24]
 800180a:	e00b      	b.n	8001824 <SEGGER_SYSVIEW_SendModule+0xb8>
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	1c59      	adds	r1, r3, #1
 8001814:	61f9      	str	r1, [r7, #28]
 8001816:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	701a      	strb	r2, [r3, #0]
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	09db      	lsrs	r3, r3, #7
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2b7f      	cmp	r3, #127	; 0x7f
 8001828:	d8f0      	bhi.n	800180c <SEGGER_SYSVIEW_SendModule+0xa0>
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	61fa      	str	r2, [r7, #28]
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	701a      	strb	r2, [r3, #0]
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2280      	movs	r2, #128	; 0x80
 8001840:	4619      	mov	r1, r3
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f7ff f878 	bl	8000938 <_EncodeStr>
 8001848:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800184a:	2216      	movs	r2, #22
 800184c:	68f9      	ldr	r1, [r7, #12]
 800184e:	6938      	ldr	r0, [r7, #16]
 8001850:	f7ff f990 	bl	8000b74 <_SendPacket>
      RECORD_END();
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800185a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <SEGGER_SYSVIEW_SendModule+0x102>
 8001860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d002      	beq.n	800186e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8001868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	4798      	blx	r3
    }
  }
}
 800186e:	bf00      	nop
 8001870:	3730      	adds	r7, #48	; 0x30
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000bb8 	.word	0x20000bb8
 800187c:	20000bc0 	.word	0x20000bc0

08001880 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00f      	beq.n	80018ae <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d002      	beq.n	80018a2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f2      	bne.n	8001894 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000bb8 	.word	0x20000bb8

080018bc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80018c2:	f3ef 8311 	mrs	r3, BASEPRI
 80018c6:	f04f 0120 	mov.w	r1, #32
 80018ca:	f381 8811 	msr	BASEPRI, r1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	4817      	ldr	r0, [pc, #92]	; (8001930 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80018d2:	f7ff f861 	bl	8000998 <_PreparePacket>
 80018d6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	e00b      	b.n	8001900 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	1c59      	adds	r1, r3, #1
 80018f0:	6179      	str	r1, [r7, #20]
 80018f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	701a      	strb	r2, [r3, #0]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	09db      	lsrs	r3, r3, #7
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	2b7f      	cmp	r3, #127	; 0x7f
 8001904:	d8f0      	bhi.n	80018e8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	617a      	str	r2, [r7, #20]
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	701a      	strb	r2, [r3, #0]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8001916:	221b      	movs	r2, #27
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	68b8      	ldr	r0, [r7, #8]
 800191c:	f7ff f92a 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f383 8811 	msr	BASEPRI, r3
}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000bc0 	.word	0x20000bc0
 8001934:	20000bbc 	.word	0x20000bbc

08001938 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 8001938:	b40f      	push	{r0, r1, r2, r3}
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	461a      	mov	r2, r3
 800194a:	2100      	movs	r1, #0
 800194c:	6938      	ldr	r0, [r7, #16]
 800194e:	f7ff fa7f 	bl	8000e50 <_VPrintHost>
  va_end(ParamList);
#endif
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800195c:	b004      	add	sp, #16
 800195e:	4770      	bx	lr

08001960 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001964:	4803      	ldr	r0, [pc, #12]	; (8001974 <_cbSendSystemDesc+0x14>)
 8001966:	f7ff feab 	bl	80016c0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800196a:	4803      	ldr	r0, [pc, #12]	; (8001978 <_cbSendSystemDesc+0x18>)
 800196c:	f7ff fea8 	bl	80016c0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	0800df0c 	.word	0x0800df0c
 8001978:	0800df40 	.word	0x0800df40

0800197c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <SEGGER_SYSVIEW_Conf+0x20>)
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <SEGGER_SYSVIEW_Conf+0x20>)
 8001986:	6819      	ldr	r1, [r3, #0]
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <SEGGER_SYSVIEW_Conf+0x24>)
 800198a:	4a06      	ldr	r2, [pc, #24]	; (80019a4 <SEGGER_SYSVIEW_Conf+0x28>)
 800198c:	f7ff fb1e 	bl	8000fcc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001990:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001994:	f7ff fb5e 	bl	8001054 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000000 	.word	0x20000000
 80019a0:	08001961 	.word	0x08001961
 80019a4:	0800e040 	.word	0x0800e040

080019a8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80019a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	e048      	b.n	8001a46 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 80019b4:	4929      	ldr	r1, [pc, #164]	; (8001a5c <_cbSendTaskList+0xb4>)
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f00a f9b5 	bl	800bd34 <uxTaskGetStackHighWaterMark>
 80019ca:	4601      	mov	r1, r0
 80019cc:	4823      	ldr	r0, [pc, #140]	; (8001a5c <_cbSendTaskList+0xb4>)
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4403      	add	r3, r0
 80019da:	3310      	adds	r3, #16
 80019dc:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80019de:	491f      	ldr	r1, [pc, #124]	; (8001a5c <_cbSendTaskList+0xb4>)
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	440b      	add	r3, r1
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	491b      	ldr	r1, [pc, #108]	; (8001a5c <_cbSendTaskList+0xb4>)
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	3304      	adds	r3, #4
 80019fe:	6819      	ldr	r1, [r3, #0]
 8001a00:	4c16      	ldr	r4, [pc, #88]	; (8001a5c <_cbSendTaskList+0xb4>)
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4423      	add	r3, r4
 8001a0e:	3308      	adds	r3, #8
 8001a10:	681c      	ldr	r4, [r3, #0]
 8001a12:	4d12      	ldr	r5, [pc, #72]	; (8001a5c <_cbSendTaskList+0xb4>)
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	442b      	add	r3, r5
 8001a20:	330c      	adds	r3, #12
 8001a22:	681d      	ldr	r5, [r3, #0]
 8001a24:	4e0d      	ldr	r6, [pc, #52]	; (8001a5c <_cbSendTaskList+0xb4>)
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4433      	add	r3, r6
 8001a32:	3310      	adds	r3, #16
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	462b      	mov	r3, r5
 8001a3a:	4622      	mov	r2, r4
 8001a3c:	f000 f855 	bl	8001aea <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3301      	adds	r3, #1
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <_cbSendTaskList+0xb8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d3b1      	bcc.n	80019b4 <_cbSendTaskList+0xc>
  }
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000ca4 	.word	0x20000ca4
 8001a60:	20000d44 	.word	0x20000d44

08001a64 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001a6c:	f009 fe4a 	bl	800b704 <xTaskGetTickCountFromISR>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2200      	movs	r2, #0
 8001a74:	469a      	mov	sl, r3
 8001a76:	4693      	mov	fp, r2
 8001a78:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001a7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	f04f 0a00 	mov.w	sl, #0
 8001a88:	f04f 0b00 	mov.w	fp, #0
 8001a8c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001a90:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001a94:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001a98:	4652      	mov	r2, sl
 8001a9a:	465b      	mov	r3, fp
 8001a9c:	1a14      	subs	r4, r2, r0
 8001a9e:	eb63 0501 	sbc.w	r5, r3, r1
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	f04f 0300 	mov.w	r3, #0
 8001aaa:	00ab      	lsls	r3, r5, #2
 8001aac:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001ab0:	00a2      	lsls	r2, r4, #2
 8001ab2:	4614      	mov	r4, r2
 8001ab4:	461d      	mov	r5, r3
 8001ab6:	eb14 0800 	adds.w	r8, r4, r0
 8001aba:	eb45 0901 	adc.w	r9, r5, r1
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ace:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ad2:	4690      	mov	r8, r2
 8001ad4:	4699      	mov	r9, r3
 8001ad6:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001ada:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001aea <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b08a      	sub	sp, #40	; 0x28
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2214      	movs	r2, #20
 8001afe:	2100      	movs	r1, #0
 8001b00:	4618      	mov	r0, r3
 8001b02:	f00c f87b 	bl	800dbfc <memset>
  TaskInfo.TaskID     = TaskID;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fcd6 	bl	80014d0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001b24:	bf00      	nop
 8001b26:	3728      	adds	r7, #40	; 0x28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b32:	f000 fc80 	bl	8002436 <HAL_Init>

  /* USER CODE BEGIN Init */
  SEGGER_SYSVIEW_Conf();
 8001b36:	f7ff ff21 	bl	800197c <SEGGER_SYSVIEW_Conf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b3a:	f000 f84f 	bl	8001bdc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b3e:	f000 f93d 	bl	8001dbc <MX_GPIO_Init>
  MX_ETH_Init();
 8001b42:	f000 f8bd 	bl	8001cc0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001b46:	f000 f909 	bl	8001d5c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b4a:	f008 fa21 	bl	8009f90 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of testCommandTimer */
  testCommandTimerHandle = osTimerNew(testCommandTimerEntry, osTimerPeriodic, NULL, &testCommandTimer_attributes);
 8001b4e:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <main+0x84>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	2101      	movs	r1, #1
 8001b54:	4817      	ldr	r0, [pc, #92]	; (8001bb4 <main+0x88>)
 8001b56:	f008 fb6f 	bl	800a238 <osTimerNew>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4a16      	ldr	r2, [pc, #88]	; (8001bb8 <main+0x8c>)
 8001b5e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  xTimerStart(testCommandTimerHandle, 10000 / portTICK_PERIOD_MS);
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <main+0x8c>)
 8001b62:	681c      	ldr	r4, [r3, #0]
 8001b64:	f009 fdbe 	bl	800b6e4 <xTaskGetTickCount>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	f242 7310 	movw	r3, #10000	; 0x2710
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	2300      	movs	r3, #0
 8001b72:	2101      	movs	r1, #1
 8001b74:	4620      	mov	r0, r4
 8001b76:	f00a fb1d 	bl	800c1b4 <xTimerGenericCommand>
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of commandQueue */
  commandQueueHandle = osMessageQueueNew (16, 32, &commandQueue_attributes);
 8001b7a:	4a10      	ldr	r2, [pc, #64]	; (8001bbc <main+0x90>)
 8001b7c:	2120      	movs	r1, #32
 8001b7e:	2010      	movs	r0, #16
 8001b80:	f008 fbde 	bl	800a340 <osMessageQueueNew>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <main+0x94>)
 8001b88:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001b8a:	4a0e      	ldr	r2, [pc, #56]	; (8001bc4 <main+0x98>)
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	480e      	ldr	r0, [pc, #56]	; (8001bc8 <main+0x9c>)
 8001b90:	f008 fa68 	bl	800a064 <osThreadNew>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4a0d      	ldr	r2, [pc, #52]	; (8001bcc <main+0xa0>)
 8001b98:	6013      	str	r3, [r2, #0]

  /* creation of commandReader */
  commandReaderHandle = osThreadNew(commandReaderEntry, NULL, &commandReader_attributes);
 8001b9a:	4a0d      	ldr	r2, [pc, #52]	; (8001bd0 <main+0xa4>)
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	480d      	ldr	r0, [pc, #52]	; (8001bd4 <main+0xa8>)
 8001ba0:	f008 fa60 	bl	800a064 <osThreadNew>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4a0c      	ldr	r2, [pc, #48]	; (8001bd8 <main+0xac>)
 8001ba8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001baa:	f008 fa25 	bl	8009ff8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bae:	e7fe      	b.n	8001bae <main+0x82>
 8001bb0:	0800e0a8 	.word	0x0800e0a8
 8001bb4:	08001f45 	.word	0x08001f45
 8001bb8:	20000ec4 	.word	0x20000ec4
 8001bbc:	0800e090 	.word	0x0800e090
 8001bc0:	20000ec0 	.word	0x20000ec0
 8001bc4:	0800e048 	.word	0x0800e048
 8001bc8:	08001f01 	.word	0x08001f01
 8001bcc:	20000eb8 	.word	0x20000eb8
 8001bd0:	0800e06c 	.word	0x0800e06c
 8001bd4:	08001f15 	.word	0x08001f15
 8001bd8:	20000ebc 	.word	0x20000ebc

08001bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b094      	sub	sp, #80	; 0x50
 8001be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001be2:	f107 031c 	add.w	r3, r7, #28
 8001be6:	2234      	movs	r2, #52	; 0x34
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f00c f806 	bl	800dbfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf0:	f107 0308 	add.w	r3, r7, #8
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001c00:	f002 fcf0 	bl	80045e4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c04:	4b2c      	ldr	r3, [pc, #176]	; (8001cb8 <SystemClock_Config+0xdc>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	4a2b      	ldr	r2, [pc, #172]	; (8001cb8 <SystemClock_Config+0xdc>)
 8001c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c10:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <SystemClock_Config+0xdc>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c1c:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <SystemClock_Config+0xe0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c24:	4a25      	ldr	r2, [pc, #148]	; (8001cbc <SystemClock_Config+0xe0>)
 8001c26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <SystemClock_Config+0xe0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c34:	603b      	str	r3, [r7, #0]
 8001c36:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c3c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c40:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c42:	2302      	movs	r3, #2
 8001c44:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001c50:	2360      	movs	r3, #96	; 0x60
 8001c52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c54:	2302      	movs	r3, #2
 8001c56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c58:	2304      	movs	r3, #4
 8001c5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c60:	f107 031c 	add.w	r3, r7, #28
 8001c64:	4618      	mov	r0, r3
 8001c66:	f002 fd1d 	bl	80046a4 <HAL_RCC_OscConfig>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c70:	f000 f986 	bl	8001f80 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c74:	f002 fcc6 	bl	8004604 <HAL_PWREx_EnableOverDrive>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c7e:	f000 f97f 	bl	8001f80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c82:	230f      	movs	r3, #15
 8001c84:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c86:	2302      	movs	r3, #2
 8001c88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c98:	f107 0308 	add.w	r3, r7, #8
 8001c9c:	2103      	movs	r1, #3
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f002 ffae 	bl	8004c00 <HAL_RCC_ClockConfig>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001caa:	f000 f969 	bl	8001f80 <Error_Handler>
  }
}
 8001cae:	bf00      	nop
 8001cb0:	3750      	adds	r7, #80	; 0x50
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40007000 	.word	0x40007000

08001cc0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001cc4:	4b1f      	ldr	r3, [pc, #124]	; (8001d44 <MX_ETH_Init+0x84>)
 8001cc6:	4a20      	ldr	r2, [pc, #128]	; (8001d48 <MX_ETH_Init+0x88>)
 8001cc8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001cca:	4b20      	ldr	r3, [pc, #128]	; (8001d4c <MX_ETH_Init+0x8c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001cd0:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <MX_ETH_Init+0x8c>)
 8001cd2:	2280      	movs	r2, #128	; 0x80
 8001cd4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001cd6:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <MX_ETH_Init+0x8c>)
 8001cd8:	22e1      	movs	r2, #225	; 0xe1
 8001cda:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <MX_ETH_Init+0x8c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <MX_ETH_Init+0x8c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001ce8:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <MX_ETH_Init+0x8c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <MX_ETH_Init+0x84>)
 8001cf0:	4a16      	ldr	r2, [pc, #88]	; (8001d4c <MX_ETH_Init+0x8c>)
 8001cf2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001cf4:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <MX_ETH_Init+0x84>)
 8001cf6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001cfa:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <MX_ETH_Init+0x84>)
 8001cfe:	4a14      	ldr	r2, [pc, #80]	; (8001d50 <MX_ETH_Init+0x90>)
 8001d00:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <MX_ETH_Init+0x84>)
 8001d04:	4a13      	ldr	r2, [pc, #76]	; (8001d54 <MX_ETH_Init+0x94>)
 8001d06:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001d08:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <MX_ETH_Init+0x84>)
 8001d0a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001d0e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001d10:	480c      	ldr	r0, [pc, #48]	; (8001d44 <MX_ETH_Init+0x84>)
 8001d12:	f000 fcc3 	bl	800269c <HAL_ETH_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001d1c:	f000 f930 	bl	8001f80 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001d20:	2238      	movs	r2, #56	; 0x38
 8001d22:	2100      	movs	r1, #0
 8001d24:	480c      	ldr	r0, [pc, #48]	; (8001d58 <MX_ETH_Init+0x98>)
 8001d26:	f00b ff69 	bl	800dbfc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <MX_ETH_Init+0x98>)
 8001d2c:	2221      	movs	r2, #33	; 0x21
 8001d2e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <MX_ETH_Init+0x98>)
 8001d32:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001d36:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <MX_ETH_Init+0x98>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000d80 	.word	0x20000d80
 8001d48:	40028000 	.word	0x40028000
 8001d4c:	20000ec8 	.word	0x20000ec8
 8001d50:	20000214 	.word	0x20000214
 8001d54:	20000174 	.word	0x20000174
 8001d58:	20000d48 	.word	0x20000d48

08001d5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d60:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d62:	4a15      	ldr	r2, [pc, #84]	; (8001db8 <MX_USART3_UART_Init+0x5c>)
 8001d64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d66:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d74:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d82:	220c      	movs	r2, #12
 8001d84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d9e:	4805      	ldr	r0, [pc, #20]	; (8001db4 <MX_USART3_UART_Init+0x58>)
 8001da0:	f004 f88e 	bl	8005ec0 <HAL_UART_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001daa:	f000 f8e9 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000e30 	.word	0x20000e30
 8001db8:	40004800 	.word	0x40004800

08001dbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08c      	sub	sp, #48	; 0x30
 8001dc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc2:	f107 031c 	add.w	r3, r7, #28
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	60da      	str	r2, [r3, #12]
 8001dd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd2:	4b47      	ldr	r3, [pc, #284]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a46      	ldr	r2, [pc, #280]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001dd8:	f043 0304 	orr.w	r3, r3, #4
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b44      	ldr	r3, [pc, #272]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	61bb      	str	r3, [r7, #24]
 8001de8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dea:	4b41      	ldr	r3, [pc, #260]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a40      	ldr	r2, [pc, #256]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b3e      	ldr	r3, [pc, #248]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	4b3b      	ldr	r3, [pc, #236]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	4a3a      	ldr	r2, [pc, #232]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	4b38      	ldr	r3, [pc, #224]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1a:	4b35      	ldr	r3, [pc, #212]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a34      	ldr	r2, [pc, #208]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b32      	ldr	r3, [pc, #200]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e32:	4b2f      	ldr	r3, [pc, #188]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	4a2e      	ldr	r2, [pc, #184]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e38:	f043 0308 	orr.w	r3, r3, #8
 8001e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e4a:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a28      	ldr	r2, [pc, #160]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b26      	ldr	r3, [pc, #152]	; (8001ef0 <MX_GPIO_Init+0x134>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001e62:	2200      	movs	r2, #0
 8001e64:	f244 0181 	movw	r1, #16513	; 0x4081
 8001e68:	4822      	ldr	r0, [pc, #136]	; (8001ef4 <MX_GPIO_Init+0x138>)
 8001e6a:	f001 f8e9 	bl	8003040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2140      	movs	r1, #64	; 0x40
 8001e72:	4821      	ldr	r0, [pc, #132]	; (8001ef8 <MX_GPIO_Init+0x13c>)
 8001e74:	f001 f8e4 	bl	8003040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001e78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e7e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001e88:	f107 031c 	add.w	r3, r7, #28
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	481b      	ldr	r0, [pc, #108]	; (8001efc <MX_GPIO_Init+0x140>)
 8001e90:	f000 ff2a 	bl	8002ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001e94:	f244 0381 	movw	r3, #16513	; 0x4081
 8001e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea6:	f107 031c 	add.w	r3, r7, #28
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4811      	ldr	r0, [pc, #68]	; (8001ef4 <MX_GPIO_Init+0x138>)
 8001eae:	f000 ff1b 	bl	8002ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001eb2:	2340      	movs	r3, #64	; 0x40
 8001eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001ec2:	f107 031c 	add.w	r3, r7, #28
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	480b      	ldr	r0, [pc, #44]	; (8001ef8 <MX_GPIO_Init+0x13c>)
 8001eca:	f000 ff0d 	bl	8002ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001eda:	f107 031c 	add.w	r3, r7, #28
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4805      	ldr	r0, [pc, #20]	; (8001ef8 <MX_GPIO_Init+0x13c>)
 8001ee2:	f000 ff01 	bl	8002ce8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ee6:	bf00      	nop
 8001ee8:	3730      	adds	r7, #48	; 0x30
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40020400 	.word	0x40020400
 8001ef8:	40021800 	.word	0x40021800
 8001efc:	40020800 	.word	0x40020800

08001f00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001f08:	f00b f8a8 	bl	800d05c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	f008 f94f 	bl	800a1b0 <osDelay>
 8001f12:	e7fb      	b.n	8001f0c <StartDefaultTask+0xc>

08001f14 <commandReaderEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_commandReaderEntry */
void commandReaderEntry(void *argument)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b0a2      	sub	sp, #136	; 0x88
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN commandReaderEntry */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	f008 f947 	bl	800a1b0 <osDelay>
    uint8_t * command[32];
    xQueueReceive(commandQueueHandle, command, 100);
 8001f22:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <commandReaderEntry+0x2c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f107 0108 	add.w	r1, r7, #8
 8001f2a:	2264      	movs	r2, #100	; 0x64
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f008 fe6d 	bl	800ac0c <xQueueReceive>

    SEGGER_SYSVIEW_PrintfHost((uint8_t*)command);
 8001f32:	f107 0308 	add.w	r3, r7, #8
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff fcfe 	bl	8001938 <SEGGER_SYSVIEW_PrintfHost>
  {
 8001f3c:	e7ee      	b.n	8001f1c <commandReaderEntry+0x8>
 8001f3e:	bf00      	nop
 8001f40:	20000ec0 	.word	0x20000ec0

08001f44 <testCommandTimerEntry>:
  /* USER CODE END commandReaderEntry */
}

/* testCommandTimerEntry function */
void testCommandTimerEntry(void *argument)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN testCommandTimerEntry */
  //SEGGER_SYSVIEW_PrintfHost("sender");
  osDelay(1);
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	f008 f92f 	bl	800a1b0 <osDelay>
  //uint8_t *data = "Hello World from USB CDC\n";
  //xQueueSend(commandQueueHandle, data, 100);

  /* USER CODE END testCommandTimerEntry */
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a04      	ldr	r2, [pc, #16]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d101      	bne.n	8001f72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f6e:	f000 fa6f 	bl	8002450 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40001000 	.word	0x40001000

08001f80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f84:	b672      	cpsid	i
}
 8001f86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <Error_Handler+0x8>
	...

08001f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <HAL_MspInit+0x4c>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	4a10      	ldr	r2, [pc, #64]	; (8001fd8 <HAL_MspInit+0x4c>)
 8001f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <HAL_MspInit+0x4c>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa6:	607b      	str	r3, [r7, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001faa:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_MspInit+0x4c>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <HAL_MspInit+0x4c>)
 8001fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <HAL_MspInit+0x4c>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fbe:	603b      	str	r3, [r7, #0]
 8001fc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	210f      	movs	r1, #15
 8001fc6:	f06f 0001 	mvn.w	r0, #1
 8001fca:	f000 fb3d 	bl	8002648 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800

08001fdc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08e      	sub	sp, #56	; 0x38
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a4e      	ldr	r2, [pc, #312]	; (8002134 <HAL_ETH_MspInit+0x158>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	f040 8096 	bne.w	800212c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002000:	4b4d      	ldr	r3, [pc, #308]	; (8002138 <HAL_ETH_MspInit+0x15c>)
 8002002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002004:	4a4c      	ldr	r2, [pc, #304]	; (8002138 <HAL_ETH_MspInit+0x15c>)
 8002006:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800200a:	6313      	str	r3, [r2, #48]	; 0x30
 800200c:	4b4a      	ldr	r3, [pc, #296]	; (8002138 <HAL_ETH_MspInit+0x15c>)
 800200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002014:	623b      	str	r3, [r7, #32]
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	4b47      	ldr	r3, [pc, #284]	; (8002138 <HAL_ETH_MspInit+0x15c>)
 800201a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201c:	4a46      	ldr	r2, [pc, #280]	; (8002138 <HAL_ETH_MspInit+0x15c>)
 800201e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002022:	6313      	str	r3, [r2, #48]	; 0x30
 8002024:	4b44      	ldr	r3, [pc, #272]	; (8002138 <HAL_ETH_MspInit+0x15c>)
 8002026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002028:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800202c:	61fb      	str	r3, [r7, #28]
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	4b41      	ldr	r3, [pc, #260]	; (8002138 <HAL_ETH_MspInit+0x15c>)
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	4a40      	ldr	r2, [pc, #256]	; (8002138 <HAL_ETH_MspInit+0x15c>)
 8002036:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800203a:	6313      	str	r3, [r2, #48]	; 0x30
 800203c:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <HAL_ETH_MspInit+0x15c>)
 800203e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002040:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002044:	61bb      	str	r3, [r7, #24]
 8002046:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002048:	4b3b      	ldr	r3, [pc, #236]	; (8002138 <HAL_ETH_MspInit+0x15c>)
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	4a3a      	ldr	r2, [pc, #232]	; (8002138 <HAL_ETH_MspInit+0x15c>)
 800204e:	f043 0304 	orr.w	r3, r3, #4
 8002052:	6313      	str	r3, [r2, #48]	; 0x30
 8002054:	4b38      	ldr	r3, [pc, #224]	; (8002138 <HAL_ETH_MspInit+0x15c>)
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	617b      	str	r3, [r7, #20]
 800205e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002060:	4b35      	ldr	r3, [pc, #212]	; (8002138 <HAL_ETH_MspInit+0x15c>)
 8002062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002064:	4a34      	ldr	r2, [pc, #208]	; (8002138 <HAL_ETH_MspInit+0x15c>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6313      	str	r3, [r2, #48]	; 0x30
 800206c:	4b32      	ldr	r3, [pc, #200]	; (8002138 <HAL_ETH_MspInit+0x15c>)
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002078:	4b2f      	ldr	r3, [pc, #188]	; (8002138 <HAL_ETH_MspInit+0x15c>)
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	4a2e      	ldr	r2, [pc, #184]	; (8002138 <HAL_ETH_MspInit+0x15c>)
 800207e:	f043 0302 	orr.w	r3, r3, #2
 8002082:	6313      	str	r3, [r2, #48]	; 0x30
 8002084:	4b2c      	ldr	r3, [pc, #176]	; (8002138 <HAL_ETH_MspInit+0x15c>)
 8002086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002090:	4b29      	ldr	r3, [pc, #164]	; (8002138 <HAL_ETH_MspInit+0x15c>)
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	4a28      	ldr	r2, [pc, #160]	; (8002138 <HAL_ETH_MspInit+0x15c>)
 8002096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800209a:	6313      	str	r3, [r2, #48]	; 0x30
 800209c:	4b26      	ldr	r3, [pc, #152]	; (8002138 <HAL_ETH_MspInit+0x15c>)
 800209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80020a8:	2332      	movs	r3, #50	; 0x32
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b4:	2303      	movs	r3, #3
 80020b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020b8:	230b      	movs	r3, #11
 80020ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c0:	4619      	mov	r1, r3
 80020c2:	481e      	ldr	r0, [pc, #120]	; (800213c <HAL_ETH_MspInit+0x160>)
 80020c4:	f000 fe10 	bl	8002ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80020c8:	2386      	movs	r3, #134	; 0x86
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020cc:	2302      	movs	r3, #2
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d4:	2303      	movs	r3, #3
 80020d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020d8:	230b      	movs	r3, #11
 80020da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e0:	4619      	mov	r1, r3
 80020e2:	4817      	ldr	r0, [pc, #92]	; (8002140 <HAL_ETH_MspInit+0x164>)
 80020e4:	f000 fe00 	bl	8002ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80020e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ee:	2302      	movs	r3, #2
 80020f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f6:	2303      	movs	r3, #3
 80020f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020fa:	230b      	movs	r3, #11
 80020fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80020fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002102:	4619      	mov	r1, r3
 8002104:	480f      	ldr	r0, [pc, #60]	; (8002144 <HAL_ETH_MspInit+0x168>)
 8002106:	f000 fdef 	bl	8002ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800210a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	2302      	movs	r3, #2
 8002112:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002118:	2303      	movs	r3, #3
 800211a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800211c:	230b      	movs	r3, #11
 800211e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002124:	4619      	mov	r1, r3
 8002126:	4808      	ldr	r0, [pc, #32]	; (8002148 <HAL_ETH_MspInit+0x16c>)
 8002128:	f000 fdde 	bl	8002ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800212c:	bf00      	nop
 800212e:	3738      	adds	r7, #56	; 0x38
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40028000 	.word	0x40028000
 8002138:	40023800 	.word	0x40023800
 800213c:	40020800 	.word	0x40020800
 8002140:	40020000 	.word	0x40020000
 8002144:	40020400 	.word	0x40020400
 8002148:	40021800 	.word	0x40021800

0800214c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b0ae      	sub	sp, #184	; 0xb8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	2290      	movs	r2, #144	; 0x90
 800216a:	2100      	movs	r1, #0
 800216c:	4618      	mov	r0, r3
 800216e:	f00b fd45 	bl	800dbfc <memset>
  if(huart->Instance==USART3)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a22      	ldr	r2, [pc, #136]	; (8002200 <HAL_UART_MspInit+0xb4>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d13c      	bne.n	80021f6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800217c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002180:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002182:	2300      	movs	r3, #0
 8002184:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002186:	f107 0314 	add.w	r3, r7, #20
 800218a:	4618      	mov	r0, r3
 800218c:	f002 ff90 	bl	80050b0 <HAL_RCCEx_PeriphCLKConfig>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002196:	f7ff fef3 	bl	8001f80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800219a:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <HAL_UART_MspInit+0xb8>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	4a19      	ldr	r2, [pc, #100]	; (8002204 <HAL_UART_MspInit+0xb8>)
 80021a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a4:	6413      	str	r3, [r2, #64]	; 0x40
 80021a6:	4b17      	ldr	r3, [pc, #92]	; (8002204 <HAL_UART_MspInit+0xb8>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021b2:	4b14      	ldr	r3, [pc, #80]	; (8002204 <HAL_UART_MspInit+0xb8>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a13      	ldr	r2, [pc, #76]	; (8002204 <HAL_UART_MspInit+0xb8>)
 80021b8:	f043 0308 	orr.w	r3, r3, #8
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_UART_MspInit+0xb8>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80021ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d2:	2302      	movs	r3, #2
 80021d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021de:	2303      	movs	r3, #3
 80021e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021e4:	2307      	movs	r3, #7
 80021e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021ea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021ee:	4619      	mov	r1, r3
 80021f0:	4805      	ldr	r0, [pc, #20]	; (8002208 <HAL_UART_MspInit+0xbc>)
 80021f2:	f000 fd79 	bl	8002ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80021f6:	bf00      	nop
 80021f8:	37b8      	adds	r7, #184	; 0xb8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40004800 	.word	0x40004800
 8002204:	40023800 	.word	0x40023800
 8002208:	40020c00 	.word	0x40020c00

0800220c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08e      	sub	sp, #56	; 0x38
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800221c:	4b33      	ldr	r3, [pc, #204]	; (80022ec <HAL_InitTick+0xe0>)
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	4a32      	ldr	r2, [pc, #200]	; (80022ec <HAL_InitTick+0xe0>)
 8002222:	f043 0310 	orr.w	r3, r3, #16
 8002226:	6413      	str	r3, [r2, #64]	; 0x40
 8002228:	4b30      	ldr	r3, [pc, #192]	; (80022ec <HAL_InitTick+0xe0>)
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f003 0310 	and.w	r3, r3, #16
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002234:	f107 0210 	add.w	r2, r7, #16
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	4611      	mov	r1, r2
 800223e:	4618      	mov	r0, r3
 8002240:	f002 ff04 	bl	800504c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800224a:	2b00      	cmp	r3, #0
 800224c:	d103      	bne.n	8002256 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800224e:	f002 fed5 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 8002252:	6378      	str	r0, [r7, #52]	; 0x34
 8002254:	e004      	b.n	8002260 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002256:	f002 fed1 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 800225a:	4603      	mov	r3, r0
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002262:	4a23      	ldr	r2, [pc, #140]	; (80022f0 <HAL_InitTick+0xe4>)
 8002264:	fba2 2303 	umull	r2, r3, r2, r3
 8002268:	0c9b      	lsrs	r3, r3, #18
 800226a:	3b01      	subs	r3, #1
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800226e:	4b21      	ldr	r3, [pc, #132]	; (80022f4 <HAL_InitTick+0xe8>)
 8002270:	4a21      	ldr	r2, [pc, #132]	; (80022f8 <HAL_InitTick+0xec>)
 8002272:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002274:	4b1f      	ldr	r3, [pc, #124]	; (80022f4 <HAL_InitTick+0xe8>)
 8002276:	f240 32e7 	movw	r2, #999	; 0x3e7
 800227a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800227c:	4a1d      	ldr	r2, [pc, #116]	; (80022f4 <HAL_InitTick+0xe8>)
 800227e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002280:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002282:	4b1c      	ldr	r3, [pc, #112]	; (80022f4 <HAL_InitTick+0xe8>)
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002288:	4b1a      	ldr	r3, [pc, #104]	; (80022f4 <HAL_InitTick+0xe8>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800228e:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <HAL_InitTick+0xe8>)
 8002290:	2200      	movs	r2, #0
 8002292:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002294:	4817      	ldr	r0, [pc, #92]	; (80022f4 <HAL_InitTick+0xe8>)
 8002296:	f003 fb33 	bl	8005900 <HAL_TIM_Base_Init>
 800229a:	4603      	mov	r3, r0
 800229c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80022a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d11b      	bne.n	80022e0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80022a8:	4812      	ldr	r0, [pc, #72]	; (80022f4 <HAL_InitTick+0xe8>)
 80022aa:	f003 fb8b 	bl	80059c4 <HAL_TIM_Base_Start_IT>
 80022ae:	4603      	mov	r3, r0
 80022b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80022b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d111      	bne.n	80022e0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022bc:	2036      	movs	r0, #54	; 0x36
 80022be:	f000 f9df 	bl	8002680 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b0f      	cmp	r3, #15
 80022c6:	d808      	bhi.n	80022da <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80022c8:	2200      	movs	r2, #0
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	2036      	movs	r0, #54	; 0x36
 80022ce:	f000 f9bb 	bl	8002648 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022d2:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <HAL_InitTick+0xf0>)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	e002      	b.n	80022e0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80022e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3738      	adds	r7, #56	; 0x38
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40023800 	.word	0x40023800
 80022f0:	431bde83 	.word	0x431bde83
 80022f4:	20000ed0 	.word	0x20000ed0
 80022f8:	40001000 	.word	0x40001000
 80022fc:	20000004 	.word	0x20000004

08002300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002304:	e7fe      	b.n	8002304 <NMI_Handler+0x4>

08002306 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800230a:	e7fe      	b.n	800230a <HardFault_Handler+0x4>

0800230c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002310:	e7fe      	b.n	8002310 <MemManage_Handler+0x4>

08002312 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002316:	e7fe      	b.n	8002316 <BusFault_Handler+0x4>

08002318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800231c:	e7fe      	b.n	800231c <UsageFault_Handler+0x4>

0800231e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002330:	4802      	ldr	r0, [pc, #8]	; (800233c <TIM6_DAC_IRQHandler+0x10>)
 8002332:	f003 fbbf 	bl	8005ab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000ed0 	.word	0x20000ed0

08002340 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002344:	4802      	ldr	r0, [pc, #8]	; (8002350 <OTG_FS_IRQHandler+0x10>)
 8002346:	f000 ffda 	bl	80032fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20006e0c 	.word	0x20006e0c

08002354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800235c:	4a14      	ldr	r2, [pc, #80]	; (80023b0 <_sbrk+0x5c>)
 800235e:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <_sbrk+0x60>)
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002368:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <_sbrk+0x64>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d102      	bne.n	8002376 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <_sbrk+0x64>)
 8002372:	4a12      	ldr	r2, [pc, #72]	; (80023bc <_sbrk+0x68>)
 8002374:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002376:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <_sbrk+0x64>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4413      	add	r3, r2
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	429a      	cmp	r2, r3
 8002382:	d207      	bcs.n	8002394 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002384:	f00b fbf0 	bl	800db68 <__errno>
 8002388:	4603      	mov	r3, r0
 800238a:	220c      	movs	r2, #12
 800238c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800238e:	f04f 33ff 	mov.w	r3, #4294967295
 8002392:	e009      	b.n	80023a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <_sbrk+0x64>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800239a:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <_sbrk+0x64>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4413      	add	r3, r2
 80023a2:	4a05      	ldr	r2, [pc, #20]	; (80023b8 <_sbrk+0x64>)
 80023a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023a6:	68fb      	ldr	r3, [r7, #12]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20080000 	.word	0x20080000
 80023b4:	00000400 	.word	0x00000400
 80023b8:	20000f1c 	.word	0x20000f1c
 80023bc:	20007328 	.word	0x20007328

080023c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023c4:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <SystemInit+0x20>)
 80023c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ca:	4a05      	ldr	r2, [pc, #20]	; (80023e0 <SystemInit+0x20>)
 80023cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800241c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023e8:	480d      	ldr	r0, [pc, #52]	; (8002420 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023ea:	490e      	ldr	r1, [pc, #56]	; (8002424 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023ec:	4a0e      	ldr	r2, [pc, #56]	; (8002428 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023f0:	e002      	b.n	80023f8 <LoopCopyDataInit>

080023f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023f6:	3304      	adds	r3, #4

080023f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023fc:	d3f9      	bcc.n	80023f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023fe:	4a0b      	ldr	r2, [pc, #44]	; (800242c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002400:	4c0b      	ldr	r4, [pc, #44]	; (8002430 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002404:	e001      	b.n	800240a <LoopFillZerobss>

08002406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002408:	3204      	adds	r2, #4

0800240a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800240a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800240c:	d3fb      	bcc.n	8002406 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800240e:	f7ff ffd7 	bl	80023c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002412:	f00b fbaf 	bl	800db74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002416:	f7ff fb89 	bl	8001b2c <main>
  bx  lr    
 800241a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800241c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002424:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8002428:	0800e140 	.word	0x0800e140
  ldr r2, =_sbss
 800242c:	200002b4 	.word	0x200002b4
  ldr r4, =_ebss
 8002430:	20007324 	.word	0x20007324

08002434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002434:	e7fe      	b.n	8002434 <ADC_IRQHandler>

08002436 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800243a:	2003      	movs	r0, #3
 800243c:	f000 f8f9 	bl	8002632 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002440:	200f      	movs	r0, #15
 8002442:	f7ff fee3 	bl	800220c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002446:	f7ff fda1 	bl	8001f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <HAL_IncTick+0x20>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	461a      	mov	r2, r3
 800245a:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_IncTick+0x24>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4413      	add	r3, r2
 8002460:	4a04      	ldr	r2, [pc, #16]	; (8002474 <HAL_IncTick+0x24>)
 8002462:	6013      	str	r3, [r2, #0]
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	20000008 	.word	0x20000008
 8002474:	20000f20 	.word	0x20000f20

08002478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return uwTick;
 800247c:	4b03      	ldr	r3, [pc, #12]	; (800248c <HAL_GetTick+0x14>)
 800247e:	681b      	ldr	r3, [r3, #0]
}
 8002480:	4618      	mov	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	20000f20 	.word	0x20000f20

08002490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002498:	f7ff ffee 	bl	8002478 <HAL_GetTick>
 800249c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a8:	d005      	beq.n	80024b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024aa:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <HAL_Delay+0x44>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4413      	add	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024b6:	bf00      	nop
 80024b8:	f7ff ffde 	bl	8002478 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d8f7      	bhi.n	80024b8 <HAL_Delay+0x28>
  {
  }
}
 80024c8:	bf00      	nop
 80024ca:	bf00      	nop
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000008 	.word	0x20000008

080024d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <__NVIC_SetPriorityGrouping+0x40>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024f4:	4013      	ands	r3, r2
 80024f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <__NVIC_SetPriorityGrouping+0x44>)
 8002502:	4313      	orrs	r3, r2
 8002504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002506:	4a04      	ldr	r2, [pc, #16]	; (8002518 <__NVIC_SetPriorityGrouping+0x40>)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	60d3      	str	r3, [r2, #12]
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000ed00 	.word	0xe000ed00
 800251c:	05fa0000 	.word	0x05fa0000

08002520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002524:	4b04      	ldr	r3, [pc, #16]	; (8002538 <__NVIC_GetPriorityGrouping+0x18>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	0a1b      	lsrs	r3, r3, #8
 800252a:	f003 0307 	and.w	r3, r3, #7
}
 800252e:	4618      	mov	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	2b00      	cmp	r3, #0
 800254c:	db0b      	blt.n	8002566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	f003 021f 	and.w	r2, r3, #31
 8002554:	4907      	ldr	r1, [pc, #28]	; (8002574 <__NVIC_EnableIRQ+0x38>)
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	2001      	movs	r0, #1
 800255e:	fa00 f202 	lsl.w	r2, r0, r2
 8002562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	e000e100 	.word	0xe000e100

08002578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	6039      	str	r1, [r7, #0]
 8002582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002588:	2b00      	cmp	r3, #0
 800258a:	db0a      	blt.n	80025a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	b2da      	uxtb	r2, r3
 8002590:	490c      	ldr	r1, [pc, #48]	; (80025c4 <__NVIC_SetPriority+0x4c>)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	0112      	lsls	r2, r2, #4
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	440b      	add	r3, r1
 800259c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025a0:	e00a      	b.n	80025b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4908      	ldr	r1, [pc, #32]	; (80025c8 <__NVIC_SetPriority+0x50>)
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	3b04      	subs	r3, #4
 80025b0:	0112      	lsls	r2, r2, #4
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	440b      	add	r3, r1
 80025b6:	761a      	strb	r2, [r3, #24]
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000e100 	.word	0xe000e100
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b089      	sub	sp, #36	; 0x24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f1c3 0307 	rsb	r3, r3, #7
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	bf28      	it	cs
 80025ea:	2304      	movcs	r3, #4
 80025ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3304      	adds	r3, #4
 80025f2:	2b06      	cmp	r3, #6
 80025f4:	d902      	bls.n	80025fc <NVIC_EncodePriority+0x30>
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3b03      	subs	r3, #3
 80025fa:	e000      	b.n	80025fe <NVIC_EncodePriority+0x32>
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002600:	f04f 32ff 	mov.w	r2, #4294967295
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43da      	mvns	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	401a      	ands	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002614:	f04f 31ff 	mov.w	r1, #4294967295
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	43d9      	mvns	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002624:	4313      	orrs	r3, r2
         );
}
 8002626:	4618      	mov	r0, r3
 8002628:	3724      	adds	r7, #36	; 0x24
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff ff4c 	bl	80024d8 <__NVIC_SetPriorityGrouping>
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800265a:	f7ff ff61 	bl	8002520 <__NVIC_GetPriorityGrouping>
 800265e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	68b9      	ldr	r1, [r7, #8]
 8002664:	6978      	ldr	r0, [r7, #20]
 8002666:	f7ff ffb1 	bl	80025cc <NVIC_EncodePriority>
 800266a:	4602      	mov	r2, r0
 800266c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002670:	4611      	mov	r1, r2
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff ff80 	bl	8002578 <__NVIC_SetPriority>
}
 8002678:	bf00      	nop
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff ff54 	bl	800253c <__NVIC_EnableIRQ>
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e06a      	b.n	8002784 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d106      	bne.n	80026c6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2223      	movs	r2, #35	; 0x23
 80026bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff fc8b 	bl	8001fdc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c6:	4b31      	ldr	r3, [pc, #196]	; (800278c <HAL_ETH_Init+0xf0>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	4a30      	ldr	r2, [pc, #192]	; (800278c <HAL_ETH_Init+0xf0>)
 80026cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d0:	6453      	str	r3, [r2, #68]	; 0x44
 80026d2:	4b2e      	ldr	r3, [pc, #184]	; (800278c <HAL_ETH_Init+0xf0>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80026de:	4b2c      	ldr	r3, [pc, #176]	; (8002790 <HAL_ETH_Init+0xf4>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4a2b      	ldr	r2, [pc, #172]	; (8002790 <HAL_ETH_Init+0xf4>)
 80026e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80026e8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80026ea:	4b29      	ldr	r3, [pc, #164]	; (8002790 <HAL_ETH_Init+0xf4>)
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	4927      	ldr	r1, [pc, #156]	; (8002790 <HAL_ETH_Init+0xf4>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80026f8:	4b25      	ldr	r3, [pc, #148]	; (8002790 <HAL_ETH_Init+0xf4>)
 80026fa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6812      	ldr	r2, [r2, #0]
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002712:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002714:	f7ff feb0 	bl	8002478 <HAL_GetTick>
 8002718:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800271a:	e011      	b.n	8002740 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800271c:	f7ff feac 	bl	8002478 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800272a:	d909      	bls.n	8002740 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2204      	movs	r2, #4
 8002730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	22e0      	movs	r2, #224	; 0xe0
 8002738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e021      	b.n	8002784 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1e4      	bne.n	800271c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f958 	bl	8002a08 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f9ff 	bl	8002b5c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fa55 	bl	8002c0e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	461a      	mov	r2, r3
 800276a:	2100      	movs	r1, #0
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f9bd 	bl	8002aec <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2210      	movs	r2, #16
 800277e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40023800 	.word	0x40023800
 8002790:	40013800 	.word	0x40013800

08002794 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4b51      	ldr	r3, [pc, #324]	; (80028f0 <ETH_SetMACConfig+0x15c>)
 80027aa:	4013      	ands	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	7c1b      	ldrb	r3, [r3, #16]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d102      	bne.n	80027bc <ETH_SetMACConfig+0x28>
 80027b6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80027ba:	e000      	b.n	80027be <ETH_SetMACConfig+0x2a>
 80027bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	7c5b      	ldrb	r3, [r3, #17]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d102      	bne.n	80027cc <ETH_SetMACConfig+0x38>
 80027c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027ca:	e000      	b.n	80027ce <ETH_SetMACConfig+0x3a>
 80027cc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027ce:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80027d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	7fdb      	ldrb	r3, [r3, #31]
 80027da:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80027dc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80027e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	7f92      	ldrb	r2, [r2, #30]
 80027e8:	2a00      	cmp	r2, #0
 80027ea:	d102      	bne.n	80027f2 <ETH_SetMACConfig+0x5e>
 80027ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027f0:	e000      	b.n	80027f4 <ETH_SetMACConfig+0x60>
 80027f2:	2200      	movs	r2, #0
                        macconf->Speed |
 80027f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	7f1b      	ldrb	r3, [r3, #28]
 80027fa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80027fc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002802:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	791b      	ldrb	r3, [r3, #4]
 8002808:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800280a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002812:	2a00      	cmp	r2, #0
 8002814:	d102      	bne.n	800281c <ETH_SetMACConfig+0x88>
 8002816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800281a:	e000      	b.n	800281e <ETH_SetMACConfig+0x8a>
 800281c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800281e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	7bdb      	ldrb	r3, [r3, #15]
 8002824:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002826:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800282c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002834:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002836:	4313      	orrs	r3, r2
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4313      	orrs	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800284e:	2001      	movs	r0, #1
 8002850:	f7ff fe1e 	bl	8002490 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	f64f 7341 	movw	r3, #65345	; 0xff41
 800286a:	4013      	ands	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002872:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800287a:	2a00      	cmp	r2, #0
 800287c:	d101      	bne.n	8002882 <ETH_SetMACConfig+0xee>
 800287e:	2280      	movs	r2, #128	; 0x80
 8002880:	e000      	b.n	8002884 <ETH_SetMACConfig+0xf0>
 8002882:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002884:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800288a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002892:	2a01      	cmp	r2, #1
 8002894:	d101      	bne.n	800289a <ETH_SetMACConfig+0x106>
 8002896:	2208      	movs	r2, #8
 8002898:	e000      	b.n	800289c <ETH_SetMACConfig+0x108>
 800289a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800289c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80028a4:	2a01      	cmp	r2, #1
 80028a6:	d101      	bne.n	80028ac <ETH_SetMACConfig+0x118>
 80028a8:	2204      	movs	r2, #4
 80028aa:	e000      	b.n	80028ae <ETH_SetMACConfig+0x11a>
 80028ac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80028ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80028b6:	2a01      	cmp	r2, #1
 80028b8:	d101      	bne.n	80028be <ETH_SetMACConfig+0x12a>
 80028ba:	2202      	movs	r2, #2
 80028bc:	e000      	b.n	80028c0 <ETH_SetMACConfig+0x12c>
 80028be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028c0:	4313      	orrs	r3, r2
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028d8:	2001      	movs	r0, #1
 80028da:	f7ff fdd9 	bl	8002490 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	619a      	str	r2, [r3, #24]
}
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	ff20810f 	.word	0xff20810f

080028f4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	4b3d      	ldr	r3, [pc, #244]	; (8002a04 <ETH_SetDMAConfig+0x110>)
 800290e:	4013      	ands	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	7b1b      	ldrb	r3, [r3, #12]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d102      	bne.n	8002920 <ETH_SetDMAConfig+0x2c>
 800291a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800291e:	e000      	b.n	8002922 <ETH_SetDMAConfig+0x2e>
 8002920:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	7b5b      	ldrb	r3, [r3, #13]
 8002926:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002928:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	7f52      	ldrb	r2, [r2, #29]
 800292e:	2a00      	cmp	r2, #0
 8002930:	d102      	bne.n	8002938 <ETH_SetDMAConfig+0x44>
 8002932:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002936:	e000      	b.n	800293a <ETH_SetDMAConfig+0x46>
 8002938:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800293a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	7b9b      	ldrb	r3, [r3, #14]
 8002940:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002942:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002948:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	7f1b      	ldrb	r3, [r3, #28]
 800294e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002950:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	7f9b      	ldrb	r3, [r3, #30]
 8002956:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002958:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800295e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002966:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002968:	4313      	orrs	r3, r2
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	4313      	orrs	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002978:	461a      	mov	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800298a:	2001      	movs	r0, #1
 800298c:	f7ff fd80 	bl	8002490 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002998:	461a      	mov	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	791b      	ldrb	r3, [r3, #4]
 80029a2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029a8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80029ae:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80029b4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029bc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80029be:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80029c6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80029cc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6812      	ldr	r2, [r2, #0]
 80029d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029da:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029e8:	2001      	movs	r0, #1
 80029ea:	f7ff fd51 	bl	8002490 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f6:	461a      	mov	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6013      	str	r3, [r2, #0]
}
 80029fc:	bf00      	nop
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	f8de3f23 	.word	0xf8de3f23

08002a08 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b0a6      	sub	sp, #152	; 0x98
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002a10:	2301      	movs	r3, #1
 8002a12:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002a16:	2301      	movs	r3, #1
 8002a18:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002a20:	2300      	movs	r3, #0
 8002a22:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a26:	2301      	movs	r3, #1
 8002a28:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a32:	2301      	movs	r3, #1
 8002a34:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a44:	2300      	movs	r3, #0
 8002a46:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002a52:	2300      	movs	r3, #0
 8002a54:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a64:	2300      	movs	r3, #0
 8002a66:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002a6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a6e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002a70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a74:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002a76:	2300      	movs	r3, #0
 8002a78:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002a7c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a80:	4619      	mov	r1, r3
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff fe86 	bl	8002794 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002a90:	2301      	movs	r3, #1
 8002a92:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002a96:	2301      	movs	r3, #1
 8002a98:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002ab8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002abc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002abe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ac2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ac8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002aca:	2301      	movs	r3, #1
 8002acc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002ad8:	f107 0308 	add.w	r3, r7, #8
 8002adc:	4619      	mov	r1, r3
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7ff ff08 	bl	80028f4 <ETH_SetDMAConfig>
}
 8002ae4:	bf00      	nop
 8002ae6:	3798      	adds	r7, #152	; 0x98
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3305      	adds	r3, #5
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	021b      	lsls	r3, r3, #8
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	3204      	adds	r2, #4
 8002b04:	7812      	ldrb	r2, [r2, #0]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <ETH_MACAddressConfig+0x68>)
 8002b0e:	4413      	add	r3, r2
 8002b10:	461a      	mov	r2, r3
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3303      	adds	r3, #3
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	061a      	lsls	r2, r3, #24
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3302      	adds	r3, #2
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	041b      	lsls	r3, r3, #16
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	021b      	lsls	r3, r3, #8
 8002b30:	4313      	orrs	r3, r2
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	7812      	ldrb	r2, [r2, #0]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <ETH_MACAddressConfig+0x6c>)
 8002b3e:	4413      	add	r3, r2
 8002b40:	461a      	mov	r2, r3
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	6013      	str	r3, [r2, #0]
}
 8002b46:	bf00      	nop
 8002b48:	371c      	adds	r7, #28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40028040 	.word	0x40028040
 8002b58:	40028044 	.word	0x40028044

08002b5c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b64:	2300      	movs	r3, #0
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	e03e      	b.n	8002be8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68d9      	ldr	r1, [r3, #12]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	440b      	add	r3, r1
 8002b7a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2200      	movs	r2, #0
 8002b86:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2200      	movs	r2, #0
 8002b92:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002b94:	68b9      	ldr	r1, [r7, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	3206      	adds	r2, #6
 8002b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d80c      	bhi.n	8002bcc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68d9      	ldr	r1, [r3, #12]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	440b      	add	r3, r1
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	60da      	str	r2, [r3, #12]
 8002bca:	e004      	b.n	8002bd6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	3301      	adds	r3, #1
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	d9bd      	bls.n	8002b6a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c00:	611a      	str	r2, [r3, #16]
}
 8002c02:	bf00      	nop
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b085      	sub	sp, #20
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	e046      	b.n	8002caa <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6919      	ldr	r1, [r3, #16]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	440b      	add	r3, r1
 8002c2c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2200      	movs	r2, #0
 8002c38:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2200      	movs	r2, #0
 8002c44:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c58:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002c60:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002c6e:	68b9      	ldr	r1, [r7, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	3212      	adds	r2, #18
 8002c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d80c      	bhi.n	8002c9a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6919      	ldr	r1, [r3, #16]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	440b      	add	r3, r1
 8002c92:	461a      	mov	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	60da      	str	r2, [r3, #12]
 8002c98:	e004      	b.n	8002ca4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d9b5      	bls.n	8002c1c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691a      	ldr	r2, [r3, #16]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cda:	60da      	str	r2, [r3, #12]
}
 8002cdc:	bf00      	nop
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b089      	sub	sp, #36	; 0x24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	e175      	b.n	8002ff4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d08:	2201      	movs	r2, #1
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	f040 8164 	bne.w	8002fee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d005      	beq.n	8002d3e <HAL_GPIO_Init+0x56>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d130      	bne.n	8002da0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	2203      	movs	r2, #3
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d74:	2201      	movs	r2, #1
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4013      	ands	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	091b      	lsrs	r3, r3, #4
 8002d8a:	f003 0201 	and.w	r2, r3, #1
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d017      	beq.n	8002ddc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	2203      	movs	r2, #3
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d123      	bne.n	8002e30 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	08da      	lsrs	r2, r3, #3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3208      	adds	r2, #8
 8002df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	220f      	movs	r2, #15
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	08da      	lsrs	r2, r3, #3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3208      	adds	r2, #8
 8002e2a:	69b9      	ldr	r1, [r7, #24]
 8002e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4013      	ands	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 0203 	and.w	r2, r3, #3
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 80be 	beq.w	8002fee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e72:	4b66      	ldr	r3, [pc, #408]	; (800300c <HAL_GPIO_Init+0x324>)
 8002e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e76:	4a65      	ldr	r2, [pc, #404]	; (800300c <HAL_GPIO_Init+0x324>)
 8002e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e7e:	4b63      	ldr	r3, [pc, #396]	; (800300c <HAL_GPIO_Init+0x324>)
 8002e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e8a:	4a61      	ldr	r2, [pc, #388]	; (8003010 <HAL_GPIO_Init+0x328>)
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	089b      	lsrs	r3, r3, #2
 8002e90:	3302      	adds	r3, #2
 8002e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	220f      	movs	r2, #15
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a58      	ldr	r2, [pc, #352]	; (8003014 <HAL_GPIO_Init+0x32c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d037      	beq.n	8002f26 <HAL_GPIO_Init+0x23e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a57      	ldr	r2, [pc, #348]	; (8003018 <HAL_GPIO_Init+0x330>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d031      	beq.n	8002f22 <HAL_GPIO_Init+0x23a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a56      	ldr	r2, [pc, #344]	; (800301c <HAL_GPIO_Init+0x334>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d02b      	beq.n	8002f1e <HAL_GPIO_Init+0x236>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a55      	ldr	r2, [pc, #340]	; (8003020 <HAL_GPIO_Init+0x338>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d025      	beq.n	8002f1a <HAL_GPIO_Init+0x232>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a54      	ldr	r2, [pc, #336]	; (8003024 <HAL_GPIO_Init+0x33c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d01f      	beq.n	8002f16 <HAL_GPIO_Init+0x22e>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a53      	ldr	r2, [pc, #332]	; (8003028 <HAL_GPIO_Init+0x340>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d019      	beq.n	8002f12 <HAL_GPIO_Init+0x22a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a52      	ldr	r2, [pc, #328]	; (800302c <HAL_GPIO_Init+0x344>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d013      	beq.n	8002f0e <HAL_GPIO_Init+0x226>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a51      	ldr	r2, [pc, #324]	; (8003030 <HAL_GPIO_Init+0x348>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d00d      	beq.n	8002f0a <HAL_GPIO_Init+0x222>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a50      	ldr	r2, [pc, #320]	; (8003034 <HAL_GPIO_Init+0x34c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d007      	beq.n	8002f06 <HAL_GPIO_Init+0x21e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a4f      	ldr	r2, [pc, #316]	; (8003038 <HAL_GPIO_Init+0x350>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d101      	bne.n	8002f02 <HAL_GPIO_Init+0x21a>
 8002efe:	2309      	movs	r3, #9
 8002f00:	e012      	b.n	8002f28 <HAL_GPIO_Init+0x240>
 8002f02:	230a      	movs	r3, #10
 8002f04:	e010      	b.n	8002f28 <HAL_GPIO_Init+0x240>
 8002f06:	2308      	movs	r3, #8
 8002f08:	e00e      	b.n	8002f28 <HAL_GPIO_Init+0x240>
 8002f0a:	2307      	movs	r3, #7
 8002f0c:	e00c      	b.n	8002f28 <HAL_GPIO_Init+0x240>
 8002f0e:	2306      	movs	r3, #6
 8002f10:	e00a      	b.n	8002f28 <HAL_GPIO_Init+0x240>
 8002f12:	2305      	movs	r3, #5
 8002f14:	e008      	b.n	8002f28 <HAL_GPIO_Init+0x240>
 8002f16:	2304      	movs	r3, #4
 8002f18:	e006      	b.n	8002f28 <HAL_GPIO_Init+0x240>
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e004      	b.n	8002f28 <HAL_GPIO_Init+0x240>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e002      	b.n	8002f28 <HAL_GPIO_Init+0x240>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <HAL_GPIO_Init+0x240>
 8002f26:	2300      	movs	r3, #0
 8002f28:	69fa      	ldr	r2, [r7, #28]
 8002f2a:	f002 0203 	and.w	r2, r2, #3
 8002f2e:	0092      	lsls	r2, r2, #2
 8002f30:	4093      	lsls	r3, r2
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f38:	4935      	ldr	r1, [pc, #212]	; (8003010 <HAL_GPIO_Init+0x328>)
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	089b      	lsrs	r3, r3, #2
 8002f3e:	3302      	adds	r3, #2
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f46:	4b3d      	ldr	r3, [pc, #244]	; (800303c <HAL_GPIO_Init+0x354>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4013      	ands	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f6a:	4a34      	ldr	r2, [pc, #208]	; (800303c <HAL_GPIO_Init+0x354>)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f70:	4b32      	ldr	r3, [pc, #200]	; (800303c <HAL_GPIO_Init+0x354>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f94:	4a29      	ldr	r2, [pc, #164]	; (800303c <HAL_GPIO_Init+0x354>)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f9a:	4b28      	ldr	r3, [pc, #160]	; (800303c <HAL_GPIO_Init+0x354>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fbe:	4a1f      	ldr	r2, [pc, #124]	; (800303c <HAL_GPIO_Init+0x354>)
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fc4:	4b1d      	ldr	r3, [pc, #116]	; (800303c <HAL_GPIO_Init+0x354>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fe8:	4a14      	ldr	r2, [pc, #80]	; (800303c <HAL_GPIO_Init+0x354>)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	61fb      	str	r3, [r7, #28]
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	2b0f      	cmp	r3, #15
 8002ff8:	f67f ae86 	bls.w	8002d08 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	bf00      	nop
 8003000:	3724      	adds	r7, #36	; 0x24
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40023800 	.word	0x40023800
 8003010:	40013800 	.word	0x40013800
 8003014:	40020000 	.word	0x40020000
 8003018:	40020400 	.word	0x40020400
 800301c:	40020800 	.word	0x40020800
 8003020:	40020c00 	.word	0x40020c00
 8003024:	40021000 	.word	0x40021000
 8003028:	40021400 	.word	0x40021400
 800302c:	40021800 	.word	0x40021800
 8003030:	40021c00 	.word	0x40021c00
 8003034:	40022000 	.word	0x40022000
 8003038:	40022400 	.word	0x40022400
 800303c:	40013c00 	.word	0x40013c00

08003040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	807b      	strh	r3, [r7, #2]
 800304c:	4613      	mov	r3, r2
 800304e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003050:	787b      	ldrb	r3, [r7, #1]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003056:	887a      	ldrh	r2, [r7, #2]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800305c:	e003      	b.n	8003066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800305e:	887b      	ldrh	r3, [r7, #2]
 8003060:	041a      	lsls	r2, r3, #16
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	619a      	str	r2, [r3, #24]
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003072:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003074:	b08f      	sub	sp, #60	; 0x3c
 8003076:	af0a      	add	r7, sp, #40	; 0x28
 8003078:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e116      	b.n	80032b2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f00a f9e4 	bl	800d46c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2203      	movs	r2, #3
 80030a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d102      	bne.n	80030be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f003 fc6f 	bl	80069a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	603b      	str	r3, [r7, #0]
 80030ce:	687e      	ldr	r6, [r7, #4]
 80030d0:	466d      	mov	r5, sp
 80030d2:	f106 0410 	add.w	r4, r6, #16
 80030d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80030e6:	1d33      	adds	r3, r6, #4
 80030e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030ea:	6838      	ldr	r0, [r7, #0]
 80030ec:	f003 fb50 	bl	8006790 <USB_CoreInit>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d005      	beq.n	8003102 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2202      	movs	r2, #2
 80030fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e0d7      	b.n	80032b2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2100      	movs	r1, #0
 8003108:	4618      	mov	r0, r3
 800310a:	f003 fc5d 	bl	80069c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800310e:	2300      	movs	r3, #0
 8003110:	73fb      	strb	r3, [r7, #15]
 8003112:	e04a      	b.n	80031aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003114:	7bfa      	ldrb	r2, [r7, #15]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	4413      	add	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	333d      	adds	r3, #61	; 0x3d
 8003124:	2201      	movs	r2, #1
 8003126:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003128:	7bfa      	ldrb	r2, [r7, #15]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4413      	add	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	333c      	adds	r3, #60	; 0x3c
 8003138:	7bfa      	ldrb	r2, [r7, #15]
 800313a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800313c:	7bfa      	ldrb	r2, [r7, #15]
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	b298      	uxth	r0, r3
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	3344      	adds	r3, #68	; 0x44
 8003150:	4602      	mov	r2, r0
 8003152:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003154:	7bfa      	ldrb	r2, [r7, #15]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	4413      	add	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	3340      	adds	r3, #64	; 0x40
 8003164:	2200      	movs	r2, #0
 8003166:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003168:	7bfa      	ldrb	r2, [r7, #15]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	3348      	adds	r3, #72	; 0x48
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800317c:	7bfa      	ldrb	r2, [r7, #15]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4413      	add	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	334c      	adds	r3, #76	; 0x4c
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003190:	7bfa      	ldrb	r2, [r7, #15]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	3354      	adds	r3, #84	; 0x54
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	3301      	adds	r3, #1
 80031a8:	73fb      	strb	r3, [r7, #15]
 80031aa:	7bfa      	ldrb	r2, [r7, #15]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d3af      	bcc.n	8003114 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031b4:	2300      	movs	r3, #0
 80031b6:	73fb      	strb	r3, [r7, #15]
 80031b8:	e044      	b.n	8003244 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031ba:	7bfa      	ldrb	r2, [r7, #15]
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031d0:	7bfa      	ldrb	r2, [r7, #15]
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80031e2:	7bfa      	ldrb	r2, [r7, #15]
 80031e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031e6:	7bfa      	ldrb	r2, [r7, #15]
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80031f8:	2200      	movs	r2, #0
 80031fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031fc:	7bfa      	ldrb	r2, [r7, #15]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4413      	add	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003212:	7bfa      	ldrb	r2, [r7, #15]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	4413      	add	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003228:	7bfa      	ldrb	r2, [r7, #15]
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	3301      	adds	r3, #1
 8003242:	73fb      	strb	r3, [r7, #15]
 8003244:	7bfa      	ldrb	r2, [r7, #15]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	429a      	cmp	r2, r3
 800324c:	d3b5      	bcc.n	80031ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	687e      	ldr	r6, [r7, #4]
 8003256:	466d      	mov	r5, sp
 8003258:	f106 0410 	add.w	r4, r6, #16
 800325c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800325e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003260:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003262:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003264:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003268:	e885 0003 	stmia.w	r5, {r0, r1}
 800326c:	1d33      	adds	r3, r6, #4
 800326e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003270:	6838      	ldr	r0, [r7, #0]
 8003272:	f003 fbf5 	bl	8006a60 <USB_DevInit>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e014      	b.n	80032b2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	2b01      	cmp	r3, #1
 800329e:	d102      	bne.n	80032a6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f001 f97b 	bl	800459c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f004 fd43 	bl	8007d36 <USB_DevDisconnect>

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032ba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <HAL_PCD_Start+0x16>
 80032cc:	2302      	movs	r3, #2
 80032ce:	e012      	b.n	80032f6 <HAL_PCD_Start+0x3c>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f003 fb51 	bl	8006984 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f004 fd04 	bl	8007cf4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80032fe:	b590      	push	{r4, r7, lr}
 8003300:	b08d      	sub	sp, #52	; 0x34
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f004 fdc2 	bl	8007e9e <USB_GetMode>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	f040 84b7 	bne.w	8003c90 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f004 fd26 	bl	8007d78 <USB_ReadInterrupts>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 84ad 	beq.w	8003c8e <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	0a1b      	lsrs	r3, r3, #8
 800333e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f004 fd13 	bl	8007d78 <USB_ReadInterrupts>
 8003352:	4603      	mov	r3, r0
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b02      	cmp	r3, #2
 800335a:	d107      	bne.n	800336c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695a      	ldr	r2, [r3, #20]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f002 0202 	and.w	r2, r2, #2
 800336a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f004 fd01 	bl	8007d78 <USB_ReadInterrupts>
 8003376:	4603      	mov	r3, r0
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	2b10      	cmp	r3, #16
 800337e:	d161      	bne.n	8003444 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699a      	ldr	r2, [r3, #24]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0210 	bic.w	r2, r2, #16
 800338e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	f003 020f 	and.w	r2, r3, #15
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	4413      	add	r3, r2
 80033ac:	3304      	adds	r3, #4
 80033ae:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	0c5b      	lsrs	r3, r3, #17
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d124      	bne.n	8003406 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d035      	beq.n	8003434 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	091b      	lsrs	r3, r3, #4
 80033d0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	461a      	mov	r2, r3
 80033da:	6a38      	ldr	r0, [r7, #32]
 80033dc:	f004 fb38 	bl	8007a50 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	091b      	lsrs	r3, r3, #4
 80033e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ec:	441a      	add	r2, r3
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	6a1a      	ldr	r2, [r3, #32]
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033fe:	441a      	add	r2, r3
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	621a      	str	r2, [r3, #32]
 8003404:	e016      	b.n	8003434 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	0c5b      	lsrs	r3, r3, #17
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	2b06      	cmp	r3, #6
 8003410:	d110      	bne.n	8003434 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003418:	2208      	movs	r2, #8
 800341a:	4619      	mov	r1, r3
 800341c:	6a38      	ldr	r0, [r7, #32]
 800341e:	f004 fb17 	bl	8007a50 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	6a1a      	ldr	r2, [r3, #32]
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	091b      	lsrs	r3, r3, #4
 800342a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800342e:	441a      	add	r2, r3
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0210 	orr.w	r2, r2, #16
 8003442:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f004 fc95 	bl	8007d78 <USB_ReadInterrupts>
 800344e:	4603      	mov	r3, r0
 8003450:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003454:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003458:	f040 80a7 	bne.w	80035aa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f004 fc9a 	bl	8007d9e <USB_ReadDevAllOutEpInterrupt>
 800346a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800346c:	e099      	b.n	80035a2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800346e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 808e 	beq.w	8003596 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	4611      	mov	r1, r2
 8003484:	4618      	mov	r0, r3
 8003486:	f004 fcbe 	bl	8007e06 <USB_ReadDevOutEPInterrupt>
 800348a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00c      	beq.n	80034b0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	4413      	add	r3, r2
 800349e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a2:	461a      	mov	r2, r3
 80034a4:	2301      	movs	r3, #1
 80034a6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80034a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fef0 	bl	8004290 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00c      	beq.n	80034d4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c6:	461a      	mov	r2, r3
 80034c8:	2308      	movs	r3, #8
 80034ca:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80034cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 ffc6 	bl	8004460 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d008      	beq.n	80034f0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	015a      	lsls	r2, r3, #5
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	4413      	add	r3, r2
 80034e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ea:	461a      	mov	r2, r3
 80034ec:	2310      	movs	r3, #16
 80034ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d030      	beq.n	800355c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003502:	2b80      	cmp	r3, #128	; 0x80
 8003504:	d109      	bne.n	800351a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	69fa      	ldr	r2, [r7, #28]
 8003510:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003514:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003518:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800351a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351c:	4613      	mov	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	4413      	add	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	4413      	add	r3, r2
 800352c:	3304      	adds	r3, #4
 800352e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	78db      	ldrb	r3, [r3, #3]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d108      	bne.n	800354a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2200      	movs	r2, #0
 800353c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	b2db      	uxtb	r3, r3
 8003542:	4619      	mov	r1, r3
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f00a f8c5 	bl	800d6d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	015a      	lsls	r2, r3, #5
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	4413      	add	r3, r2
 8003552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003556:	461a      	mov	r2, r3
 8003558:	2302      	movs	r3, #2
 800355a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b00      	cmp	r3, #0
 8003564:	d008      	beq.n	8003578 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	4413      	add	r3, r2
 800356e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003572:	461a      	mov	r2, r3
 8003574:	2320      	movs	r3, #32
 8003576:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d009      	beq.n	8003596 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	4413      	add	r3, r2
 800358a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358e:	461a      	mov	r2, r3
 8003590:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003594:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	3301      	adds	r3, #1
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359e:	085b      	lsrs	r3, r3, #1
 80035a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80035a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f47f af62 	bne.w	800346e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f004 fbe2 	bl	8007d78 <USB_ReadInterrupts>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035be:	f040 80db 	bne.w	8003778 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f004 fc03 	bl	8007dd2 <USB_ReadDevAllInEpInterrupt>
 80035cc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80035d2:	e0cd      	b.n	8003770 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80035d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 80c2 	beq.w	8003764 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	4611      	mov	r1, r2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f004 fc29 	bl	8007e42 <USB_ReadDevInEPInterrupt>
 80035f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d057      	beq.n	80036ac <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	2201      	movs	r2, #1
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	43db      	mvns	r3, r3
 8003616:	69f9      	ldr	r1, [r7, #28]
 8003618:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800361c:	4013      	ands	r3, r2
 800361e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	4413      	add	r3, r2
 8003628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800362c:	461a      	mov	r2, r3
 800362e:	2301      	movs	r3, #1
 8003630:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d132      	bne.n	80036a0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363e:	4613      	mov	r3, r2
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4413      	add	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	334c      	adds	r3, #76	; 0x4c
 800364a:	6819      	ldr	r1, [r3, #0]
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003650:	4613      	mov	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4403      	add	r3, r0
 800365a:	3348      	adds	r3, #72	; 0x48
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4419      	add	r1, r3
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4403      	add	r3, r0
 800366e:	334c      	adds	r3, #76	; 0x4c
 8003670:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	2b00      	cmp	r3, #0
 8003676:	d113      	bne.n	80036a0 <HAL_PCD_IRQHandler+0x3a2>
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800367c:	4613      	mov	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	3354      	adds	r3, #84	; 0x54
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d108      	bne.n	80036a0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6818      	ldr	r0, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003698:	461a      	mov	r2, r3
 800369a:	2101      	movs	r1, #1
 800369c:	f004 fc32 	bl	8007f04 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	4619      	mov	r1, r3
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f009 ff8f 	bl	800d5ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d008      	beq.n	80036c8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	015a      	lsls	r2, r3, #5
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c2:	461a      	mov	r2, r3
 80036c4:	2308      	movs	r3, #8
 80036c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f003 0310 	and.w	r3, r3, #16
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036de:	461a      	mov	r2, r3
 80036e0:	2310      	movs	r3, #16
 80036e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d008      	beq.n	8003700 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036fa:	461a      	mov	r2, r3
 80036fc:	2340      	movs	r3, #64	; 0x40
 80036fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d023      	beq.n	8003752 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800370a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800370c:	6a38      	ldr	r0, [r7, #32]
 800370e:	f003 fb05 	bl	8006d1c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003714:	4613      	mov	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	3338      	adds	r3, #56	; 0x38
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	4413      	add	r3, r2
 8003722:	3304      	adds	r3, #4
 8003724:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	78db      	ldrb	r3, [r3, #3]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d108      	bne.n	8003740 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2200      	movs	r2, #0
 8003732:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	b2db      	uxtb	r3, r3
 8003738:	4619      	mov	r1, r3
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f009 ffdc 	bl	800d6f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	4413      	add	r3, r2
 8003748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800374c:	461a      	mov	r2, r3
 800374e:	2302      	movs	r3, #2
 8003750:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800375c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fd08 	bl	8004174 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	3301      	adds	r3, #1
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376c:	085b      	lsrs	r3, r3, #1
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003772:	2b00      	cmp	r3, #0
 8003774:	f47f af2e 	bne.w	80035d4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f004 fafb 	bl	8007d78 <USB_ReadInterrupts>
 8003782:	4603      	mov	r3, r0
 8003784:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003788:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800378c:	d122      	bne.n	80037d4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	69fa      	ldr	r2, [r7, #28]
 8003798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800379c:	f023 0301 	bic.w	r3, r3, #1
 80037a0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d108      	bne.n	80037be <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80037b4:	2100      	movs	r1, #0
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f00a f956 	bl	800da68 <HAL_PCDEx_LPM_Callback>
 80037bc:	e002      	b.n	80037c4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f009 ff7a 	bl	800d6b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695a      	ldr	r2, [r3, #20]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80037d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f004 facd 	bl	8007d78 <USB_ReadInterrupts>
 80037de:	4603      	mov	r3, r0
 80037e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037e8:	d112      	bne.n	8003810 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d102      	bne.n	8003800 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f009 ff36 	bl	800d66c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695a      	ldr	r2, [r3, #20]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800380e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f004 faaf 	bl	8007d78 <USB_ReadInterrupts>
 800381a:	4603      	mov	r3, r0
 800381c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003820:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003824:	d121      	bne.n	800386a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695a      	ldr	r2, [r3, #20]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003834:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d111      	bne.n	8003864 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	089b      	lsrs	r3, r3, #2
 8003850:	f003 020f 	and.w	r2, r3, #15
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800385a:	2101      	movs	r1, #1
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f00a f903 	bl	800da68 <HAL_PCDEx_LPM_Callback>
 8003862:	e002      	b.n	800386a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f009 ff01 	bl	800d66c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f004 fa82 	bl	8007d78 <USB_ReadInterrupts>
 8003874:	4603      	mov	r3, r0
 8003876:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800387a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800387e:	f040 80b7 	bne.w	80039f0 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	69fa      	ldr	r2, [r7, #28]
 800388c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003890:	f023 0301 	bic.w	r3, r3, #1
 8003894:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2110      	movs	r1, #16
 800389c:	4618      	mov	r0, r3
 800389e:	f003 fa3d 	bl	8006d1c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038a2:	2300      	movs	r3, #0
 80038a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038a6:	e046      	b.n	8003936 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80038a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b4:	461a      	mov	r2, r3
 80038b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038ba:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80038bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038cc:	0151      	lsls	r1, r2, #5
 80038ce:	69fa      	ldr	r2, [r7, #28]
 80038d0:	440a      	add	r2, r1
 80038d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038da:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80038dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e8:	461a      	mov	r2, r3
 80038ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038ee:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80038f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003900:	0151      	lsls	r1, r2, #5
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	440a      	add	r2, r1
 8003906:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800390a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800390e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	4413      	add	r3, r2
 8003918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003920:	0151      	lsls	r1, r2, #5
 8003922:	69fa      	ldr	r2, [r7, #28]
 8003924:	440a      	add	r2, r1
 8003926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800392a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800392e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003932:	3301      	adds	r3, #1
 8003934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800393c:	429a      	cmp	r2, r3
 800393e:	d3b3      	bcc.n	80038a8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	69fa      	ldr	r2, [r7, #28]
 800394a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800394e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003952:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003958:	2b00      	cmp	r3, #0
 800395a:	d016      	beq.n	800398a <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003962:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003966:	69fa      	ldr	r2, [r7, #28]
 8003968:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800396c:	f043 030b 	orr.w	r3, r3, #11
 8003970:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800397a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397c:	69fa      	ldr	r2, [r7, #28]
 800397e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003982:	f043 030b 	orr.w	r3, r3, #11
 8003986:	6453      	str	r3, [r2, #68]	; 0x44
 8003988:	e015      	b.n	80039b6 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003990:	695a      	ldr	r2, [r3, #20]
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003998:	4619      	mov	r1, r3
 800399a:	f242 032b 	movw	r3, #8235	; 0x202b
 800399e:	4313      	orrs	r3, r2
 80039a0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	69fa      	ldr	r2, [r7, #28]
 80039ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039b0:	f043 030b 	orr.w	r3, r3, #11
 80039b4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69fa      	ldr	r2, [r7, #28]
 80039c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039c4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80039c8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039da:	461a      	mov	r2, r3
 80039dc:	f004 fa92 	bl	8007f04 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695a      	ldr	r2, [r3, #20]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80039ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f004 f9bf 	bl	8007d78 <USB_ReadInterrupts>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a04:	d124      	bne.n	8003a50 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f004 fa56 	bl	8007ebc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f003 f9fe 	bl	8006e16 <USB_GetDevSpeed>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681c      	ldr	r4, [r3, #0]
 8003a26:	f001 fadd 	bl	8004fe4 <HAL_RCC_GetHCLKFreq>
 8003a2a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	461a      	mov	r2, r3
 8003a34:	4620      	mov	r0, r4
 8003a36:	f002 ff03 	bl	8006840 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f009 fded 	bl	800d61a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	695a      	ldr	r2, [r3, #20]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003a4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f004 f98f 	bl	8007d78 <USB_ReadInterrupts>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d10a      	bne.n	8003a7a <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f009 fdca 	bl	800d5fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695a      	ldr	r2, [r3, #20]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f002 0208 	and.w	r2, r2, #8
 8003a78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f004 f97a 	bl	8007d78 <USB_ReadInterrupts>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8a:	2b80      	cmp	r3, #128	; 0x80
 8003a8c:	d122      	bne.n	8003ad4 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9e:	e014      	b.n	8003aca <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d105      	bne.n	8003ac4 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	4619      	mov	r1, r3
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fb27 	bl	8004112 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d3e5      	bcc.n	8003aa0 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f004 f94d 	bl	8007d78 <USB_ReadInterrupts>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ae4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ae8:	d13b      	bne.n	8003b62 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003aea:	2301      	movs	r3, #1
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
 8003aee:	e02b      	b.n	8003b48 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b04:	4613      	mov	r3, r2
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	4413      	add	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	3340      	adds	r3, #64	; 0x40
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d115      	bne.n	8003b42 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003b16:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	da12      	bge.n	8003b42 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b20:	4613      	mov	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	333f      	adds	r3, #63	; 0x3f
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 fae8 	bl	8004112 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	3301      	adds	r3, #1
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d3ce      	bcc.n	8003af0 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695a      	ldr	r2, [r3, #20]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003b60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f004 f906 	bl	8007d78 <USB_ReadInterrupts>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b76:	d155      	bne.n	8003c24 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b78:	2301      	movs	r3, #1
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7c:	e045      	b.n	8003c0a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	015a      	lsls	r2, r3, #5
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	4413      	add	r3, r2
 8003b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b92:	4613      	mov	r3, r2
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	4413      	add	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d12e      	bne.n	8003c04 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ba6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	da2b      	bge.n	8003c04 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003bb8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d121      	bne.n	8003c04 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10a      	bne.n	8003c04 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	69fa      	ldr	r2, [r7, #28]
 8003bf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c00:	6053      	str	r3, [r2, #4]
            break;
 8003c02:	e007      	b.n	8003c14 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	3301      	adds	r3, #1
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d3b4      	bcc.n	8003b7e <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695a      	ldr	r2, [r3, #20]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003c22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f004 f8a5 	bl	8007d78 <USB_ReadInterrupts>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c38:	d10a      	bne.n	8003c50 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f009 fd6e 	bl	800d71c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695a      	ldr	r2, [r3, #20]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003c4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f004 f88f 	bl	8007d78 <USB_ReadInterrupts>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	d115      	bne.n	8003c90 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f009 fd5e 	bl	800d738 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6859      	ldr	r1, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	605a      	str	r2, [r3, #4]
 8003c8c:	e000      	b.n	8003c90 <HAL_PCD_IRQHandler+0x992>
      return;
 8003c8e:	bf00      	nop
    }
  }
}
 8003c90:	3734      	adds	r7, #52	; 0x34
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd90      	pop	{r4, r7, pc}

08003c96 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_PCD_SetAddress+0x1a>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e013      	b.n	8003cd8 <HAL_PCD_SetAddress+0x42>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	78fa      	ldrb	r2, [r7, #3]
 8003cbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	78fa      	ldrb	r2, [r7, #3]
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f003 ffed 	bl	8007ca8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	4608      	mov	r0, r1
 8003cea:	4611      	mov	r1, r2
 8003cec:	461a      	mov	r2, r3
 8003cee:	4603      	mov	r3, r0
 8003cf0:	70fb      	strb	r3, [r7, #3]
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	803b      	strh	r3, [r7, #0]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	da0f      	bge.n	8003d26 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d06:	78fb      	ldrb	r3, [r7, #3]
 8003d08:	f003 020f 	and.w	r2, r3, #15
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	3338      	adds	r3, #56	; 0x38
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	4413      	add	r3, r2
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2201      	movs	r2, #1
 8003d22:	705a      	strb	r2, [r3, #1]
 8003d24:	e00f      	b.n	8003d46 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d26:	78fb      	ldrb	r3, [r7, #3]
 8003d28:	f003 020f 	and.w	r2, r3, #15
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	4413      	add	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003d52:	883a      	ldrh	r2, [r7, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	78ba      	ldrb	r2, [r7, #2]
 8003d5c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	785b      	ldrb	r3, [r3, #1]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d004      	beq.n	8003d70 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003d70:	78bb      	ldrb	r3, [r7, #2]
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d102      	bne.n	8003d7c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d101      	bne.n	8003d8a <HAL_PCD_EP_Open+0xaa>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e00e      	b.n	8003da8 <HAL_PCD_EP_Open+0xc8>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68f9      	ldr	r1, [r7, #12]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f003 f861 	bl	8006e60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003da6:	7afb      	ldrb	r3, [r7, #11]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003dbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	da0f      	bge.n	8003de4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dc4:	78fb      	ldrb	r3, [r7, #3]
 8003dc6:	f003 020f 	and.w	r2, r3, #15
 8003dca:	4613      	mov	r3, r2
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	4413      	add	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	3338      	adds	r3, #56	; 0x38
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	3304      	adds	r3, #4
 8003dda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2201      	movs	r2, #1
 8003de0:	705a      	strb	r2, [r3, #1]
 8003de2:	e00f      	b.n	8003e04 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003de4:	78fb      	ldrb	r3, [r7, #3]
 8003de6:	f003 020f 	and.w	r2, r3, #15
 8003dea:	4613      	mov	r3, r2
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	4413      	add	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	4413      	add	r3, r2
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d101      	bne.n	8003e1e <HAL_PCD_EP_Close+0x6e>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	e00e      	b.n	8003e3c <HAL_PCD_EP_Close+0x8c>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68f9      	ldr	r1, [r7, #12]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f003 f89f 	bl	8006f70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	607a      	str	r2, [r7, #4]
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	460b      	mov	r3, r1
 8003e52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e54:	7afb      	ldrb	r3, [r7, #11]
 8003e56:	f003 020f 	and.w	r2, r3, #15
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	4413      	add	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	4413      	add	r3, r2
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2200      	movs	r2, #0
 8003e84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e86:	7afb      	ldrb	r3, [r7, #11]
 8003e88:	f003 030f 	and.w	r3, r3, #15
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d102      	bne.n	8003ea0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ea0:	7afb      	ldrb	r3, [r7, #11]
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d109      	bne.n	8003ebe <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6818      	ldr	r0, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	6979      	ldr	r1, [r7, #20]
 8003eb8:	f003 fb86 	bl	80075c8 <USB_EP0StartXfer>
 8003ebc:	e008      	b.n	8003ed0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	6979      	ldr	r1, [r7, #20]
 8003ecc:	f003 f92c 	bl	8007128 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ee6:	78fb      	ldrb	r3, [r7, #3]
 8003ee8:	f003 020f 	and.w	r2, r3, #15
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	4413      	add	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003efc:	681b      	ldr	r3, [r3, #0]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b086      	sub	sp, #24
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	603b      	str	r3, [r7, #0]
 8003f16:	460b      	mov	r3, r1
 8003f18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f1a:	7afb      	ldrb	r3, [r7, #11]
 8003f1c:	f003 020f 	and.w	r2, r3, #15
 8003f20:	4613      	mov	r3, r2
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	4413      	add	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	3338      	adds	r3, #56	; 0x38
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	3304      	adds	r3, #4
 8003f30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2200      	movs	r2, #0
 8003f42:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2201      	movs	r2, #1
 8003f48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f4a:	7afb      	ldrb	r3, [r7, #11]
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d102      	bne.n	8003f64 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f64:	7afb      	ldrb	r3, [r7, #11]
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d109      	bne.n	8003f82 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6818      	ldr	r0, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	461a      	mov	r2, r3
 8003f7a:	6979      	ldr	r1, [r7, #20]
 8003f7c:	f003 fb24 	bl	80075c8 <USB_EP0StartXfer>
 8003f80:	e008      	b.n	8003f94 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6818      	ldr	r0, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	6979      	ldr	r1, [r7, #20]
 8003f90:	f003 f8ca 	bl	8007128 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003faa:	78fb      	ldrb	r3, [r7, #3]
 8003fac:	f003 020f 	and.w	r2, r3, #15
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d901      	bls.n	8003fbc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e050      	b.n	800405e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	da0f      	bge.n	8003fe4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fc4:	78fb      	ldrb	r3, [r7, #3]
 8003fc6:	f003 020f 	and.w	r2, r3, #15
 8003fca:	4613      	mov	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	4413      	add	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	3338      	adds	r3, #56	; 0x38
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	3304      	adds	r3, #4
 8003fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	705a      	strb	r2, [r3, #1]
 8003fe2:	e00d      	b.n	8004000 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003fe4:	78fa      	ldrb	r2, [r7, #3]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	4413      	add	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2201      	movs	r2, #1
 8004004:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004006:	78fb      	ldrb	r3, [r7, #3]
 8004008:	f003 030f 	and.w	r3, r3, #15
 800400c:	b2da      	uxtb	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_PCD_EP_SetStall+0x82>
 800401c:	2302      	movs	r3, #2
 800401e:	e01e      	b.n	800405e <HAL_PCD_EP_SetStall+0xc0>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68f9      	ldr	r1, [r7, #12]
 800402e:	4618      	mov	r0, r3
 8004030:	f003 fd66 	bl	8007b00 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10a      	bne.n	8004054 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6818      	ldr	r0, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	b2d9      	uxtb	r1, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800404e:	461a      	mov	r2, r3
 8004050:	f003 ff58 	bl	8007f04 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b084      	sub	sp, #16
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
 800406e:	460b      	mov	r3, r1
 8004070:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004072:	78fb      	ldrb	r3, [r7, #3]
 8004074:	f003 020f 	and.w	r2, r3, #15
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	429a      	cmp	r2, r3
 800407e:	d901      	bls.n	8004084 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e042      	b.n	800410a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004088:	2b00      	cmp	r3, #0
 800408a:	da0f      	bge.n	80040ac <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800408c:	78fb      	ldrb	r3, [r7, #3]
 800408e:	f003 020f 	and.w	r2, r3, #15
 8004092:	4613      	mov	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	4413      	add	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	3338      	adds	r3, #56	; 0x38
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	4413      	add	r3, r2
 80040a0:	3304      	adds	r3, #4
 80040a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2201      	movs	r2, #1
 80040a8:	705a      	strb	r2, [r3, #1]
 80040aa:	e00f      	b.n	80040cc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040ac:	78fb      	ldrb	r3, [r7, #3]
 80040ae:	f003 020f 	and.w	r2, r3, #15
 80040b2:	4613      	mov	r3, r2
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	4413      	add	r3, r2
 80040c2:	3304      	adds	r3, #4
 80040c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040d2:	78fb      	ldrb	r3, [r7, #3]
 80040d4:	f003 030f 	and.w	r3, r3, #15
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_PCD_EP_ClrStall+0x86>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e00e      	b.n	800410a <HAL_PCD_EP_ClrStall+0xa4>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68f9      	ldr	r1, [r7, #12]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f003 fd6e 	bl	8007bdc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b084      	sub	sp, #16
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	460b      	mov	r3, r1
 800411c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800411e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004122:	2b00      	cmp	r3, #0
 8004124:	da0c      	bge.n	8004140 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004126:	78fb      	ldrb	r3, [r7, #3]
 8004128:	f003 020f 	and.w	r2, r3, #15
 800412c:	4613      	mov	r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	4413      	add	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	3338      	adds	r3, #56	; 0x38
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	4413      	add	r3, r2
 800413a:	3304      	adds	r3, #4
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	e00c      	b.n	800415a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004140:	78fb      	ldrb	r3, [r7, #3]
 8004142:	f003 020f 	and.w	r2, r3, #15
 8004146:	4613      	mov	r3, r2
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	4413      	add	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	4413      	add	r3, r2
 8004156:	3304      	adds	r3, #4
 8004158:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68f9      	ldr	r1, [r7, #12]
 8004160:	4618      	mov	r0, r3
 8004162:	f003 fb8d 	bl	8007880 <USB_EPStopXfer>
 8004166:	4603      	mov	r3, r0
 8004168:	72fb      	strb	r3, [r7, #11]

  return ret;
 800416a:	7afb      	ldrb	r3, [r7, #11]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b08a      	sub	sp, #40	; 0x28
 8004178:	af02      	add	r7, sp, #8
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	4613      	mov	r3, r2
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	4413      	add	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	3338      	adds	r3, #56	; 0x38
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	4413      	add	r3, r2
 8004198:	3304      	adds	r3, #4
 800419a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a1a      	ldr	r2, [r3, #32]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d901      	bls.n	80041ac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e06c      	b.n	8004286 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	699a      	ldr	r2, [r3, #24]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	69fa      	ldr	r2, [r7, #28]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d902      	bls.n	80041c8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	3303      	adds	r3, #3
 80041cc:	089b      	lsrs	r3, r3, #2
 80041ce:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041d0:	e02b      	b.n	800422a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	699a      	ldr	r2, [r3, #24]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d902      	bls.n	80041ee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	3303      	adds	r3, #3
 80041f2:	089b      	lsrs	r3, r3, #2
 80041f4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6919      	ldr	r1, [r3, #16]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004206:	b2db      	uxtb	r3, r3
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	4603      	mov	r3, r0
 800420c:	6978      	ldr	r0, [r7, #20]
 800420e:	f003 fbe1 	bl	80079d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	441a      	add	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a1a      	ldr	r2, [r3, #32]
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	441a      	add	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	015a      	lsls	r2, r3, #5
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	4413      	add	r3, r2
 8004232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	b29b      	uxth	r3, r3
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	429a      	cmp	r2, r3
 800423e:	d809      	bhi.n	8004254 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a1a      	ldr	r2, [r3, #32]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004248:	429a      	cmp	r2, r3
 800424a:	d203      	bcs.n	8004254 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1be      	bne.n	80041d2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	699a      	ldr	r2, [r3, #24]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	429a      	cmp	r2, r3
 800425e:	d811      	bhi.n	8004284 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	2201      	movs	r2, #1
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004274:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	43db      	mvns	r3, r3
 800427a:	6939      	ldr	r1, [r7, #16]
 800427c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004280:	4013      	ands	r3, r2
 8004282:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3720      	adds	r7, #32
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
	...

08004290 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	333c      	adds	r3, #60	; 0x3c
 80042a8:	3304      	adds	r3, #4
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d17b      	bne.n	80043be <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d015      	beq.n	80042fc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	4a61      	ldr	r2, [pc, #388]	; (8004458 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	f240 80b9 	bls.w	800444c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 80b3 	beq.w	800444c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f2:	461a      	mov	r2, r3
 80042f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042f8:	6093      	str	r3, [r2, #8]
 80042fa:	e0a7      	b.n	800444c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f003 0320 	and.w	r3, r3, #32
 8004302:	2b00      	cmp	r3, #0
 8004304:	d009      	beq.n	800431a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004312:	461a      	mov	r2, r3
 8004314:	2320      	movs	r3, #32
 8004316:	6093      	str	r3, [r2, #8]
 8004318:	e098      	b.n	800444c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004320:	2b00      	cmp	r3, #0
 8004322:	f040 8093 	bne.w	800444c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	4a4b      	ldr	r2, [pc, #300]	; (8004458 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d90f      	bls.n	800434e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00a      	beq.n	800434e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004344:	461a      	mov	r2, r3
 8004346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800434a:	6093      	str	r3, [r2, #8]
 800434c:	e07e      	b.n	800444c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	4613      	mov	r3, r2
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	4413      	add	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	4413      	add	r3, r2
 8004360:	3304      	adds	r3, #4
 8004362:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	69da      	ldr	r2, [r3, #28]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	0159      	lsls	r1, r3, #5
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	440b      	add	r3, r1
 8004370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800437a:	1ad2      	subs	r2, r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d114      	bne.n	80043b0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d109      	bne.n	80043a2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004398:	461a      	mov	r2, r3
 800439a:	2101      	movs	r1, #1
 800439c:	f003 fdb2 	bl	8007f04 <USB_EP0_OutStart>
 80043a0:	e006      	b.n	80043b0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	691a      	ldr	r2, [r3, #16]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	441a      	add	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	4619      	mov	r1, r3
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f009 f8ec 	bl	800d594 <HAL_PCD_DataOutStageCallback>
 80043bc:	e046      	b.n	800444c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	4a26      	ldr	r2, [pc, #152]	; (800445c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d124      	bne.n	8004410 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00a      	beq.n	80043e6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043dc:	461a      	mov	r2, r3
 80043de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043e2:	6093      	str	r3, [r2, #8]
 80043e4:	e032      	b.n	800444c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f003 0320 	and.w	r3, r3, #32
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d008      	beq.n	8004402 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fc:	461a      	mov	r2, r3
 80043fe:	2320      	movs	r3, #32
 8004400:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	4619      	mov	r1, r3
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f009 f8c3 	bl	800d594 <HAL_PCD_DataOutStageCallback>
 800440e:	e01d      	b.n	800444c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d114      	bne.n	8004440 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	4613      	mov	r3, r2
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	4413      	add	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	440b      	add	r3, r1
 8004424:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d108      	bne.n	8004440 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6818      	ldr	r0, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004438:	461a      	mov	r2, r3
 800443a:	2100      	movs	r1, #0
 800443c:	f003 fd62 	bl	8007f04 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	b2db      	uxtb	r3, r3
 8004444:	4619      	mov	r1, r3
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f009 f8a4 	bl	800d594 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3720      	adds	r7, #32
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	4f54300a 	.word	0x4f54300a
 800445c:	4f54310a 	.word	0x4f54310a

08004460 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	333c      	adds	r3, #60	; 0x3c
 8004478:	3304      	adds	r3, #4
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4a15      	ldr	r2, [pc, #84]	; (80044e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d90e      	bls.n	80044b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800449c:	2b00      	cmp	r3, #0
 800449e:	d009      	beq.n	80044b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ac:	461a      	mov	r2, r3
 80044ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f009 f85b 	bl	800d570 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	4a0a      	ldr	r2, [pc, #40]	; (80044e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d90c      	bls.n	80044dc <PCD_EP_OutSetupPacket_int+0x7c>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d108      	bne.n	80044dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6818      	ldr	r0, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044d4:	461a      	mov	r2, r3
 80044d6:	2101      	movs	r1, #1
 80044d8:	f003 fd14 	bl	8007f04 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	4f54300a 	.word	0x4f54300a

080044ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	70fb      	strb	r3, [r7, #3]
 80044f8:	4613      	mov	r3, r2
 80044fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004504:	78fb      	ldrb	r3, [r7, #3]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d107      	bne.n	800451a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800450a:	883b      	ldrh	r3, [r7, #0]
 800450c:	0419      	lsls	r1, r3, #16
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	430a      	orrs	r2, r1
 8004516:	629a      	str	r2, [r3, #40]	; 0x28
 8004518:	e028      	b.n	800456c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004520:	0c1b      	lsrs	r3, r3, #16
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	4413      	add	r3, r2
 8004526:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004528:	2300      	movs	r3, #0
 800452a:	73fb      	strb	r3, [r7, #15]
 800452c:	e00d      	b.n	800454a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	3340      	adds	r3, #64	; 0x40
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	0c1b      	lsrs	r3, r3, #16
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	4413      	add	r3, r2
 8004542:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	3301      	adds	r3, #1
 8004548:	73fb      	strb	r3, [r7, #15]
 800454a:	7bfa      	ldrb	r2, [r7, #15]
 800454c:	78fb      	ldrb	r3, [r7, #3]
 800454e:	3b01      	subs	r3, #1
 8004550:	429a      	cmp	r2, r3
 8004552:	d3ec      	bcc.n	800452e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004554:	883b      	ldrh	r3, [r7, #0]
 8004556:	0418      	lsls	r0, r3, #16
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6819      	ldr	r1, [r3, #0]
 800455c:	78fb      	ldrb	r3, [r7, #3]
 800455e:	3b01      	subs	r3, #1
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	4302      	orrs	r2, r0
 8004564:	3340      	adds	r3, #64	; 0x40
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	460b      	mov	r3, r1
 8004584:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	887a      	ldrh	r2, [r7, #2]
 800458c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045ca:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <HAL_PCDEx_ActivateLPM+0x44>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	10000003 	.word	0x10000003

080045e4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045e8:	4b05      	ldr	r3, [pc, #20]	; (8004600 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a04      	ldr	r2, [pc, #16]	; (8004600 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f2:	6013      	str	r3, [r2, #0]
}
 80045f4:	bf00      	nop
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40007000 	.word	0x40007000

08004604 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800460a:	2300      	movs	r3, #0
 800460c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800460e:	4b23      	ldr	r3, [pc, #140]	; (800469c <HAL_PWREx_EnableOverDrive+0x98>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	4a22      	ldr	r2, [pc, #136]	; (800469c <HAL_PWREx_EnableOverDrive+0x98>)
 8004614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004618:	6413      	str	r3, [r2, #64]	; 0x40
 800461a:	4b20      	ldr	r3, [pc, #128]	; (800469c <HAL_PWREx_EnableOverDrive+0x98>)
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004626:	4b1e      	ldr	r3, [pc, #120]	; (80046a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a1d      	ldr	r2, [pc, #116]	; (80046a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800462c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004630:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004632:	f7fd ff21 	bl	8002478 <HAL_GetTick>
 8004636:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004638:	e009      	b.n	800464e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800463a:	f7fd ff1d 	bl	8002478 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004648:	d901      	bls.n	800464e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e022      	b.n	8004694 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800464e:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800465a:	d1ee      	bne.n	800463a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800465c:	4b10      	ldr	r3, [pc, #64]	; (80046a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a0f      	ldr	r2, [pc, #60]	; (80046a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004666:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004668:	f7fd ff06 	bl	8002478 <HAL_GetTick>
 800466c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800466e:	e009      	b.n	8004684 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004670:	f7fd ff02 	bl	8002478 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800467e:	d901      	bls.n	8004684 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e007      	b.n	8004694 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004684:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004690:	d1ee      	bne.n	8004670 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	40023800 	.word	0x40023800
 80046a0:	40007000 	.word	0x40007000

080046a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80046ac:	2300      	movs	r3, #0
 80046ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e29b      	b.n	8004bf2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 8087 	beq.w	80047d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046c8:	4b96      	ldr	r3, [pc, #600]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f003 030c 	and.w	r3, r3, #12
 80046d0:	2b04      	cmp	r3, #4
 80046d2:	d00c      	beq.n	80046ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046d4:	4b93      	ldr	r3, [pc, #588]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 030c 	and.w	r3, r3, #12
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d112      	bne.n	8004706 <HAL_RCC_OscConfig+0x62>
 80046e0:	4b90      	ldr	r3, [pc, #576]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ec:	d10b      	bne.n	8004706 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ee:	4b8d      	ldr	r3, [pc, #564]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d06c      	beq.n	80047d4 <HAL_RCC_OscConfig+0x130>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d168      	bne.n	80047d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e275      	b.n	8004bf2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470e:	d106      	bne.n	800471e <HAL_RCC_OscConfig+0x7a>
 8004710:	4b84      	ldr	r3, [pc, #528]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a83      	ldr	r2, [pc, #524]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	e02e      	b.n	800477c <HAL_RCC_OscConfig+0xd8>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10c      	bne.n	8004740 <HAL_RCC_OscConfig+0x9c>
 8004726:	4b7f      	ldr	r3, [pc, #508]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a7e      	ldr	r2, [pc, #504]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 800472c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	4b7c      	ldr	r3, [pc, #496]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a7b      	ldr	r2, [pc, #492]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004738:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	e01d      	b.n	800477c <HAL_RCC_OscConfig+0xd8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004748:	d10c      	bne.n	8004764 <HAL_RCC_OscConfig+0xc0>
 800474a:	4b76      	ldr	r3, [pc, #472]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a75      	ldr	r2, [pc, #468]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	4b73      	ldr	r3, [pc, #460]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a72      	ldr	r2, [pc, #456]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 800475c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	e00b      	b.n	800477c <HAL_RCC_OscConfig+0xd8>
 8004764:	4b6f      	ldr	r3, [pc, #444]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a6e      	ldr	r2, [pc, #440]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 800476a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	4b6c      	ldr	r3, [pc, #432]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a6b      	ldr	r2, [pc, #428]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800477a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d013      	beq.n	80047ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004784:	f7fd fe78 	bl	8002478 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800478c:	f7fd fe74 	bl	8002478 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b64      	cmp	r3, #100	; 0x64
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e229      	b.n	8004bf2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479e:	4b61      	ldr	r3, [pc, #388]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0f0      	beq.n	800478c <HAL_RCC_OscConfig+0xe8>
 80047aa:	e014      	b.n	80047d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ac:	f7fd fe64 	bl	8002478 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b4:	f7fd fe60 	bl	8002478 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b64      	cmp	r3, #100	; 0x64
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e215      	b.n	8004bf2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047c6:	4b57      	ldr	r3, [pc, #348]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f0      	bne.n	80047b4 <HAL_RCC_OscConfig+0x110>
 80047d2:	e000      	b.n	80047d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d069      	beq.n	80048b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047e2:	4b50      	ldr	r3, [pc, #320]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 030c 	and.w	r3, r3, #12
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00b      	beq.n	8004806 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ee:	4b4d      	ldr	r3, [pc, #308]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 030c 	and.w	r3, r3, #12
 80047f6:	2b08      	cmp	r3, #8
 80047f8:	d11c      	bne.n	8004834 <HAL_RCC_OscConfig+0x190>
 80047fa:	4b4a      	ldr	r3, [pc, #296]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d116      	bne.n	8004834 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004806:	4b47      	ldr	r3, [pc, #284]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d005      	beq.n	800481e <HAL_RCC_OscConfig+0x17a>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d001      	beq.n	800481e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e1e9      	b.n	8004bf2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800481e:	4b41      	ldr	r3, [pc, #260]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	493d      	ldr	r1, [pc, #244]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 800482e:	4313      	orrs	r3, r2
 8004830:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004832:	e040      	b.n	80048b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d023      	beq.n	8004884 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800483c:	4b39      	ldr	r3, [pc, #228]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a38      	ldr	r2, [pc, #224]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004848:	f7fd fe16 	bl	8002478 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004850:	f7fd fe12 	bl	8002478 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e1c7      	b.n	8004bf2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004862:	4b30      	ldr	r3, [pc, #192]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0f0      	beq.n	8004850 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800486e:	4b2d      	ldr	r3, [pc, #180]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	4929      	ldr	r1, [pc, #164]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 800487e:	4313      	orrs	r3, r2
 8004880:	600b      	str	r3, [r1, #0]
 8004882:	e018      	b.n	80048b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004884:	4b27      	ldr	r3, [pc, #156]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a26      	ldr	r2, [pc, #152]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 800488a:	f023 0301 	bic.w	r3, r3, #1
 800488e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004890:	f7fd fdf2 	bl	8002478 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004898:	f7fd fdee 	bl	8002478 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e1a3      	b.n	8004bf2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048aa:	4b1e      	ldr	r3, [pc, #120]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1f0      	bne.n	8004898 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0308 	and.w	r3, r3, #8
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d038      	beq.n	8004934 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d019      	beq.n	80048fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ca:	4b16      	ldr	r3, [pc, #88]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 80048cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ce:	4a15      	ldr	r2, [pc, #84]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 80048d0:	f043 0301 	orr.w	r3, r3, #1
 80048d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d6:	f7fd fdcf 	bl	8002478 <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048de:	f7fd fdcb 	bl	8002478 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e180      	b.n	8004bf2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048f0:	4b0c      	ldr	r3, [pc, #48]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 80048f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0f0      	beq.n	80048de <HAL_RCC_OscConfig+0x23a>
 80048fc:	e01a      	b.n	8004934 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048fe:	4b09      	ldr	r3, [pc, #36]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004902:	4a08      	ldr	r2, [pc, #32]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004904:	f023 0301 	bic.w	r3, r3, #1
 8004908:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490a:	f7fd fdb5 	bl	8002478 <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004910:	e00a      	b.n	8004928 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004912:	f7fd fdb1 	bl	8002478 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d903      	bls.n	8004928 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e166      	b.n	8004bf2 <HAL_RCC_OscConfig+0x54e>
 8004924:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004928:	4b92      	ldr	r3, [pc, #584]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 800492a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1ee      	bne.n	8004912 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 80a4 	beq.w	8004a8a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004942:	4b8c      	ldr	r3, [pc, #560]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10d      	bne.n	800496a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800494e:	4b89      	ldr	r3, [pc, #548]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	4a88      	ldr	r2, [pc, #544]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 8004954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004958:	6413      	str	r3, [r2, #64]	; 0x40
 800495a:	4b86      	ldr	r3, [pc, #536]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004962:	60bb      	str	r3, [r7, #8]
 8004964:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004966:	2301      	movs	r3, #1
 8004968:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800496a:	4b83      	ldr	r3, [pc, #524]	; (8004b78 <HAL_RCC_OscConfig+0x4d4>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004972:	2b00      	cmp	r3, #0
 8004974:	d118      	bne.n	80049a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004976:	4b80      	ldr	r3, [pc, #512]	; (8004b78 <HAL_RCC_OscConfig+0x4d4>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a7f      	ldr	r2, [pc, #508]	; (8004b78 <HAL_RCC_OscConfig+0x4d4>)
 800497c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004980:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004982:	f7fd fd79 	bl	8002478 <HAL_GetTick>
 8004986:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004988:	e008      	b.n	800499c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800498a:	f7fd fd75 	bl	8002478 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b64      	cmp	r3, #100	; 0x64
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e12a      	b.n	8004bf2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800499c:	4b76      	ldr	r3, [pc, #472]	; (8004b78 <HAL_RCC_OscConfig+0x4d4>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0f0      	beq.n	800498a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d106      	bne.n	80049be <HAL_RCC_OscConfig+0x31a>
 80049b0:	4b70      	ldr	r3, [pc, #448]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 80049b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b4:	4a6f      	ldr	r2, [pc, #444]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 80049b6:	f043 0301 	orr.w	r3, r3, #1
 80049ba:	6713      	str	r3, [r2, #112]	; 0x70
 80049bc:	e02d      	b.n	8004a1a <HAL_RCC_OscConfig+0x376>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10c      	bne.n	80049e0 <HAL_RCC_OscConfig+0x33c>
 80049c6:	4b6b      	ldr	r3, [pc, #428]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 80049c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ca:	4a6a      	ldr	r2, [pc, #424]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 80049cc:	f023 0301 	bic.w	r3, r3, #1
 80049d0:	6713      	str	r3, [r2, #112]	; 0x70
 80049d2:	4b68      	ldr	r3, [pc, #416]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 80049d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d6:	4a67      	ldr	r2, [pc, #412]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 80049d8:	f023 0304 	bic.w	r3, r3, #4
 80049dc:	6713      	str	r3, [r2, #112]	; 0x70
 80049de:	e01c      	b.n	8004a1a <HAL_RCC_OscConfig+0x376>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	2b05      	cmp	r3, #5
 80049e6:	d10c      	bne.n	8004a02 <HAL_RCC_OscConfig+0x35e>
 80049e8:	4b62      	ldr	r3, [pc, #392]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 80049ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ec:	4a61      	ldr	r2, [pc, #388]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 80049ee:	f043 0304 	orr.w	r3, r3, #4
 80049f2:	6713      	str	r3, [r2, #112]	; 0x70
 80049f4:	4b5f      	ldr	r3, [pc, #380]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 80049f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f8:	4a5e      	ldr	r2, [pc, #376]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 80049fa:	f043 0301 	orr.w	r3, r3, #1
 80049fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004a00:	e00b      	b.n	8004a1a <HAL_RCC_OscConfig+0x376>
 8004a02:	4b5c      	ldr	r3, [pc, #368]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 8004a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a06:	4a5b      	ldr	r2, [pc, #364]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 8004a08:	f023 0301 	bic.w	r3, r3, #1
 8004a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a0e:	4b59      	ldr	r3, [pc, #356]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 8004a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a12:	4a58      	ldr	r2, [pc, #352]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 8004a14:	f023 0304 	bic.w	r3, r3, #4
 8004a18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d015      	beq.n	8004a4e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a22:	f7fd fd29 	bl	8002478 <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a28:	e00a      	b.n	8004a40 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a2a:	f7fd fd25 	bl	8002478 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e0d8      	b.n	8004bf2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a40:	4b4c      	ldr	r3, [pc, #304]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 8004a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0ee      	beq.n	8004a2a <HAL_RCC_OscConfig+0x386>
 8004a4c:	e014      	b.n	8004a78 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4e:	f7fd fd13 	bl	8002478 <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a54:	e00a      	b.n	8004a6c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a56:	f7fd fd0f 	bl	8002478 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e0c2      	b.n	8004bf2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a6c:	4b41      	ldr	r3, [pc, #260]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1ee      	bne.n	8004a56 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a78:	7dfb      	ldrb	r3, [r7, #23]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d105      	bne.n	8004a8a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a7e:	4b3d      	ldr	r3, [pc, #244]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	4a3c      	ldr	r2, [pc, #240]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 8004a84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 80ae 	beq.w	8004bf0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a94:	4b37      	ldr	r3, [pc, #220]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 030c 	and.w	r3, r3, #12
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d06d      	beq.n	8004b7c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d14b      	bne.n	8004b40 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa8:	4b32      	ldr	r3, [pc, #200]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a31      	ldr	r2, [pc, #196]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 8004aae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fd fce0 	bl	8002478 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004abc:	f7fd fcdc 	bl	8002478 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e091      	b.n	8004bf2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ace:	4b29      	ldr	r3, [pc, #164]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f0      	bne.n	8004abc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69da      	ldr	r2, [r3, #28]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	019b      	lsls	r3, r3, #6
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af0:	085b      	lsrs	r3, r3, #1
 8004af2:	3b01      	subs	r3, #1
 8004af4:	041b      	lsls	r3, r3, #16
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	061b      	lsls	r3, r3, #24
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b04:	071b      	lsls	r3, r3, #28
 8004b06:	491b      	ldr	r1, [pc, #108]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b0c:	4b19      	ldr	r3, [pc, #100]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a18      	ldr	r2, [pc, #96]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 8004b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b18:	f7fd fcae 	bl	8002478 <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b20:	f7fd fcaa 	bl	8002478 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e05f      	b.n	8004bf2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b32:	4b10      	ldr	r3, [pc, #64]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0f0      	beq.n	8004b20 <HAL_RCC_OscConfig+0x47c>
 8004b3e:	e057      	b.n	8004bf0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b40:	4b0c      	ldr	r3, [pc, #48]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a0b      	ldr	r2, [pc, #44]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 8004b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4c:	f7fd fc94 	bl	8002478 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b54:	f7fd fc90 	bl	8002478 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e045      	b.n	8004bf2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b66:	4b03      	ldr	r3, [pc, #12]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1f0      	bne.n	8004b54 <HAL_RCC_OscConfig+0x4b0>
 8004b72:	e03d      	b.n	8004bf0 <HAL_RCC_OscConfig+0x54c>
 8004b74:	40023800 	.word	0x40023800
 8004b78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004b7c:	4b1f      	ldr	r3, [pc, #124]	; (8004bfc <HAL_RCC_OscConfig+0x558>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d030      	beq.n	8004bec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d129      	bne.n	8004bec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d122      	bne.n	8004bec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bac:	4013      	ands	r3, r2
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bb2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d119      	bne.n	8004bec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc2:	085b      	lsrs	r3, r3, #1
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d10f      	bne.n	8004bec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d107      	bne.n	8004bec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d001      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e000      	b.n	8004bf2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40023800 	.word	0x40023800

08004c00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e0d0      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c18:	4b6a      	ldr	r3, [pc, #424]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 030f 	and.w	r3, r3, #15
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d910      	bls.n	8004c48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c26:	4b67      	ldr	r3, [pc, #412]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f023 020f 	bic.w	r2, r3, #15
 8004c2e:	4965      	ldr	r1, [pc, #404]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c36:	4b63      	ldr	r3, [pc, #396]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d001      	beq.n	8004c48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e0b8      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d020      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c60:	4b59      	ldr	r3, [pc, #356]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	4a58      	ldr	r2, [pc, #352]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c78:	4b53      	ldr	r3, [pc, #332]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	4a52      	ldr	r2, [pc, #328]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c84:	4b50      	ldr	r3, [pc, #320]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	494d      	ldr	r1, [pc, #308]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d040      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d107      	bne.n	8004cba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004caa:	4b47      	ldr	r3, [pc, #284]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d115      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e07f      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d107      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc2:	4b41      	ldr	r3, [pc, #260]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d109      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e073      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd2:	4b3d      	ldr	r3, [pc, #244]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e06b      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ce2:	4b39      	ldr	r3, [pc, #228]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f023 0203 	bic.w	r2, r3, #3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	4936      	ldr	r1, [pc, #216]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cf4:	f7fd fbc0 	bl	8002478 <HAL_GetTick>
 8004cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cfa:	e00a      	b.n	8004d12 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cfc:	f7fd fbbc 	bl	8002478 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e053      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d12:	4b2d      	ldr	r3, [pc, #180]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 020c 	and.w	r2, r3, #12
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d1eb      	bne.n	8004cfc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d24:	4b27      	ldr	r3, [pc, #156]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 030f 	and.w	r3, r3, #15
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d210      	bcs.n	8004d54 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d32:	4b24      	ldr	r3, [pc, #144]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f023 020f 	bic.w	r2, r3, #15
 8004d3a:	4922      	ldr	r1, [pc, #136]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d42:	4b20      	ldr	r3, [pc, #128]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d001      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e032      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d008      	beq.n	8004d72 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d60:	4b19      	ldr	r3, [pc, #100]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	4916      	ldr	r1, [pc, #88]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d009      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d7e:	4b12      	ldr	r3, [pc, #72]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	490e      	ldr	r1, [pc, #56]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d92:	f000 f821 	bl	8004dd8 <HAL_RCC_GetSysClockFreq>
 8004d96:	4602      	mov	r2, r0
 8004d98:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	091b      	lsrs	r3, r3, #4
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	490a      	ldr	r1, [pc, #40]	; (8004dcc <HAL_RCC_ClockConfig+0x1cc>)
 8004da4:	5ccb      	ldrb	r3, [r1, r3]
 8004da6:	fa22 f303 	lsr.w	r3, r2, r3
 8004daa:	4a09      	ldr	r2, [pc, #36]	; (8004dd0 <HAL_RCC_ClockConfig+0x1d0>)
 8004dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004dae:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <HAL_RCC_ClockConfig+0x1d4>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fd fa2a 	bl	800220c <HAL_InitTick>

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40023c00 	.word	0x40023c00
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	0800e0b8 	.word	0x0800e0b8
 8004dd0:	20000000 	.word	0x20000000
 8004dd4:	20000004 	.word	0x20000004

08004dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ddc:	b094      	sub	sp, #80	; 0x50
 8004dde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004de0:	2300      	movs	r3, #0
 8004de2:	647b      	str	r3, [r7, #68]	; 0x44
 8004de4:	2300      	movs	r3, #0
 8004de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004de8:	2300      	movs	r3, #0
 8004dea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004dec:	2300      	movs	r3, #0
 8004dee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004df0:	4b79      	ldr	r3, [pc, #484]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 030c 	and.w	r3, r3, #12
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d00d      	beq.n	8004e18 <HAL_RCC_GetSysClockFreq+0x40>
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	f200 80e1 	bhi.w	8004fc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <HAL_RCC_GetSysClockFreq+0x34>
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d003      	beq.n	8004e12 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e0a:	e0db      	b.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e0c:	4b73      	ldr	r3, [pc, #460]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x204>)
 8004e0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e10:	e0db      	b.n	8004fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e12:	4b73      	ldr	r3, [pc, #460]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e16:	e0d8      	b.n	8004fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e18:	4b6f      	ldr	r3, [pc, #444]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e20:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004e22:	4b6d      	ldr	r3, [pc, #436]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d063      	beq.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e2e:	4b6a      	ldr	r3, [pc, #424]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	099b      	lsrs	r3, r3, #6
 8004e34:	2200      	movs	r2, #0
 8004e36:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e40:	633b      	str	r3, [r7, #48]	; 0x30
 8004e42:	2300      	movs	r3, #0
 8004e44:	637b      	str	r3, [r7, #52]	; 0x34
 8004e46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e4a:	4622      	mov	r2, r4
 8004e4c:	462b      	mov	r3, r5
 8004e4e:	f04f 0000 	mov.w	r0, #0
 8004e52:	f04f 0100 	mov.w	r1, #0
 8004e56:	0159      	lsls	r1, r3, #5
 8004e58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e5c:	0150      	lsls	r0, r2, #5
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	4621      	mov	r1, r4
 8004e64:	1a51      	subs	r1, r2, r1
 8004e66:	6139      	str	r1, [r7, #16]
 8004e68:	4629      	mov	r1, r5
 8004e6a:	eb63 0301 	sbc.w	r3, r3, r1
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e7c:	4659      	mov	r1, fp
 8004e7e:	018b      	lsls	r3, r1, #6
 8004e80:	4651      	mov	r1, sl
 8004e82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e86:	4651      	mov	r1, sl
 8004e88:	018a      	lsls	r2, r1, #6
 8004e8a:	4651      	mov	r1, sl
 8004e8c:	ebb2 0801 	subs.w	r8, r2, r1
 8004e90:	4659      	mov	r1, fp
 8004e92:	eb63 0901 	sbc.w	r9, r3, r1
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	f04f 0300 	mov.w	r3, #0
 8004e9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ea2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ea6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eaa:	4690      	mov	r8, r2
 8004eac:	4699      	mov	r9, r3
 8004eae:	4623      	mov	r3, r4
 8004eb0:	eb18 0303 	adds.w	r3, r8, r3
 8004eb4:	60bb      	str	r3, [r7, #8]
 8004eb6:	462b      	mov	r3, r5
 8004eb8:	eb49 0303 	adc.w	r3, r9, r3
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	f04f 0200 	mov.w	r2, #0
 8004ec2:	f04f 0300 	mov.w	r3, #0
 8004ec6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004eca:	4629      	mov	r1, r5
 8004ecc:	024b      	lsls	r3, r1, #9
 8004ece:	4621      	mov	r1, r4
 8004ed0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ed4:	4621      	mov	r1, r4
 8004ed6:	024a      	lsls	r2, r1, #9
 8004ed8:	4610      	mov	r0, r2
 8004eda:	4619      	mov	r1, r3
 8004edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ede:	2200      	movs	r2, #0
 8004ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ee2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ee4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ee8:	f7fb f9f4 	bl	80002d4 <__aeabi_uldivmod>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ef4:	e058      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ef6:	4b38      	ldr	r3, [pc, #224]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	099b      	lsrs	r3, r3, #6
 8004efc:	2200      	movs	r2, #0
 8004efe:	4618      	mov	r0, r3
 8004f00:	4611      	mov	r1, r2
 8004f02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f06:	623b      	str	r3, [r7, #32]
 8004f08:	2300      	movs	r3, #0
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f10:	4642      	mov	r2, r8
 8004f12:	464b      	mov	r3, r9
 8004f14:	f04f 0000 	mov.w	r0, #0
 8004f18:	f04f 0100 	mov.w	r1, #0
 8004f1c:	0159      	lsls	r1, r3, #5
 8004f1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f22:	0150      	lsls	r0, r2, #5
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4641      	mov	r1, r8
 8004f2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f2e:	4649      	mov	r1, r9
 8004f30:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f34:	f04f 0200 	mov.w	r2, #0
 8004f38:	f04f 0300 	mov.w	r3, #0
 8004f3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f48:	ebb2 040a 	subs.w	r4, r2, sl
 8004f4c:	eb63 050b 	sbc.w	r5, r3, fp
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	f04f 0300 	mov.w	r3, #0
 8004f58:	00eb      	lsls	r3, r5, #3
 8004f5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f5e:	00e2      	lsls	r2, r4, #3
 8004f60:	4614      	mov	r4, r2
 8004f62:	461d      	mov	r5, r3
 8004f64:	4643      	mov	r3, r8
 8004f66:	18e3      	adds	r3, r4, r3
 8004f68:	603b      	str	r3, [r7, #0]
 8004f6a:	464b      	mov	r3, r9
 8004f6c:	eb45 0303 	adc.w	r3, r5, r3
 8004f70:	607b      	str	r3, [r7, #4]
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	f04f 0300 	mov.w	r3, #0
 8004f7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f7e:	4629      	mov	r1, r5
 8004f80:	028b      	lsls	r3, r1, #10
 8004f82:	4621      	mov	r1, r4
 8004f84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f88:	4621      	mov	r1, r4
 8004f8a:	028a      	lsls	r2, r1, #10
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	4619      	mov	r1, r3
 8004f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f92:	2200      	movs	r2, #0
 8004f94:	61bb      	str	r3, [r7, #24]
 8004f96:	61fa      	str	r2, [r7, #28]
 8004f98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f9c:	f7fb f99a 	bl	80002d4 <__aeabi_uldivmod>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004fa8:	4b0b      	ldr	r3, [pc, #44]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	0c1b      	lsrs	r3, r3, #16
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004fb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fc2:	e002      	b.n	8004fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fc4:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x204>)
 8004fc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3750      	adds	r7, #80	; 0x50
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fd6:	bf00      	nop
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	00f42400 	.word	0x00f42400
 8004fe0:	007a1200 	.word	0x007a1200

08004fe4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fe8:	4b03      	ldr	r3, [pc, #12]	; (8004ff8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fea:	681b      	ldr	r3, [r3, #0]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	20000000 	.word	0x20000000

08004ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005000:	f7ff fff0 	bl	8004fe4 <HAL_RCC_GetHCLKFreq>
 8005004:	4602      	mov	r2, r0
 8005006:	4b05      	ldr	r3, [pc, #20]	; (800501c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	0a9b      	lsrs	r3, r3, #10
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	4903      	ldr	r1, [pc, #12]	; (8005020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005012:	5ccb      	ldrb	r3, [r1, r3]
 8005014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005018:	4618      	mov	r0, r3
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40023800 	.word	0x40023800
 8005020:	0800e0c8 	.word	0x0800e0c8

08005024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005028:	f7ff ffdc 	bl	8004fe4 <HAL_RCC_GetHCLKFreq>
 800502c:	4602      	mov	r2, r0
 800502e:	4b05      	ldr	r3, [pc, #20]	; (8005044 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	0b5b      	lsrs	r3, r3, #13
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	4903      	ldr	r1, [pc, #12]	; (8005048 <HAL_RCC_GetPCLK2Freq+0x24>)
 800503a:	5ccb      	ldrb	r3, [r1, r3]
 800503c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005040:	4618      	mov	r0, r3
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40023800 	.word	0x40023800
 8005048:	0800e0c8 	.word	0x0800e0c8

0800504c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	220f      	movs	r2, #15
 800505a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800505c:	4b12      	ldr	r3, [pc, #72]	; (80050a8 <HAL_RCC_GetClockConfig+0x5c>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 0203 	and.w	r2, r3, #3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005068:	4b0f      	ldr	r3, [pc, #60]	; (80050a8 <HAL_RCC_GetClockConfig+0x5c>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005074:	4b0c      	ldr	r3, [pc, #48]	; (80050a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005080:	4b09      	ldr	r3, [pc, #36]	; (80050a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	08db      	lsrs	r3, r3, #3
 8005086:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800508e:	4b07      	ldr	r3, [pc, #28]	; (80050ac <HAL_RCC_GetClockConfig+0x60>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 020f 	and.w	r2, r3, #15
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	601a      	str	r2, [r3, #0]
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40023800 	.word	0x40023800
 80050ac:	40023c00 	.word	0x40023c00

080050b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b088      	sub	sp, #32
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80050b8:	2300      	movs	r3, #0
 80050ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80050bc:	2300      	movs	r3, #0
 80050be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80050c0:	2300      	movs	r3, #0
 80050c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80050c4:	2300      	movs	r3, #0
 80050c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80050c8:	2300      	movs	r3, #0
 80050ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d012      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050d8:	4b69      	ldr	r3, [pc, #420]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	4a68      	ldr	r2, [pc, #416]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80050e2:	6093      	str	r3, [r2, #8]
 80050e4:	4b66      	ldr	r3, [pc, #408]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ec:	4964      	ldr	r1, [pc, #400]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80050fa:	2301      	movs	r3, #1
 80050fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d017      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800510a:	4b5d      	ldr	r3, [pc, #372]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800510c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005110:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005118:	4959      	ldr	r1, [pc, #356]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800511a:	4313      	orrs	r3, r2
 800511c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005124:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005128:	d101      	bne.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800512a:	2301      	movs	r3, #1
 800512c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005136:	2301      	movs	r3, #1
 8005138:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d017      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005146:	4b4e      	ldr	r3, [pc, #312]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800514c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005154:	494a      	ldr	r1, [pc, #296]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005156:	4313      	orrs	r3, r2
 8005158:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005164:	d101      	bne.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005166:	2301      	movs	r3, #1
 8005168:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005172:	2301      	movs	r3, #1
 8005174:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005182:	2301      	movs	r3, #1
 8005184:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0320 	and.w	r3, r3, #32
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 808b 	beq.w	80052aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005194:	4b3a      	ldr	r3, [pc, #232]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005198:	4a39      	ldr	r2, [pc, #228]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800519a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800519e:	6413      	str	r3, [r2, #64]	; 0x40
 80051a0:	4b37      	ldr	r3, [pc, #220]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a8:	60bb      	str	r3, [r7, #8]
 80051aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80051ac:	4b35      	ldr	r3, [pc, #212]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a34      	ldr	r2, [pc, #208]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051b8:	f7fd f95e 	bl	8002478 <HAL_GetTick>
 80051bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051be:	e008      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051c0:	f7fd f95a 	bl	8002478 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b64      	cmp	r3, #100	; 0x64
 80051cc:	d901      	bls.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e38f      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051d2:	4b2c      	ldr	r3, [pc, #176]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0f0      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051de:	4b28      	ldr	r3, [pc, #160]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d035      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d02e      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051fc:	4b20      	ldr	r3, [pc, #128]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005204:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005206:	4b1e      	ldr	r3, [pc, #120]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520a:	4a1d      	ldr	r2, [pc, #116]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800520c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005210:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005212:	4b1b      	ldr	r3, [pc, #108]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005216:	4a1a      	ldr	r2, [pc, #104]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800521c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800521e:	4a18      	ldr	r2, [pc, #96]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005224:	4b16      	ldr	r3, [pc, #88]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	2b01      	cmp	r3, #1
 800522e:	d114      	bne.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005230:	f7fd f922 	bl	8002478 <HAL_GetTick>
 8005234:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005236:	e00a      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005238:	f7fd f91e 	bl	8002478 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	f241 3288 	movw	r2, #5000	; 0x1388
 8005246:	4293      	cmp	r3, r2
 8005248:	d901      	bls.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e351      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800524e:	4b0c      	ldr	r3, [pc, #48]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d0ee      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005262:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005266:	d111      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005268:	4b05      	ldr	r3, [pc, #20]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005274:	4b04      	ldr	r3, [pc, #16]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005276:	400b      	ands	r3, r1
 8005278:	4901      	ldr	r1, [pc, #4]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800527a:	4313      	orrs	r3, r2
 800527c:	608b      	str	r3, [r1, #8]
 800527e:	e00b      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005280:	40023800 	.word	0x40023800
 8005284:	40007000 	.word	0x40007000
 8005288:	0ffffcff 	.word	0x0ffffcff
 800528c:	4bac      	ldr	r3, [pc, #688]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	4aab      	ldr	r2, [pc, #684]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005292:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005296:	6093      	str	r3, [r2, #8]
 8005298:	4ba9      	ldr	r3, [pc, #676]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800529a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052a4:	49a6      	ldr	r1, [pc, #664]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0310 	and.w	r3, r3, #16
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d010      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052b6:	4ba2      	ldr	r3, [pc, #648]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052bc:	4aa0      	ldr	r2, [pc, #640]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80052c6:	4b9e      	ldr	r3, [pc, #632]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d0:	499b      	ldr	r1, [pc, #620]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00a      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052e4:	4b96      	ldr	r3, [pc, #600]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052f2:	4993      	ldr	r1, [pc, #588]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005306:	4b8e      	ldr	r3, [pc, #568]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005314:	498a      	ldr	r1, [pc, #552]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00a      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005328:	4b85      	ldr	r3, [pc, #532]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800532a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005336:	4982      	ldr	r1, [pc, #520]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005338:	4313      	orrs	r3, r2
 800533a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00a      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800534a:	4b7d      	ldr	r3, [pc, #500]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800534c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005350:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005358:	4979      	ldr	r1, [pc, #484]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800536c:	4b74      	ldr	r3, [pc, #464]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800536e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005372:	f023 0203 	bic.w	r2, r3, #3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537a:	4971      	ldr	r1, [pc, #452]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00a      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800538e:	4b6c      	ldr	r3, [pc, #432]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005394:	f023 020c 	bic.w	r2, r3, #12
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800539c:	4968      	ldr	r1, [pc, #416]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00a      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053b0:	4b63      	ldr	r3, [pc, #396]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053be:	4960      	ldr	r1, [pc, #384]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00a      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053d2:	4b5b      	ldr	r3, [pc, #364]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e0:	4957      	ldr	r1, [pc, #348]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00a      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053f4:	4b52      	ldr	r3, [pc, #328]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005402:	494f      	ldr	r1, [pc, #316]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005404:	4313      	orrs	r3, r2
 8005406:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00a      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005416:	4b4a      	ldr	r3, [pc, #296]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005424:	4946      	ldr	r1, [pc, #280]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005426:	4313      	orrs	r3, r2
 8005428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00a      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005438:	4b41      	ldr	r3, [pc, #260]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800543a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005446:	493e      	ldr	r1, [pc, #248]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005448:	4313      	orrs	r3, r2
 800544a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800545a:	4b39      	ldr	r3, [pc, #228]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800545c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005460:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005468:	4935      	ldr	r1, [pc, #212]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800546a:	4313      	orrs	r3, r2
 800546c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00a      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800547c:	4b30      	ldr	r3, [pc, #192]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800547e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005482:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800548a:	492d      	ldr	r1, [pc, #180]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800548c:	4313      	orrs	r3, r2
 800548e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d011      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800549e:	4b28      	ldr	r3, [pc, #160]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ac:	4924      	ldr	r1, [pc, #144]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054bc:	d101      	bne.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80054be:	2301      	movs	r3, #1
 80054c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80054ce:	2301      	movs	r3, #1
 80054d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00a      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054de:	4b18      	ldr	r3, [pc, #96]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ec:	4914      	ldr	r1, [pc, #80]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00b      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005500:	4b0f      	ldr	r3, [pc, #60]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005506:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005510:	490b      	ldr	r1, [pc, #44]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005512:	4313      	orrs	r3, r2
 8005514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00f      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005524:	4b06      	ldr	r3, [pc, #24]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800552a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005534:	4902      	ldr	r1, [pc, #8]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005536:	4313      	orrs	r3, r2
 8005538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800553c:	e002      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800553e:	bf00      	nop
 8005540:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00b      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005550:	4b8a      	ldr	r3, [pc, #552]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005552:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005556:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005560:	4986      	ldr	r1, [pc, #536]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005562:	4313      	orrs	r3, r2
 8005564:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00b      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005574:	4b81      	ldr	r3, [pc, #516]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800557a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005584:	497d      	ldr	r1, [pc, #500]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005586:	4313      	orrs	r3, r2
 8005588:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d006      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 80d6 	beq.w	800574c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055a0:	4b76      	ldr	r3, [pc, #472]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a75      	ldr	r2, [pc, #468]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055ac:	f7fc ff64 	bl	8002478 <HAL_GetTick>
 80055b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055b2:	e008      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055b4:	f7fc ff60 	bl	8002478 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b64      	cmp	r3, #100	; 0x64
 80055c0:	d901      	bls.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e195      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055c6:	4b6d      	ldr	r3, [pc, #436]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1f0      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d021      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d11d      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80055e6:	4b65      	ldr	r3, [pc, #404]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ec:	0c1b      	lsrs	r3, r3, #16
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80055f4:	4b61      	ldr	r3, [pc, #388]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055fa:	0e1b      	lsrs	r3, r3, #24
 80055fc:	f003 030f 	and.w	r3, r3, #15
 8005600:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	019a      	lsls	r2, r3, #6
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	041b      	lsls	r3, r3, #16
 800560c:	431a      	orrs	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	061b      	lsls	r3, r3, #24
 8005612:	431a      	orrs	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	071b      	lsls	r3, r3, #28
 800561a:	4958      	ldr	r1, [pc, #352]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800561c:	4313      	orrs	r3, r2
 800561e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d004      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005632:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005636:	d00a      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005640:	2b00      	cmp	r3, #0
 8005642:	d02e      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005648:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800564c:	d129      	bne.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800564e:	4b4b      	ldr	r3, [pc, #300]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005654:	0c1b      	lsrs	r3, r3, #16
 8005656:	f003 0303 	and.w	r3, r3, #3
 800565a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800565c:	4b47      	ldr	r3, [pc, #284]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800565e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005662:	0f1b      	lsrs	r3, r3, #28
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	019a      	lsls	r2, r3, #6
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	041b      	lsls	r3, r3, #16
 8005674:	431a      	orrs	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	061b      	lsls	r3, r3, #24
 800567c:	431a      	orrs	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	071b      	lsls	r3, r3, #28
 8005682:	493e      	ldr	r1, [pc, #248]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005684:	4313      	orrs	r3, r2
 8005686:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800568a:	4b3c      	ldr	r3, [pc, #240]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800568c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005690:	f023 021f 	bic.w	r2, r3, #31
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	3b01      	subs	r3, #1
 800569a:	4938      	ldr	r1, [pc, #224]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800569c:	4313      	orrs	r3, r2
 800569e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d01d      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056ae:	4b33      	ldr	r3, [pc, #204]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056b4:	0e1b      	lsrs	r3, r3, #24
 80056b6:	f003 030f 	and.w	r3, r3, #15
 80056ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056bc:	4b2f      	ldr	r3, [pc, #188]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056c2:	0f1b      	lsrs	r3, r3, #28
 80056c4:	f003 0307 	and.w	r3, r3, #7
 80056c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	019a      	lsls	r2, r3, #6
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	041b      	lsls	r3, r3, #16
 80056d6:	431a      	orrs	r2, r3
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	061b      	lsls	r3, r3, #24
 80056dc:	431a      	orrs	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	071b      	lsls	r3, r3, #28
 80056e2:	4926      	ldr	r1, [pc, #152]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d011      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	019a      	lsls	r2, r3, #6
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	041b      	lsls	r3, r3, #16
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	061b      	lsls	r3, r3, #24
 800570a:	431a      	orrs	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	071b      	lsls	r3, r3, #28
 8005712:	491a      	ldr	r1, [pc, #104]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005714:	4313      	orrs	r3, r2
 8005716:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800571a:	4b18      	ldr	r3, [pc, #96]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a17      	ldr	r2, [pc, #92]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005720:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005724:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005726:	f7fc fea7 	bl	8002478 <HAL_GetTick>
 800572a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800572c:	e008      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800572e:	f7fc fea3 	bl	8002478 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b64      	cmp	r3, #100	; 0x64
 800573a:	d901      	bls.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e0d8      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005740:	4b0e      	ldr	r3, [pc, #56]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d0f0      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	2b01      	cmp	r3, #1
 8005750:	f040 80ce 	bne.w	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005754:	4b09      	ldr	r3, [pc, #36]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a08      	ldr	r2, [pc, #32]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800575a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800575e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005760:	f7fc fe8a 	bl	8002478 <HAL_GetTick>
 8005764:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005766:	e00b      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005768:	f7fc fe86 	bl	8002478 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b64      	cmp	r3, #100	; 0x64
 8005774:	d904      	bls.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e0bb      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800577a:	bf00      	nop
 800577c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005780:	4b5e      	ldr	r3, [pc, #376]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800578c:	d0ec      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d009      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d02e      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d12a      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80057b6:	4b51      	ldr	r3, [pc, #324]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057bc:	0c1b      	lsrs	r3, r3, #16
 80057be:	f003 0303 	and.w	r3, r3, #3
 80057c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057c4:	4b4d      	ldr	r3, [pc, #308]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ca:	0f1b      	lsrs	r3, r3, #28
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	019a      	lsls	r2, r3, #6
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	041b      	lsls	r3, r3, #16
 80057dc:	431a      	orrs	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	061b      	lsls	r3, r3, #24
 80057e4:	431a      	orrs	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	071b      	lsls	r3, r3, #28
 80057ea:	4944      	ldr	r1, [pc, #272]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80057f2:	4b42      	ldr	r3, [pc, #264]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005800:	3b01      	subs	r3, #1
 8005802:	021b      	lsls	r3, r3, #8
 8005804:	493d      	ldr	r1, [pc, #244]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005806:	4313      	orrs	r3, r2
 8005808:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d022      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800581c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005820:	d11d      	bne.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005822:	4b36      	ldr	r3, [pc, #216]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005828:	0e1b      	lsrs	r3, r3, #24
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005830:	4b32      	ldr	r3, [pc, #200]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005836:	0f1b      	lsrs	r3, r3, #28
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	019a      	lsls	r2, r3, #6
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	041b      	lsls	r3, r3, #16
 800584a:	431a      	orrs	r2, r3
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	061b      	lsls	r3, r3, #24
 8005850:	431a      	orrs	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	071b      	lsls	r3, r3, #28
 8005856:	4929      	ldr	r1, [pc, #164]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005858:	4313      	orrs	r3, r2
 800585a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0308 	and.w	r3, r3, #8
 8005866:	2b00      	cmp	r3, #0
 8005868:	d028      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800586a:	4b24      	ldr	r3, [pc, #144]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800586c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005870:	0e1b      	lsrs	r3, r3, #24
 8005872:	f003 030f 	and.w	r3, r3, #15
 8005876:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005878:	4b20      	ldr	r3, [pc, #128]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800587a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587e:	0c1b      	lsrs	r3, r3, #16
 8005880:	f003 0303 	and.w	r3, r3, #3
 8005884:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	019a      	lsls	r2, r3, #6
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	041b      	lsls	r3, r3, #16
 8005890:	431a      	orrs	r2, r3
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	061b      	lsls	r3, r3, #24
 8005896:	431a      	orrs	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	071b      	lsls	r3, r3, #28
 800589e:	4917      	ldr	r1, [pc, #92]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80058a6:	4b15      	ldr	r3, [pc, #84]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b4:	4911      	ldr	r1, [pc, #68]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80058bc:	4b0f      	ldr	r3, [pc, #60]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a0e      	ldr	r2, [pc, #56]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058c8:	f7fc fdd6 	bl	8002478 <HAL_GetTick>
 80058cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058ce:	e008      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80058d0:	f7fc fdd2 	bl	8002478 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b64      	cmp	r3, #100	; 0x64
 80058dc:	d901      	bls.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e007      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058e2:	4b06      	ldr	r3, [pc, #24]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058ee:	d1ef      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3720      	adds	r7, #32
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	40023800 	.word	0x40023800

08005900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e049      	b.n	80059a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d106      	bne.n	800592c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f841 	bl	80059ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	3304      	adds	r3, #4
 800593c:	4619      	mov	r1, r3
 800593e:	4610      	mov	r0, r2
 8005940:	f000 fa00 	bl	8005d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80059b6:	bf00      	nop
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
	...

080059c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d001      	beq.n	80059dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e054      	b.n	8005a86 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0201 	orr.w	r2, r2, #1
 80059f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a26      	ldr	r2, [pc, #152]	; (8005a94 <HAL_TIM_Base_Start_IT+0xd0>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d022      	beq.n	8005a44 <HAL_TIM_Base_Start_IT+0x80>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a06:	d01d      	beq.n	8005a44 <HAL_TIM_Base_Start_IT+0x80>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a22      	ldr	r2, [pc, #136]	; (8005a98 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d018      	beq.n	8005a44 <HAL_TIM_Base_Start_IT+0x80>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a21      	ldr	r2, [pc, #132]	; (8005a9c <HAL_TIM_Base_Start_IT+0xd8>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d013      	beq.n	8005a44 <HAL_TIM_Base_Start_IT+0x80>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a1f      	ldr	r2, [pc, #124]	; (8005aa0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d00e      	beq.n	8005a44 <HAL_TIM_Base_Start_IT+0x80>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a1e      	ldr	r2, [pc, #120]	; (8005aa4 <HAL_TIM_Base_Start_IT+0xe0>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d009      	beq.n	8005a44 <HAL_TIM_Base_Start_IT+0x80>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a1c      	ldr	r2, [pc, #112]	; (8005aa8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d004      	beq.n	8005a44 <HAL_TIM_Base_Start_IT+0x80>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a1b      	ldr	r2, [pc, #108]	; (8005aac <HAL_TIM_Base_Start_IT+0xe8>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d115      	bne.n	8005a70 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	4b19      	ldr	r3, [pc, #100]	; (8005ab0 <HAL_TIM_Base_Start_IT+0xec>)
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b06      	cmp	r3, #6
 8005a54:	d015      	beq.n	8005a82 <HAL_TIM_Base_Start_IT+0xbe>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a5c:	d011      	beq.n	8005a82 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f042 0201 	orr.w	r2, r2, #1
 8005a6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a6e:	e008      	b.n	8005a82 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f042 0201 	orr.w	r2, r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	e000      	b.n	8005a84 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	40010000 	.word	0x40010000
 8005a98:	40000400 	.word	0x40000400
 8005a9c:	40000800 	.word	0x40000800
 8005aa0:	40000c00 	.word	0x40000c00
 8005aa4:	40010400 	.word	0x40010400
 8005aa8:	40014000 	.word	0x40014000
 8005aac:	40001800 	.word	0x40001800
 8005ab0:	00010007 	.word	0x00010007

08005ab4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d122      	bne.n	8005b10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d11b      	bne.n	8005b10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f06f 0202 	mvn.w	r2, #2
 8005ae0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	f003 0303 	and.w	r3, r3, #3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f905 	bl	8005d06 <HAL_TIM_IC_CaptureCallback>
 8005afc:	e005      	b.n	8005b0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f8f7 	bl	8005cf2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f908 	bl	8005d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	f003 0304 	and.w	r3, r3, #4
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d122      	bne.n	8005b64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	2b04      	cmp	r3, #4
 8005b2a:	d11b      	bne.n	8005b64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f06f 0204 	mvn.w	r2, #4
 8005b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2202      	movs	r2, #2
 8005b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f8db 	bl	8005d06 <HAL_TIM_IC_CaptureCallback>
 8005b50:	e005      	b.n	8005b5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f8cd 	bl	8005cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 f8de 	bl	8005d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	f003 0308 	and.w	r3, r3, #8
 8005b6e:	2b08      	cmp	r3, #8
 8005b70:	d122      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f003 0308 	and.w	r3, r3, #8
 8005b7c:	2b08      	cmp	r3, #8
 8005b7e:	d11b      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f06f 0208 	mvn.w	r2, #8
 8005b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2204      	movs	r2, #4
 8005b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	f003 0303 	and.w	r3, r3, #3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f8b1 	bl	8005d06 <HAL_TIM_IC_CaptureCallback>
 8005ba4:	e005      	b.n	8005bb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f8a3 	bl	8005cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f8b4 	bl	8005d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f003 0310 	and.w	r3, r3, #16
 8005bc2:	2b10      	cmp	r3, #16
 8005bc4:	d122      	bne.n	8005c0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f003 0310 	and.w	r3, r3, #16
 8005bd0:	2b10      	cmp	r3, #16
 8005bd2:	d11b      	bne.n	8005c0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f06f 0210 	mvn.w	r2, #16
 8005bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2208      	movs	r2, #8
 8005be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f887 	bl	8005d06 <HAL_TIM_IC_CaptureCallback>
 8005bf8:	e005      	b.n	8005c06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f879 	bl	8005cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f88a 	bl	8005d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d10e      	bne.n	8005c38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d107      	bne.n	8005c38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f06f 0201 	mvn.w	r2, #1
 8005c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7fc f992 	bl	8001f5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c42:	2b80      	cmp	r3, #128	; 0x80
 8005c44:	d10e      	bne.n	8005c64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c50:	2b80      	cmp	r3, #128	; 0x80
 8005c52:	d107      	bne.n	8005c64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f91a 	bl	8005e98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c72:	d10e      	bne.n	8005c92 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c7e:	2b80      	cmp	r3, #128	; 0x80
 8005c80:	d107      	bne.n	8005c92 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f90d 	bl	8005eac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9c:	2b40      	cmp	r3, #64	; 0x40
 8005c9e:	d10e      	bne.n	8005cbe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005caa:	2b40      	cmp	r3, #64	; 0x40
 8005cac:	d107      	bne.n	8005cbe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f838 	bl	8005d2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	f003 0320 	and.w	r3, r3, #32
 8005cc8:	2b20      	cmp	r3, #32
 8005cca:	d10e      	bne.n	8005cea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b20      	cmp	r3, #32
 8005cd8:	d107      	bne.n	8005cea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f06f 0220 	mvn.w	r2, #32
 8005ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f8cd 	bl	8005e84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cea:	bf00      	nop
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b083      	sub	sp, #12
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cfa:	bf00      	nop
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b083      	sub	sp, #12
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d0e:	bf00      	nop
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d22:	bf00      	nop
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b083      	sub	sp, #12
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
	...

08005d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a40      	ldr	r2, [pc, #256]	; (8005e58 <TIM_Base_SetConfig+0x114>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d013      	beq.n	8005d84 <TIM_Base_SetConfig+0x40>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d62:	d00f      	beq.n	8005d84 <TIM_Base_SetConfig+0x40>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a3d      	ldr	r2, [pc, #244]	; (8005e5c <TIM_Base_SetConfig+0x118>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00b      	beq.n	8005d84 <TIM_Base_SetConfig+0x40>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a3c      	ldr	r2, [pc, #240]	; (8005e60 <TIM_Base_SetConfig+0x11c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d007      	beq.n	8005d84 <TIM_Base_SetConfig+0x40>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a3b      	ldr	r2, [pc, #236]	; (8005e64 <TIM_Base_SetConfig+0x120>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d003      	beq.n	8005d84 <TIM_Base_SetConfig+0x40>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a3a      	ldr	r2, [pc, #232]	; (8005e68 <TIM_Base_SetConfig+0x124>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d108      	bne.n	8005d96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a2f      	ldr	r2, [pc, #188]	; (8005e58 <TIM_Base_SetConfig+0x114>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d02b      	beq.n	8005df6 <TIM_Base_SetConfig+0xb2>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da4:	d027      	beq.n	8005df6 <TIM_Base_SetConfig+0xb2>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a2c      	ldr	r2, [pc, #176]	; (8005e5c <TIM_Base_SetConfig+0x118>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d023      	beq.n	8005df6 <TIM_Base_SetConfig+0xb2>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a2b      	ldr	r2, [pc, #172]	; (8005e60 <TIM_Base_SetConfig+0x11c>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d01f      	beq.n	8005df6 <TIM_Base_SetConfig+0xb2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a2a      	ldr	r2, [pc, #168]	; (8005e64 <TIM_Base_SetConfig+0x120>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d01b      	beq.n	8005df6 <TIM_Base_SetConfig+0xb2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a29      	ldr	r2, [pc, #164]	; (8005e68 <TIM_Base_SetConfig+0x124>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d017      	beq.n	8005df6 <TIM_Base_SetConfig+0xb2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a28      	ldr	r2, [pc, #160]	; (8005e6c <TIM_Base_SetConfig+0x128>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d013      	beq.n	8005df6 <TIM_Base_SetConfig+0xb2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a27      	ldr	r2, [pc, #156]	; (8005e70 <TIM_Base_SetConfig+0x12c>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00f      	beq.n	8005df6 <TIM_Base_SetConfig+0xb2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a26      	ldr	r2, [pc, #152]	; (8005e74 <TIM_Base_SetConfig+0x130>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d00b      	beq.n	8005df6 <TIM_Base_SetConfig+0xb2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a25      	ldr	r2, [pc, #148]	; (8005e78 <TIM_Base_SetConfig+0x134>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d007      	beq.n	8005df6 <TIM_Base_SetConfig+0xb2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a24      	ldr	r2, [pc, #144]	; (8005e7c <TIM_Base_SetConfig+0x138>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d003      	beq.n	8005df6 <TIM_Base_SetConfig+0xb2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a23      	ldr	r2, [pc, #140]	; (8005e80 <TIM_Base_SetConfig+0x13c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d108      	bne.n	8005e08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	689a      	ldr	r2, [r3, #8]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a0a      	ldr	r2, [pc, #40]	; (8005e58 <TIM_Base_SetConfig+0x114>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d003      	beq.n	8005e3c <TIM_Base_SetConfig+0xf8>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a0c      	ldr	r2, [pc, #48]	; (8005e68 <TIM_Base_SetConfig+0x124>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d103      	bne.n	8005e44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	691a      	ldr	r2, [r3, #16]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	615a      	str	r2, [r3, #20]
}
 8005e4a:	bf00      	nop
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	40010000 	.word	0x40010000
 8005e5c:	40000400 	.word	0x40000400
 8005e60:	40000800 	.word	0x40000800
 8005e64:	40000c00 	.word	0x40000c00
 8005e68:	40010400 	.word	0x40010400
 8005e6c:	40014000 	.word	0x40014000
 8005e70:	40014400 	.word	0x40014400
 8005e74:	40014800 	.word	0x40014800
 8005e78:	40001800 	.word	0x40001800
 8005e7c:	40001c00 	.word	0x40001c00
 8005e80:	40002000 	.word	0x40002000

08005e84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e040      	b.n	8005f54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d106      	bne.n	8005ee8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7fc f932 	bl	800214c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2224      	movs	r2, #36	; 0x24
 8005eec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0201 	bic.w	r2, r2, #1
 8005efc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f82c 	bl	8005f5c <UART_SetConfig>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d101      	bne.n	8005f0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e022      	b.n	8005f54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d002      	beq.n	8005f1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 fa84 	bl	8006424 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689a      	ldr	r2, [r3, #8]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0201 	orr.w	r2, r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fb0b 	bl	8006568 <UART_CheckIdleState>
 8005f52:	4603      	mov	r3, r0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b088      	sub	sp, #32
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	431a      	orrs	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	431a      	orrs	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	69db      	ldr	r3, [r3, #28]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	4ba6      	ldr	r3, [pc, #664]	; (8006220 <UART_SetConfig+0x2c4>)
 8005f88:	4013      	ands	r3, r2
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	6812      	ldr	r2, [r2, #0]
 8005f8e:	6979      	ldr	r1, [r7, #20]
 8005f90:	430b      	orrs	r3, r1
 8005f92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68da      	ldr	r2, [r3, #12]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a94      	ldr	r2, [pc, #592]	; (8006224 <UART_SetConfig+0x2c8>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d120      	bne.n	800601a <UART_SetConfig+0xbe>
 8005fd8:	4b93      	ldr	r3, [pc, #588]	; (8006228 <UART_SetConfig+0x2cc>)
 8005fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fde:	f003 0303 	and.w	r3, r3, #3
 8005fe2:	2b03      	cmp	r3, #3
 8005fe4:	d816      	bhi.n	8006014 <UART_SetConfig+0xb8>
 8005fe6:	a201      	add	r2, pc, #4	; (adr r2, 8005fec <UART_SetConfig+0x90>)
 8005fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fec:	08005ffd 	.word	0x08005ffd
 8005ff0:	08006009 	.word	0x08006009
 8005ff4:	08006003 	.word	0x08006003
 8005ff8:	0800600f 	.word	0x0800600f
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	77fb      	strb	r3, [r7, #31]
 8006000:	e150      	b.n	80062a4 <UART_SetConfig+0x348>
 8006002:	2302      	movs	r3, #2
 8006004:	77fb      	strb	r3, [r7, #31]
 8006006:	e14d      	b.n	80062a4 <UART_SetConfig+0x348>
 8006008:	2304      	movs	r3, #4
 800600a:	77fb      	strb	r3, [r7, #31]
 800600c:	e14a      	b.n	80062a4 <UART_SetConfig+0x348>
 800600e:	2308      	movs	r3, #8
 8006010:	77fb      	strb	r3, [r7, #31]
 8006012:	e147      	b.n	80062a4 <UART_SetConfig+0x348>
 8006014:	2310      	movs	r3, #16
 8006016:	77fb      	strb	r3, [r7, #31]
 8006018:	e144      	b.n	80062a4 <UART_SetConfig+0x348>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a83      	ldr	r2, [pc, #524]	; (800622c <UART_SetConfig+0x2d0>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d132      	bne.n	800608a <UART_SetConfig+0x12e>
 8006024:	4b80      	ldr	r3, [pc, #512]	; (8006228 <UART_SetConfig+0x2cc>)
 8006026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602a:	f003 030c 	and.w	r3, r3, #12
 800602e:	2b0c      	cmp	r3, #12
 8006030:	d828      	bhi.n	8006084 <UART_SetConfig+0x128>
 8006032:	a201      	add	r2, pc, #4	; (adr r2, 8006038 <UART_SetConfig+0xdc>)
 8006034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006038:	0800606d 	.word	0x0800606d
 800603c:	08006085 	.word	0x08006085
 8006040:	08006085 	.word	0x08006085
 8006044:	08006085 	.word	0x08006085
 8006048:	08006079 	.word	0x08006079
 800604c:	08006085 	.word	0x08006085
 8006050:	08006085 	.word	0x08006085
 8006054:	08006085 	.word	0x08006085
 8006058:	08006073 	.word	0x08006073
 800605c:	08006085 	.word	0x08006085
 8006060:	08006085 	.word	0x08006085
 8006064:	08006085 	.word	0x08006085
 8006068:	0800607f 	.word	0x0800607f
 800606c:	2300      	movs	r3, #0
 800606e:	77fb      	strb	r3, [r7, #31]
 8006070:	e118      	b.n	80062a4 <UART_SetConfig+0x348>
 8006072:	2302      	movs	r3, #2
 8006074:	77fb      	strb	r3, [r7, #31]
 8006076:	e115      	b.n	80062a4 <UART_SetConfig+0x348>
 8006078:	2304      	movs	r3, #4
 800607a:	77fb      	strb	r3, [r7, #31]
 800607c:	e112      	b.n	80062a4 <UART_SetConfig+0x348>
 800607e:	2308      	movs	r3, #8
 8006080:	77fb      	strb	r3, [r7, #31]
 8006082:	e10f      	b.n	80062a4 <UART_SetConfig+0x348>
 8006084:	2310      	movs	r3, #16
 8006086:	77fb      	strb	r3, [r7, #31]
 8006088:	e10c      	b.n	80062a4 <UART_SetConfig+0x348>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a68      	ldr	r2, [pc, #416]	; (8006230 <UART_SetConfig+0x2d4>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d120      	bne.n	80060d6 <UART_SetConfig+0x17a>
 8006094:	4b64      	ldr	r3, [pc, #400]	; (8006228 <UART_SetConfig+0x2cc>)
 8006096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800609e:	2b30      	cmp	r3, #48	; 0x30
 80060a0:	d013      	beq.n	80060ca <UART_SetConfig+0x16e>
 80060a2:	2b30      	cmp	r3, #48	; 0x30
 80060a4:	d814      	bhi.n	80060d0 <UART_SetConfig+0x174>
 80060a6:	2b20      	cmp	r3, #32
 80060a8:	d009      	beq.n	80060be <UART_SetConfig+0x162>
 80060aa:	2b20      	cmp	r3, #32
 80060ac:	d810      	bhi.n	80060d0 <UART_SetConfig+0x174>
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <UART_SetConfig+0x15c>
 80060b2:	2b10      	cmp	r3, #16
 80060b4:	d006      	beq.n	80060c4 <UART_SetConfig+0x168>
 80060b6:	e00b      	b.n	80060d0 <UART_SetConfig+0x174>
 80060b8:	2300      	movs	r3, #0
 80060ba:	77fb      	strb	r3, [r7, #31]
 80060bc:	e0f2      	b.n	80062a4 <UART_SetConfig+0x348>
 80060be:	2302      	movs	r3, #2
 80060c0:	77fb      	strb	r3, [r7, #31]
 80060c2:	e0ef      	b.n	80062a4 <UART_SetConfig+0x348>
 80060c4:	2304      	movs	r3, #4
 80060c6:	77fb      	strb	r3, [r7, #31]
 80060c8:	e0ec      	b.n	80062a4 <UART_SetConfig+0x348>
 80060ca:	2308      	movs	r3, #8
 80060cc:	77fb      	strb	r3, [r7, #31]
 80060ce:	e0e9      	b.n	80062a4 <UART_SetConfig+0x348>
 80060d0:	2310      	movs	r3, #16
 80060d2:	77fb      	strb	r3, [r7, #31]
 80060d4:	e0e6      	b.n	80062a4 <UART_SetConfig+0x348>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a56      	ldr	r2, [pc, #344]	; (8006234 <UART_SetConfig+0x2d8>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d120      	bne.n	8006122 <UART_SetConfig+0x1c6>
 80060e0:	4b51      	ldr	r3, [pc, #324]	; (8006228 <UART_SetConfig+0x2cc>)
 80060e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80060ea:	2bc0      	cmp	r3, #192	; 0xc0
 80060ec:	d013      	beq.n	8006116 <UART_SetConfig+0x1ba>
 80060ee:	2bc0      	cmp	r3, #192	; 0xc0
 80060f0:	d814      	bhi.n	800611c <UART_SetConfig+0x1c0>
 80060f2:	2b80      	cmp	r3, #128	; 0x80
 80060f4:	d009      	beq.n	800610a <UART_SetConfig+0x1ae>
 80060f6:	2b80      	cmp	r3, #128	; 0x80
 80060f8:	d810      	bhi.n	800611c <UART_SetConfig+0x1c0>
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d002      	beq.n	8006104 <UART_SetConfig+0x1a8>
 80060fe:	2b40      	cmp	r3, #64	; 0x40
 8006100:	d006      	beq.n	8006110 <UART_SetConfig+0x1b4>
 8006102:	e00b      	b.n	800611c <UART_SetConfig+0x1c0>
 8006104:	2300      	movs	r3, #0
 8006106:	77fb      	strb	r3, [r7, #31]
 8006108:	e0cc      	b.n	80062a4 <UART_SetConfig+0x348>
 800610a:	2302      	movs	r3, #2
 800610c:	77fb      	strb	r3, [r7, #31]
 800610e:	e0c9      	b.n	80062a4 <UART_SetConfig+0x348>
 8006110:	2304      	movs	r3, #4
 8006112:	77fb      	strb	r3, [r7, #31]
 8006114:	e0c6      	b.n	80062a4 <UART_SetConfig+0x348>
 8006116:	2308      	movs	r3, #8
 8006118:	77fb      	strb	r3, [r7, #31]
 800611a:	e0c3      	b.n	80062a4 <UART_SetConfig+0x348>
 800611c:	2310      	movs	r3, #16
 800611e:	77fb      	strb	r3, [r7, #31]
 8006120:	e0c0      	b.n	80062a4 <UART_SetConfig+0x348>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a44      	ldr	r2, [pc, #272]	; (8006238 <UART_SetConfig+0x2dc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d125      	bne.n	8006178 <UART_SetConfig+0x21c>
 800612c:	4b3e      	ldr	r3, [pc, #248]	; (8006228 <UART_SetConfig+0x2cc>)
 800612e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006136:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800613a:	d017      	beq.n	800616c <UART_SetConfig+0x210>
 800613c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006140:	d817      	bhi.n	8006172 <UART_SetConfig+0x216>
 8006142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006146:	d00b      	beq.n	8006160 <UART_SetConfig+0x204>
 8006148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800614c:	d811      	bhi.n	8006172 <UART_SetConfig+0x216>
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <UART_SetConfig+0x1fe>
 8006152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006156:	d006      	beq.n	8006166 <UART_SetConfig+0x20a>
 8006158:	e00b      	b.n	8006172 <UART_SetConfig+0x216>
 800615a:	2300      	movs	r3, #0
 800615c:	77fb      	strb	r3, [r7, #31]
 800615e:	e0a1      	b.n	80062a4 <UART_SetConfig+0x348>
 8006160:	2302      	movs	r3, #2
 8006162:	77fb      	strb	r3, [r7, #31]
 8006164:	e09e      	b.n	80062a4 <UART_SetConfig+0x348>
 8006166:	2304      	movs	r3, #4
 8006168:	77fb      	strb	r3, [r7, #31]
 800616a:	e09b      	b.n	80062a4 <UART_SetConfig+0x348>
 800616c:	2308      	movs	r3, #8
 800616e:	77fb      	strb	r3, [r7, #31]
 8006170:	e098      	b.n	80062a4 <UART_SetConfig+0x348>
 8006172:	2310      	movs	r3, #16
 8006174:	77fb      	strb	r3, [r7, #31]
 8006176:	e095      	b.n	80062a4 <UART_SetConfig+0x348>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a2f      	ldr	r2, [pc, #188]	; (800623c <UART_SetConfig+0x2e0>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d125      	bne.n	80061ce <UART_SetConfig+0x272>
 8006182:	4b29      	ldr	r3, [pc, #164]	; (8006228 <UART_SetConfig+0x2cc>)
 8006184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006188:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800618c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006190:	d017      	beq.n	80061c2 <UART_SetConfig+0x266>
 8006192:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006196:	d817      	bhi.n	80061c8 <UART_SetConfig+0x26c>
 8006198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800619c:	d00b      	beq.n	80061b6 <UART_SetConfig+0x25a>
 800619e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061a2:	d811      	bhi.n	80061c8 <UART_SetConfig+0x26c>
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d003      	beq.n	80061b0 <UART_SetConfig+0x254>
 80061a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ac:	d006      	beq.n	80061bc <UART_SetConfig+0x260>
 80061ae:	e00b      	b.n	80061c8 <UART_SetConfig+0x26c>
 80061b0:	2301      	movs	r3, #1
 80061b2:	77fb      	strb	r3, [r7, #31]
 80061b4:	e076      	b.n	80062a4 <UART_SetConfig+0x348>
 80061b6:	2302      	movs	r3, #2
 80061b8:	77fb      	strb	r3, [r7, #31]
 80061ba:	e073      	b.n	80062a4 <UART_SetConfig+0x348>
 80061bc:	2304      	movs	r3, #4
 80061be:	77fb      	strb	r3, [r7, #31]
 80061c0:	e070      	b.n	80062a4 <UART_SetConfig+0x348>
 80061c2:	2308      	movs	r3, #8
 80061c4:	77fb      	strb	r3, [r7, #31]
 80061c6:	e06d      	b.n	80062a4 <UART_SetConfig+0x348>
 80061c8:	2310      	movs	r3, #16
 80061ca:	77fb      	strb	r3, [r7, #31]
 80061cc:	e06a      	b.n	80062a4 <UART_SetConfig+0x348>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a1b      	ldr	r2, [pc, #108]	; (8006240 <UART_SetConfig+0x2e4>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d138      	bne.n	800624a <UART_SetConfig+0x2ee>
 80061d8:	4b13      	ldr	r3, [pc, #76]	; (8006228 <UART_SetConfig+0x2cc>)
 80061da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80061e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061e6:	d017      	beq.n	8006218 <UART_SetConfig+0x2bc>
 80061e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061ec:	d82a      	bhi.n	8006244 <UART_SetConfig+0x2e8>
 80061ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061f2:	d00b      	beq.n	800620c <UART_SetConfig+0x2b0>
 80061f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061f8:	d824      	bhi.n	8006244 <UART_SetConfig+0x2e8>
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <UART_SetConfig+0x2aa>
 80061fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006202:	d006      	beq.n	8006212 <UART_SetConfig+0x2b6>
 8006204:	e01e      	b.n	8006244 <UART_SetConfig+0x2e8>
 8006206:	2300      	movs	r3, #0
 8006208:	77fb      	strb	r3, [r7, #31]
 800620a:	e04b      	b.n	80062a4 <UART_SetConfig+0x348>
 800620c:	2302      	movs	r3, #2
 800620e:	77fb      	strb	r3, [r7, #31]
 8006210:	e048      	b.n	80062a4 <UART_SetConfig+0x348>
 8006212:	2304      	movs	r3, #4
 8006214:	77fb      	strb	r3, [r7, #31]
 8006216:	e045      	b.n	80062a4 <UART_SetConfig+0x348>
 8006218:	2308      	movs	r3, #8
 800621a:	77fb      	strb	r3, [r7, #31]
 800621c:	e042      	b.n	80062a4 <UART_SetConfig+0x348>
 800621e:	bf00      	nop
 8006220:	efff69f3 	.word	0xefff69f3
 8006224:	40011000 	.word	0x40011000
 8006228:	40023800 	.word	0x40023800
 800622c:	40004400 	.word	0x40004400
 8006230:	40004800 	.word	0x40004800
 8006234:	40004c00 	.word	0x40004c00
 8006238:	40005000 	.word	0x40005000
 800623c:	40011400 	.word	0x40011400
 8006240:	40007800 	.word	0x40007800
 8006244:	2310      	movs	r3, #16
 8006246:	77fb      	strb	r3, [r7, #31]
 8006248:	e02c      	b.n	80062a4 <UART_SetConfig+0x348>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a72      	ldr	r2, [pc, #456]	; (8006418 <UART_SetConfig+0x4bc>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d125      	bne.n	80062a0 <UART_SetConfig+0x344>
 8006254:	4b71      	ldr	r3, [pc, #452]	; (800641c <UART_SetConfig+0x4c0>)
 8006256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800625a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800625e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006262:	d017      	beq.n	8006294 <UART_SetConfig+0x338>
 8006264:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006268:	d817      	bhi.n	800629a <UART_SetConfig+0x33e>
 800626a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800626e:	d00b      	beq.n	8006288 <UART_SetConfig+0x32c>
 8006270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006274:	d811      	bhi.n	800629a <UART_SetConfig+0x33e>
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <UART_SetConfig+0x326>
 800627a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800627e:	d006      	beq.n	800628e <UART_SetConfig+0x332>
 8006280:	e00b      	b.n	800629a <UART_SetConfig+0x33e>
 8006282:	2300      	movs	r3, #0
 8006284:	77fb      	strb	r3, [r7, #31]
 8006286:	e00d      	b.n	80062a4 <UART_SetConfig+0x348>
 8006288:	2302      	movs	r3, #2
 800628a:	77fb      	strb	r3, [r7, #31]
 800628c:	e00a      	b.n	80062a4 <UART_SetConfig+0x348>
 800628e:	2304      	movs	r3, #4
 8006290:	77fb      	strb	r3, [r7, #31]
 8006292:	e007      	b.n	80062a4 <UART_SetConfig+0x348>
 8006294:	2308      	movs	r3, #8
 8006296:	77fb      	strb	r3, [r7, #31]
 8006298:	e004      	b.n	80062a4 <UART_SetConfig+0x348>
 800629a:	2310      	movs	r3, #16
 800629c:	77fb      	strb	r3, [r7, #31]
 800629e:	e001      	b.n	80062a4 <UART_SetConfig+0x348>
 80062a0:	2310      	movs	r3, #16
 80062a2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	69db      	ldr	r3, [r3, #28]
 80062a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ac:	d15b      	bne.n	8006366 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80062ae:	7ffb      	ldrb	r3, [r7, #31]
 80062b0:	2b08      	cmp	r3, #8
 80062b2:	d828      	bhi.n	8006306 <UART_SetConfig+0x3aa>
 80062b4:	a201      	add	r2, pc, #4	; (adr r2, 80062bc <UART_SetConfig+0x360>)
 80062b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ba:	bf00      	nop
 80062bc:	080062e1 	.word	0x080062e1
 80062c0:	080062e9 	.word	0x080062e9
 80062c4:	080062f1 	.word	0x080062f1
 80062c8:	08006307 	.word	0x08006307
 80062cc:	080062f7 	.word	0x080062f7
 80062d0:	08006307 	.word	0x08006307
 80062d4:	08006307 	.word	0x08006307
 80062d8:	08006307 	.word	0x08006307
 80062dc:	080062ff 	.word	0x080062ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062e0:	f7fe fe8c 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 80062e4:	61b8      	str	r0, [r7, #24]
        break;
 80062e6:	e013      	b.n	8006310 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062e8:	f7fe fe9c 	bl	8005024 <HAL_RCC_GetPCLK2Freq>
 80062ec:	61b8      	str	r0, [r7, #24]
        break;
 80062ee:	e00f      	b.n	8006310 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062f0:	4b4b      	ldr	r3, [pc, #300]	; (8006420 <UART_SetConfig+0x4c4>)
 80062f2:	61bb      	str	r3, [r7, #24]
        break;
 80062f4:	e00c      	b.n	8006310 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062f6:	f7fe fd6f 	bl	8004dd8 <HAL_RCC_GetSysClockFreq>
 80062fa:	61b8      	str	r0, [r7, #24]
        break;
 80062fc:	e008      	b.n	8006310 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006302:	61bb      	str	r3, [r7, #24]
        break;
 8006304:	e004      	b.n	8006310 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	77bb      	strb	r3, [r7, #30]
        break;
 800630e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d074      	beq.n	8006400 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	005a      	lsls	r2, r3, #1
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	085b      	lsrs	r3, r3, #1
 8006320:	441a      	add	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	fbb2 f3f3 	udiv	r3, r2, r3
 800632a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	2b0f      	cmp	r3, #15
 8006330:	d916      	bls.n	8006360 <UART_SetConfig+0x404>
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006338:	d212      	bcs.n	8006360 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	b29b      	uxth	r3, r3
 800633e:	f023 030f 	bic.w	r3, r3, #15
 8006342:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	085b      	lsrs	r3, r3, #1
 8006348:	b29b      	uxth	r3, r3
 800634a:	f003 0307 	and.w	r3, r3, #7
 800634e:	b29a      	uxth	r2, r3
 8006350:	89fb      	ldrh	r3, [r7, #14]
 8006352:	4313      	orrs	r3, r2
 8006354:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	89fa      	ldrh	r2, [r7, #14]
 800635c:	60da      	str	r2, [r3, #12]
 800635e:	e04f      	b.n	8006400 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	77bb      	strb	r3, [r7, #30]
 8006364:	e04c      	b.n	8006400 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006366:	7ffb      	ldrb	r3, [r7, #31]
 8006368:	2b08      	cmp	r3, #8
 800636a:	d828      	bhi.n	80063be <UART_SetConfig+0x462>
 800636c:	a201      	add	r2, pc, #4	; (adr r2, 8006374 <UART_SetConfig+0x418>)
 800636e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006372:	bf00      	nop
 8006374:	08006399 	.word	0x08006399
 8006378:	080063a1 	.word	0x080063a1
 800637c:	080063a9 	.word	0x080063a9
 8006380:	080063bf 	.word	0x080063bf
 8006384:	080063af 	.word	0x080063af
 8006388:	080063bf 	.word	0x080063bf
 800638c:	080063bf 	.word	0x080063bf
 8006390:	080063bf 	.word	0x080063bf
 8006394:	080063b7 	.word	0x080063b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006398:	f7fe fe30 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 800639c:	61b8      	str	r0, [r7, #24]
        break;
 800639e:	e013      	b.n	80063c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063a0:	f7fe fe40 	bl	8005024 <HAL_RCC_GetPCLK2Freq>
 80063a4:	61b8      	str	r0, [r7, #24]
        break;
 80063a6:	e00f      	b.n	80063c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063a8:	4b1d      	ldr	r3, [pc, #116]	; (8006420 <UART_SetConfig+0x4c4>)
 80063aa:	61bb      	str	r3, [r7, #24]
        break;
 80063ac:	e00c      	b.n	80063c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063ae:	f7fe fd13 	bl	8004dd8 <HAL_RCC_GetSysClockFreq>
 80063b2:	61b8      	str	r0, [r7, #24]
        break;
 80063b4:	e008      	b.n	80063c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063ba:	61bb      	str	r3, [r7, #24]
        break;
 80063bc:	e004      	b.n	80063c8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80063be:	2300      	movs	r3, #0
 80063c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	77bb      	strb	r3, [r7, #30]
        break;
 80063c6:	bf00      	nop
    }

    if (pclk != 0U)
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d018      	beq.n	8006400 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	085a      	lsrs	r2, r3, #1
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	441a      	add	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	2b0f      	cmp	r3, #15
 80063e6:	d909      	bls.n	80063fc <UART_SetConfig+0x4a0>
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ee:	d205      	bcs.n	80063fc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	60da      	str	r2, [r3, #12]
 80063fa:	e001      	b.n	8006400 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800640c:	7fbb      	ldrb	r3, [r7, #30]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3720      	adds	r7, #32
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	40007c00 	.word	0x40007c00
 800641c:	40023800 	.word	0x40023800
 8006420:	00f42400 	.word	0x00f42400

08006424 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00a      	beq.n	800644e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	430a      	orrs	r2, r1
 800646e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006474:	f003 0304 	and.w	r3, r3, #4
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00a      	beq.n	8006492 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	f003 0308 	and.w	r3, r3, #8
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	430a      	orrs	r2, r1
 80064b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b8:	f003 0310 	and.w	r3, r3, #16
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00a      	beq.n	80064d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064da:	f003 0320 	and.w	r3, r3, #32
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006500:	2b00      	cmp	r3, #0
 8006502:	d01a      	beq.n	800653a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006522:	d10a      	bne.n	800653a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00a      	beq.n	800655c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	430a      	orrs	r2, r1
 800655a:	605a      	str	r2, [r3, #4]
  }
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af02      	add	r7, sp, #8
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006578:	f7fb ff7e 	bl	8002478 <HAL_GetTick>
 800657c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0308 	and.w	r3, r3, #8
 8006588:	2b08      	cmp	r3, #8
 800658a:	d10e      	bne.n	80065aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800658c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f831 	bl	8006602 <UART_WaitOnFlagUntilTimeout>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e027      	b.n	80065fa <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0304 	and.w	r3, r3, #4
 80065b4:	2b04      	cmp	r3, #4
 80065b6:	d10e      	bne.n	80065d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f81b 	bl	8006602 <UART_WaitOnFlagUntilTimeout>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e011      	b.n	80065fa <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2220      	movs	r2, #32
 80065da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2220      	movs	r2, #32
 80065e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b09c      	sub	sp, #112	; 0x70
 8006606:	af00      	add	r7, sp, #0
 8006608:	60f8      	str	r0, [r7, #12]
 800660a:	60b9      	str	r1, [r7, #8]
 800660c:	603b      	str	r3, [r7, #0]
 800660e:	4613      	mov	r3, r2
 8006610:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006612:	e0a7      	b.n	8006764 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006614:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661a:	f000 80a3 	beq.w	8006764 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800661e:	f7fb ff2b 	bl	8002478 <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800662a:	429a      	cmp	r2, r3
 800662c:	d302      	bcc.n	8006634 <UART_WaitOnFlagUntilTimeout+0x32>
 800662e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006630:	2b00      	cmp	r3, #0
 8006632:	d13f      	bne.n	80066b4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800663c:	e853 3f00 	ldrex	r3, [r3]
 8006640:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006644:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006648:	667b      	str	r3, [r7, #100]	; 0x64
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	461a      	mov	r2, r3
 8006650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006652:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006654:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006656:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006658:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800665a:	e841 2300 	strex	r3, r2, [r1]
 800665e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1e6      	bne.n	8006634 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3308      	adds	r3, #8
 800666c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006670:	e853 3f00 	ldrex	r3, [r3]
 8006674:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006678:	f023 0301 	bic.w	r3, r3, #1
 800667c:	663b      	str	r3, [r7, #96]	; 0x60
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	3308      	adds	r3, #8
 8006684:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006686:	64ba      	str	r2, [r7, #72]	; 0x48
 8006688:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800668c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800668e:	e841 2300 	strex	r3, r2, [r1]
 8006692:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1e5      	bne.n	8006666 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2220      	movs	r2, #32
 800669e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e068      	b.n	8006786 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0304 	and.w	r3, r3, #4
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d050      	beq.n	8006764 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	69db      	ldr	r3, [r3, #28]
 80066c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066d0:	d148      	bne.n	8006764 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066da:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e4:	e853 3f00 	ldrex	r3, [r3]
 80066e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	461a      	mov	r2, r3
 80066f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066fa:	637b      	str	r3, [r7, #52]	; 0x34
 80066fc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006700:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006702:	e841 2300 	strex	r3, r2, [r1]
 8006706:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1e6      	bne.n	80066dc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	3308      	adds	r3, #8
 8006714:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	e853 3f00 	ldrex	r3, [r3]
 800671c:	613b      	str	r3, [r7, #16]
   return(result);
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f023 0301 	bic.w	r3, r3, #1
 8006724:	66bb      	str	r3, [r7, #104]	; 0x68
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	3308      	adds	r3, #8
 800672c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800672e:	623a      	str	r2, [r7, #32]
 8006730:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006732:	69f9      	ldr	r1, [r7, #28]
 8006734:	6a3a      	ldr	r2, [r7, #32]
 8006736:	e841 2300 	strex	r3, r2, [r1]
 800673a:	61bb      	str	r3, [r7, #24]
   return(result);
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1e5      	bne.n	800670e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2220      	movs	r2, #32
 8006746:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2220      	movs	r2, #32
 800674c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2220      	movs	r2, #32
 8006754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e010      	b.n	8006786 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	69da      	ldr	r2, [r3, #28]
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	4013      	ands	r3, r2
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	429a      	cmp	r2, r3
 8006772:	bf0c      	ite	eq
 8006774:	2301      	moveq	r3, #1
 8006776:	2300      	movne	r3, #0
 8006778:	b2db      	uxtb	r3, r3
 800677a:	461a      	mov	r2, r3
 800677c:	79fb      	ldrb	r3, [r7, #7]
 800677e:	429a      	cmp	r2, r3
 8006780:	f43f af48 	beq.w	8006614 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3770      	adds	r7, #112	; 0x70
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
	...

08006790 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006790:	b084      	sub	sp, #16
 8006792:	b580      	push	{r7, lr}
 8006794:	b084      	sub	sp, #16
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
 800679a:	f107 001c 	add.w	r0, r7, #28
 800679e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d120      	bne.n	80067ea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68da      	ldr	r2, [r3, #12]
 80067b8:	4b20      	ldr	r3, [pc, #128]	; (800683c <USB_CoreInit+0xac>)
 80067ba:	4013      	ands	r3, r2
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80067cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d105      	bne.n	80067de <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f001 fbee 	bl	8007fc0 <USB_CoreReset>
 80067e4:	4603      	mov	r3, r0
 80067e6:	73fb      	strb	r3, [r7, #15]
 80067e8:	e010      	b.n	800680c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f001 fbe2 	bl	8007fc0 <USB_CoreReset>
 80067fc:	4603      	mov	r3, r0
 80067fe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006804:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800680c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680e:	2b01      	cmp	r3, #1
 8006810:	d10b      	bne.n	800682a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f043 0206 	orr.w	r2, r3, #6
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f043 0220 	orr.w	r2, r3, #32
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800682a:	7bfb      	ldrb	r3, [r7, #15]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006836:	b004      	add	sp, #16
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	ffbdffbf 	.word	0xffbdffbf

08006840 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006840:	b480      	push	{r7}
 8006842:	b087      	sub	sp, #28
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	4613      	mov	r3, r2
 800684c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800684e:	79fb      	ldrb	r3, [r7, #7]
 8006850:	2b02      	cmp	r3, #2
 8006852:	d165      	bne.n	8006920 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	4a41      	ldr	r2, [pc, #260]	; (800695c <USB_SetTurnaroundTime+0x11c>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d906      	bls.n	800686a <USB_SetTurnaroundTime+0x2a>
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	4a40      	ldr	r2, [pc, #256]	; (8006960 <USB_SetTurnaroundTime+0x120>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d202      	bcs.n	800686a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006864:	230f      	movs	r3, #15
 8006866:	617b      	str	r3, [r7, #20]
 8006868:	e062      	b.n	8006930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	4a3c      	ldr	r2, [pc, #240]	; (8006960 <USB_SetTurnaroundTime+0x120>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d306      	bcc.n	8006880 <USB_SetTurnaroundTime+0x40>
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	4a3b      	ldr	r2, [pc, #236]	; (8006964 <USB_SetTurnaroundTime+0x124>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d202      	bcs.n	8006880 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800687a:	230e      	movs	r3, #14
 800687c:	617b      	str	r3, [r7, #20]
 800687e:	e057      	b.n	8006930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	4a38      	ldr	r2, [pc, #224]	; (8006964 <USB_SetTurnaroundTime+0x124>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d306      	bcc.n	8006896 <USB_SetTurnaroundTime+0x56>
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	4a37      	ldr	r2, [pc, #220]	; (8006968 <USB_SetTurnaroundTime+0x128>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d202      	bcs.n	8006896 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006890:	230d      	movs	r3, #13
 8006892:	617b      	str	r3, [r7, #20]
 8006894:	e04c      	b.n	8006930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	4a33      	ldr	r2, [pc, #204]	; (8006968 <USB_SetTurnaroundTime+0x128>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d306      	bcc.n	80068ac <USB_SetTurnaroundTime+0x6c>
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	4a32      	ldr	r2, [pc, #200]	; (800696c <USB_SetTurnaroundTime+0x12c>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d802      	bhi.n	80068ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80068a6:	230c      	movs	r3, #12
 80068a8:	617b      	str	r3, [r7, #20]
 80068aa:	e041      	b.n	8006930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	4a2f      	ldr	r2, [pc, #188]	; (800696c <USB_SetTurnaroundTime+0x12c>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d906      	bls.n	80068c2 <USB_SetTurnaroundTime+0x82>
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4a2e      	ldr	r2, [pc, #184]	; (8006970 <USB_SetTurnaroundTime+0x130>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d802      	bhi.n	80068c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80068bc:	230b      	movs	r3, #11
 80068be:	617b      	str	r3, [r7, #20]
 80068c0:	e036      	b.n	8006930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	4a2a      	ldr	r2, [pc, #168]	; (8006970 <USB_SetTurnaroundTime+0x130>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d906      	bls.n	80068d8 <USB_SetTurnaroundTime+0x98>
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	4a29      	ldr	r2, [pc, #164]	; (8006974 <USB_SetTurnaroundTime+0x134>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d802      	bhi.n	80068d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80068d2:	230a      	movs	r3, #10
 80068d4:	617b      	str	r3, [r7, #20]
 80068d6:	e02b      	b.n	8006930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	4a26      	ldr	r2, [pc, #152]	; (8006974 <USB_SetTurnaroundTime+0x134>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d906      	bls.n	80068ee <USB_SetTurnaroundTime+0xae>
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	4a25      	ldr	r2, [pc, #148]	; (8006978 <USB_SetTurnaroundTime+0x138>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d202      	bcs.n	80068ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80068e8:	2309      	movs	r3, #9
 80068ea:	617b      	str	r3, [r7, #20]
 80068ec:	e020      	b.n	8006930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	4a21      	ldr	r2, [pc, #132]	; (8006978 <USB_SetTurnaroundTime+0x138>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d306      	bcc.n	8006904 <USB_SetTurnaroundTime+0xc4>
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	4a20      	ldr	r2, [pc, #128]	; (800697c <USB_SetTurnaroundTime+0x13c>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d802      	bhi.n	8006904 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80068fe:	2308      	movs	r3, #8
 8006900:	617b      	str	r3, [r7, #20]
 8006902:	e015      	b.n	8006930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	4a1d      	ldr	r2, [pc, #116]	; (800697c <USB_SetTurnaroundTime+0x13c>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d906      	bls.n	800691a <USB_SetTurnaroundTime+0xda>
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	4a1c      	ldr	r2, [pc, #112]	; (8006980 <USB_SetTurnaroundTime+0x140>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d202      	bcs.n	800691a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006914:	2307      	movs	r3, #7
 8006916:	617b      	str	r3, [r7, #20]
 8006918:	e00a      	b.n	8006930 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800691a:	2306      	movs	r3, #6
 800691c:	617b      	str	r3, [r7, #20]
 800691e:	e007      	b.n	8006930 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006920:	79fb      	ldrb	r3, [r7, #7]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d102      	bne.n	800692c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006926:	2309      	movs	r3, #9
 8006928:	617b      	str	r3, [r7, #20]
 800692a:	e001      	b.n	8006930 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800692c:	2309      	movs	r3, #9
 800692e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	68da      	ldr	r2, [r3, #12]
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	029b      	lsls	r3, r3, #10
 8006944:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006948:	431a      	orrs	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	371c      	adds	r7, #28
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	00d8acbf 	.word	0x00d8acbf
 8006960:	00e4e1c0 	.word	0x00e4e1c0
 8006964:	00f42400 	.word	0x00f42400
 8006968:	01067380 	.word	0x01067380
 800696c:	011a499f 	.word	0x011a499f
 8006970:	01312cff 	.word	0x01312cff
 8006974:	014ca43f 	.word	0x014ca43f
 8006978:	016e3600 	.word	0x016e3600
 800697c:	01a6ab1f 	.word	0x01a6ab1f
 8006980:	01e84800 	.word	0x01e84800

08006984 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f043 0201 	orr.w	r2, r3, #1
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b083      	sub	sp, #12
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f023 0201 	bic.w	r2, r3, #1
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	460b      	mov	r3, r1
 80069d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80069e4:	78fb      	ldrb	r3, [r7, #3]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d115      	bne.n	8006a16 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80069f6:	2001      	movs	r0, #1
 80069f8:	f7fb fd4a 	bl	8002490 <HAL_Delay>
      ms++;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	3301      	adds	r3, #1
 8006a00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f001 fa4b 	bl	8007e9e <USB_GetMode>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d01e      	beq.n	8006a4c <USB_SetCurrentMode+0x84>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2b31      	cmp	r3, #49	; 0x31
 8006a12:	d9f0      	bls.n	80069f6 <USB_SetCurrentMode+0x2e>
 8006a14:	e01a      	b.n	8006a4c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a16:	78fb      	ldrb	r3, [r7, #3]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d115      	bne.n	8006a48 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a28:	2001      	movs	r0, #1
 8006a2a:	f7fb fd31 	bl	8002490 <HAL_Delay>
      ms++;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	3301      	adds	r3, #1
 8006a32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f001 fa32 	bl	8007e9e <USB_GetMode>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d005      	beq.n	8006a4c <USB_SetCurrentMode+0x84>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2b31      	cmp	r3, #49	; 0x31
 8006a44:	d9f0      	bls.n	8006a28 <USB_SetCurrentMode+0x60>
 8006a46:	e001      	b.n	8006a4c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e005      	b.n	8006a58 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2b32      	cmp	r3, #50	; 0x32
 8006a50:	d101      	bne.n	8006a56 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e000      	b.n	8006a58 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a60:	b084      	sub	sp, #16
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b086      	sub	sp, #24
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006a6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a72:	2300      	movs	r3, #0
 8006a74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	613b      	str	r3, [r7, #16]
 8006a7e:	e009      	b.n	8006a94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	3340      	adds	r3, #64	; 0x40
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4413      	add	r3, r2
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	3301      	adds	r3, #1
 8006a92:	613b      	str	r3, [r7, #16]
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	2b0e      	cmp	r3, #14
 8006a98:	d9f2      	bls.n	8006a80 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d11c      	bne.n	8006ada <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006aae:	f043 0302 	orr.w	r3, r3, #2
 8006ab2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	e005      	b.n	8006ae6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ade:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006aec:	461a      	mov	r2, r3
 8006aee:	2300      	movs	r3, #0
 8006af0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006af8:	4619      	mov	r1, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b00:	461a      	mov	r2, r3
 8006b02:	680b      	ldr	r3, [r1, #0]
 8006b04:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d10c      	bne.n	8006b26 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d104      	bne.n	8006b1c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b12:	2100      	movs	r1, #0
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 f965 	bl	8006de4 <USB_SetDevSpeed>
 8006b1a:	e008      	b.n	8006b2e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f960 	bl	8006de4 <USB_SetDevSpeed>
 8006b24:	e003      	b.n	8006b2e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b26:	2103      	movs	r1, #3
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f95b 	bl	8006de4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b2e:	2110      	movs	r1, #16
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f8f3 	bl	8006d1c <USB_FlushTxFifo>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f91f 	bl	8006d84 <USB_FlushRxFifo>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d001      	beq.n	8006b50 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b56:	461a      	mov	r2, r3
 8006b58:	2300      	movs	r3, #0
 8006b5a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b62:	461a      	mov	r2, r3
 8006b64:	2300      	movs	r3, #0
 8006b66:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b6e:	461a      	mov	r2, r3
 8006b70:	2300      	movs	r3, #0
 8006b72:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b74:	2300      	movs	r3, #0
 8006b76:	613b      	str	r3, [r7, #16]
 8006b78:	e043      	b.n	8006c02 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b90:	d118      	bne.n	8006bc4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10a      	bne.n	8006bae <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	015a      	lsls	r2, r3, #5
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006baa:	6013      	str	r3, [r2, #0]
 8006bac:	e013      	b.n	8006bd6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	015a      	lsls	r2, r3, #5
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bba:	461a      	mov	r2, r3
 8006bbc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	e008      	b.n	8006bd6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be2:	461a      	mov	r2, r3
 8006be4:	2300      	movs	r3, #0
 8006be6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006bfa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	613b      	str	r3, [r7, #16]
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d3b7      	bcc.n	8006b7a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	613b      	str	r3, [r7, #16]
 8006c0e:	e043      	b.n	8006c98 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	015a      	lsls	r2, r3, #5
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c26:	d118      	bne.n	8006c5a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10a      	bne.n	8006c44 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c40:	6013      	str	r3, [r2, #0]
 8006c42:	e013      	b.n	8006c6c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c50:	461a      	mov	r2, r3
 8006c52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	e008      	b.n	8006c6c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c66:	461a      	mov	r2, r3
 8006c68:	2300      	movs	r3, #0
 8006c6a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c78:	461a      	mov	r2, r3
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	3301      	adds	r3, #1
 8006c96:	613b      	str	r3, [r7, #16]
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d3b7      	bcc.n	8006c10 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cb2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006cc0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d105      	bne.n	8006cd4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	f043 0210 	orr.w	r2, r3, #16
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	699a      	ldr	r2, [r3, #24]
 8006cd8:	4b0e      	ldr	r3, [pc, #56]	; (8006d14 <USB_DevInit+0x2b4>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d005      	beq.n	8006cf2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	f043 0208 	orr.w	r2, r3, #8
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d105      	bne.n	8006d04 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	699a      	ldr	r2, [r3, #24]
 8006cfc:	4b06      	ldr	r3, [pc, #24]	; (8006d18 <USB_DevInit+0x2b8>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3718      	adds	r7, #24
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d10:	b004      	add	sp, #16
 8006d12:	4770      	bx	lr
 8006d14:	803c3800 	.word	0x803c3800
 8006d18:	40000004 	.word	0x40000004

08006d1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d26:	2300      	movs	r3, #0
 8006d28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4a13      	ldr	r2, [pc, #76]	; (8006d80 <USB_FlushTxFifo+0x64>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d901      	bls.n	8006d3c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e01b      	b.n	8006d74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	daf2      	bge.n	8006d2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d44:	2300      	movs	r3, #0
 8006d46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	019b      	lsls	r3, r3, #6
 8006d4c:	f043 0220 	orr.w	r2, r3, #32
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	3301      	adds	r3, #1
 8006d58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	4a08      	ldr	r2, [pc, #32]	; (8006d80 <USB_FlushTxFifo+0x64>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d901      	bls.n	8006d66 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e006      	b.n	8006d74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	f003 0320 	and.w	r3, r3, #32
 8006d6e:	2b20      	cmp	r3, #32
 8006d70:	d0f0      	beq.n	8006d54 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3714      	adds	r7, #20
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	00030d40 	.word	0x00030d40

08006d84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	3301      	adds	r3, #1
 8006d94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4a11      	ldr	r2, [pc, #68]	; (8006de0 <USB_FlushRxFifo+0x5c>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d901      	bls.n	8006da2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e018      	b.n	8006dd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	daf2      	bge.n	8006d90 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2210      	movs	r2, #16
 8006db2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	3301      	adds	r3, #1
 8006db8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	4a08      	ldr	r2, [pc, #32]	; (8006de0 <USB_FlushRxFifo+0x5c>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d901      	bls.n	8006dc6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e006      	b.n	8006dd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	f003 0310 	and.w	r3, r3, #16
 8006dce:	2b10      	cmp	r3, #16
 8006dd0:	d0f0      	beq.n	8006db4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	00030d40 	.word	0x00030d40

08006de4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	460b      	mov	r3, r1
 8006dee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	78fb      	ldrb	r3, [r7, #3]
 8006dfe:	68f9      	ldr	r1, [r7, #12]
 8006e00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e04:	4313      	orrs	r3, r2
 8006e06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b087      	sub	sp, #28
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f003 0306 	and.w	r3, r3, #6
 8006e2e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d102      	bne.n	8006e3c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006e36:	2300      	movs	r3, #0
 8006e38:	75fb      	strb	r3, [r7, #23]
 8006e3a:	e00a      	b.n	8006e52 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d002      	beq.n	8006e48 <USB_GetDevSpeed+0x32>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2b06      	cmp	r3, #6
 8006e46:	d102      	bne.n	8006e4e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006e48:	2302      	movs	r3, #2
 8006e4a:	75fb      	strb	r3, [r7, #23]
 8006e4c:	e001      	b.n	8006e52 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006e4e:	230f      	movs	r3, #15
 8006e50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	371c      	adds	r7, #28
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	785b      	ldrb	r3, [r3, #1]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d139      	bne.n	8006ef0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e82:	69da      	ldr	r2, [r3, #28]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	f003 030f 	and.w	r3, r3, #15
 8006e8c:	2101      	movs	r1, #1
 8006e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	68f9      	ldr	r1, [r7, #12]
 8006e96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d153      	bne.n	8006f5c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	791b      	ldrb	r3, [r3, #4]
 8006ece:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ed0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	059b      	lsls	r3, r3, #22
 8006ed6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ed8:	431a      	orrs	r2, r3
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	0159      	lsls	r1, r3, #5
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	440b      	add	r3, r1
 8006ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	4b20      	ldr	r3, [pc, #128]	; (8006f6c <USB_ActivateEndpoint+0x10c>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	600b      	str	r3, [r1, #0]
 8006eee:	e035      	b.n	8006f5c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ef6:	69da      	ldr	r2, [r3, #28]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	f003 030f 	and.w	r3, r3, #15
 8006f00:	2101      	movs	r1, #1
 8006f02:	fa01 f303 	lsl.w	r3, r1, r3
 8006f06:	041b      	lsls	r3, r3, #16
 8006f08:	68f9      	ldr	r1, [r7, #12]
 8006f0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d119      	bne.n	8006f5c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	791b      	ldrb	r3, [r3, #4]
 8006f42:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006f44:	430b      	orrs	r3, r1
 8006f46:	431a      	orrs	r2, r3
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	0159      	lsls	r1, r3, #5
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	440b      	add	r3, r1
 8006f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f54:	4619      	mov	r1, r3
 8006f56:	4b05      	ldr	r3, [pc, #20]	; (8006f6c <USB_ActivateEndpoint+0x10c>)
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	10008000 	.word	0x10008000

08006f70 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	785b      	ldrb	r3, [r3, #1]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d161      	bne.n	8007050 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fa2:	d11f      	bne.n	8006fe4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	015a      	lsls	r2, r3, #5
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	0151      	lsls	r1, r2, #5
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	440a      	add	r2, r1
 8006fba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006fc2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	0151      	lsls	r1, r2, #5
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	440a      	add	r2, r1
 8006fda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fe2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	f003 030f 	and.w	r3, r3, #15
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	43db      	mvns	r3, r3
 8006ffe:	68f9      	ldr	r1, [r7, #12]
 8007000:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007004:	4013      	ands	r3, r2
 8007006:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800700e:	69da      	ldr	r2, [r3, #28]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	f003 030f 	and.w	r3, r3, #15
 8007018:	2101      	movs	r1, #1
 800701a:	fa01 f303 	lsl.w	r3, r1, r3
 800701e:	b29b      	uxth	r3, r3
 8007020:	43db      	mvns	r3, r3
 8007022:	68f9      	ldr	r1, [r7, #12]
 8007024:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007028:	4013      	ands	r3, r2
 800702a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	4413      	add	r3, r2
 8007034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	0159      	lsls	r1, r3, #5
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	440b      	add	r3, r1
 8007042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007046:	4619      	mov	r1, r3
 8007048:	4b35      	ldr	r3, [pc, #212]	; (8007120 <USB_DeactivateEndpoint+0x1b0>)
 800704a:	4013      	ands	r3, r2
 800704c:	600b      	str	r3, [r1, #0]
 800704e:	e060      	b.n	8007112 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007062:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007066:	d11f      	bne.n	80070a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	4413      	add	r3, r2
 8007070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	0151      	lsls	r1, r2, #5
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	440a      	add	r2, r1
 800707e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007082:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007086:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	4413      	add	r3, r2
 8007090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	0151      	lsls	r1, r2, #5
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	440a      	add	r2, r1
 800709e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	f003 030f 	and.w	r3, r3, #15
 80070b8:	2101      	movs	r1, #1
 80070ba:	fa01 f303 	lsl.w	r3, r1, r3
 80070be:	041b      	lsls	r3, r3, #16
 80070c0:	43db      	mvns	r3, r3
 80070c2:	68f9      	ldr	r1, [r7, #12]
 80070c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070c8:	4013      	ands	r3, r2
 80070ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d2:	69da      	ldr	r2, [r3, #28]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	f003 030f 	and.w	r3, r3, #15
 80070dc:	2101      	movs	r1, #1
 80070de:	fa01 f303 	lsl.w	r3, r1, r3
 80070e2:	041b      	lsls	r3, r3, #16
 80070e4:	43db      	mvns	r3, r3
 80070e6:	68f9      	ldr	r1, [r7, #12]
 80070e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070ec:	4013      	ands	r3, r2
 80070ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	0159      	lsls	r1, r3, #5
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	440b      	add	r3, r1
 8007106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710a:	4619      	mov	r1, r3
 800710c:	4b05      	ldr	r3, [pc, #20]	; (8007124 <USB_DeactivateEndpoint+0x1b4>)
 800710e:	4013      	ands	r3, r2
 8007110:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	ec337800 	.word	0xec337800
 8007124:	eff37800 	.word	0xeff37800

08007128 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b08a      	sub	sp, #40	; 0x28
 800712c:	af02      	add	r7, sp, #8
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	4613      	mov	r3, r2
 8007134:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	785b      	ldrb	r3, [r3, #1]
 8007144:	2b01      	cmp	r3, #1
 8007146:	f040 8163 	bne.w	8007410 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d132      	bne.n	80071b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	015a      	lsls	r2, r3, #5
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	4413      	add	r3, r2
 800715a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800715e:	691a      	ldr	r2, [r3, #16]
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	0159      	lsls	r1, r3, #5
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	440b      	add	r3, r1
 8007168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800716c:	4619      	mov	r1, r3
 800716e:	4ba5      	ldr	r3, [pc, #660]	; (8007404 <USB_EPStartXfer+0x2dc>)
 8007170:	4013      	ands	r3, r2
 8007172:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	69ba      	ldr	r2, [r7, #24]
 8007184:	0151      	lsls	r1, r2, #5
 8007186:	69fa      	ldr	r2, [r7, #28]
 8007188:	440a      	add	r2, r1
 800718a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800718e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007192:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	4413      	add	r3, r2
 800719c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a0:	691a      	ldr	r2, [r3, #16]
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	0159      	lsls	r1, r3, #5
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	440b      	add	r3, r1
 80071aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ae:	4619      	mov	r1, r3
 80071b0:	4b95      	ldr	r3, [pc, #596]	; (8007408 <USB_EPStartXfer+0x2e0>)
 80071b2:	4013      	ands	r3, r2
 80071b4:	610b      	str	r3, [r1, #16]
 80071b6:	e074      	b.n	80072a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	015a      	lsls	r2, r3, #5
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	4413      	add	r3, r2
 80071c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c4:	691a      	ldr	r2, [r3, #16]
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	0159      	lsls	r1, r3, #5
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	440b      	add	r3, r1
 80071ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d2:	4619      	mov	r1, r3
 80071d4:	4b8c      	ldr	r3, [pc, #560]	; (8007408 <USB_EPStartXfer+0x2e0>)
 80071d6:	4013      	ands	r3, r2
 80071d8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	015a      	lsls	r2, r3, #5
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	4413      	add	r3, r2
 80071e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e6:	691a      	ldr	r2, [r3, #16]
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	0159      	lsls	r1, r3, #5
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	440b      	add	r3, r1
 80071f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f4:	4619      	mov	r1, r3
 80071f6:	4b83      	ldr	r3, [pc, #524]	; (8007404 <USB_EPStartXfer+0x2dc>)
 80071f8:	4013      	ands	r3, r2
 80071fa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007208:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	6999      	ldr	r1, [r3, #24]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	440b      	add	r3, r1
 8007214:	1e59      	subs	r1, r3, #1
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	fbb1 f3f3 	udiv	r3, r1, r3
 800721e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007220:	4b7a      	ldr	r3, [pc, #488]	; (800740c <USB_EPStartXfer+0x2e4>)
 8007222:	400b      	ands	r3, r1
 8007224:	69b9      	ldr	r1, [r7, #24]
 8007226:	0148      	lsls	r0, r1, #5
 8007228:	69f9      	ldr	r1, [r7, #28]
 800722a:	4401      	add	r1, r0
 800722c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007230:	4313      	orrs	r3, r2
 8007232:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	4413      	add	r3, r2
 800723c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007240:	691a      	ldr	r2, [r3, #16]
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800724a:	69b9      	ldr	r1, [r7, #24]
 800724c:	0148      	lsls	r0, r1, #5
 800724e:	69f9      	ldr	r1, [r7, #28]
 8007250:	4401      	add	r1, r0
 8007252:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007256:	4313      	orrs	r3, r2
 8007258:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	791b      	ldrb	r3, [r3, #4]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d11f      	bne.n	80072a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	015a      	lsls	r2, r3, #5
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	4413      	add	r3, r2
 800726a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	69ba      	ldr	r2, [r7, #24]
 8007272:	0151      	lsls	r1, r2, #5
 8007274:	69fa      	ldr	r2, [r7, #28]
 8007276:	440a      	add	r2, r1
 8007278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800727c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007280:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	015a      	lsls	r2, r3, #5
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	4413      	add	r3, r2
 800728a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	69ba      	ldr	r2, [r7, #24]
 8007292:	0151      	lsls	r1, r2, #5
 8007294:	69fa      	ldr	r2, [r7, #28]
 8007296:	440a      	add	r2, r1
 8007298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800729c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80072a2:	79fb      	ldrb	r3, [r7, #7]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d14b      	bne.n	8007340 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d009      	beq.n	80072c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	015a      	lsls	r2, r3, #5
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072bc:	461a      	mov	r2, r3
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	791b      	ldrb	r3, [r3, #4]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d128      	bne.n	800731e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d110      	bne.n	80072fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69ba      	ldr	r2, [r7, #24]
 80072ec:	0151      	lsls	r1, r2, #5
 80072ee:	69fa      	ldr	r2, [r7, #28]
 80072f0:	440a      	add	r2, r1
 80072f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072fa:	6013      	str	r3, [r2, #0]
 80072fc:	e00f      	b.n	800731e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	015a      	lsls	r2, r3, #5
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	4413      	add	r3, r2
 8007306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	69ba      	ldr	r2, [r7, #24]
 800730e:	0151      	lsls	r1, r2, #5
 8007310:	69fa      	ldr	r2, [r7, #28]
 8007312:	440a      	add	r2, r1
 8007314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800731c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	015a      	lsls	r2, r3, #5
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	4413      	add	r3, r2
 8007326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	69ba      	ldr	r2, [r7, #24]
 800732e:	0151      	lsls	r1, r2, #5
 8007330:	69fa      	ldr	r2, [r7, #28]
 8007332:	440a      	add	r2, r1
 8007334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007338:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800733c:	6013      	str	r3, [r2, #0]
 800733e:	e137      	b.n	80075b0 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	015a      	lsls	r2, r3, #5
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	4413      	add	r3, r2
 8007348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	69ba      	ldr	r2, [r7, #24]
 8007350:	0151      	lsls	r1, r2, #5
 8007352:	69fa      	ldr	r2, [r7, #28]
 8007354:	440a      	add	r2, r1
 8007356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800735a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800735e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	791b      	ldrb	r3, [r3, #4]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d015      	beq.n	8007394 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 811f 	beq.w	80075b0 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	f003 030f 	and.w	r3, r3, #15
 8007382:	2101      	movs	r1, #1
 8007384:	fa01 f303 	lsl.w	r3, r1, r3
 8007388:	69f9      	ldr	r1, [r7, #28]
 800738a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800738e:	4313      	orrs	r3, r2
 8007390:	634b      	str	r3, [r1, #52]	; 0x34
 8007392:	e10d      	b.n	80075b0 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d110      	bne.n	80073c6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	015a      	lsls	r2, r3, #5
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	4413      	add	r3, r2
 80073ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	69ba      	ldr	r2, [r7, #24]
 80073b4:	0151      	lsls	r1, r2, #5
 80073b6:	69fa      	ldr	r2, [r7, #28]
 80073b8:	440a      	add	r2, r1
 80073ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073c2:	6013      	str	r3, [r2, #0]
 80073c4:	e00f      	b.n	80073e6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	69ba      	ldr	r2, [r7, #24]
 80073d6:	0151      	lsls	r1, r2, #5
 80073d8:	69fa      	ldr	r2, [r7, #28]
 80073da:	440a      	add	r2, r1
 80073dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	6919      	ldr	r1, [r3, #16]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	781a      	ldrb	r2, [r3, #0]
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	b298      	uxth	r0, r3
 80073f4:	79fb      	ldrb	r3, [r7, #7]
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	4603      	mov	r3, r0
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f000 faea 	bl	80079d4 <USB_WritePacket>
 8007400:	e0d6      	b.n	80075b0 <USB_EPStartXfer+0x488>
 8007402:	bf00      	nop
 8007404:	e007ffff 	.word	0xe007ffff
 8007408:	fff80000 	.word	0xfff80000
 800740c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800741c:	691a      	ldr	r2, [r3, #16]
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	0159      	lsls	r1, r3, #5
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	440b      	add	r3, r1
 8007426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800742a:	4619      	mov	r1, r3
 800742c:	4b63      	ldr	r3, [pc, #396]	; (80075bc <USB_EPStartXfer+0x494>)
 800742e:	4013      	ands	r3, r2
 8007430:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	015a      	lsls	r2, r3, #5
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	4413      	add	r3, r2
 800743a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800743e:	691a      	ldr	r2, [r3, #16]
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	0159      	lsls	r1, r3, #5
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	440b      	add	r3, r1
 8007448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800744c:	4619      	mov	r1, r3
 800744e:	4b5c      	ldr	r3, [pc, #368]	; (80075c0 <USB_EPStartXfer+0x498>)
 8007450:	4013      	ands	r3, r2
 8007452:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d123      	bne.n	80074a4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	015a      	lsls	r2, r3, #5
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	4413      	add	r3, r2
 8007464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007468:	691a      	ldr	r2, [r3, #16]
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007472:	69b9      	ldr	r1, [r7, #24]
 8007474:	0148      	lsls	r0, r1, #5
 8007476:	69f9      	ldr	r1, [r7, #28]
 8007478:	4401      	add	r1, r0
 800747a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800747e:	4313      	orrs	r3, r2
 8007480:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	015a      	lsls	r2, r3, #5
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	4413      	add	r3, r2
 800748a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	69ba      	ldr	r2, [r7, #24]
 8007492:	0151      	lsls	r1, r2, #5
 8007494:	69fa      	ldr	r2, [r7, #28]
 8007496:	440a      	add	r2, r1
 8007498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800749c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074a0:	6113      	str	r3, [r2, #16]
 80074a2:	e037      	b.n	8007514 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	699a      	ldr	r2, [r3, #24]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	4413      	add	r3, r2
 80074ae:	1e5a      	subs	r2, r3, #1
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074b8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	8afa      	ldrh	r2, [r7, #22]
 80074c0:	fb03 f202 	mul.w	r2, r3, r2
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	015a      	lsls	r2, r3, #5
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	4413      	add	r3, r2
 80074d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d4:	691a      	ldr	r2, [r3, #16]
 80074d6:	8afb      	ldrh	r3, [r7, #22]
 80074d8:	04d9      	lsls	r1, r3, #19
 80074da:	4b3a      	ldr	r3, [pc, #232]	; (80075c4 <USB_EPStartXfer+0x49c>)
 80074dc:	400b      	ands	r3, r1
 80074de:	69b9      	ldr	r1, [r7, #24]
 80074e0:	0148      	lsls	r0, r1, #5
 80074e2:	69f9      	ldr	r1, [r7, #28]
 80074e4:	4401      	add	r1, r0
 80074e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80074ea:	4313      	orrs	r3, r2
 80074ec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	015a      	lsls	r2, r3, #5
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	4413      	add	r3, r2
 80074f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074fa:	691a      	ldr	r2, [r3, #16]
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	69db      	ldr	r3, [r3, #28]
 8007500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007504:	69b9      	ldr	r1, [r7, #24]
 8007506:	0148      	lsls	r0, r1, #5
 8007508:	69f9      	ldr	r1, [r7, #28]
 800750a:	4401      	add	r1, r0
 800750c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007510:	4313      	orrs	r3, r2
 8007512:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007514:	79fb      	ldrb	r3, [r7, #7]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d10d      	bne.n	8007536 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d009      	beq.n	8007536 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	6919      	ldr	r1, [r3, #16]
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	015a      	lsls	r2, r3, #5
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	4413      	add	r3, r2
 800752e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007532:	460a      	mov	r2, r1
 8007534:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	791b      	ldrb	r3, [r3, #4]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d128      	bne.n	8007590 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800754a:	2b00      	cmp	r3, #0
 800754c:	d110      	bne.n	8007570 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	015a      	lsls	r2, r3, #5
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	4413      	add	r3, r2
 8007556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	69ba      	ldr	r2, [r7, #24]
 800755e:	0151      	lsls	r1, r2, #5
 8007560:	69fa      	ldr	r2, [r7, #28]
 8007562:	440a      	add	r2, r1
 8007564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007568:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800756c:	6013      	str	r3, [r2, #0]
 800756e:	e00f      	b.n	8007590 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	015a      	lsls	r2, r3, #5
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	4413      	add	r3, r2
 8007578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	69ba      	ldr	r2, [r7, #24]
 8007580:	0151      	lsls	r1, r2, #5
 8007582:	69fa      	ldr	r2, [r7, #28]
 8007584:	440a      	add	r2, r1
 8007586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800758a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800758e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	4413      	add	r3, r2
 8007598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	69ba      	ldr	r2, [r7, #24]
 80075a0:	0151      	lsls	r1, r2, #5
 80075a2:	69fa      	ldr	r2, [r7, #28]
 80075a4:	440a      	add	r2, r1
 80075a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3720      	adds	r7, #32
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	fff80000 	.word	0xfff80000
 80075c0:	e007ffff 	.word	0xe007ffff
 80075c4:	1ff80000 	.word	0x1ff80000

080075c8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b087      	sub	sp, #28
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	4613      	mov	r3, r2
 80075d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	785b      	ldrb	r3, [r3, #1]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	f040 80ce 	bne.w	8007786 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d132      	bne.n	8007658 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	015a      	lsls	r2, r3, #5
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	4413      	add	r3, r2
 80075fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075fe:	691a      	ldr	r2, [r3, #16]
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	0159      	lsls	r1, r3, #5
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	440b      	add	r3, r1
 8007608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800760c:	4619      	mov	r1, r3
 800760e:	4b9a      	ldr	r3, [pc, #616]	; (8007878 <USB_EP0StartXfer+0x2b0>)
 8007610:	4013      	ands	r3, r2
 8007612:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	4413      	add	r3, r2
 800761c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	0151      	lsls	r1, r2, #5
 8007626:	697a      	ldr	r2, [r7, #20]
 8007628:	440a      	add	r2, r1
 800762a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800762e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007632:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	015a      	lsls	r2, r3, #5
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	4413      	add	r3, r2
 800763c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007640:	691a      	ldr	r2, [r3, #16]
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	0159      	lsls	r1, r3, #5
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	440b      	add	r3, r1
 800764a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800764e:	4619      	mov	r1, r3
 8007650:	4b8a      	ldr	r3, [pc, #552]	; (800787c <USB_EP0StartXfer+0x2b4>)
 8007652:	4013      	ands	r3, r2
 8007654:	610b      	str	r3, [r1, #16]
 8007656:	e04e      	b.n	80076f6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	015a      	lsls	r2, r3, #5
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	4413      	add	r3, r2
 8007660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007664:	691a      	ldr	r2, [r3, #16]
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	0159      	lsls	r1, r3, #5
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	440b      	add	r3, r1
 800766e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007672:	4619      	mov	r1, r3
 8007674:	4b81      	ldr	r3, [pc, #516]	; (800787c <USB_EP0StartXfer+0x2b4>)
 8007676:	4013      	ands	r3, r2
 8007678:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	4413      	add	r3, r2
 8007682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007686:	691a      	ldr	r2, [r3, #16]
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	0159      	lsls	r1, r3, #5
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	440b      	add	r3, r1
 8007690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007694:	4619      	mov	r1, r3
 8007696:	4b78      	ldr	r3, [pc, #480]	; (8007878 <USB_EP0StartXfer+0x2b0>)
 8007698:	4013      	ands	r3, r2
 800769a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	699a      	ldr	r2, [r3, #24]
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d903      	bls.n	80076b0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	68da      	ldr	r2, [r3, #12]
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	015a      	lsls	r2, r3, #5
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	4413      	add	r3, r2
 80076b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	0151      	lsls	r1, r2, #5
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	440a      	add	r2, r1
 80076c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	015a      	lsls	r2, r3, #5
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	4413      	add	r3, r2
 80076d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076dc:	691a      	ldr	r2, [r3, #16]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076e6:	6939      	ldr	r1, [r7, #16]
 80076e8:	0148      	lsls	r0, r1, #5
 80076ea:	6979      	ldr	r1, [r7, #20]
 80076ec:	4401      	add	r1, r0
 80076ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80076f2:	4313      	orrs	r3, r2
 80076f4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80076f6:	79fb      	ldrb	r3, [r7, #7]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d11e      	bne.n	800773a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d009      	beq.n	8007718 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	015a      	lsls	r2, r3, #5
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	4413      	add	r3, r2
 800770c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007710:	461a      	mov	r2, r3
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	015a      	lsls	r2, r3, #5
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	4413      	add	r3, r2
 8007720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	0151      	lsls	r1, r2, #5
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	440a      	add	r2, r1
 800772e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007732:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	e097      	b.n	800786a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	4413      	add	r3, r2
 8007742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	0151      	lsls	r1, r2, #5
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	440a      	add	r2, r1
 8007750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007754:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007758:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	2b00      	cmp	r3, #0
 8007760:	f000 8083 	beq.w	800786a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800776a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	f003 030f 	and.w	r3, r3, #15
 8007774:	2101      	movs	r1, #1
 8007776:	fa01 f303 	lsl.w	r3, r1, r3
 800777a:	6979      	ldr	r1, [r7, #20]
 800777c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007780:	4313      	orrs	r3, r2
 8007782:	634b      	str	r3, [r1, #52]	; 0x34
 8007784:	e071      	b.n	800786a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	015a      	lsls	r2, r3, #5
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	4413      	add	r3, r2
 800778e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007792:	691a      	ldr	r2, [r3, #16]
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	0159      	lsls	r1, r3, #5
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	440b      	add	r3, r1
 800779c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a0:	4619      	mov	r1, r3
 80077a2:	4b36      	ldr	r3, [pc, #216]	; (800787c <USB_EP0StartXfer+0x2b4>)
 80077a4:	4013      	ands	r3, r2
 80077a6:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	015a      	lsls	r2, r3, #5
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	4413      	add	r3, r2
 80077b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b4:	691a      	ldr	r2, [r3, #16]
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	0159      	lsls	r1, r3, #5
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	440b      	add	r3, r1
 80077be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c2:	4619      	mov	r1, r3
 80077c4:	4b2c      	ldr	r3, [pc, #176]	; (8007878 <USB_EP0StartXfer+0x2b0>)
 80077c6:	4013      	ands	r3, r2
 80077c8:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d003      	beq.n	80077da <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	68da      	ldr	r2, [r3, #12]
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	68da      	ldr	r2, [r3, #12]
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	015a      	lsls	r2, r3, #5
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	4413      	add	r3, r2
 80077ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	0151      	lsls	r1, r2, #5
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	440a      	add	r2, r1
 80077f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007800:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	015a      	lsls	r2, r3, #5
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	4413      	add	r3, r2
 800780a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800780e:	691a      	ldr	r2, [r3, #16]
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	69db      	ldr	r3, [r3, #28]
 8007814:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007818:	6939      	ldr	r1, [r7, #16]
 800781a:	0148      	lsls	r0, r1, #5
 800781c:	6979      	ldr	r1, [r7, #20]
 800781e:	4401      	add	r1, r0
 8007820:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007824:	4313      	orrs	r3, r2
 8007826:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007828:	79fb      	ldrb	r3, [r7, #7]
 800782a:	2b01      	cmp	r3, #1
 800782c:	d10d      	bne.n	800784a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d009      	beq.n	800784a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	6919      	ldr	r1, [r3, #16]
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	015a      	lsls	r2, r3, #5
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	4413      	add	r3, r2
 8007842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007846:	460a      	mov	r2, r1
 8007848:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	015a      	lsls	r2, r3, #5
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	4413      	add	r3, r2
 8007852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	0151      	lsls	r1, r2, #5
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	440a      	add	r2, r1
 8007860:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007864:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007868:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	371c      	adds	r7, #28
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr
 8007878:	e007ffff 	.word	0xe007ffff
 800787c:	fff80000 	.word	0xfff80000

08007880 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007880:	b480      	push	{r7}
 8007882:	b087      	sub	sp, #28
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800788a:	2300      	movs	r3, #0
 800788c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800788e:	2300      	movs	r3, #0
 8007890:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	785b      	ldrb	r3, [r3, #1]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d14a      	bne.n	8007934 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	015a      	lsls	r2, r3, #5
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078b6:	f040 8086 	bne.w	80079c6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	7812      	ldrb	r2, [r2, #0]
 80078ce:	0151      	lsls	r1, r2, #5
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	440a      	add	r2, r1
 80078d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	015a      	lsls	r2, r3, #5
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	4413      	add	r3, r2
 80078e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	7812      	ldrb	r2, [r2, #0]
 80078f2:	0151      	lsls	r1, r2, #5
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	440a      	add	r2, r1
 80078f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007900:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	3301      	adds	r3, #1
 8007906:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f242 7210 	movw	r2, #10000	; 0x2710
 800790e:	4293      	cmp	r3, r2
 8007910:	d902      	bls.n	8007918 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	75fb      	strb	r3, [r7, #23]
          break;
 8007916:	e056      	b.n	80079c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	015a      	lsls	r2, r3, #5
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	4413      	add	r3, r2
 8007922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800792c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007930:	d0e7      	beq.n	8007902 <USB_EPStopXfer+0x82>
 8007932:	e048      	b.n	80079c6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	015a      	lsls	r2, r3, #5
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	4413      	add	r3, r2
 800793e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007948:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800794c:	d13b      	bne.n	80079c6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	015a      	lsls	r2, r3, #5
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	4413      	add	r3, r2
 8007958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	7812      	ldrb	r2, [r2, #0]
 8007962:	0151      	lsls	r1, r2, #5
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	440a      	add	r2, r1
 8007968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800796c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007970:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	015a      	lsls	r2, r3, #5
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	4413      	add	r3, r2
 800797c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	7812      	ldrb	r2, [r2, #0]
 8007986:	0151      	lsls	r1, r2, #5
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	440a      	add	r2, r1
 800798c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007990:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007994:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	3301      	adds	r3, #1
 800799a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f242 7210 	movw	r2, #10000	; 0x2710
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d902      	bls.n	80079ac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	75fb      	strb	r3, [r7, #23]
          break;
 80079aa:	e00c      	b.n	80079c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	015a      	lsls	r2, r3, #5
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	4413      	add	r3, r2
 80079b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079c4:	d0e7      	beq.n	8007996 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	371c      	adds	r7, #28
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b089      	sub	sp, #36	; 0x24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	4611      	mov	r1, r2
 80079e0:	461a      	mov	r2, r3
 80079e2:	460b      	mov	r3, r1
 80079e4:	71fb      	strb	r3, [r7, #7]
 80079e6:	4613      	mov	r3, r2
 80079e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80079f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d123      	bne.n	8007a42 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80079fa:	88bb      	ldrh	r3, [r7, #4]
 80079fc:	3303      	adds	r3, #3
 80079fe:	089b      	lsrs	r3, r3, #2
 8007a00:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007a02:	2300      	movs	r3, #0
 8007a04:	61bb      	str	r3, [r7, #24]
 8007a06:	e018      	b.n	8007a3a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007a08:	79fb      	ldrb	r3, [r7, #7]
 8007a0a:	031a      	lsls	r2, r3, #12
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a14:	461a      	mov	r2, r3
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	3301      	adds	r3, #1
 8007a26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	3301      	adds	r3, #1
 8007a32:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	3301      	adds	r3, #1
 8007a38:	61bb      	str	r3, [r7, #24]
 8007a3a:	69ba      	ldr	r2, [r7, #24]
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d3e2      	bcc.n	8007a08 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3724      	adds	r7, #36	; 0x24
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b08b      	sub	sp, #44	; 0x2c
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007a66:	88fb      	ldrh	r3, [r7, #6]
 8007a68:	089b      	lsrs	r3, r3, #2
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007a6e:	88fb      	ldrh	r3, [r7, #6]
 8007a70:	f003 0303 	and.w	r3, r3, #3
 8007a74:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007a76:	2300      	movs	r3, #0
 8007a78:	623b      	str	r3, [r7, #32]
 8007a7a:	e014      	b.n	8007aa6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a86:	601a      	str	r2, [r3, #0]
    pDest++;
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a90:	3301      	adds	r3, #1
 8007a92:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a96:	3301      	adds	r3, #1
 8007a98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007aa0:	6a3b      	ldr	r3, [r7, #32]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	623b      	str	r3, [r7, #32]
 8007aa6:	6a3a      	ldr	r2, [r7, #32]
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d3e6      	bcc.n	8007a7c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007aae:	8bfb      	ldrh	r3, [r7, #30]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d01e      	beq.n	8007af2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007abe:	461a      	mov	r2, r3
 8007ac0:	f107 0310 	add.w	r3, r7, #16
 8007ac4:	6812      	ldr	r2, [r2, #0]
 8007ac6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007ac8:	693a      	ldr	r2, [r7, #16]
 8007aca:	6a3b      	ldr	r3, [r7, #32]
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	00db      	lsls	r3, r3, #3
 8007ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ad4:	b2da      	uxtb	r2, r3
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad8:	701a      	strb	r2, [r3, #0]
      i++;
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	3301      	adds	r3, #1
 8007ade:	623b      	str	r3, [r7, #32]
      pDest++;
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007ae6:	8bfb      	ldrh	r3, [r7, #30]
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007aec:	8bfb      	ldrh	r3, [r7, #30]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1ea      	bne.n	8007ac8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	372c      	adds	r7, #44	; 0x2c
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	785b      	ldrb	r3, [r3, #1]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d12c      	bne.n	8007b76 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	015a      	lsls	r2, r3, #5
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	4413      	add	r3, r2
 8007b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	db12      	blt.n	8007b54 <USB_EPSetStall+0x54>
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00f      	beq.n	8007b54 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	015a      	lsls	r2, r3, #5
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	0151      	lsls	r1, r2, #5
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	440a      	add	r2, r1
 8007b4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b52:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	015a      	lsls	r2, r3, #5
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	0151      	lsls	r1, r2, #5
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	440a      	add	r2, r1
 8007b6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b72:	6013      	str	r3, [r2, #0]
 8007b74:	e02b      	b.n	8007bce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	015a      	lsls	r2, r3, #5
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	db12      	blt.n	8007bae <USB_EPSetStall+0xae>
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00f      	beq.n	8007bae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	015a      	lsls	r2, r3, #5
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	4413      	add	r3, r2
 8007b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	0151      	lsls	r1, r2, #5
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	440a      	add	r2, r1
 8007ba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ba8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	015a      	lsls	r2, r3, #5
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	0151      	lsls	r1, r2, #5
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	440a      	add	r2, r1
 8007bc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bcc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3714      	adds	r7, #20
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	785b      	ldrb	r3, [r3, #1]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d128      	bne.n	8007c4a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	015a      	lsls	r2, r3, #5
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	4413      	add	r3, r2
 8007c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68ba      	ldr	r2, [r7, #8]
 8007c08:	0151      	lsls	r1, r2, #5
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	440a      	add	r2, r1
 8007c0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c16:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	791b      	ldrb	r3, [r3, #4]
 8007c1c:	2b03      	cmp	r3, #3
 8007c1e:	d003      	beq.n	8007c28 <USB_EPClearStall+0x4c>
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	791b      	ldrb	r3, [r3, #4]
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d138      	bne.n	8007c9a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	015a      	lsls	r2, r3, #5
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4413      	add	r3, r2
 8007c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	0151      	lsls	r1, r2, #5
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	440a      	add	r2, r1
 8007c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c46:	6013      	str	r3, [r2, #0]
 8007c48:	e027      	b.n	8007c9a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	0151      	lsls	r1, r2, #5
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	440a      	add	r2, r1
 8007c60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c68:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	791b      	ldrb	r3, [r3, #4]
 8007c6e:	2b03      	cmp	r3, #3
 8007c70:	d003      	beq.n	8007c7a <USB_EPClearStall+0x9e>
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	791b      	ldrb	r3, [r3, #4]
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d10f      	bne.n	8007c9a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	015a      	lsls	r2, r3, #5
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	4413      	add	r3, r2
 8007c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68ba      	ldr	r2, [r7, #8]
 8007c8a:	0151      	lsls	r1, r2, #5
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	440a      	add	r2, r1
 8007c90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c98:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cc6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007cca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	78fb      	ldrb	r3, [r7, #3]
 8007cd6:	011b      	lsls	r3, r3, #4
 8007cd8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007cdc:	68f9      	ldr	r1, [r7, #12]
 8007cde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d0e:	f023 0303 	bic.w	r3, r3, #3
 8007d12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d22:	f023 0302 	bic.w	r3, r3, #2
 8007d26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3714      	adds	r7, #20
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b085      	sub	sp, #20
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d50:	f023 0303 	bic.w	r3, r3, #3
 8007d54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d64:	f043 0302 	orr.w	r3, r3, #2
 8007d68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3714      	adds	r7, #20
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	695b      	ldr	r3, [r3, #20]
 8007d84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007d90:	68fb      	ldr	r3, [r7, #12]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3714      	adds	r7, #20
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d9e:	b480      	push	{r7}
 8007da0:	b085      	sub	sp, #20
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dba:	69db      	ldr	r3, [r3, #28]
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	0c1b      	lsrs	r3, r3, #16
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3714      	adds	r7, #20
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b085      	sub	sp, #20
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007de4:	699b      	ldr	r3, [r3, #24]
 8007de6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dee:	69db      	ldr	r3, [r3, #28]
 8007df0:	68ba      	ldr	r2, [r7, #8]
 8007df2:	4013      	ands	r3, r2
 8007df4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	b29b      	uxth	r3, r3
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b085      	sub	sp, #20
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	460b      	mov	r3, r1
 8007e10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e16:	78fb      	ldrb	r3, [r7, #3]
 8007e18:	015a      	lsls	r2, r3, #5
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e2c:	695b      	ldr	r3, [r3, #20]
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	4013      	ands	r3, r2
 8007e32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e34:	68bb      	ldr	r3, [r7, #8]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3714      	adds	r7, #20
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e42:	b480      	push	{r7}
 8007e44:	b087      	sub	sp, #28
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e64:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007e66:	78fb      	ldrb	r3, [r7, #3]
 8007e68:	f003 030f 	and.w	r3, r3, #15
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e72:	01db      	lsls	r3, r3, #7
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e7c:	78fb      	ldrb	r3, [r7, #3]
 8007e7e:	015a      	lsls	r2, r3, #5
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	4413      	add	r3, r2
 8007e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	693a      	ldr	r2, [r7, #16]
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e90:	68bb      	ldr	r3, [r7, #8]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	371c      	adds	r7, #28
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b083      	sub	sp, #12
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	695b      	ldr	r3, [r3, #20]
 8007eaa:	f003 0301 	and.w	r3, r3, #1
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
	...

08007ebc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	4b09      	ldr	r3, [pc, #36]	; (8007f00 <USB_ActivateSetup+0x44>)
 8007eda:	4013      	ands	r3, r2
 8007edc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ef0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	fffff800 	.word	0xfffff800

08007f04 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b087      	sub	sp, #28
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	607a      	str	r2, [r7, #4]
 8007f10:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	333c      	adds	r3, #60	; 0x3c
 8007f1a:	3304      	adds	r3, #4
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	4a26      	ldr	r2, [pc, #152]	; (8007fbc <USB_EP0_OutStart+0xb8>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d90a      	bls.n	8007f3e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f38:	d101      	bne.n	8007f3e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	e037      	b.n	8007fae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f44:	461a      	mov	r2, r3
 8007f46:	2300      	movs	r3, #0
 8007f48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	697a      	ldr	r2, [r7, #20]
 8007f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	697a      	ldr	r2, [r7, #20]
 8007f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f6c:	f043 0318 	orr.w	r3, r3, #24
 8007f70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	697a      	ldr	r2, [r7, #20]
 8007f7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f80:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007f84:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007f86:	7afb      	ldrb	r3, [r7, #11]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d10f      	bne.n	8007fac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f92:	461a      	mov	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fa6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007faa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	371c      	adds	r7, #28
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	4f54300a 	.word	0x4f54300a

08007fc0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	4a13      	ldr	r2, [pc, #76]	; (8008024 <USB_CoreReset+0x64>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d901      	bls.n	8007fde <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e01b      	b.n	8008016 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	daf2      	bge.n	8007fcc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	f043 0201 	orr.w	r2, r3, #1
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	4a09      	ldr	r2, [pc, #36]	; (8008024 <USB_CoreReset+0x64>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d901      	bls.n	8008008 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008004:	2303      	movs	r3, #3
 8008006:	e006      	b.n	8008016 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	f003 0301 	and.w	r3, r3, #1
 8008010:	2b01      	cmp	r3, #1
 8008012:	d0f0      	beq.n	8007ff6 <USB_CoreReset+0x36>

  return HAL_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3714      	adds	r7, #20
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop
 8008024:	00030d40 	.word	0x00030d40

08008028 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	460b      	mov	r3, r1
 8008032:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008034:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008038:	f005 fdc2 	bl	800dbc0 <malloc>
 800803c:	4603      	mov	r3, r0
 800803e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d109      	bne.n	800805a <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	32b0      	adds	r2, #176	; 0xb0
 8008050:	2100      	movs	r1, #0
 8008052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008056:	2302      	movs	r3, #2
 8008058:	e0d4      	b.n	8008204 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800805a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800805e:	2100      	movs	r1, #0
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f005 fdcb 	bl	800dbfc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	32b0      	adds	r2, #176	; 0xb0
 8008070:	68f9      	ldr	r1, [r7, #12]
 8008072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	32b0      	adds	r2, #176	; 0xb0
 8008080:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	7c1b      	ldrb	r3, [r3, #16]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d138      	bne.n	8008104 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008092:	4b5e      	ldr	r3, [pc, #376]	; (800820c <USBD_CDC_Init+0x1e4>)
 8008094:	7819      	ldrb	r1, [r3, #0]
 8008096:	f44f 7300 	mov.w	r3, #512	; 0x200
 800809a:	2202      	movs	r2, #2
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f005 fbc0 	bl	800d822 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80080a2:	4b5a      	ldr	r3, [pc, #360]	; (800820c <USBD_CDC_Init+0x1e4>)
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	f003 020f 	and.w	r2, r3, #15
 80080aa:	6879      	ldr	r1, [r7, #4]
 80080ac:	4613      	mov	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4413      	add	r3, r2
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	440b      	add	r3, r1
 80080b6:	3324      	adds	r3, #36	; 0x24
 80080b8:	2201      	movs	r2, #1
 80080ba:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80080bc:	4b54      	ldr	r3, [pc, #336]	; (8008210 <USBD_CDC_Init+0x1e8>)
 80080be:	7819      	ldrb	r1, [r3, #0]
 80080c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080c4:	2202      	movs	r2, #2
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f005 fbab 	bl	800d822 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80080cc:	4b50      	ldr	r3, [pc, #320]	; (8008210 <USBD_CDC_Init+0x1e8>)
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	f003 020f 	and.w	r2, r3, #15
 80080d4:	6879      	ldr	r1, [r7, #4]
 80080d6:	4613      	mov	r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4413      	add	r3, r2
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	440b      	add	r3, r1
 80080e0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80080e4:	2201      	movs	r2, #1
 80080e6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80080e8:	4b4a      	ldr	r3, [pc, #296]	; (8008214 <USBD_CDC_Init+0x1ec>)
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	f003 020f 	and.w	r2, r3, #15
 80080f0:	6879      	ldr	r1, [r7, #4]
 80080f2:	4613      	mov	r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4413      	add	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	440b      	add	r3, r1
 80080fc:	3326      	adds	r3, #38	; 0x26
 80080fe:	2210      	movs	r2, #16
 8008100:	801a      	strh	r2, [r3, #0]
 8008102:	e035      	b.n	8008170 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008104:	4b41      	ldr	r3, [pc, #260]	; (800820c <USBD_CDC_Init+0x1e4>)
 8008106:	7819      	ldrb	r1, [r3, #0]
 8008108:	2340      	movs	r3, #64	; 0x40
 800810a:	2202      	movs	r2, #2
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f005 fb88 	bl	800d822 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008112:	4b3e      	ldr	r3, [pc, #248]	; (800820c <USBD_CDC_Init+0x1e4>)
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	f003 020f 	and.w	r2, r3, #15
 800811a:	6879      	ldr	r1, [r7, #4]
 800811c:	4613      	mov	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4413      	add	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	440b      	add	r3, r1
 8008126:	3324      	adds	r3, #36	; 0x24
 8008128:	2201      	movs	r2, #1
 800812a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800812c:	4b38      	ldr	r3, [pc, #224]	; (8008210 <USBD_CDC_Init+0x1e8>)
 800812e:	7819      	ldrb	r1, [r3, #0]
 8008130:	2340      	movs	r3, #64	; 0x40
 8008132:	2202      	movs	r2, #2
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f005 fb74 	bl	800d822 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800813a:	4b35      	ldr	r3, [pc, #212]	; (8008210 <USBD_CDC_Init+0x1e8>)
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	f003 020f 	and.w	r2, r3, #15
 8008142:	6879      	ldr	r1, [r7, #4]
 8008144:	4613      	mov	r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	4413      	add	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	440b      	add	r3, r1
 800814e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008152:	2201      	movs	r2, #1
 8008154:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008156:	4b2f      	ldr	r3, [pc, #188]	; (8008214 <USBD_CDC_Init+0x1ec>)
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	f003 020f 	and.w	r2, r3, #15
 800815e:	6879      	ldr	r1, [r7, #4]
 8008160:	4613      	mov	r3, r2
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	4413      	add	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	440b      	add	r3, r1
 800816a:	3326      	adds	r3, #38	; 0x26
 800816c:	2210      	movs	r2, #16
 800816e:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008170:	4b28      	ldr	r3, [pc, #160]	; (8008214 <USBD_CDC_Init+0x1ec>)
 8008172:	7819      	ldrb	r1, [r3, #0]
 8008174:	2308      	movs	r3, #8
 8008176:	2203      	movs	r2, #3
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f005 fb52 	bl	800d822 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800817e:	4b25      	ldr	r3, [pc, #148]	; (8008214 <USBD_CDC_Init+0x1ec>)
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	f003 020f 	and.w	r2, r3, #15
 8008186:	6879      	ldr	r1, [r7, #4]
 8008188:	4613      	mov	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	440b      	add	r3, r1
 8008192:	3324      	adds	r3, #36	; 0x24
 8008194:	2201      	movs	r2, #1
 8008196:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	33b0      	adds	r3, #176	; 0xb0
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	4413      	add	r3, r2
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d101      	bne.n	80081d2 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 80081ce:	2302      	movs	r3, #2
 80081d0:	e018      	b.n	8008204 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	7c1b      	ldrb	r3, [r3, #16]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d10a      	bne.n	80081f0 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80081da:	4b0d      	ldr	r3, [pc, #52]	; (8008210 <USBD_CDC_Init+0x1e8>)
 80081dc:	7819      	ldrb	r1, [r3, #0]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f005 fc09 	bl	800da00 <USBD_LL_PrepareReceive>
 80081ee:	e008      	b.n	8008202 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80081f0:	4b07      	ldr	r3, [pc, #28]	; (8008210 <USBD_CDC_Init+0x1e8>)
 80081f2:	7819      	ldrb	r1, [r3, #0]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081fa:	2340      	movs	r3, #64	; 0x40
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f005 fbff 	bl	800da00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}
 800820c:	20000093 	.word	0x20000093
 8008210:	20000094 	.word	0x20000094
 8008214:	20000095 	.word	0x20000095

08008218 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	460b      	mov	r3, r1
 8008222:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008224:	4b3a      	ldr	r3, [pc, #232]	; (8008310 <USBD_CDC_DeInit+0xf8>)
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	4619      	mov	r1, r3
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f005 fb1f 	bl	800d86e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008230:	4b37      	ldr	r3, [pc, #220]	; (8008310 <USBD_CDC_DeInit+0xf8>)
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	f003 020f 	and.w	r2, r3, #15
 8008238:	6879      	ldr	r1, [r7, #4]
 800823a:	4613      	mov	r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4413      	add	r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	440b      	add	r3, r1
 8008244:	3324      	adds	r3, #36	; 0x24
 8008246:	2200      	movs	r2, #0
 8008248:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800824a:	4b32      	ldr	r3, [pc, #200]	; (8008314 <USBD_CDC_DeInit+0xfc>)
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	4619      	mov	r1, r3
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f005 fb0c 	bl	800d86e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008256:	4b2f      	ldr	r3, [pc, #188]	; (8008314 <USBD_CDC_DeInit+0xfc>)
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	f003 020f 	and.w	r2, r3, #15
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	4613      	mov	r3, r2
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4413      	add	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	440b      	add	r3, r1
 800826a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800826e:	2200      	movs	r2, #0
 8008270:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008272:	4b29      	ldr	r3, [pc, #164]	; (8008318 <USBD_CDC_DeInit+0x100>)
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	4619      	mov	r1, r3
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f005 faf8 	bl	800d86e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800827e:	4b26      	ldr	r3, [pc, #152]	; (8008318 <USBD_CDC_DeInit+0x100>)
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	f003 020f 	and.w	r2, r3, #15
 8008286:	6879      	ldr	r1, [r7, #4]
 8008288:	4613      	mov	r3, r2
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	4413      	add	r3, r2
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	440b      	add	r3, r1
 8008292:	3324      	adds	r3, #36	; 0x24
 8008294:	2200      	movs	r2, #0
 8008296:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008298:	4b1f      	ldr	r3, [pc, #124]	; (8008318 <USBD_CDC_DeInit+0x100>)
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	f003 020f 	and.w	r2, r3, #15
 80082a0:	6879      	ldr	r1, [r7, #4]
 80082a2:	4613      	mov	r3, r2
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	4413      	add	r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	440b      	add	r3, r1
 80082ac:	3326      	adds	r3, #38	; 0x26
 80082ae:	2200      	movs	r2, #0
 80082b0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	32b0      	adds	r2, #176	; 0xb0
 80082bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d01f      	beq.n	8008304 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	33b0      	adds	r3, #176	; 0xb0
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4413      	add	r3, r2
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	32b0      	adds	r2, #176	; 0xb0
 80082e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f005 fc72 	bl	800dbd0 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	32b0      	adds	r2, #176	; 0xb0
 80082f6:	2100      	movs	r1, #0
 80082f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	20000093 	.word	0x20000093
 8008314:	20000094 	.word	0x20000094
 8008318:	20000095 	.word	0x20000095

0800831c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b086      	sub	sp, #24
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	32b0      	adds	r2, #176	; 0xb0
 8008330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008334:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008336:	2300      	movs	r3, #0
 8008338:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800833a:	2300      	movs	r3, #0
 800833c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800833e:	2300      	movs	r3, #0
 8008340:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d101      	bne.n	800834c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008348:	2303      	movs	r3, #3
 800834a:	e0bf      	b.n	80084cc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008354:	2b00      	cmp	r3, #0
 8008356:	d050      	beq.n	80083fa <USBD_CDC_Setup+0xde>
 8008358:	2b20      	cmp	r3, #32
 800835a:	f040 80af 	bne.w	80084bc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	88db      	ldrh	r3, [r3, #6]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d03a      	beq.n	80083dc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	b25b      	sxtb	r3, r3
 800836c:	2b00      	cmp	r3, #0
 800836e:	da1b      	bge.n	80083a8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	33b0      	adds	r3, #176	; 0xb0
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4413      	add	r3, r2
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008386:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008388:	683a      	ldr	r2, [r7, #0]
 800838a:	88d2      	ldrh	r2, [r2, #6]
 800838c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	88db      	ldrh	r3, [r3, #6]
 8008392:	2b07      	cmp	r3, #7
 8008394:	bf28      	it	cs
 8008396:	2307      	movcs	r3, #7
 8008398:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	89fa      	ldrh	r2, [r7, #14]
 800839e:	4619      	mov	r1, r3
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f001 fd6d 	bl	8009e80 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80083a6:	e090      	b.n	80084ca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	785a      	ldrb	r2, [r3, #1]
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	88db      	ldrh	r3, [r3, #6]
 80083b6:	2b3f      	cmp	r3, #63	; 0x3f
 80083b8:	d803      	bhi.n	80083c2 <USBD_CDC_Setup+0xa6>
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	88db      	ldrh	r3, [r3, #6]
 80083be:	b2da      	uxtb	r2, r3
 80083c0:	e000      	b.n	80083c4 <USBD_CDC_Setup+0xa8>
 80083c2:	2240      	movs	r2, #64	; 0x40
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80083ca:	6939      	ldr	r1, [r7, #16]
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80083d2:	461a      	mov	r2, r3
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f001 fd7f 	bl	8009ed8 <USBD_CtlPrepareRx>
      break;
 80083da:	e076      	b.n	80084ca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	33b0      	adds	r3, #176	; 0xb0
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	4413      	add	r3, r2
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	683a      	ldr	r2, [r7, #0]
 80083f0:	7850      	ldrb	r0, [r2, #1]
 80083f2:	2200      	movs	r2, #0
 80083f4:	6839      	ldr	r1, [r7, #0]
 80083f6:	4798      	blx	r3
      break;
 80083f8:	e067      	b.n	80084ca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	785b      	ldrb	r3, [r3, #1]
 80083fe:	2b0b      	cmp	r3, #11
 8008400:	d851      	bhi.n	80084a6 <USBD_CDC_Setup+0x18a>
 8008402:	a201      	add	r2, pc, #4	; (adr r2, 8008408 <USBD_CDC_Setup+0xec>)
 8008404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008408:	08008439 	.word	0x08008439
 800840c:	080084b5 	.word	0x080084b5
 8008410:	080084a7 	.word	0x080084a7
 8008414:	080084a7 	.word	0x080084a7
 8008418:	080084a7 	.word	0x080084a7
 800841c:	080084a7 	.word	0x080084a7
 8008420:	080084a7 	.word	0x080084a7
 8008424:	080084a7 	.word	0x080084a7
 8008428:	080084a7 	.word	0x080084a7
 800842c:	080084a7 	.word	0x080084a7
 8008430:	08008463 	.word	0x08008463
 8008434:	0800848d 	.word	0x0800848d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800843e:	b2db      	uxtb	r3, r3
 8008440:	2b03      	cmp	r3, #3
 8008442:	d107      	bne.n	8008454 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008444:	f107 030a 	add.w	r3, r7, #10
 8008448:	2202      	movs	r2, #2
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f001 fd17 	bl	8009e80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008452:	e032      	b.n	80084ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008454:	6839      	ldr	r1, [r7, #0]
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f001 fca1 	bl	8009d9e <USBD_CtlError>
            ret = USBD_FAIL;
 800845c:	2303      	movs	r3, #3
 800845e:	75fb      	strb	r3, [r7, #23]
          break;
 8008460:	e02b      	b.n	80084ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008468:	b2db      	uxtb	r3, r3
 800846a:	2b03      	cmp	r3, #3
 800846c:	d107      	bne.n	800847e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800846e:	f107 030d 	add.w	r3, r7, #13
 8008472:	2201      	movs	r2, #1
 8008474:	4619      	mov	r1, r3
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f001 fd02 	bl	8009e80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800847c:	e01d      	b.n	80084ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f001 fc8c 	bl	8009d9e <USBD_CtlError>
            ret = USBD_FAIL;
 8008486:	2303      	movs	r3, #3
 8008488:	75fb      	strb	r3, [r7, #23]
          break;
 800848a:	e016      	b.n	80084ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008492:	b2db      	uxtb	r3, r3
 8008494:	2b03      	cmp	r3, #3
 8008496:	d00f      	beq.n	80084b8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f001 fc7f 	bl	8009d9e <USBD_CtlError>
            ret = USBD_FAIL;
 80084a0:	2303      	movs	r3, #3
 80084a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80084a4:	e008      	b.n	80084b8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f001 fc78 	bl	8009d9e <USBD_CtlError>
          ret = USBD_FAIL;
 80084ae:	2303      	movs	r3, #3
 80084b0:	75fb      	strb	r3, [r7, #23]
          break;
 80084b2:	e002      	b.n	80084ba <USBD_CDC_Setup+0x19e>
          break;
 80084b4:	bf00      	nop
 80084b6:	e008      	b.n	80084ca <USBD_CDC_Setup+0x1ae>
          break;
 80084b8:	bf00      	nop
      }
      break;
 80084ba:	e006      	b.n	80084ca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f001 fc6d 	bl	8009d9e <USBD_CtlError>
      ret = USBD_FAIL;
 80084c4:	2303      	movs	r3, #3
 80084c6:	75fb      	strb	r3, [r7, #23]
      break;
 80084c8:	bf00      	nop
  }

  return (uint8_t)ret;
 80084ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3718      	adds	r7, #24
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	460b      	mov	r3, r1
 80084de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	32b0      	adds	r2, #176	; 0xb0
 80084f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d101      	bne.n	80084fe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80084fa:	2303      	movs	r3, #3
 80084fc:	e065      	b.n	80085ca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	32b0      	adds	r2, #176	; 0xb0
 8008508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800850c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800850e:	78fb      	ldrb	r3, [r7, #3]
 8008510:	f003 020f 	and.w	r2, r3, #15
 8008514:	6879      	ldr	r1, [r7, #4]
 8008516:	4613      	mov	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	4413      	add	r3, r2
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	440b      	add	r3, r1
 8008520:	3318      	adds	r3, #24
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d02f      	beq.n	8008588 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008528:	78fb      	ldrb	r3, [r7, #3]
 800852a:	f003 020f 	and.w	r2, r3, #15
 800852e:	6879      	ldr	r1, [r7, #4]
 8008530:	4613      	mov	r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	4413      	add	r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	440b      	add	r3, r1
 800853a:	3318      	adds	r3, #24
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	78fb      	ldrb	r3, [r7, #3]
 8008540:	f003 010f 	and.w	r1, r3, #15
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	460b      	mov	r3, r1
 8008548:	00db      	lsls	r3, r3, #3
 800854a:	440b      	add	r3, r1
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	4403      	add	r3, r0
 8008550:	3348      	adds	r3, #72	; 0x48
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	fbb2 f1f3 	udiv	r1, r2, r3
 8008558:	fb01 f303 	mul.w	r3, r1, r3
 800855c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800855e:	2b00      	cmp	r3, #0
 8008560:	d112      	bne.n	8008588 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008562:	78fb      	ldrb	r3, [r7, #3]
 8008564:	f003 020f 	and.w	r2, r3, #15
 8008568:	6879      	ldr	r1, [r7, #4]
 800856a:	4613      	mov	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4413      	add	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	440b      	add	r3, r1
 8008574:	3318      	adds	r3, #24
 8008576:	2200      	movs	r2, #0
 8008578:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800857a:	78f9      	ldrb	r1, [r7, #3]
 800857c:	2300      	movs	r3, #0
 800857e:	2200      	movs	r2, #0
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f005 fa1c 	bl	800d9be <USBD_LL_Transmit>
 8008586:	e01f      	b.n	80085c8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	2200      	movs	r2, #0
 800858c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	33b0      	adds	r3, #176	; 0xb0
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	4413      	add	r3, r2
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d010      	beq.n	80085c8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	33b0      	adds	r3, #176	; 0xb0
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80085be:	68ba      	ldr	r2, [r7, #8]
 80085c0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80085c4:	78fa      	ldrb	r2, [r7, #3]
 80085c6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b084      	sub	sp, #16
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	460b      	mov	r3, r1
 80085dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	32b0      	adds	r2, #176	; 0xb0
 80085e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	32b0      	adds	r2, #176	; 0xb0
 80085f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d101      	bne.n	8008604 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008600:	2303      	movs	r3, #3
 8008602:	e01a      	b.n	800863a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008604:	78fb      	ldrb	r3, [r7, #3]
 8008606:	4619      	mov	r1, r3
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f005 fa1a 	bl	800da42 <USBD_LL_GetRxDataSize>
 800860e:	4602      	mov	r2, r0
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	33b0      	adds	r3, #176	; 0xb0
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4413      	add	r3, r2
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008634:	4611      	mov	r1, r2
 8008636:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b084      	sub	sp, #16
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	32b0      	adds	r2, #176	; 0xb0
 8008654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008658:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d101      	bne.n	8008664 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008660:	2303      	movs	r3, #3
 8008662:	e025      	b.n	80086b0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	33b0      	adds	r3, #176	; 0xb0
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	4413      	add	r3, r2
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d01a      	beq.n	80086ae <USBD_CDC_EP0_RxReady+0x6c>
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800867e:	2bff      	cmp	r3, #255	; 0xff
 8008680:	d015      	beq.n	80086ae <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	33b0      	adds	r3, #176	; 0xb0
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4413      	add	r3, r2
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800869a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80086a2:	b292      	uxth	r2, r2
 80086a4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	22ff      	movs	r2, #255	; 0xff
 80086aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b086      	sub	sp, #24
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80086c0:	2182      	movs	r1, #130	; 0x82
 80086c2:	4818      	ldr	r0, [pc, #96]	; (8008724 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80086c4:	f000 fd09 	bl	80090da <USBD_GetEpDesc>
 80086c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80086ca:	2101      	movs	r1, #1
 80086cc:	4815      	ldr	r0, [pc, #84]	; (8008724 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80086ce:	f000 fd04 	bl	80090da <USBD_GetEpDesc>
 80086d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80086d4:	2181      	movs	r1, #129	; 0x81
 80086d6:	4813      	ldr	r0, [pc, #76]	; (8008724 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80086d8:	f000 fcff 	bl	80090da <USBD_GetEpDesc>
 80086dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d002      	beq.n	80086ea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	2210      	movs	r2, #16
 80086e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d006      	beq.n	80086fe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086f8:	711a      	strb	r2, [r3, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d006      	beq.n	8008712 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800870c:	711a      	strb	r2, [r3, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2243      	movs	r2, #67	; 0x43
 8008716:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008718:	4b02      	ldr	r3, [pc, #8]	; (8008724 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800871a:	4618      	mov	r0, r3
 800871c:	3718      	adds	r7, #24
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	20000050 	.word	0x20000050

08008728 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008730:	2182      	movs	r1, #130	; 0x82
 8008732:	4818      	ldr	r0, [pc, #96]	; (8008794 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008734:	f000 fcd1 	bl	80090da <USBD_GetEpDesc>
 8008738:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800873a:	2101      	movs	r1, #1
 800873c:	4815      	ldr	r0, [pc, #84]	; (8008794 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800873e:	f000 fccc 	bl	80090da <USBD_GetEpDesc>
 8008742:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008744:	2181      	movs	r1, #129	; 0x81
 8008746:	4813      	ldr	r0, [pc, #76]	; (8008794 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008748:	f000 fcc7 	bl	80090da <USBD_GetEpDesc>
 800874c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	2210      	movs	r2, #16
 8008758:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d006      	beq.n	800876e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	2200      	movs	r2, #0
 8008764:	711a      	strb	r2, [r3, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	f042 0202 	orr.w	r2, r2, #2
 800876c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d006      	beq.n	8008782 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2200      	movs	r2, #0
 8008778:	711a      	strb	r2, [r3, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	f042 0202 	orr.w	r2, r2, #2
 8008780:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2243      	movs	r2, #67	; 0x43
 8008786:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008788:	4b02      	ldr	r3, [pc, #8]	; (8008794 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800878a:	4618      	mov	r0, r3
 800878c:	3718      	adds	r7, #24
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	20000050 	.word	0x20000050

08008798 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80087a0:	2182      	movs	r1, #130	; 0x82
 80087a2:	4818      	ldr	r0, [pc, #96]	; (8008804 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80087a4:	f000 fc99 	bl	80090da <USBD_GetEpDesc>
 80087a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80087aa:	2101      	movs	r1, #1
 80087ac:	4815      	ldr	r0, [pc, #84]	; (8008804 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80087ae:	f000 fc94 	bl	80090da <USBD_GetEpDesc>
 80087b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80087b4:	2181      	movs	r1, #129	; 0x81
 80087b6:	4813      	ldr	r0, [pc, #76]	; (8008804 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80087b8:	f000 fc8f 	bl	80090da <USBD_GetEpDesc>
 80087bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d002      	beq.n	80087ca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	2210      	movs	r2, #16
 80087c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d006      	beq.n	80087de <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087d8:	711a      	strb	r2, [r3, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d006      	beq.n	80087f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087ec:	711a      	strb	r2, [r3, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2243      	movs	r2, #67	; 0x43
 80087f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80087f8:	4b02      	ldr	r3, [pc, #8]	; (8008804 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3718      	adds	r7, #24
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	20000050 	.word	0x20000050

08008808 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	220a      	movs	r2, #10
 8008814:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008816:	4b03      	ldr	r3, [pc, #12]	; (8008824 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008818:	4618      	mov	r0, r3
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr
 8008824:	2000000c 	.word	0x2000000c

08008828 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d101      	bne.n	800883c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008838:	2303      	movs	r3, #3
 800883a:	e009      	b.n	8008850 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	33b0      	adds	r3, #176	; 0xb0
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4413      	add	r3, r2
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800885c:	b480      	push	{r7}
 800885e:	b087      	sub	sp, #28
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	32b0      	adds	r2, #176	; 0xb0
 8008872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008876:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d101      	bne.n	8008882 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800887e:	2303      	movs	r3, #3
 8008880:	e008      	b.n	8008894 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	371c      	adds	r7, #28
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	32b0      	adds	r2, #176	; 0xb0
 80088b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d101      	bne.n	80088c4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e004      	b.n	80088ce <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	683a      	ldr	r2, [r7, #0]
 80088c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3714      	adds	r7, #20
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
	...

080088dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	32b0      	adds	r2, #176	; 0xb0
 80088ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088f2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	32b0      	adds	r2, #176	; 0xb0
 80088fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d101      	bne.n	800890a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008906:	2303      	movs	r3, #3
 8008908:	e018      	b.n	800893c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	7c1b      	ldrb	r3, [r3, #16]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10a      	bne.n	8008928 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008912:	4b0c      	ldr	r3, [pc, #48]	; (8008944 <USBD_CDC_ReceivePacket+0x68>)
 8008914:	7819      	ldrb	r1, [r3, #0]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800891c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f005 f86d 	bl	800da00 <USBD_LL_PrepareReceive>
 8008926:	e008      	b.n	800893a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008928:	4b06      	ldr	r3, [pc, #24]	; (8008944 <USBD_CDC_ReceivePacket+0x68>)
 800892a:	7819      	ldrb	r1, [r3, #0]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008932:	2340      	movs	r3, #64	; 0x40
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f005 f863 	bl	800da00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	20000094 	.word	0x20000094

08008948 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b086      	sub	sp, #24
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	4613      	mov	r3, r2
 8008954:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d101      	bne.n	8008960 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800895c:	2303      	movs	r3, #3
 800895e:	e01f      	b.n	80089a0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2200      	movs	r2, #0
 8008974:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d003      	beq.n	8008986 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	68ba      	ldr	r2, [r7, #8]
 8008982:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2201      	movs	r2, #1
 800898a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	79fa      	ldrb	r2, [r7, #7]
 8008992:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f004 fedd 	bl	800d754 <USBD_LL_Init>
 800899a:	4603      	mov	r3, r0
 800899c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800899e:	7dfb      	ldrb	r3, [r7, #23]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3718      	adds	r7, #24
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80089b2:	2300      	movs	r3, #0
 80089b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d101      	bne.n	80089c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80089bc:	2303      	movs	r3, #3
 80089be:	e025      	b.n	8008a0c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	683a      	ldr	r2, [r7, #0]
 80089c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	32ae      	adds	r2, #174	; 0xae
 80089d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00f      	beq.n	80089fc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	32ae      	adds	r2, #174	; 0xae
 80089e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ec:	f107 020e 	add.w	r2, r7, #14
 80089f0:	4610      	mov	r0, r2
 80089f2:	4798      	blx	r3
 80089f4:	4602      	mov	r2, r0
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008a02:	1c5a      	adds	r2, r3, #1
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f004 fee5 	bl	800d7ec <USBD_LL_Start>
 8008a22:	4603      	mov	r3, r0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3708      	adds	r7, #8
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a34:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr

08008a42 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b084      	sub	sp, #16
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d009      	beq.n	8008a70 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	78fa      	ldrb	r2, [r7, #3]
 8008a66:	4611      	mov	r1, r2
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	4798      	blx	r3
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b084      	sub	sp, #16
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
 8008a82:	460b      	mov	r3, r1
 8008a84:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	78fa      	ldrb	r2, [r7, #3]
 8008a94:	4611      	mov	r1, r2
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	4798      	blx	r3
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d001      	beq.n	8008aa4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b084      	sub	sp, #16
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008abe:	6839      	ldr	r1, [r7, #0]
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f001 f932 	bl	8009d2a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008ae2:	f003 031f 	and.w	r3, r3, #31
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d01a      	beq.n	8008b20 <USBD_LL_SetupStage+0x72>
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d822      	bhi.n	8008b34 <USBD_LL_SetupStage+0x86>
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d002      	beq.n	8008af8 <USBD_LL_SetupStage+0x4a>
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d00a      	beq.n	8008b0c <USBD_LL_SetupStage+0x5e>
 8008af6:	e01d      	b.n	8008b34 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008afe:	4619      	mov	r1, r3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 fb5f 	bl	80091c4 <USBD_StdDevReq>
 8008b06:	4603      	mov	r3, r0
 8008b08:	73fb      	strb	r3, [r7, #15]
      break;
 8008b0a:	e020      	b.n	8008b4e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b12:	4619      	mov	r1, r3
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 fbc7 	bl	80092a8 <USBD_StdItfReq>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	73fb      	strb	r3, [r7, #15]
      break;
 8008b1e:	e016      	b.n	8008b4e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b26:	4619      	mov	r1, r3
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fc29 	bl	8009380 <USBD_StdEPReq>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	73fb      	strb	r3, [r7, #15]
      break;
 8008b32:	e00c      	b.n	8008b4e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008b3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	4619      	mov	r1, r3
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f004 feb2 	bl	800d8ac <USBD_LL_StallEP>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b4c:	bf00      	nop
  }

  return ret;
 8008b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b086      	sub	sp, #24
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	460b      	mov	r3, r1
 8008b62:	607a      	str	r2, [r7, #4]
 8008b64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008b6a:	7afb      	ldrb	r3, [r7, #11]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d16e      	bne.n	8008c4e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008b76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b7e:	2b03      	cmp	r3, #3
 8008b80:	f040 8098 	bne.w	8008cb4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	689a      	ldr	r2, [r3, #8]
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d913      	bls.n	8008bb8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	689a      	ldr	r2, [r3, #8]
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	1ad2      	subs	r2, r2, r3
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	68da      	ldr	r2, [r3, #12]
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	bf28      	it	cs
 8008baa:	4613      	movcs	r3, r2
 8008bac:	461a      	mov	r2, r3
 8008bae:	6879      	ldr	r1, [r7, #4]
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f001 f9ae 	bl	8009f12 <USBD_CtlContinueRx>
 8008bb6:	e07d      	b.n	8008cb4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008bbe:	f003 031f 	and.w	r3, r3, #31
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d014      	beq.n	8008bf0 <USBD_LL_DataOutStage+0x98>
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d81d      	bhi.n	8008c06 <USBD_LL_DataOutStage+0xae>
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d002      	beq.n	8008bd4 <USBD_LL_DataOutStage+0x7c>
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d003      	beq.n	8008bda <USBD_LL_DataOutStage+0x82>
 8008bd2:	e018      	b.n	8008c06 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	75bb      	strb	r3, [r7, #22]
            break;
 8008bd8:	e018      	b.n	8008c0c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	4619      	mov	r1, r3
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f000 fa5e 	bl	80090a6 <USBD_CoreFindIF>
 8008bea:	4603      	mov	r3, r0
 8008bec:	75bb      	strb	r3, [r7, #22]
            break;
 8008bee:	e00d      	b.n	8008c0c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f000 fa60 	bl	80090c0 <USBD_CoreFindEP>
 8008c00:	4603      	mov	r3, r0
 8008c02:	75bb      	strb	r3, [r7, #22]
            break;
 8008c04:	e002      	b.n	8008c0c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008c06:	2300      	movs	r3, #0
 8008c08:	75bb      	strb	r3, [r7, #22]
            break;
 8008c0a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008c0c:	7dbb      	ldrb	r3, [r7, #22]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d119      	bne.n	8008c46 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	2b03      	cmp	r3, #3
 8008c1c:	d113      	bne.n	8008c46 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008c1e:	7dba      	ldrb	r2, [r7, #22]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	32ae      	adds	r2, #174	; 0xae
 8008c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00b      	beq.n	8008c46 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008c2e:	7dba      	ldrb	r2, [r7, #22]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008c36:	7dba      	ldrb	r2, [r7, #22]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	32ae      	adds	r2, #174	; 0xae
 8008c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f001 f974 	bl	8009f34 <USBD_CtlSendStatus>
 8008c4c:	e032      	b.n	8008cb4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008c4e:	7afb      	ldrb	r3, [r7, #11]
 8008c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	4619      	mov	r1, r3
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f000 fa31 	bl	80090c0 <USBD_CoreFindEP>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c62:	7dbb      	ldrb	r3, [r7, #22]
 8008c64:	2bff      	cmp	r3, #255	; 0xff
 8008c66:	d025      	beq.n	8008cb4 <USBD_LL_DataOutStage+0x15c>
 8008c68:	7dbb      	ldrb	r3, [r7, #22]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d122      	bne.n	8008cb4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b03      	cmp	r3, #3
 8008c78:	d117      	bne.n	8008caa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008c7a:	7dba      	ldrb	r2, [r7, #22]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	32ae      	adds	r2, #174	; 0xae
 8008c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c84:	699b      	ldr	r3, [r3, #24]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00f      	beq.n	8008caa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008c8a:	7dba      	ldrb	r2, [r7, #22]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008c92:	7dba      	ldrb	r2, [r7, #22]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	32ae      	adds	r2, #174	; 0xae
 8008c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	7afa      	ldrb	r2, [r7, #11]
 8008ca0:	4611      	mov	r1, r2
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	4798      	blx	r3
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008caa:	7dfb      	ldrb	r3, [r7, #23]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d001      	beq.n	8008cb4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008cb0:	7dfb      	ldrb	r3, [r7, #23]
 8008cb2:	e000      	b.n	8008cb6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3718      	adds	r7, #24
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b086      	sub	sp, #24
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	60f8      	str	r0, [r7, #12]
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	607a      	str	r2, [r7, #4]
 8008cca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008ccc:	7afb      	ldrb	r3, [r7, #11]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d16f      	bne.n	8008db2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	3314      	adds	r3, #20
 8008cd6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d15a      	bne.n	8008d98 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	689a      	ldr	r2, [r3, #8]
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d914      	bls.n	8008d18 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	689a      	ldr	r2, [r3, #8]
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	1ad2      	subs	r2, r2, r3
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	461a      	mov	r2, r3
 8008d02:	6879      	ldr	r1, [r7, #4]
 8008d04:	68f8      	ldr	r0, [r7, #12]
 8008d06:	f001 f8d6 	bl	8009eb6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	2100      	movs	r1, #0
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f004 fe75 	bl	800da00 <USBD_LL_PrepareReceive>
 8008d16:	e03f      	b.n	8008d98 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	68da      	ldr	r2, [r3, #12]
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d11c      	bne.n	8008d5e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	685a      	ldr	r2, [r3, #4]
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d316      	bcc.n	8008d5e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	685a      	ldr	r2, [r3, #4]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d20f      	bcs.n	8008d5e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008d3e:	2200      	movs	r2, #0
 8008d40:	2100      	movs	r1, #0
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f001 f8b7 	bl	8009eb6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d50:	2300      	movs	r3, #0
 8008d52:	2200      	movs	r2, #0
 8008d54:	2100      	movs	r1, #0
 8008d56:	68f8      	ldr	r0, [r7, #12]
 8008d58:	f004 fe52 	bl	800da00 <USBD_LL_PrepareReceive>
 8008d5c:	e01c      	b.n	8008d98 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	2b03      	cmp	r3, #3
 8008d68:	d10f      	bne.n	8008d8a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d009      	beq.n	8008d8a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d8a:	2180      	movs	r1, #128	; 0x80
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f004 fd8d 	bl	800d8ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f001 f8e1 	bl	8009f5a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d03a      	beq.n	8008e18 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f7ff fe42 	bl	8008a2c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008db0:	e032      	b.n	8008e18 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008db2:	7afb      	ldrb	r3, [r7, #11]
 8008db4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	4619      	mov	r1, r3
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f000 f97f 	bl	80090c0 <USBD_CoreFindEP>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008dc6:	7dfb      	ldrb	r3, [r7, #23]
 8008dc8:	2bff      	cmp	r3, #255	; 0xff
 8008dca:	d025      	beq.n	8008e18 <USBD_LL_DataInStage+0x15a>
 8008dcc:	7dfb      	ldrb	r3, [r7, #23]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d122      	bne.n	8008e18 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	d11c      	bne.n	8008e18 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008dde:	7dfa      	ldrb	r2, [r7, #23]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	32ae      	adds	r2, #174	; 0xae
 8008de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d014      	beq.n	8008e18 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008dee:	7dfa      	ldrb	r2, [r7, #23]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008df6:	7dfa      	ldrb	r2, [r7, #23]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	32ae      	adds	r2, #174	; 0xae
 8008dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e00:	695b      	ldr	r3, [r3, #20]
 8008e02:	7afa      	ldrb	r2, [r7, #11]
 8008e04:	4611      	mov	r1, r2
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	4798      	blx	r3
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008e0e:	7dbb      	ldrb	r3, [r7, #22]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d001      	beq.n	8008e18 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008e14:	7dbb      	ldrb	r3, [r7, #22]
 8008e16:	e000      	b.n	8008e1a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3718      	adds	r7, #24
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b084      	sub	sp, #16
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2201      	movs	r2, #1
 8008e32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d014      	beq.n	8008e88 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00e      	beq.n	8008e88 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	6852      	ldr	r2, [r2, #4]
 8008e76:	b2d2      	uxtb	r2, r2
 8008e78:	4611      	mov	r1, r2
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	4798      	blx	r3
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d001      	beq.n	8008e88 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008e84:	2303      	movs	r3, #3
 8008e86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e88:	2340      	movs	r3, #64	; 0x40
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f004 fcc7 	bl	800d822 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2240      	movs	r2, #64	; 0x40
 8008ea0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ea4:	2340      	movs	r3, #64	; 0x40
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	2180      	movs	r1, #128	; 0x80
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f004 fcb9 	bl	800d822 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2240      	movs	r2, #64	; 0x40
 8008eba:	621a      	str	r2, [r3, #32]

  return ret;
 8008ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008ec6:	b480      	push	{r7}
 8008ec8:	b083      	sub	sp, #12
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
 8008ece:	460b      	mov	r3, r1
 8008ed0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	78fa      	ldrb	r2, [r7, #3]
 8008ed6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	370c      	adds	r7, #12
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b083      	sub	sp, #12
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ef4:	b2da      	uxtb	r2, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2204      	movs	r2, #4
 8008f00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	370c      	adds	r7, #12
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr

08008f12 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008f12:	b480      	push	{r7}
 8008f14:	b083      	sub	sp, #12
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	2b04      	cmp	r3, #4
 8008f24:	d106      	bne.n	8008f34 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008f2c:	b2da      	uxtb	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	370c      	adds	r7, #12
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b082      	sub	sp, #8
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b03      	cmp	r3, #3
 8008f54:	d110      	bne.n	8008f78 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00b      	beq.n	8008f78 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f66:	69db      	ldr	r3, [r3, #28]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d005      	beq.n	8008f78 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f72:	69db      	ldr	r3, [r3, #28]
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b082      	sub	sp, #8
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	32ae      	adds	r2, #174	; 0xae
 8008f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d101      	bne.n	8008fa4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008fa0:	2303      	movs	r3, #3
 8008fa2:	e01c      	b.n	8008fde <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	2b03      	cmp	r3, #3
 8008fae:	d115      	bne.n	8008fdc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	32ae      	adds	r2, #174	; 0xae
 8008fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fbe:	6a1b      	ldr	r3, [r3, #32]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00b      	beq.n	8008fdc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	32ae      	adds	r2, #174	; 0xae
 8008fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fd2:	6a1b      	ldr	r3, [r3, #32]
 8008fd4:	78fa      	ldrb	r2, [r7, #3]
 8008fd6:	4611      	mov	r1, r2
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3708      	adds	r7, #8
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b082      	sub	sp, #8
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
 8008fee:	460b      	mov	r3, r1
 8008ff0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	32ae      	adds	r2, #174	; 0xae
 8008ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d101      	bne.n	8009008 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009004:	2303      	movs	r3, #3
 8009006:	e01c      	b.n	8009042 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800900e:	b2db      	uxtb	r3, r3
 8009010:	2b03      	cmp	r3, #3
 8009012:	d115      	bne.n	8009040 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	32ae      	adds	r2, #174	; 0xae
 800901e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00b      	beq.n	8009040 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	32ae      	adds	r2, #174	; 0xae
 8009032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009038:	78fa      	ldrb	r2, [r7, #3]
 800903a:	4611      	mov	r1, r2
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	3708      	adds	r7, #8
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}

0800904a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800904a:	b480      	push	{r7}
 800904c:	b083      	sub	sp, #12
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009052:	2300      	movs	r3, #0
}
 8009054:	4618      	mov	r0, r3
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009068:	2300      	movs	r3, #0
 800906a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00e      	beq.n	800909c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	6852      	ldr	r2, [r2, #4]
 800908a:	b2d2      	uxtb	r2, r2
 800908c:	4611      	mov	r1, r2
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	4798      	blx	r3
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d001      	beq.n	800909c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009098:	2303      	movs	r3, #3
 800909a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800909c:	7bfb      	ldrb	r3, [r7, #15]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80090a6:	b480      	push	{r7}
 80090a8:	b083      	sub	sp, #12
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	460b      	mov	r3, r1
 80090b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80090b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	460b      	mov	r3, r1
 80090ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80090cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	370c      	adds	r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b086      	sub	sp, #24
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	460b      	mov	r3, r1
 80090e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80090ee:	2300      	movs	r3, #0
 80090f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	885b      	ldrh	r3, [r3, #2]
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	429a      	cmp	r2, r3
 8009100:	d920      	bls.n	8009144 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	b29b      	uxth	r3, r3
 8009108:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800910a:	e013      	b.n	8009134 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800910c:	f107 030a 	add.w	r3, r7, #10
 8009110:	4619      	mov	r1, r3
 8009112:	6978      	ldr	r0, [r7, #20]
 8009114:	f000 f81b 	bl	800914e <USBD_GetNextDesc>
 8009118:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	785b      	ldrb	r3, [r3, #1]
 800911e:	2b05      	cmp	r3, #5
 8009120:	d108      	bne.n	8009134 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	789b      	ldrb	r3, [r3, #2]
 800912a:	78fa      	ldrb	r2, [r7, #3]
 800912c:	429a      	cmp	r2, r3
 800912e:	d008      	beq.n	8009142 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009130:	2300      	movs	r3, #0
 8009132:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	885b      	ldrh	r3, [r3, #2]
 8009138:	b29a      	uxth	r2, r3
 800913a:	897b      	ldrh	r3, [r7, #10]
 800913c:	429a      	cmp	r2, r3
 800913e:	d8e5      	bhi.n	800910c <USBD_GetEpDesc+0x32>
 8009140:	e000      	b.n	8009144 <USBD_GetEpDesc+0x6a>
          break;
 8009142:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009144:	693b      	ldr	r3, [r7, #16]
}
 8009146:	4618      	mov	r0, r3
 8009148:	3718      	adds	r7, #24
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800914e:	b480      	push	{r7}
 8009150:	b085      	sub	sp, #20
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
 8009156:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	881a      	ldrh	r2, [r3, #0]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	b29b      	uxth	r3, r3
 8009166:	4413      	add	r3, r2
 8009168:	b29a      	uxth	r2, r3
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	461a      	mov	r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4413      	add	r3, r2
 8009178:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800917a:	68fb      	ldr	r3, [r7, #12]
}
 800917c:	4618      	mov	r0, r3
 800917e:	3714      	adds	r7, #20
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009188:	b480      	push	{r7}
 800918a:	b087      	sub	sp, #28
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	3301      	adds	r3, #1
 800919e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80091a6:	8a3b      	ldrh	r3, [r7, #16]
 80091a8:	021b      	lsls	r3, r3, #8
 80091aa:	b21a      	sxth	r2, r3
 80091ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	b21b      	sxth	r3, r3
 80091b4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80091b6:	89fb      	ldrh	r3, [r7, #14]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	371c      	adds	r7, #28
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091ce:	2300      	movs	r3, #0
 80091d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091da:	2b40      	cmp	r3, #64	; 0x40
 80091dc:	d005      	beq.n	80091ea <USBD_StdDevReq+0x26>
 80091de:	2b40      	cmp	r3, #64	; 0x40
 80091e0:	d857      	bhi.n	8009292 <USBD_StdDevReq+0xce>
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00f      	beq.n	8009206 <USBD_StdDevReq+0x42>
 80091e6:	2b20      	cmp	r3, #32
 80091e8:	d153      	bne.n	8009292 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	32ae      	adds	r2, #174	; 0xae
 80091f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	6839      	ldr	r1, [r7, #0]
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	4798      	blx	r3
 8009200:	4603      	mov	r3, r0
 8009202:	73fb      	strb	r3, [r7, #15]
      break;
 8009204:	e04a      	b.n	800929c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	785b      	ldrb	r3, [r3, #1]
 800920a:	2b09      	cmp	r3, #9
 800920c:	d83b      	bhi.n	8009286 <USBD_StdDevReq+0xc2>
 800920e:	a201      	add	r2, pc, #4	; (adr r2, 8009214 <USBD_StdDevReq+0x50>)
 8009210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009214:	08009269 	.word	0x08009269
 8009218:	0800927d 	.word	0x0800927d
 800921c:	08009287 	.word	0x08009287
 8009220:	08009273 	.word	0x08009273
 8009224:	08009287 	.word	0x08009287
 8009228:	08009247 	.word	0x08009247
 800922c:	0800923d 	.word	0x0800923d
 8009230:	08009287 	.word	0x08009287
 8009234:	0800925f 	.word	0x0800925f
 8009238:	08009251 	.word	0x08009251
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800923c:	6839      	ldr	r1, [r7, #0]
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fa3c 	bl	80096bc <USBD_GetDescriptor>
          break;
 8009244:	e024      	b.n	8009290 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009246:	6839      	ldr	r1, [r7, #0]
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 fbcb 	bl	80099e4 <USBD_SetAddress>
          break;
 800924e:	e01f      	b.n	8009290 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009250:	6839      	ldr	r1, [r7, #0]
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 fc0a 	bl	8009a6c <USBD_SetConfig>
 8009258:	4603      	mov	r3, r0
 800925a:	73fb      	strb	r3, [r7, #15]
          break;
 800925c:	e018      	b.n	8009290 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800925e:	6839      	ldr	r1, [r7, #0]
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 fcad 	bl	8009bc0 <USBD_GetConfig>
          break;
 8009266:	e013      	b.n	8009290 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009268:	6839      	ldr	r1, [r7, #0]
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 fcde 	bl	8009c2c <USBD_GetStatus>
          break;
 8009270:	e00e      	b.n	8009290 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009272:	6839      	ldr	r1, [r7, #0]
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fd0d 	bl	8009c94 <USBD_SetFeature>
          break;
 800927a:	e009      	b.n	8009290 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800927c:	6839      	ldr	r1, [r7, #0]
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fd31 	bl	8009ce6 <USBD_ClrFeature>
          break;
 8009284:	e004      	b.n	8009290 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009286:	6839      	ldr	r1, [r7, #0]
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 fd88 	bl	8009d9e <USBD_CtlError>
          break;
 800928e:	bf00      	nop
      }
      break;
 8009290:	e004      	b.n	800929c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009292:	6839      	ldr	r1, [r7, #0]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 fd82 	bl	8009d9e <USBD_CtlError>
      break;
 800929a:	bf00      	nop
  }

  return ret;
 800929c:	7bfb      	ldrb	r3, [r7, #15]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop

080092a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092be:	2b40      	cmp	r3, #64	; 0x40
 80092c0:	d005      	beq.n	80092ce <USBD_StdItfReq+0x26>
 80092c2:	2b40      	cmp	r3, #64	; 0x40
 80092c4:	d852      	bhi.n	800936c <USBD_StdItfReq+0xc4>
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d001      	beq.n	80092ce <USBD_StdItfReq+0x26>
 80092ca:	2b20      	cmp	r3, #32
 80092cc:	d14e      	bne.n	800936c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	3b01      	subs	r3, #1
 80092d8:	2b02      	cmp	r3, #2
 80092da:	d840      	bhi.n	800935e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	889b      	ldrh	r3, [r3, #4]
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d836      	bhi.n	8009354 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	889b      	ldrh	r3, [r3, #4]
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	4619      	mov	r1, r3
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f7ff fed9 	bl	80090a6 <USBD_CoreFindIF>
 80092f4:	4603      	mov	r3, r0
 80092f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092f8:	7bbb      	ldrb	r3, [r7, #14]
 80092fa:	2bff      	cmp	r3, #255	; 0xff
 80092fc:	d01d      	beq.n	800933a <USBD_StdItfReq+0x92>
 80092fe:	7bbb      	ldrb	r3, [r7, #14]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d11a      	bne.n	800933a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009304:	7bba      	ldrb	r2, [r7, #14]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	32ae      	adds	r2, #174	; 0xae
 800930a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00f      	beq.n	8009334 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009314:	7bba      	ldrb	r2, [r7, #14]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800931c:	7bba      	ldrb	r2, [r7, #14]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	32ae      	adds	r2, #174	; 0xae
 8009322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	6839      	ldr	r1, [r7, #0]
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	4798      	blx	r3
 800932e:	4603      	mov	r3, r0
 8009330:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009332:	e004      	b.n	800933e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009334:	2303      	movs	r3, #3
 8009336:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009338:	e001      	b.n	800933e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800933a:	2303      	movs	r3, #3
 800933c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	88db      	ldrh	r3, [r3, #6]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d110      	bne.n	8009368 <USBD_StdItfReq+0xc0>
 8009346:	7bfb      	ldrb	r3, [r7, #15]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d10d      	bne.n	8009368 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 fdf1 	bl	8009f34 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009352:	e009      	b.n	8009368 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fd21 	bl	8009d9e <USBD_CtlError>
          break;
 800935c:	e004      	b.n	8009368 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800935e:	6839      	ldr	r1, [r7, #0]
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 fd1c 	bl	8009d9e <USBD_CtlError>
          break;
 8009366:	e000      	b.n	800936a <USBD_StdItfReq+0xc2>
          break;
 8009368:	bf00      	nop
      }
      break;
 800936a:	e004      	b.n	8009376 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800936c:	6839      	ldr	r1, [r7, #0]
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 fd15 	bl	8009d9e <USBD_CtlError>
      break;
 8009374:	bf00      	nop
  }

  return ret;
 8009376:	7bfb      	ldrb	r3, [r7, #15]
}
 8009378:	4618      	mov	r0, r3
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	889b      	ldrh	r3, [r3, #4]
 8009392:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800939c:	2b40      	cmp	r3, #64	; 0x40
 800939e:	d007      	beq.n	80093b0 <USBD_StdEPReq+0x30>
 80093a0:	2b40      	cmp	r3, #64	; 0x40
 80093a2:	f200 817f 	bhi.w	80096a4 <USBD_StdEPReq+0x324>
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d02a      	beq.n	8009400 <USBD_StdEPReq+0x80>
 80093aa:	2b20      	cmp	r3, #32
 80093ac:	f040 817a 	bne.w	80096a4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80093b0:	7bbb      	ldrb	r3, [r7, #14]
 80093b2:	4619      	mov	r1, r3
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f7ff fe83 	bl	80090c0 <USBD_CoreFindEP>
 80093ba:	4603      	mov	r3, r0
 80093bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093be:	7b7b      	ldrb	r3, [r7, #13]
 80093c0:	2bff      	cmp	r3, #255	; 0xff
 80093c2:	f000 8174 	beq.w	80096ae <USBD_StdEPReq+0x32e>
 80093c6:	7b7b      	ldrb	r3, [r7, #13]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f040 8170 	bne.w	80096ae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80093ce:	7b7a      	ldrb	r2, [r7, #13]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80093d6:	7b7a      	ldrb	r2, [r7, #13]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	32ae      	adds	r2, #174	; 0xae
 80093dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f000 8163 	beq.w	80096ae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80093e8:	7b7a      	ldrb	r2, [r7, #13]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	32ae      	adds	r2, #174	; 0xae
 80093ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	6839      	ldr	r1, [r7, #0]
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	4798      	blx	r3
 80093fa:	4603      	mov	r3, r0
 80093fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80093fe:	e156      	b.n	80096ae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	785b      	ldrb	r3, [r3, #1]
 8009404:	2b03      	cmp	r3, #3
 8009406:	d008      	beq.n	800941a <USBD_StdEPReq+0x9a>
 8009408:	2b03      	cmp	r3, #3
 800940a:	f300 8145 	bgt.w	8009698 <USBD_StdEPReq+0x318>
 800940e:	2b00      	cmp	r3, #0
 8009410:	f000 809b 	beq.w	800954a <USBD_StdEPReq+0x1ca>
 8009414:	2b01      	cmp	r3, #1
 8009416:	d03c      	beq.n	8009492 <USBD_StdEPReq+0x112>
 8009418:	e13e      	b.n	8009698 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009420:	b2db      	uxtb	r3, r3
 8009422:	2b02      	cmp	r3, #2
 8009424:	d002      	beq.n	800942c <USBD_StdEPReq+0xac>
 8009426:	2b03      	cmp	r3, #3
 8009428:	d016      	beq.n	8009458 <USBD_StdEPReq+0xd8>
 800942a:	e02c      	b.n	8009486 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800942c:	7bbb      	ldrb	r3, [r7, #14]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d00d      	beq.n	800944e <USBD_StdEPReq+0xce>
 8009432:	7bbb      	ldrb	r3, [r7, #14]
 8009434:	2b80      	cmp	r3, #128	; 0x80
 8009436:	d00a      	beq.n	800944e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009438:	7bbb      	ldrb	r3, [r7, #14]
 800943a:	4619      	mov	r1, r3
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f004 fa35 	bl	800d8ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009442:	2180      	movs	r1, #128	; 0x80
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f004 fa31 	bl	800d8ac <USBD_LL_StallEP>
 800944a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800944c:	e020      	b.n	8009490 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800944e:	6839      	ldr	r1, [r7, #0]
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 fca4 	bl	8009d9e <USBD_CtlError>
              break;
 8009456:	e01b      	b.n	8009490 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	885b      	ldrh	r3, [r3, #2]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d10e      	bne.n	800947e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009460:	7bbb      	ldrb	r3, [r7, #14]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00b      	beq.n	800947e <USBD_StdEPReq+0xfe>
 8009466:	7bbb      	ldrb	r3, [r7, #14]
 8009468:	2b80      	cmp	r3, #128	; 0x80
 800946a:	d008      	beq.n	800947e <USBD_StdEPReq+0xfe>
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	88db      	ldrh	r3, [r3, #6]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d104      	bne.n	800947e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009474:	7bbb      	ldrb	r3, [r7, #14]
 8009476:	4619      	mov	r1, r3
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f004 fa17 	bl	800d8ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 fd58 	bl	8009f34 <USBD_CtlSendStatus>

              break;
 8009484:	e004      	b.n	8009490 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009486:	6839      	ldr	r1, [r7, #0]
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 fc88 	bl	8009d9e <USBD_CtlError>
              break;
 800948e:	bf00      	nop
          }
          break;
 8009490:	e107      	b.n	80096a2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009498:	b2db      	uxtb	r3, r3
 800949a:	2b02      	cmp	r3, #2
 800949c:	d002      	beq.n	80094a4 <USBD_StdEPReq+0x124>
 800949e:	2b03      	cmp	r3, #3
 80094a0:	d016      	beq.n	80094d0 <USBD_StdEPReq+0x150>
 80094a2:	e04b      	b.n	800953c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094a4:	7bbb      	ldrb	r3, [r7, #14]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00d      	beq.n	80094c6 <USBD_StdEPReq+0x146>
 80094aa:	7bbb      	ldrb	r3, [r7, #14]
 80094ac:	2b80      	cmp	r3, #128	; 0x80
 80094ae:	d00a      	beq.n	80094c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80094b0:	7bbb      	ldrb	r3, [r7, #14]
 80094b2:	4619      	mov	r1, r3
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f004 f9f9 	bl	800d8ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80094ba:	2180      	movs	r1, #128	; 0x80
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f004 f9f5 	bl	800d8ac <USBD_LL_StallEP>
 80094c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80094c4:	e040      	b.n	8009548 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80094c6:	6839      	ldr	r1, [r7, #0]
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 fc68 	bl	8009d9e <USBD_CtlError>
              break;
 80094ce:	e03b      	b.n	8009548 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	885b      	ldrh	r3, [r3, #2]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d136      	bne.n	8009546 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80094d8:	7bbb      	ldrb	r3, [r7, #14]
 80094da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d004      	beq.n	80094ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80094e2:	7bbb      	ldrb	r3, [r7, #14]
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f004 f9ff 	bl	800d8ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 fd21 	bl	8009f34 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80094f2:	7bbb      	ldrb	r3, [r7, #14]
 80094f4:	4619      	mov	r1, r3
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f7ff fde2 	bl	80090c0 <USBD_CoreFindEP>
 80094fc:	4603      	mov	r3, r0
 80094fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009500:	7b7b      	ldrb	r3, [r7, #13]
 8009502:	2bff      	cmp	r3, #255	; 0xff
 8009504:	d01f      	beq.n	8009546 <USBD_StdEPReq+0x1c6>
 8009506:	7b7b      	ldrb	r3, [r7, #13]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d11c      	bne.n	8009546 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800950c:	7b7a      	ldrb	r2, [r7, #13]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009514:	7b7a      	ldrb	r2, [r7, #13]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	32ae      	adds	r2, #174	; 0xae
 800951a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d010      	beq.n	8009546 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009524:	7b7a      	ldrb	r2, [r7, #13]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	32ae      	adds	r2, #174	; 0xae
 800952a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	6839      	ldr	r1, [r7, #0]
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	4798      	blx	r3
 8009536:	4603      	mov	r3, r0
 8009538:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800953a:	e004      	b.n	8009546 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 fc2d 	bl	8009d9e <USBD_CtlError>
              break;
 8009544:	e000      	b.n	8009548 <USBD_StdEPReq+0x1c8>
              break;
 8009546:	bf00      	nop
          }
          break;
 8009548:	e0ab      	b.n	80096a2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009550:	b2db      	uxtb	r3, r3
 8009552:	2b02      	cmp	r3, #2
 8009554:	d002      	beq.n	800955c <USBD_StdEPReq+0x1dc>
 8009556:	2b03      	cmp	r3, #3
 8009558:	d032      	beq.n	80095c0 <USBD_StdEPReq+0x240>
 800955a:	e097      	b.n	800968c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800955c:	7bbb      	ldrb	r3, [r7, #14]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d007      	beq.n	8009572 <USBD_StdEPReq+0x1f2>
 8009562:	7bbb      	ldrb	r3, [r7, #14]
 8009564:	2b80      	cmp	r3, #128	; 0x80
 8009566:	d004      	beq.n	8009572 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009568:	6839      	ldr	r1, [r7, #0]
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 fc17 	bl	8009d9e <USBD_CtlError>
                break;
 8009570:	e091      	b.n	8009696 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009572:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009576:	2b00      	cmp	r3, #0
 8009578:	da0b      	bge.n	8009592 <USBD_StdEPReq+0x212>
 800957a:	7bbb      	ldrb	r3, [r7, #14]
 800957c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009580:	4613      	mov	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	4413      	add	r3, r2
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	3310      	adds	r3, #16
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	4413      	add	r3, r2
 800958e:	3304      	adds	r3, #4
 8009590:	e00b      	b.n	80095aa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009592:	7bbb      	ldrb	r3, [r7, #14]
 8009594:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009598:	4613      	mov	r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	4413      	add	r3, r2
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	4413      	add	r3, r2
 80095a8:	3304      	adds	r3, #4
 80095aa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	2200      	movs	r2, #0
 80095b0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	2202      	movs	r2, #2
 80095b6:	4619      	mov	r1, r3
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 fc61 	bl	8009e80 <USBD_CtlSendData>
              break;
 80095be:	e06a      	b.n	8009696 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80095c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	da11      	bge.n	80095ec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80095c8:	7bbb      	ldrb	r3, [r7, #14]
 80095ca:	f003 020f 	and.w	r2, r3, #15
 80095ce:	6879      	ldr	r1, [r7, #4]
 80095d0:	4613      	mov	r3, r2
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	4413      	add	r3, r2
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	440b      	add	r3, r1
 80095da:	3324      	adds	r3, #36	; 0x24
 80095dc:	881b      	ldrh	r3, [r3, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d117      	bne.n	8009612 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80095e2:	6839      	ldr	r1, [r7, #0]
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 fbda 	bl	8009d9e <USBD_CtlError>
                  break;
 80095ea:	e054      	b.n	8009696 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80095ec:	7bbb      	ldrb	r3, [r7, #14]
 80095ee:	f003 020f 	and.w	r2, r3, #15
 80095f2:	6879      	ldr	r1, [r7, #4]
 80095f4:	4613      	mov	r3, r2
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	4413      	add	r3, r2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	440b      	add	r3, r1
 80095fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009602:	881b      	ldrh	r3, [r3, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d104      	bne.n	8009612 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009608:	6839      	ldr	r1, [r7, #0]
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 fbc7 	bl	8009d9e <USBD_CtlError>
                  break;
 8009610:	e041      	b.n	8009696 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009612:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009616:	2b00      	cmp	r3, #0
 8009618:	da0b      	bge.n	8009632 <USBD_StdEPReq+0x2b2>
 800961a:	7bbb      	ldrb	r3, [r7, #14]
 800961c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009620:	4613      	mov	r3, r2
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	4413      	add	r3, r2
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	3310      	adds	r3, #16
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	4413      	add	r3, r2
 800962e:	3304      	adds	r3, #4
 8009630:	e00b      	b.n	800964a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009632:	7bbb      	ldrb	r3, [r7, #14]
 8009634:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009638:	4613      	mov	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4413      	add	r3, r2
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	4413      	add	r3, r2
 8009648:	3304      	adds	r3, #4
 800964a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800964c:	7bbb      	ldrb	r3, [r7, #14]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d002      	beq.n	8009658 <USBD_StdEPReq+0x2d8>
 8009652:	7bbb      	ldrb	r3, [r7, #14]
 8009654:	2b80      	cmp	r3, #128	; 0x80
 8009656:	d103      	bne.n	8009660 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	2200      	movs	r2, #0
 800965c:	601a      	str	r2, [r3, #0]
 800965e:	e00e      	b.n	800967e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009660:	7bbb      	ldrb	r3, [r7, #14]
 8009662:	4619      	mov	r1, r3
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f004 f95f 	bl	800d928 <USBD_LL_IsStallEP>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d003      	beq.n	8009678 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	2201      	movs	r2, #1
 8009674:	601a      	str	r2, [r3, #0]
 8009676:	e002      	b.n	800967e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	2200      	movs	r2, #0
 800967c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	2202      	movs	r2, #2
 8009682:	4619      	mov	r1, r3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 fbfb 	bl	8009e80 <USBD_CtlSendData>
              break;
 800968a:	e004      	b.n	8009696 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800968c:	6839      	ldr	r1, [r7, #0]
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 fb85 	bl	8009d9e <USBD_CtlError>
              break;
 8009694:	bf00      	nop
          }
          break;
 8009696:	e004      	b.n	80096a2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009698:	6839      	ldr	r1, [r7, #0]
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 fb7f 	bl	8009d9e <USBD_CtlError>
          break;
 80096a0:	bf00      	nop
      }
      break;
 80096a2:	e005      	b.n	80096b0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80096a4:	6839      	ldr	r1, [r7, #0]
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 fb79 	bl	8009d9e <USBD_CtlError>
      break;
 80096ac:	e000      	b.n	80096b0 <USBD_StdEPReq+0x330>
      break;
 80096ae:	bf00      	nop
  }

  return ret;
 80096b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
	...

080096bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80096c6:	2300      	movs	r3, #0
 80096c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80096ca:	2300      	movs	r3, #0
 80096cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80096ce:	2300      	movs	r3, #0
 80096d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	885b      	ldrh	r3, [r3, #2]
 80096d6:	0a1b      	lsrs	r3, r3, #8
 80096d8:	b29b      	uxth	r3, r3
 80096da:	3b01      	subs	r3, #1
 80096dc:	2b0e      	cmp	r3, #14
 80096de:	f200 8152 	bhi.w	8009986 <USBD_GetDescriptor+0x2ca>
 80096e2:	a201      	add	r2, pc, #4	; (adr r2, 80096e8 <USBD_GetDescriptor+0x2c>)
 80096e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e8:	08009759 	.word	0x08009759
 80096ec:	08009771 	.word	0x08009771
 80096f0:	080097b1 	.word	0x080097b1
 80096f4:	08009987 	.word	0x08009987
 80096f8:	08009987 	.word	0x08009987
 80096fc:	08009927 	.word	0x08009927
 8009700:	08009953 	.word	0x08009953
 8009704:	08009987 	.word	0x08009987
 8009708:	08009987 	.word	0x08009987
 800970c:	08009987 	.word	0x08009987
 8009710:	08009987 	.word	0x08009987
 8009714:	08009987 	.word	0x08009987
 8009718:	08009987 	.word	0x08009987
 800971c:	08009987 	.word	0x08009987
 8009720:	08009725 	.word	0x08009725
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800972a:	69db      	ldr	r3, [r3, #28]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00b      	beq.n	8009748 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009736:	69db      	ldr	r3, [r3, #28]
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	7c12      	ldrb	r2, [r2, #16]
 800973c:	f107 0108 	add.w	r1, r7, #8
 8009740:	4610      	mov	r0, r2
 8009742:	4798      	blx	r3
 8009744:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009746:	e126      	b.n	8009996 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009748:	6839      	ldr	r1, [r7, #0]
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 fb27 	bl	8009d9e <USBD_CtlError>
        err++;
 8009750:	7afb      	ldrb	r3, [r7, #11]
 8009752:	3301      	adds	r3, #1
 8009754:	72fb      	strb	r3, [r7, #11]
      break;
 8009756:	e11e      	b.n	8009996 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	7c12      	ldrb	r2, [r2, #16]
 8009764:	f107 0108 	add.w	r1, r7, #8
 8009768:	4610      	mov	r0, r2
 800976a:	4798      	blx	r3
 800976c:	60f8      	str	r0, [r7, #12]
      break;
 800976e:	e112      	b.n	8009996 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	7c1b      	ldrb	r3, [r3, #16]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d10d      	bne.n	8009794 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800977e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009780:	f107 0208 	add.w	r2, r7, #8
 8009784:	4610      	mov	r0, r2
 8009786:	4798      	blx	r3
 8009788:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	3301      	adds	r3, #1
 800978e:	2202      	movs	r2, #2
 8009790:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009792:	e100      	b.n	8009996 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800979a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979c:	f107 0208 	add.w	r2, r7, #8
 80097a0:	4610      	mov	r0, r2
 80097a2:	4798      	blx	r3
 80097a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	3301      	adds	r3, #1
 80097aa:	2202      	movs	r2, #2
 80097ac:	701a      	strb	r2, [r3, #0]
      break;
 80097ae:	e0f2      	b.n	8009996 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	885b      	ldrh	r3, [r3, #2]
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	2b05      	cmp	r3, #5
 80097b8:	f200 80ac 	bhi.w	8009914 <USBD_GetDescriptor+0x258>
 80097bc:	a201      	add	r2, pc, #4	; (adr r2, 80097c4 <USBD_GetDescriptor+0x108>)
 80097be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c2:	bf00      	nop
 80097c4:	080097dd 	.word	0x080097dd
 80097c8:	08009811 	.word	0x08009811
 80097cc:	08009845 	.word	0x08009845
 80097d0:	08009879 	.word	0x08009879
 80097d4:	080098ad 	.word	0x080098ad
 80097d8:	080098e1 	.word	0x080098e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00b      	beq.n	8009800 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	7c12      	ldrb	r2, [r2, #16]
 80097f4:	f107 0108 	add.w	r1, r7, #8
 80097f8:	4610      	mov	r0, r2
 80097fa:	4798      	blx	r3
 80097fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097fe:	e091      	b.n	8009924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009800:	6839      	ldr	r1, [r7, #0]
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 facb 	bl	8009d9e <USBD_CtlError>
            err++;
 8009808:	7afb      	ldrb	r3, [r7, #11]
 800980a:	3301      	adds	r3, #1
 800980c:	72fb      	strb	r3, [r7, #11]
          break;
 800980e:	e089      	b.n	8009924 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00b      	beq.n	8009834 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	7c12      	ldrb	r2, [r2, #16]
 8009828:	f107 0108 	add.w	r1, r7, #8
 800982c:	4610      	mov	r0, r2
 800982e:	4798      	blx	r3
 8009830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009832:	e077      	b.n	8009924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009834:	6839      	ldr	r1, [r7, #0]
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 fab1 	bl	8009d9e <USBD_CtlError>
            err++;
 800983c:	7afb      	ldrb	r3, [r7, #11]
 800983e:	3301      	adds	r3, #1
 8009840:	72fb      	strb	r3, [r7, #11]
          break;
 8009842:	e06f      	b.n	8009924 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00b      	beq.n	8009868 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	7c12      	ldrb	r2, [r2, #16]
 800985c:	f107 0108 	add.w	r1, r7, #8
 8009860:	4610      	mov	r0, r2
 8009862:	4798      	blx	r3
 8009864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009866:	e05d      	b.n	8009924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009868:	6839      	ldr	r1, [r7, #0]
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 fa97 	bl	8009d9e <USBD_CtlError>
            err++;
 8009870:	7afb      	ldrb	r3, [r7, #11]
 8009872:	3301      	adds	r3, #1
 8009874:	72fb      	strb	r3, [r7, #11]
          break;
 8009876:	e055      	b.n	8009924 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d00b      	beq.n	800989c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	7c12      	ldrb	r2, [r2, #16]
 8009890:	f107 0108 	add.w	r1, r7, #8
 8009894:	4610      	mov	r0, r2
 8009896:	4798      	blx	r3
 8009898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800989a:	e043      	b.n	8009924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800989c:	6839      	ldr	r1, [r7, #0]
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 fa7d 	bl	8009d9e <USBD_CtlError>
            err++;
 80098a4:	7afb      	ldrb	r3, [r7, #11]
 80098a6:	3301      	adds	r3, #1
 80098a8:	72fb      	strb	r3, [r7, #11]
          break;
 80098aa:	e03b      	b.n	8009924 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098b2:	695b      	ldr	r3, [r3, #20]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d00b      	beq.n	80098d0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098be:	695b      	ldr	r3, [r3, #20]
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	7c12      	ldrb	r2, [r2, #16]
 80098c4:	f107 0108 	add.w	r1, r7, #8
 80098c8:	4610      	mov	r0, r2
 80098ca:	4798      	blx	r3
 80098cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098ce:	e029      	b.n	8009924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80098d0:	6839      	ldr	r1, [r7, #0]
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fa63 	bl	8009d9e <USBD_CtlError>
            err++;
 80098d8:	7afb      	ldrb	r3, [r7, #11]
 80098da:	3301      	adds	r3, #1
 80098dc:	72fb      	strb	r3, [r7, #11]
          break;
 80098de:	e021      	b.n	8009924 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d00b      	beq.n	8009904 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098f2:	699b      	ldr	r3, [r3, #24]
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	7c12      	ldrb	r2, [r2, #16]
 80098f8:	f107 0108 	add.w	r1, r7, #8
 80098fc:	4610      	mov	r0, r2
 80098fe:	4798      	blx	r3
 8009900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009902:	e00f      	b.n	8009924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009904:	6839      	ldr	r1, [r7, #0]
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 fa49 	bl	8009d9e <USBD_CtlError>
            err++;
 800990c:	7afb      	ldrb	r3, [r7, #11]
 800990e:	3301      	adds	r3, #1
 8009910:	72fb      	strb	r3, [r7, #11]
          break;
 8009912:	e007      	b.n	8009924 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009914:	6839      	ldr	r1, [r7, #0]
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 fa41 	bl	8009d9e <USBD_CtlError>
          err++;
 800991c:	7afb      	ldrb	r3, [r7, #11]
 800991e:	3301      	adds	r3, #1
 8009920:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009922:	bf00      	nop
      }
      break;
 8009924:	e037      	b.n	8009996 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	7c1b      	ldrb	r3, [r3, #16]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d109      	bne.n	8009942 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009936:	f107 0208 	add.w	r2, r7, #8
 800993a:	4610      	mov	r0, r2
 800993c:	4798      	blx	r3
 800993e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009940:	e029      	b.n	8009996 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009942:	6839      	ldr	r1, [r7, #0]
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 fa2a 	bl	8009d9e <USBD_CtlError>
        err++;
 800994a:	7afb      	ldrb	r3, [r7, #11]
 800994c:	3301      	adds	r3, #1
 800994e:	72fb      	strb	r3, [r7, #11]
      break;
 8009950:	e021      	b.n	8009996 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	7c1b      	ldrb	r3, [r3, #16]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10d      	bne.n	8009976 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009962:	f107 0208 	add.w	r2, r7, #8
 8009966:	4610      	mov	r0, r2
 8009968:	4798      	blx	r3
 800996a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	3301      	adds	r3, #1
 8009970:	2207      	movs	r2, #7
 8009972:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009974:	e00f      	b.n	8009996 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009976:	6839      	ldr	r1, [r7, #0]
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fa10 	bl	8009d9e <USBD_CtlError>
        err++;
 800997e:	7afb      	ldrb	r3, [r7, #11]
 8009980:	3301      	adds	r3, #1
 8009982:	72fb      	strb	r3, [r7, #11]
      break;
 8009984:	e007      	b.n	8009996 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009986:	6839      	ldr	r1, [r7, #0]
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fa08 	bl	8009d9e <USBD_CtlError>
      err++;
 800998e:	7afb      	ldrb	r3, [r7, #11]
 8009990:	3301      	adds	r3, #1
 8009992:	72fb      	strb	r3, [r7, #11]
      break;
 8009994:	bf00      	nop
  }

  if (err != 0U)
 8009996:	7afb      	ldrb	r3, [r7, #11]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d11e      	bne.n	80099da <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	88db      	ldrh	r3, [r3, #6]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d016      	beq.n	80099d2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80099a4:	893b      	ldrh	r3, [r7, #8]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00e      	beq.n	80099c8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	88da      	ldrh	r2, [r3, #6]
 80099ae:	893b      	ldrh	r3, [r7, #8]
 80099b0:	4293      	cmp	r3, r2
 80099b2:	bf28      	it	cs
 80099b4:	4613      	movcs	r3, r2
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80099ba:	893b      	ldrh	r3, [r7, #8]
 80099bc:	461a      	mov	r2, r3
 80099be:	68f9      	ldr	r1, [r7, #12]
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fa5d 	bl	8009e80 <USBD_CtlSendData>
 80099c6:	e009      	b.n	80099dc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80099c8:	6839      	ldr	r1, [r7, #0]
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 f9e7 	bl	8009d9e <USBD_CtlError>
 80099d0:	e004      	b.n	80099dc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 faae 	bl	8009f34 <USBD_CtlSendStatus>
 80099d8:	e000      	b.n	80099dc <USBD_GetDescriptor+0x320>
    return;
 80099da:	bf00      	nop
  }
}
 80099dc:	3710      	adds	r7, #16
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop

080099e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	889b      	ldrh	r3, [r3, #4]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d131      	bne.n	8009a5a <USBD_SetAddress+0x76>
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	88db      	ldrh	r3, [r3, #6]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d12d      	bne.n	8009a5a <USBD_SetAddress+0x76>
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	885b      	ldrh	r3, [r3, #2]
 8009a02:	2b7f      	cmp	r3, #127	; 0x7f
 8009a04:	d829      	bhi.n	8009a5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	885b      	ldrh	r3, [r3, #2]
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	2b03      	cmp	r3, #3
 8009a1c:	d104      	bne.n	8009a28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009a1e:	6839      	ldr	r1, [r7, #0]
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 f9bc 	bl	8009d9e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a26:	e01d      	b.n	8009a64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	7bfa      	ldrb	r2, [r7, #15]
 8009a2c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a30:	7bfb      	ldrb	r3, [r7, #15]
 8009a32:	4619      	mov	r1, r3
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f003 ffa3 	bl	800d980 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fa7a 	bl	8009f34 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a40:	7bfb      	ldrb	r3, [r7, #15]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d004      	beq.n	8009a50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2202      	movs	r2, #2
 8009a4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a4e:	e009      	b.n	8009a64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2201      	movs	r2, #1
 8009a54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a58:	e004      	b.n	8009a64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009a5a:	6839      	ldr	r1, [r7, #0]
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 f99e 	bl	8009d9e <USBD_CtlError>
  }
}
 8009a62:	bf00      	nop
 8009a64:	bf00      	nop
 8009a66:	3710      	adds	r7, #16
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a76:	2300      	movs	r3, #0
 8009a78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	885b      	ldrh	r3, [r3, #2]
 8009a7e:	b2da      	uxtb	r2, r3
 8009a80:	4b4e      	ldr	r3, [pc, #312]	; (8009bbc <USBD_SetConfig+0x150>)
 8009a82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009a84:	4b4d      	ldr	r3, [pc, #308]	; (8009bbc <USBD_SetConfig+0x150>)
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d905      	bls.n	8009a98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009a8c:	6839      	ldr	r1, [r7, #0]
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 f985 	bl	8009d9e <USBD_CtlError>
    return USBD_FAIL;
 8009a94:	2303      	movs	r3, #3
 8009a96:	e08c      	b.n	8009bb2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d002      	beq.n	8009aaa <USBD_SetConfig+0x3e>
 8009aa4:	2b03      	cmp	r3, #3
 8009aa6:	d029      	beq.n	8009afc <USBD_SetConfig+0x90>
 8009aa8:	e075      	b.n	8009b96 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009aaa:	4b44      	ldr	r3, [pc, #272]	; (8009bbc <USBD_SetConfig+0x150>)
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d020      	beq.n	8009af4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009ab2:	4b42      	ldr	r3, [pc, #264]	; (8009bbc <USBD_SetConfig+0x150>)
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009abc:	4b3f      	ldr	r3, [pc, #252]	; (8009bbc <USBD_SetConfig+0x150>)
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f7fe ffbd 	bl	8008a42 <USBD_SetClassConfig>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009acc:	7bfb      	ldrb	r3, [r7, #15]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d008      	beq.n	8009ae4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009ad2:	6839      	ldr	r1, [r7, #0]
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f962 	bl	8009d9e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2202      	movs	r2, #2
 8009ade:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009ae2:	e065      	b.n	8009bb0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 fa25 	bl	8009f34 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2203      	movs	r2, #3
 8009aee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009af2:	e05d      	b.n	8009bb0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 fa1d 	bl	8009f34 <USBD_CtlSendStatus>
      break;
 8009afa:	e059      	b.n	8009bb0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009afc:	4b2f      	ldr	r3, [pc, #188]	; (8009bbc <USBD_SetConfig+0x150>)
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d112      	bne.n	8009b2a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2202      	movs	r2, #2
 8009b08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009b0c:	4b2b      	ldr	r3, [pc, #172]	; (8009bbc <USBD_SetConfig+0x150>)
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	461a      	mov	r2, r3
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b16:	4b29      	ldr	r3, [pc, #164]	; (8009bbc <USBD_SetConfig+0x150>)
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f7fe ffac 	bl	8008a7a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 fa06 	bl	8009f34 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009b28:	e042      	b.n	8009bb0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009b2a:	4b24      	ldr	r3, [pc, #144]	; (8009bbc <USBD_SetConfig+0x150>)
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	461a      	mov	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d02a      	beq.n	8009b8e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	4619      	mov	r1, r3
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f7fe ff9a 	bl	8008a7a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009b46:	4b1d      	ldr	r3, [pc, #116]	; (8009bbc <USBD_SetConfig+0x150>)
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009b50:	4b1a      	ldr	r3, [pc, #104]	; (8009bbc <USBD_SetConfig+0x150>)
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	4619      	mov	r1, r3
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f7fe ff73 	bl	8008a42 <USBD_SetClassConfig>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009b60:	7bfb      	ldrb	r3, [r7, #15]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00f      	beq.n	8009b86 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009b66:	6839      	ldr	r1, [r7, #0]
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 f918 	bl	8009d9e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	4619      	mov	r1, r3
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f7fe ff7f 	bl	8008a7a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2202      	movs	r2, #2
 8009b80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009b84:	e014      	b.n	8009bb0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 f9d4 	bl	8009f34 <USBD_CtlSendStatus>
      break;
 8009b8c:	e010      	b.n	8009bb0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f9d0 	bl	8009f34 <USBD_CtlSendStatus>
      break;
 8009b94:	e00c      	b.n	8009bb0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009b96:	6839      	ldr	r1, [r7, #0]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 f900 	bl	8009d9e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b9e:	4b07      	ldr	r3, [pc, #28]	; (8009bbc <USBD_SetConfig+0x150>)
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f7fe ff68 	bl	8008a7a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009baa:	2303      	movs	r3, #3
 8009bac:	73fb      	strb	r3, [r7, #15]
      break;
 8009bae:	bf00      	nop
  }

  return ret;
 8009bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	20000f24 	.word	0x20000f24

08009bc0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	88db      	ldrh	r3, [r3, #6]
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d004      	beq.n	8009bdc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009bd2:	6839      	ldr	r1, [r7, #0]
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 f8e2 	bl	8009d9e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009bda:	e023      	b.n	8009c24 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	2b02      	cmp	r3, #2
 8009be6:	dc02      	bgt.n	8009bee <USBD_GetConfig+0x2e>
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	dc03      	bgt.n	8009bf4 <USBD_GetConfig+0x34>
 8009bec:	e015      	b.n	8009c1a <USBD_GetConfig+0x5a>
 8009bee:	2b03      	cmp	r3, #3
 8009bf0:	d00b      	beq.n	8009c0a <USBD_GetConfig+0x4a>
 8009bf2:	e012      	b.n	8009c1a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	3308      	adds	r3, #8
 8009bfe:	2201      	movs	r2, #1
 8009c00:	4619      	mov	r1, r3
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 f93c 	bl	8009e80 <USBD_CtlSendData>
        break;
 8009c08:	e00c      	b.n	8009c24 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	3304      	adds	r3, #4
 8009c0e:	2201      	movs	r2, #1
 8009c10:	4619      	mov	r1, r3
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 f934 	bl	8009e80 <USBD_CtlSendData>
        break;
 8009c18:	e004      	b.n	8009c24 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009c1a:	6839      	ldr	r1, [r7, #0]
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 f8be 	bl	8009d9e <USBD_CtlError>
        break;
 8009c22:	bf00      	nop
}
 8009c24:	bf00      	nop
 8009c26:	3708      	adds	r7, #8
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	2b02      	cmp	r3, #2
 8009c42:	d81e      	bhi.n	8009c82 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	88db      	ldrh	r3, [r3, #6]
 8009c48:	2b02      	cmp	r3, #2
 8009c4a:	d004      	beq.n	8009c56 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009c4c:	6839      	ldr	r1, [r7, #0]
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 f8a5 	bl	8009d9e <USBD_CtlError>
        break;
 8009c54:	e01a      	b.n	8009c8c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2201      	movs	r2, #1
 8009c5a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d005      	beq.n	8009c72 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	f043 0202 	orr.w	r2, r3, #2
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	330c      	adds	r3, #12
 8009c76:	2202      	movs	r2, #2
 8009c78:	4619      	mov	r1, r3
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 f900 	bl	8009e80 <USBD_CtlSendData>
      break;
 8009c80:	e004      	b.n	8009c8c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009c82:	6839      	ldr	r1, [r7, #0]
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 f88a 	bl	8009d9e <USBD_CtlError>
      break;
 8009c8a:	bf00      	nop
  }
}
 8009c8c:	bf00      	nop
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	885b      	ldrh	r3, [r3, #2]
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d107      	bne.n	8009cb6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 f940 	bl	8009f34 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009cb4:	e013      	b.n	8009cde <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	885b      	ldrh	r3, [r3, #2]
 8009cba:	2b02      	cmp	r3, #2
 8009cbc:	d10b      	bne.n	8009cd6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	889b      	ldrh	r3, [r3, #4]
 8009cc2:	0a1b      	lsrs	r3, r3, #8
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	b2da      	uxtb	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 f930 	bl	8009f34 <USBD_CtlSendStatus>
}
 8009cd4:	e003      	b.n	8009cde <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009cd6:	6839      	ldr	r1, [r7, #0]
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 f860 	bl	8009d9e <USBD_CtlError>
}
 8009cde:	bf00      	nop
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b082      	sub	sp, #8
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d80b      	bhi.n	8009d16 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	885b      	ldrh	r3, [r3, #2]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d10c      	bne.n	8009d20 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 f910 	bl	8009f34 <USBD_CtlSendStatus>
      }
      break;
 8009d14:	e004      	b.n	8009d20 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009d16:	6839      	ldr	r1, [r7, #0]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f840 	bl	8009d9e <USBD_CtlError>
      break;
 8009d1e:	e000      	b.n	8009d22 <USBD_ClrFeature+0x3c>
      break;
 8009d20:	bf00      	nop
  }
}
 8009d22:	bf00      	nop
 8009d24:	3708      	adds	r7, #8
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b084      	sub	sp, #16
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
 8009d32:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	781a      	ldrb	r2, [r3, #0]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	3301      	adds	r3, #1
 8009d44:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	781a      	ldrb	r2, [r3, #0]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	3301      	adds	r3, #1
 8009d52:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f7ff fa17 	bl	8009188 <SWAPBYTE>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	3301      	adds	r3, #1
 8009d66:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	f7ff fa0a 	bl	8009188 <SWAPBYTE>
 8009d74:	4603      	mov	r3, r0
 8009d76:	461a      	mov	r2, r3
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	3301      	adds	r3, #1
 8009d86:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	f7ff f9fd 	bl	8009188 <SWAPBYTE>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	461a      	mov	r2, r3
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	80da      	strh	r2, [r3, #6]
}
 8009d96:	bf00      	nop
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b082      	sub	sp, #8
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009da8:	2180      	movs	r1, #128	; 0x80
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f003 fd7e 	bl	800d8ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009db0:	2100      	movs	r1, #0
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f003 fd7a 	bl	800d8ac <USBD_LL_StallEP>
}
 8009db8:	bf00      	nop
 8009dba:	3708      	adds	r7, #8
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b086      	sub	sp, #24
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d036      	beq.n	8009e44 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009dda:	6938      	ldr	r0, [r7, #16]
 8009ddc:	f000 f836 	bl	8009e4c <USBD_GetLen>
 8009de0:	4603      	mov	r3, r0
 8009de2:	3301      	adds	r3, #1
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	005b      	lsls	r3, r3, #1
 8009de8:	b29a      	uxth	r2, r3
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009dee:	7dfb      	ldrb	r3, [r7, #23]
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	4413      	add	r3, r2
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	7812      	ldrb	r2, [r2, #0]
 8009df8:	701a      	strb	r2, [r3, #0]
  idx++;
 8009dfa:	7dfb      	ldrb	r3, [r7, #23]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009e00:	7dfb      	ldrb	r3, [r7, #23]
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	4413      	add	r3, r2
 8009e06:	2203      	movs	r2, #3
 8009e08:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e0a:	7dfb      	ldrb	r3, [r7, #23]
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009e10:	e013      	b.n	8009e3a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009e12:	7dfb      	ldrb	r3, [r7, #23]
 8009e14:	68ba      	ldr	r2, [r7, #8]
 8009e16:	4413      	add	r3, r2
 8009e18:	693a      	ldr	r2, [r7, #16]
 8009e1a:	7812      	ldrb	r2, [r2, #0]
 8009e1c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	3301      	adds	r3, #1
 8009e22:	613b      	str	r3, [r7, #16]
    idx++;
 8009e24:	7dfb      	ldrb	r3, [r7, #23]
 8009e26:	3301      	adds	r3, #1
 8009e28:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009e2a:	7dfb      	ldrb	r3, [r7, #23]
 8009e2c:	68ba      	ldr	r2, [r7, #8]
 8009e2e:	4413      	add	r3, r2
 8009e30:	2200      	movs	r2, #0
 8009e32:	701a      	strb	r2, [r3, #0]
    idx++;
 8009e34:	7dfb      	ldrb	r3, [r7, #23]
 8009e36:	3301      	adds	r3, #1
 8009e38:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d1e7      	bne.n	8009e12 <USBD_GetString+0x52>
 8009e42:	e000      	b.n	8009e46 <USBD_GetString+0x86>
    return;
 8009e44:	bf00      	nop
  }
}
 8009e46:	3718      	adds	r7, #24
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009e54:	2300      	movs	r3, #0
 8009e56:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009e5c:	e005      	b.n	8009e6a <USBD_GetLen+0x1e>
  {
    len++;
 8009e5e:	7bfb      	ldrb	r3, [r7, #15]
 8009e60:	3301      	adds	r3, #1
 8009e62:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	3301      	adds	r3, #1
 8009e68:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d1f5      	bne.n	8009e5e <USBD_GetLen+0x12>
  }

  return len;
 8009e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3714      	adds	r7, #20
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr

08009e80 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2202      	movs	r2, #2
 8009e90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	68ba      	ldr	r2, [r7, #8]
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	68f8      	ldr	r0, [r7, #12]
 8009ea8:	f003 fd89 	bl	800d9be <USBD_LL_Transmit>

  return USBD_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b084      	sub	sp, #16
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	60f8      	str	r0, [r7, #12]
 8009ebe:	60b9      	str	r1, [r7, #8]
 8009ec0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	68ba      	ldr	r2, [r7, #8]
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	68f8      	ldr	r0, [r7, #12]
 8009eca:	f003 fd78 	bl	800d9be <USBD_LL_Transmit>

  return USBD_OK;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3710      	adds	r7, #16
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2203      	movs	r2, #3
 8009ee8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	68ba      	ldr	r2, [r7, #8]
 8009f00:	2100      	movs	r1, #0
 8009f02:	68f8      	ldr	r0, [r7, #12]
 8009f04:	f003 fd7c 	bl	800da00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b084      	sub	sp, #16
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	60f8      	str	r0, [r7, #12]
 8009f1a:	60b9      	str	r1, [r7, #8]
 8009f1c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	68ba      	ldr	r2, [r7, #8]
 8009f22:	2100      	movs	r1, #0
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f003 fd6b 	bl	800da00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f2a:	2300      	movs	r3, #0
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2204      	movs	r2, #4
 8009f40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009f44:	2300      	movs	r3, #0
 8009f46:	2200      	movs	r2, #0
 8009f48:	2100      	movs	r1, #0
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f003 fd37 	bl	800d9be <USBD_LL_Transmit>

  return USBD_OK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3708      	adds	r7, #8
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}

08009f5a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b082      	sub	sp, #8
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2205      	movs	r2, #5
 8009f66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	2100      	movs	r1, #0
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f003 fd45 	bl	800da00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3708      	adds	r7, #8
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009f80:	b480      	push	{r7}
 8009f82:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009f84:	bf00      	nop
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
	...

08009f90 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f96:	f3ef 8305 	mrs	r3, IPSR
 8009f9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009f9c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d10f      	bne.n	8009fc2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8009fa6:	607b      	str	r3, [r7, #4]
  return(result);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d105      	bne.n	8009fba <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009fae:	f3ef 8311 	mrs	r3, BASEPRI
 8009fb2:	603b      	str	r3, [r7, #0]
  return(result);
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d007      	beq.n	8009fca <osKernelInitialize+0x3a>
 8009fba:	4b0e      	ldr	r3, [pc, #56]	; (8009ff4 <osKernelInitialize+0x64>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d103      	bne.n	8009fca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009fc2:	f06f 0305 	mvn.w	r3, #5
 8009fc6:	60fb      	str	r3, [r7, #12]
 8009fc8:	e00c      	b.n	8009fe4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009fca:	4b0a      	ldr	r3, [pc, #40]	; (8009ff4 <osKernelInitialize+0x64>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d105      	bne.n	8009fde <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009fd2:	4b08      	ldr	r3, [pc, #32]	; (8009ff4 <osKernelInitialize+0x64>)
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	60fb      	str	r3, [r7, #12]
 8009fdc:	e002      	b.n	8009fe4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009fde:	f04f 33ff 	mov.w	r3, #4294967295
 8009fe2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3714      	adds	r7, #20
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	20000f28 	.word	0x20000f28

08009ff8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ffe:	f3ef 8305 	mrs	r3, IPSR
 800a002:	60bb      	str	r3, [r7, #8]
  return(result);
 800a004:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a006:	2b00      	cmp	r3, #0
 800a008:	d10f      	bne.n	800a02a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a00a:	f3ef 8310 	mrs	r3, PRIMASK
 800a00e:	607b      	str	r3, [r7, #4]
  return(result);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d105      	bne.n	800a022 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a016:	f3ef 8311 	mrs	r3, BASEPRI
 800a01a:	603b      	str	r3, [r7, #0]
  return(result);
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d007      	beq.n	800a032 <osKernelStart+0x3a>
 800a022:	4b0f      	ldr	r3, [pc, #60]	; (800a060 <osKernelStart+0x68>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2b02      	cmp	r3, #2
 800a028:	d103      	bne.n	800a032 <osKernelStart+0x3a>
    stat = osErrorISR;
 800a02a:	f06f 0305 	mvn.w	r3, #5
 800a02e:	60fb      	str	r3, [r7, #12]
 800a030:	e010      	b.n	800a054 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a032:	4b0b      	ldr	r3, [pc, #44]	; (800a060 <osKernelStart+0x68>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2b01      	cmp	r3, #1
 800a038:	d109      	bne.n	800a04e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a03a:	f7ff ffa1 	bl	8009f80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a03e:	4b08      	ldr	r3, [pc, #32]	; (800a060 <osKernelStart+0x68>)
 800a040:	2202      	movs	r2, #2
 800a042:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a044:	f001 fa2c 	bl	800b4a0 <vTaskStartScheduler>
      stat = osOK;
 800a048:	2300      	movs	r3, #0
 800a04a:	60fb      	str	r3, [r7, #12]
 800a04c:	e002      	b.n	800a054 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a04e:	f04f 33ff 	mov.w	r3, #4294967295
 800a052:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a054:	68fb      	ldr	r3, [r7, #12]
}
 800a056:	4618      	mov	r0, r3
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	20000f28 	.word	0x20000f28

0800a064 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a064:	b580      	push	{r7, lr}
 800a066:	b090      	sub	sp, #64	; 0x40
 800a068:	af04      	add	r7, sp, #16
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a070:	2300      	movs	r3, #0
 800a072:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a074:	f3ef 8305 	mrs	r3, IPSR
 800a078:	61fb      	str	r3, [r7, #28]
  return(result);
 800a07a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f040 808f 	bne.w	800a1a0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a082:	f3ef 8310 	mrs	r3, PRIMASK
 800a086:	61bb      	str	r3, [r7, #24]
  return(result);
 800a088:	69bb      	ldr	r3, [r7, #24]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d105      	bne.n	800a09a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a08e:	f3ef 8311 	mrs	r3, BASEPRI
 800a092:	617b      	str	r3, [r7, #20]
  return(result);
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d003      	beq.n	800a0a2 <osThreadNew+0x3e>
 800a09a:	4b44      	ldr	r3, [pc, #272]	; (800a1ac <osThreadNew+0x148>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d07e      	beq.n	800a1a0 <osThreadNew+0x13c>
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d07b      	beq.n	800a1a0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800a0a8:	2380      	movs	r3, #128	; 0x80
 800a0aa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a0ac:	2318      	movs	r3, #24
 800a0ae:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800a0b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0b8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d045      	beq.n	800a14c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d002      	beq.n	800a0ce <osThreadNew+0x6a>
        name = attr->name;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	699b      	ldr	r3, [r3, #24]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d002      	beq.n	800a0dc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	699b      	ldr	r3, [r3, #24]
 800a0da:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d008      	beq.n	800a0f4 <osThreadNew+0x90>
 800a0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e4:	2b38      	cmp	r3, #56	; 0x38
 800a0e6:	d805      	bhi.n	800a0f4 <osThreadNew+0x90>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	f003 0301 	and.w	r3, r3, #1
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d001      	beq.n	800a0f8 <osThreadNew+0x94>
        return (NULL);
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	e054      	b.n	800a1a2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	695b      	ldr	r3, [r3, #20]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d003      	beq.n	800a108 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	695b      	ldr	r3, [r3, #20]
 800a104:	089b      	lsrs	r3, r3, #2
 800a106:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d00e      	beq.n	800a12e <osThreadNew+0xca>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	2bbb      	cmp	r3, #187	; 0xbb
 800a116:	d90a      	bls.n	800a12e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d006      	beq.n	800a12e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	695b      	ldr	r3, [r3, #20]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d002      	beq.n	800a12e <osThreadNew+0xca>
        mem = 1;
 800a128:	2301      	movs	r3, #1
 800a12a:	623b      	str	r3, [r7, #32]
 800a12c:	e010      	b.n	800a150 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d10c      	bne.n	800a150 <osThreadNew+0xec>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d108      	bne.n	800a150 <osThreadNew+0xec>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	691b      	ldr	r3, [r3, #16]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d104      	bne.n	800a150 <osThreadNew+0xec>
          mem = 0;
 800a146:	2300      	movs	r3, #0
 800a148:	623b      	str	r3, [r7, #32]
 800a14a:	e001      	b.n	800a150 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800a14c:	2300      	movs	r3, #0
 800a14e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a150:	6a3b      	ldr	r3, [r7, #32]
 800a152:	2b01      	cmp	r3, #1
 800a154:	d110      	bne.n	800a178 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a15e:	9202      	str	r2, [sp, #8]
 800a160:	9301      	str	r3, [sp, #4]
 800a162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a164:	9300      	str	r3, [sp, #0]
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a16a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f000 ffa1 	bl	800b0b4 <xTaskCreateStatic>
 800a172:	4603      	mov	r3, r0
 800a174:	613b      	str	r3, [r7, #16]
 800a176:	e013      	b.n	800a1a0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800a178:	6a3b      	ldr	r3, [r7, #32]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d110      	bne.n	800a1a0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a180:	b29a      	uxth	r2, r3
 800a182:	f107 0310 	add.w	r3, r7, #16
 800a186:	9301      	str	r3, [sp, #4]
 800a188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18a:	9300      	str	r3, [sp, #0]
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	f000 fff2 	bl	800b17a <xTaskCreate>
 800a196:	4603      	mov	r3, r0
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d001      	beq.n	800a1a0 <osThreadNew+0x13c>
          hTask = NULL;
 800a19c:	2300      	movs	r3, #0
 800a19e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a1a0:	693b      	ldr	r3, [r7, #16]
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3730      	adds	r7, #48	; 0x30
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	20000f28 	.word	0x20000f28

0800a1b0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b086      	sub	sp, #24
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1b8:	f3ef 8305 	mrs	r3, IPSR
 800a1bc:	613b      	str	r3, [r7, #16]
  return(result);
 800a1be:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d10f      	bne.n	800a1e4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1c4:	f3ef 8310 	mrs	r3, PRIMASK
 800a1c8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d105      	bne.n	800a1dc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a1d0:	f3ef 8311 	mrs	r3, BASEPRI
 800a1d4:	60bb      	str	r3, [r7, #8]
  return(result);
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d007      	beq.n	800a1ec <osDelay+0x3c>
 800a1dc:	4b0a      	ldr	r3, [pc, #40]	; (800a208 <osDelay+0x58>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2b02      	cmp	r3, #2
 800a1e2:	d103      	bne.n	800a1ec <osDelay+0x3c>
    stat = osErrorISR;
 800a1e4:	f06f 0305 	mvn.w	r3, #5
 800a1e8:	617b      	str	r3, [r7, #20]
 800a1ea:	e007      	b.n	800a1fc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d002      	beq.n	800a1fc <osDelay+0x4c>
      vTaskDelay(ticks);
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f001 f91c 	bl	800b434 <vTaskDelay>
    }
  }

  return (stat);
 800a1fc:	697b      	ldr	r3, [r7, #20]
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3718      	adds	r7, #24
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	20000f28 	.word	0x20000f28

0800a20c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f002 fadf 	bl	800c7d8 <pvTimerGetTimerID>
 800a21a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d005      	beq.n	800a22e <TimerCallback+0x22>
    callb->func (callb->arg);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	6852      	ldr	r2, [r2, #4]
 800a22a:	4610      	mov	r0, r2
 800a22c:	4798      	blx	r3
  }
}
 800a22e:	bf00      	nop
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
	...

0800a238 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800a238:	b580      	push	{r7, lr}
 800a23a:	b08e      	sub	sp, #56	; 0x38
 800a23c:	af02      	add	r7, sp, #8
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	607a      	str	r2, [r7, #4]
 800a242:	603b      	str	r3, [r7, #0]
 800a244:	460b      	mov	r3, r1
 800a246:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800a248:	2300      	movs	r3, #0
 800a24a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a24c:	f3ef 8305 	mrs	r3, IPSR
 800a250:	61bb      	str	r3, [r7, #24]
  return(result);
 800a252:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800a254:	2b00      	cmp	r3, #0
 800a256:	d16a      	bne.n	800a32e <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a258:	f3ef 8310 	mrs	r3, PRIMASK
 800a25c:	617b      	str	r3, [r7, #20]
  return(result);
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d105      	bne.n	800a270 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a264:	f3ef 8311 	mrs	r3, BASEPRI
 800a268:	613b      	str	r3, [r7, #16]
  return(result);
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d003      	beq.n	800a278 <osTimerNew+0x40>
 800a270:	4b31      	ldr	r3, [pc, #196]	; (800a338 <osTimerNew+0x100>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2b02      	cmp	r3, #2
 800a276:	d05a      	beq.n	800a32e <osTimerNew+0xf6>
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d057      	beq.n	800a32e <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800a27e:	2008      	movs	r0, #8
 800a280:	f002 fd08 	bl	800cc94 <pvPortMalloc>
 800a284:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d050      	beq.n	800a32e <osTimerNew+0xf6>
      callb->func = func;
 800a28c:	69fb      	ldr	r3, [r7, #28]
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800a298:	7afb      	ldrb	r3, [r7, #11]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d102      	bne.n	800a2a4 <osTimerNew+0x6c>
        reload = pdFALSE;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a2a2:	e001      	b.n	800a2a8 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800a2a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ac:	623b      	str	r3, [r7, #32]
      name = NULL;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d01c      	beq.n	800a2f2 <osTimerNew+0xba>
        if (attr->name != NULL) {
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d002      	beq.n	800a2c6 <osTimerNew+0x8e>
          name = attr->name;
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d006      	beq.n	800a2dc <osTimerNew+0xa4>
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	2b2b      	cmp	r3, #43	; 0x2b
 800a2d4:	d902      	bls.n	800a2dc <osTimerNew+0xa4>
          mem = 1;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	623b      	str	r3, [r7, #32]
 800a2da:	e00c      	b.n	800a2f6 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d108      	bne.n	800a2f6 <osTimerNew+0xbe>
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d104      	bne.n	800a2f6 <osTimerNew+0xbe>
            mem = 0;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	623b      	str	r3, [r7, #32]
 800a2f0:	e001      	b.n	800a2f6 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800a2f6:	6a3b      	ldr	r3, [r7, #32]
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d10c      	bne.n	800a316 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	689b      	ldr	r3, [r3, #8]
 800a300:	9301      	str	r3, [sp, #4]
 800a302:	4b0e      	ldr	r3, [pc, #56]	; (800a33c <osTimerNew+0x104>)
 800a304:	9300      	str	r3, [sp, #0]
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a30a:	2101      	movs	r1, #1
 800a30c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a30e:	f001 fed2 	bl	800c0b6 <xTimerCreateStatic>
 800a312:	62b8      	str	r0, [r7, #40]	; 0x28
 800a314:	e00b      	b.n	800a32e <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800a316:	6a3b      	ldr	r3, [r7, #32]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d108      	bne.n	800a32e <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800a31c:	4b07      	ldr	r3, [pc, #28]	; (800a33c <osTimerNew+0x104>)
 800a31e:	9300      	str	r3, [sp, #0]
 800a320:	69fb      	ldr	r3, [r7, #28]
 800a322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a324:	2101      	movs	r1, #1
 800a326:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a328:	f001 fea4 	bl	800c074 <xTimerCreate>
 800a32c:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800a32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800a330:	4618      	mov	r0, r3
 800a332:	3730      	adds	r7, #48	; 0x30
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	20000f28 	.word	0x20000f28
 800a33c:	0800a20d 	.word	0x0800a20d

0800a340 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a340:	b580      	push	{r7, lr}
 800a342:	b08c      	sub	sp, #48	; 0x30
 800a344:	af02      	add	r7, sp, #8
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a34c:	2300      	movs	r3, #0
 800a34e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a350:	f3ef 8305 	mrs	r3, IPSR
 800a354:	61bb      	str	r3, [r7, #24]
  return(result);
 800a356:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d16f      	bne.n	800a43c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a35c:	f3ef 8310 	mrs	r3, PRIMASK
 800a360:	617b      	str	r3, [r7, #20]
  return(result);
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d105      	bne.n	800a374 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a368:	f3ef 8311 	mrs	r3, BASEPRI
 800a36c:	613b      	str	r3, [r7, #16]
  return(result);
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d003      	beq.n	800a37c <osMessageQueueNew+0x3c>
 800a374:	4b34      	ldr	r3, [pc, #208]	; (800a448 <osMessageQueueNew+0x108>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2b02      	cmp	r3, #2
 800a37a:	d05f      	beq.n	800a43c <osMessageQueueNew+0xfc>
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d05c      	beq.n	800a43c <osMessageQueueNew+0xfc>
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d059      	beq.n	800a43c <osMessageQueueNew+0xfc>
    mem = -1;
 800a388:	f04f 33ff 	mov.w	r3, #4294967295
 800a38c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d029      	beq.n	800a3e8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d012      	beq.n	800a3c2 <osMessageQueueNew+0x82>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	2b4f      	cmp	r3, #79	; 0x4f
 800a3a2:	d90e      	bls.n	800a3c2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d00a      	beq.n	800a3c2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	695a      	ldr	r2, [r3, #20]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	68b9      	ldr	r1, [r7, #8]
 800a3b4:	fb01 f303 	mul.w	r3, r1, r3
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d302      	bcc.n	800a3c2 <osMessageQueueNew+0x82>
        mem = 1;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	623b      	str	r3, [r7, #32]
 800a3c0:	e014      	b.n	800a3ec <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d110      	bne.n	800a3ec <osMessageQueueNew+0xac>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10c      	bne.n	800a3ec <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d108      	bne.n	800a3ec <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	695b      	ldr	r3, [r3, #20]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d104      	bne.n	800a3ec <osMessageQueueNew+0xac>
          mem = 0;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	623b      	str	r3, [r7, #32]
 800a3e6:	e001      	b.n	800a3ec <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a3ec:	6a3b      	ldr	r3, [r7, #32]
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d10b      	bne.n	800a40a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	691a      	ldr	r2, [r3, #16]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	2100      	movs	r1, #0
 800a3fc:	9100      	str	r1, [sp, #0]
 800a3fe:	68b9      	ldr	r1, [r7, #8]
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f000 f975 	bl	800a6f0 <xQueueGenericCreateStatic>
 800a406:	6278      	str	r0, [r7, #36]	; 0x24
 800a408:	e008      	b.n	800a41c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800a40a:	6a3b      	ldr	r3, [r7, #32]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d105      	bne.n	800a41c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800a410:	2200      	movs	r2, #0
 800a412:	68b9      	ldr	r1, [r7, #8]
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f000 f9ed 	bl	800a7f4 <xQueueGenericCreate>
 800a41a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d00c      	beq.n	800a43c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d003      	beq.n	800a430 <osMessageQueueNew+0xf0>
        name = attr->name;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	61fb      	str	r3, [r7, #28]
 800a42e:	e001      	b.n	800a434 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800a430:	2300      	movs	r3, #0
 800a432:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800a434:	69f9      	ldr	r1, [r7, #28]
 800a436:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a438:	f000 fdde 	bl	800aff8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3728      	adds	r7, #40	; 0x28
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	20000f28 	.word	0x20000f28

0800a44c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a44c:	b480      	push	{r7}
 800a44e:	b085      	sub	sp, #20
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	4a07      	ldr	r2, [pc, #28]	; (800a478 <vApplicationGetIdleTaskMemory+0x2c>)
 800a45c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	4a06      	ldr	r2, [pc, #24]	; (800a47c <vApplicationGetIdleTaskMemory+0x30>)
 800a462:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2280      	movs	r2, #128	; 0x80
 800a468:	601a      	str	r2, [r3, #0]
}
 800a46a:	bf00      	nop
 800a46c:	3714      	adds	r7, #20
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr
 800a476:	bf00      	nop
 800a478:	20000f2c 	.word	0x20000f2c
 800a47c:	20000fe8 	.word	0x20000fe8

0800a480 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a480:	b480      	push	{r7}
 800a482:	b085      	sub	sp, #20
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	4a07      	ldr	r2, [pc, #28]	; (800a4ac <vApplicationGetTimerTaskMemory+0x2c>)
 800a490:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	4a06      	ldr	r2, [pc, #24]	; (800a4b0 <vApplicationGetTimerTaskMemory+0x30>)
 800a496:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a49e:	601a      	str	r2, [r3, #0]
}
 800a4a0:	bf00      	nop
 800a4a2:	3714      	adds	r7, #20
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr
 800a4ac:	200011e8 	.word	0x200011e8
 800a4b0:	200012a4 	.word	0x200012a4

0800a4b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f103 0208 	add.w	r2, r3, #8
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a4cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f103 0208 	add.w	r2, r3, #8
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f103 0208 	add.w	r2, r3, #8
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a4e8:	bf00      	nop
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a502:	bf00      	nop
 800a504:	370c      	adds	r7, #12
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr

0800a50e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a50e:	b480      	push	{r7}
 800a510:	b085      	sub	sp, #20
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
 800a516:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	68fa      	ldr	r2, [r7, #12]
 800a522:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	689a      	ldr	r2, [r3, #8]
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	683a      	ldr	r2, [r7, #0]
 800a532:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	683a      	ldr	r2, [r7, #0]
 800a538:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	1c5a      	adds	r2, r3, #1
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	601a      	str	r2, [r3, #0]
}
 800a54a:	bf00      	nop
 800a54c:	3714      	adds	r7, #20
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr

0800a556 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a556:	b480      	push	{r7}
 800a558:	b085      	sub	sp, #20
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
 800a55e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a56c:	d103      	bne.n	800a576 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	691b      	ldr	r3, [r3, #16]
 800a572:	60fb      	str	r3, [r7, #12]
 800a574:	e00c      	b.n	800a590 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	3308      	adds	r3, #8
 800a57a:	60fb      	str	r3, [r7, #12]
 800a57c:	e002      	b.n	800a584 <vListInsert+0x2e>
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	60fb      	str	r3, [r7, #12]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d2f6      	bcs.n	800a57e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	685a      	ldr	r2, [r3, #4]
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	683a      	ldr	r2, [r7, #0]
 800a59e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	683a      	ldr	r2, [r7, #0]
 800a5aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	1c5a      	adds	r2, r3, #1
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	601a      	str	r2, [r3, #0]
}
 800a5bc:	bf00      	nop
 800a5be:	3714      	adds	r7, #20
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b085      	sub	sp, #20
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	691b      	ldr	r3, [r3, #16]
 800a5d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	6892      	ldr	r2, [r2, #8]
 800a5de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	6852      	ldr	r2, [r2, #4]
 800a5e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d103      	bne.n	800a5fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	689a      	ldr	r2, [r3, #8]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	1e5a      	subs	r2, r3, #1
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
}
 800a610:	4618      	mov	r0, r3
 800a612:	3714      	adds	r7, #20
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d10c      	bne.n	800a64a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a634:	b672      	cpsid	i
 800a636:	f383 8811 	msr	BASEPRI, r3
 800a63a:	f3bf 8f6f 	isb	sy
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	b662      	cpsie	i
 800a644:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a646:	bf00      	nop
 800a648:	e7fe      	b.n	800a648 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a64a:	f002 f9f7 	bl	800ca3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a656:	68f9      	ldr	r1, [r7, #12]
 800a658:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a65a:	fb01 f303 	mul.w	r3, r1, r3
 800a65e:	441a      	add	r2, r3
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2200      	movs	r2, #0
 800a668:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a67a:	3b01      	subs	r3, #1
 800a67c:	68f9      	ldr	r1, [r7, #12]
 800a67e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a680:	fb01 f303 	mul.w	r3, r1, r3
 800a684:	441a      	add	r2, r3
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	22ff      	movs	r2, #255	; 0xff
 800a68e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	22ff      	movs	r2, #255	; 0xff
 800a696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d114      	bne.n	800a6ca <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	691b      	ldr	r3, [r3, #16]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d01a      	beq.n	800a6de <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	3310      	adds	r3, #16
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f001 f9b1 	bl	800ba14 <xTaskRemoveFromEventList>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d012      	beq.n	800a6de <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a6b8:	4b0c      	ldr	r3, [pc, #48]	; (800a6ec <xQueueGenericReset+0xd0>)
 800a6ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6be:	601a      	str	r2, [r3, #0]
 800a6c0:	f3bf 8f4f 	dsb	sy
 800a6c4:	f3bf 8f6f 	isb	sy
 800a6c8:	e009      	b.n	800a6de <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	3310      	adds	r3, #16
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7ff fef0 	bl	800a4b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	3324      	adds	r3, #36	; 0x24
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7ff feeb 	bl	800a4b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a6de:	f002 f9e1 	bl	800caa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a6e2:	2301      	movs	r3, #1
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3710      	adds	r7, #16
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	e000ed04 	.word	0xe000ed04

0800a6f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b08e      	sub	sp, #56	; 0x38
 800a6f4:	af02      	add	r7, sp, #8
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	607a      	str	r2, [r7, #4]
 800a6fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d10c      	bne.n	800a71e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800a704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a708:	b672      	cpsid	i
 800a70a:	f383 8811 	msr	BASEPRI, r3
 800a70e:	f3bf 8f6f 	isb	sy
 800a712:	f3bf 8f4f 	dsb	sy
 800a716:	b662      	cpsie	i
 800a718:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a71a:	bf00      	nop
 800a71c:	e7fe      	b.n	800a71c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d10c      	bne.n	800a73e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800a724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a728:	b672      	cpsid	i
 800a72a:	f383 8811 	msr	BASEPRI, r3
 800a72e:	f3bf 8f6f 	isb	sy
 800a732:	f3bf 8f4f 	dsb	sy
 800a736:	b662      	cpsie	i
 800a738:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a73a:	bf00      	nop
 800a73c:	e7fe      	b.n	800a73c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d002      	beq.n	800a74a <xQueueGenericCreateStatic+0x5a>
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d001      	beq.n	800a74e <xQueueGenericCreateStatic+0x5e>
 800a74a:	2301      	movs	r3, #1
 800a74c:	e000      	b.n	800a750 <xQueueGenericCreateStatic+0x60>
 800a74e:	2300      	movs	r3, #0
 800a750:	2b00      	cmp	r3, #0
 800a752:	d10c      	bne.n	800a76e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800a754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a758:	b672      	cpsid	i
 800a75a:	f383 8811 	msr	BASEPRI, r3
 800a75e:	f3bf 8f6f 	isb	sy
 800a762:	f3bf 8f4f 	dsb	sy
 800a766:	b662      	cpsie	i
 800a768:	623b      	str	r3, [r7, #32]
}
 800a76a:	bf00      	nop
 800a76c:	e7fe      	b.n	800a76c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d102      	bne.n	800a77a <xQueueGenericCreateStatic+0x8a>
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d101      	bne.n	800a77e <xQueueGenericCreateStatic+0x8e>
 800a77a:	2301      	movs	r3, #1
 800a77c:	e000      	b.n	800a780 <xQueueGenericCreateStatic+0x90>
 800a77e:	2300      	movs	r3, #0
 800a780:	2b00      	cmp	r3, #0
 800a782:	d10c      	bne.n	800a79e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800a784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a788:	b672      	cpsid	i
 800a78a:	f383 8811 	msr	BASEPRI, r3
 800a78e:	f3bf 8f6f 	isb	sy
 800a792:	f3bf 8f4f 	dsb	sy
 800a796:	b662      	cpsie	i
 800a798:	61fb      	str	r3, [r7, #28]
}
 800a79a:	bf00      	nop
 800a79c:	e7fe      	b.n	800a79c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a79e:	2350      	movs	r3, #80	; 0x50
 800a7a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	2b50      	cmp	r3, #80	; 0x50
 800a7a6:	d00c      	beq.n	800a7c2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800a7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ac:	b672      	cpsid	i
 800a7ae:	f383 8811 	msr	BASEPRI, r3
 800a7b2:	f3bf 8f6f 	isb	sy
 800a7b6:	f3bf 8f4f 	dsb	sy
 800a7ba:	b662      	cpsie	i
 800a7bc:	61bb      	str	r3, [r7, #24]
}
 800a7be:	bf00      	nop
 800a7c0:	e7fe      	b.n	800a7c0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a7c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00d      	beq.n	800a7ea <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a7d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7dc:	9300      	str	r3, [sp, #0]
 800a7de:	4613      	mov	r3, r2
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	68b9      	ldr	r1, [r7, #8]
 800a7e4:	68f8      	ldr	r0, [r7, #12]
 800a7e6:	f000 f847 	bl	800a878 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3730      	adds	r7, #48	; 0x30
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b08a      	sub	sp, #40	; 0x28
 800a7f8:	af02      	add	r7, sp, #8
 800a7fa:	60f8      	str	r0, [r7, #12]
 800a7fc:	60b9      	str	r1, [r7, #8]
 800a7fe:	4613      	mov	r3, r2
 800a800:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d10c      	bne.n	800a822 <xQueueGenericCreate+0x2e>
	__asm volatile
 800a808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80c:	b672      	cpsid	i
 800a80e:	f383 8811 	msr	BASEPRI, r3
 800a812:	f3bf 8f6f 	isb	sy
 800a816:	f3bf 8f4f 	dsb	sy
 800a81a:	b662      	cpsie	i
 800a81c:	613b      	str	r3, [r7, #16]
}
 800a81e:	bf00      	nop
 800a820:	e7fe      	b.n	800a820 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d102      	bne.n	800a82e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a828:	2300      	movs	r3, #0
 800a82a:	61fb      	str	r3, [r7, #28]
 800a82c:	e004      	b.n	800a838 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	fb02 f303 	mul.w	r3, r2, r3
 800a836:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a838:	69fb      	ldr	r3, [r7, #28]
 800a83a:	3350      	adds	r3, #80	; 0x50
 800a83c:	4618      	mov	r0, r3
 800a83e:	f002 fa29 	bl	800cc94 <pvPortMalloc>
 800a842:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d011      	beq.n	800a86e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a84a:	69bb      	ldr	r3, [r7, #24]
 800a84c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	3350      	adds	r3, #80	; 0x50
 800a852:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a854:	69bb      	ldr	r3, [r7, #24]
 800a856:	2200      	movs	r2, #0
 800a858:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a85c:	79fa      	ldrb	r2, [r7, #7]
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	9300      	str	r3, [sp, #0]
 800a862:	4613      	mov	r3, r2
 800a864:	697a      	ldr	r2, [r7, #20]
 800a866:	68b9      	ldr	r1, [r7, #8]
 800a868:	68f8      	ldr	r0, [r7, #12]
 800a86a:	f000 f805 	bl	800a878 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a86e:	69bb      	ldr	r3, [r7, #24]
	}
 800a870:	4618      	mov	r0, r3
 800a872:	3720      	adds	r7, #32
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	607a      	str	r2, [r7, #4]
 800a884:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d103      	bne.n	800a894 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a88c:	69bb      	ldr	r3, [r7, #24]
 800a88e:	69ba      	ldr	r2, [r7, #24]
 800a890:	601a      	str	r2, [r3, #0]
 800a892:	e002      	b.n	800a89a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a894:	69bb      	ldr	r3, [r7, #24]
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	68ba      	ldr	r2, [r7, #8]
 800a8a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a8a6:	2101      	movs	r1, #1
 800a8a8:	69b8      	ldr	r0, [r7, #24]
 800a8aa:	f7ff feb7 	bl	800a61c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a8ae:	69bb      	ldr	r3, [r7, #24]
 800a8b0:	78fa      	ldrb	r2, [r7, #3]
 800a8b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a8b6:	bf00      	nop
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
	...

0800a8c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b08e      	sub	sp, #56	; 0x38
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	607a      	str	r2, [r7, #4]
 800a8cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d10c      	bne.n	800a8f6 <xQueueGenericSend+0x36>
	__asm volatile
 800a8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e0:	b672      	cpsid	i
 800a8e2:	f383 8811 	msr	BASEPRI, r3
 800a8e6:	f3bf 8f6f 	isb	sy
 800a8ea:	f3bf 8f4f 	dsb	sy
 800a8ee:	b662      	cpsie	i
 800a8f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a8f2:	bf00      	nop
 800a8f4:	e7fe      	b.n	800a8f4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d103      	bne.n	800a904 <xQueueGenericSend+0x44>
 800a8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a900:	2b00      	cmp	r3, #0
 800a902:	d101      	bne.n	800a908 <xQueueGenericSend+0x48>
 800a904:	2301      	movs	r3, #1
 800a906:	e000      	b.n	800a90a <xQueueGenericSend+0x4a>
 800a908:	2300      	movs	r3, #0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d10c      	bne.n	800a928 <xQueueGenericSend+0x68>
	__asm volatile
 800a90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a912:	b672      	cpsid	i
 800a914:	f383 8811 	msr	BASEPRI, r3
 800a918:	f3bf 8f6f 	isb	sy
 800a91c:	f3bf 8f4f 	dsb	sy
 800a920:	b662      	cpsie	i
 800a922:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a924:	bf00      	nop
 800a926:	e7fe      	b.n	800a926 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	2b02      	cmp	r3, #2
 800a92c:	d103      	bne.n	800a936 <xQueueGenericSend+0x76>
 800a92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a932:	2b01      	cmp	r3, #1
 800a934:	d101      	bne.n	800a93a <xQueueGenericSend+0x7a>
 800a936:	2301      	movs	r3, #1
 800a938:	e000      	b.n	800a93c <xQueueGenericSend+0x7c>
 800a93a:	2300      	movs	r3, #0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d10c      	bne.n	800a95a <xQueueGenericSend+0x9a>
	__asm volatile
 800a940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a944:	b672      	cpsid	i
 800a946:	f383 8811 	msr	BASEPRI, r3
 800a94a:	f3bf 8f6f 	isb	sy
 800a94e:	f3bf 8f4f 	dsb	sy
 800a952:	b662      	cpsie	i
 800a954:	623b      	str	r3, [r7, #32]
}
 800a956:	bf00      	nop
 800a958:	e7fe      	b.n	800a958 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a95a:	f001 fa5d 	bl	800be18 <xTaskGetSchedulerState>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d102      	bne.n	800a96a <xQueueGenericSend+0xaa>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d101      	bne.n	800a96e <xQueueGenericSend+0xae>
 800a96a:	2301      	movs	r3, #1
 800a96c:	e000      	b.n	800a970 <xQueueGenericSend+0xb0>
 800a96e:	2300      	movs	r3, #0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10c      	bne.n	800a98e <xQueueGenericSend+0xce>
	__asm volatile
 800a974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a978:	b672      	cpsid	i
 800a97a:	f383 8811 	msr	BASEPRI, r3
 800a97e:	f3bf 8f6f 	isb	sy
 800a982:	f3bf 8f4f 	dsb	sy
 800a986:	b662      	cpsie	i
 800a988:	61fb      	str	r3, [r7, #28]
}
 800a98a:	bf00      	nop
 800a98c:	e7fe      	b.n	800a98c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a98e:	f002 f855 	bl	800ca3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d302      	bcc.n	800a9a4 <xQueueGenericSend+0xe4>
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	2b02      	cmp	r3, #2
 800a9a2:	d129      	bne.n	800a9f8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a9a4:	683a      	ldr	r2, [r7, #0]
 800a9a6:	68b9      	ldr	r1, [r7, #8]
 800a9a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9aa:	f000 fa15 	bl	800add8 <prvCopyDataToQueue>
 800a9ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d010      	beq.n	800a9da <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ba:	3324      	adds	r3, #36	; 0x24
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f001 f829 	bl	800ba14 <xTaskRemoveFromEventList>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d013      	beq.n	800a9f0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a9c8:	4b3f      	ldr	r3, [pc, #252]	; (800aac8 <xQueueGenericSend+0x208>)
 800a9ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9ce:	601a      	str	r2, [r3, #0]
 800a9d0:	f3bf 8f4f 	dsb	sy
 800a9d4:	f3bf 8f6f 	isb	sy
 800a9d8:	e00a      	b.n	800a9f0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d007      	beq.n	800a9f0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a9e0:	4b39      	ldr	r3, [pc, #228]	; (800aac8 <xQueueGenericSend+0x208>)
 800a9e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9e6:	601a      	str	r2, [r3, #0]
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a9f0:	f002 f858 	bl	800caa4 <vPortExitCritical>
				return pdPASS;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	e063      	b.n	800aac0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d103      	bne.n	800aa06 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a9fe:	f002 f851 	bl	800caa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aa02:	2300      	movs	r3, #0
 800aa04:	e05c      	b.n	800aac0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d106      	bne.n	800aa1a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa0c:	f107 0314 	add.w	r3, r7, #20
 800aa10:	4618      	mov	r0, r3
 800aa12:	f001 f865 	bl	800bae0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa16:	2301      	movs	r3, #1
 800aa18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa1a:	f002 f843 	bl	800caa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa1e:	f000 fdb3 	bl	800b588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa22:	f002 f80b 	bl	800ca3c <vPortEnterCritical>
 800aa26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa2c:	b25b      	sxtb	r3, r3
 800aa2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa32:	d103      	bne.n	800aa3c <xQueueGenericSend+0x17c>
 800aa34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa36:	2200      	movs	r2, #0
 800aa38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa42:	b25b      	sxtb	r3, r3
 800aa44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa48:	d103      	bne.n	800aa52 <xQueueGenericSend+0x192>
 800aa4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa52:	f002 f827 	bl	800caa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa56:	1d3a      	adds	r2, r7, #4
 800aa58:	f107 0314 	add.w	r3, r7, #20
 800aa5c:	4611      	mov	r1, r2
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f001 f854 	bl	800bb0c <xTaskCheckForTimeOut>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d124      	bne.n	800aab4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aa6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa6c:	f000 faac 	bl	800afc8 <prvIsQueueFull>
 800aa70:	4603      	mov	r3, r0
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d018      	beq.n	800aaa8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa78:	3310      	adds	r3, #16
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	4611      	mov	r1, r2
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f000 ff74 	bl	800b96c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aa84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa86:	f000 fa37 	bl	800aef8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aa8a:	f000 fd8b 	bl	800b5a4 <xTaskResumeAll>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f47f af7c 	bne.w	800a98e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800aa96:	4b0c      	ldr	r3, [pc, #48]	; (800aac8 <xQueueGenericSend+0x208>)
 800aa98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa9c:	601a      	str	r2, [r3, #0]
 800aa9e:	f3bf 8f4f 	dsb	sy
 800aaa2:	f3bf 8f6f 	isb	sy
 800aaa6:	e772      	b.n	800a98e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aaa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aaaa:	f000 fa25 	bl	800aef8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aaae:	f000 fd79 	bl	800b5a4 <xTaskResumeAll>
 800aab2:	e76c      	b.n	800a98e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aab6:	f000 fa1f 	bl	800aef8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aaba:	f000 fd73 	bl	800b5a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aabe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3738      	adds	r7, #56	; 0x38
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	e000ed04 	.word	0xe000ed04

0800aacc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b08e      	sub	sp, #56	; 0x38
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
 800aad8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d10c      	bne.n	800aafe <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800aae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae8:	b672      	cpsid	i
 800aaea:	f383 8811 	msr	BASEPRI, r3
 800aaee:	f3bf 8f6f 	isb	sy
 800aaf2:	f3bf 8f4f 	dsb	sy
 800aaf6:	b662      	cpsie	i
 800aaf8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aafa:	bf00      	nop
 800aafc:	e7fe      	b.n	800aafc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d103      	bne.n	800ab0c <xQueueGenericSendFromISR+0x40>
 800ab04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d101      	bne.n	800ab10 <xQueueGenericSendFromISR+0x44>
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	e000      	b.n	800ab12 <xQueueGenericSendFromISR+0x46>
 800ab10:	2300      	movs	r3, #0
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d10c      	bne.n	800ab30 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800ab16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1a:	b672      	cpsid	i
 800ab1c:	f383 8811 	msr	BASEPRI, r3
 800ab20:	f3bf 8f6f 	isb	sy
 800ab24:	f3bf 8f4f 	dsb	sy
 800ab28:	b662      	cpsie	i
 800ab2a:	623b      	str	r3, [r7, #32]
}
 800ab2c:	bf00      	nop
 800ab2e:	e7fe      	b.n	800ab2e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	2b02      	cmp	r3, #2
 800ab34:	d103      	bne.n	800ab3e <xQueueGenericSendFromISR+0x72>
 800ab36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d101      	bne.n	800ab42 <xQueueGenericSendFromISR+0x76>
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e000      	b.n	800ab44 <xQueueGenericSendFromISR+0x78>
 800ab42:	2300      	movs	r3, #0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d10c      	bne.n	800ab62 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800ab48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4c:	b672      	cpsid	i
 800ab4e:	f383 8811 	msr	BASEPRI, r3
 800ab52:	f3bf 8f6f 	isb	sy
 800ab56:	f3bf 8f4f 	dsb	sy
 800ab5a:	b662      	cpsie	i
 800ab5c:	61fb      	str	r3, [r7, #28]
}
 800ab5e:	bf00      	nop
 800ab60:	e7fe      	b.n	800ab60 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab62:	f002 f853 	bl	800cc0c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ab66:	f3ef 8211 	mrs	r2, BASEPRI
 800ab6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6e:	b672      	cpsid	i
 800ab70:	f383 8811 	msr	BASEPRI, r3
 800ab74:	f3bf 8f6f 	isb	sy
 800ab78:	f3bf 8f4f 	dsb	sy
 800ab7c:	b662      	cpsie	i
 800ab7e:	61ba      	str	r2, [r7, #24]
 800ab80:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ab82:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d302      	bcc.n	800ab98 <xQueueGenericSendFromISR+0xcc>
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	d12c      	bne.n	800abf2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aba2:	683a      	ldr	r2, [r7, #0]
 800aba4:	68b9      	ldr	r1, [r7, #8]
 800aba6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aba8:	f000 f916 	bl	800add8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800abac:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800abb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb4:	d112      	bne.n	800abdc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d016      	beq.n	800abec <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc0:	3324      	adds	r3, #36	; 0x24
 800abc2:	4618      	mov	r0, r3
 800abc4:	f000 ff26 	bl	800ba14 <xTaskRemoveFromEventList>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d00e      	beq.n	800abec <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d00b      	beq.n	800abec <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2201      	movs	r2, #1
 800abd8:	601a      	str	r2, [r3, #0]
 800abda:	e007      	b.n	800abec <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800abdc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800abe0:	3301      	adds	r3, #1
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	b25a      	sxtb	r2, r3
 800abe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800abec:	2301      	movs	r3, #1
 800abee:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800abf0:	e001      	b.n	800abf6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800abf2:	2300      	movs	r3, #0
 800abf4:	637b      	str	r3, [r7, #52]	; 0x34
 800abf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ac00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3738      	adds	r7, #56	; 0x38
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b08c      	sub	sp, #48	; 0x30
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	60b9      	str	r1, [r7, #8]
 800ac16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d10c      	bne.n	800ac40 <xQueueReceive+0x34>
	__asm volatile
 800ac26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2a:	b672      	cpsid	i
 800ac2c:	f383 8811 	msr	BASEPRI, r3
 800ac30:	f3bf 8f6f 	isb	sy
 800ac34:	f3bf 8f4f 	dsb	sy
 800ac38:	b662      	cpsie	i
 800ac3a:	623b      	str	r3, [r7, #32]
}
 800ac3c:	bf00      	nop
 800ac3e:	e7fe      	b.n	800ac3e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d103      	bne.n	800ac4e <xQueueReceive+0x42>
 800ac46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d101      	bne.n	800ac52 <xQueueReceive+0x46>
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e000      	b.n	800ac54 <xQueueReceive+0x48>
 800ac52:	2300      	movs	r3, #0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d10c      	bne.n	800ac72 <xQueueReceive+0x66>
	__asm volatile
 800ac58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5c:	b672      	cpsid	i
 800ac5e:	f383 8811 	msr	BASEPRI, r3
 800ac62:	f3bf 8f6f 	isb	sy
 800ac66:	f3bf 8f4f 	dsb	sy
 800ac6a:	b662      	cpsie	i
 800ac6c:	61fb      	str	r3, [r7, #28]
}
 800ac6e:	bf00      	nop
 800ac70:	e7fe      	b.n	800ac70 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac72:	f001 f8d1 	bl	800be18 <xTaskGetSchedulerState>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d102      	bne.n	800ac82 <xQueueReceive+0x76>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d101      	bne.n	800ac86 <xQueueReceive+0x7a>
 800ac82:	2301      	movs	r3, #1
 800ac84:	e000      	b.n	800ac88 <xQueueReceive+0x7c>
 800ac86:	2300      	movs	r3, #0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d10c      	bne.n	800aca6 <xQueueReceive+0x9a>
	__asm volatile
 800ac8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac90:	b672      	cpsid	i
 800ac92:	f383 8811 	msr	BASEPRI, r3
 800ac96:	f3bf 8f6f 	isb	sy
 800ac9a:	f3bf 8f4f 	dsb	sy
 800ac9e:	b662      	cpsie	i
 800aca0:	61bb      	str	r3, [r7, #24]
}
 800aca2:	bf00      	nop
 800aca4:	e7fe      	b.n	800aca4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aca6:	f001 fec9 	bl	800ca3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800acb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d01f      	beq.n	800acf6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800acb6:	68b9      	ldr	r1, [r7, #8]
 800acb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acba:	f000 f8f7 	bl	800aeac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800acbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc0:	1e5a      	subs	r2, r3, #1
 800acc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc8:	691b      	ldr	r3, [r3, #16]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d00f      	beq.n	800acee <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd0:	3310      	adds	r3, #16
 800acd2:	4618      	mov	r0, r3
 800acd4:	f000 fe9e 	bl	800ba14 <xTaskRemoveFromEventList>
 800acd8:	4603      	mov	r3, r0
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d007      	beq.n	800acee <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800acde:	4b3d      	ldr	r3, [pc, #244]	; (800add4 <xQueueReceive+0x1c8>)
 800ace0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ace4:	601a      	str	r2, [r3, #0]
 800ace6:	f3bf 8f4f 	dsb	sy
 800acea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800acee:	f001 fed9 	bl	800caa4 <vPortExitCritical>
				return pdPASS;
 800acf2:	2301      	movs	r3, #1
 800acf4:	e069      	b.n	800adca <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d103      	bne.n	800ad04 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800acfc:	f001 fed2 	bl	800caa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad00:	2300      	movs	r3, #0
 800ad02:	e062      	b.n	800adca <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d106      	bne.n	800ad18 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad0a:	f107 0310 	add.w	r3, r7, #16
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f000 fee6 	bl	800bae0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad14:	2301      	movs	r3, #1
 800ad16:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad18:	f001 fec4 	bl	800caa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad1c:	f000 fc34 	bl	800b588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad20:	f001 fe8c 	bl	800ca3c <vPortEnterCritical>
 800ad24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad2a:	b25b      	sxtb	r3, r3
 800ad2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad30:	d103      	bne.n	800ad3a <xQueueReceive+0x12e>
 800ad32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad34:	2200      	movs	r2, #0
 800ad36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad40:	b25b      	sxtb	r3, r3
 800ad42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad46:	d103      	bne.n	800ad50 <xQueueReceive+0x144>
 800ad48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad50:	f001 fea8 	bl	800caa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad54:	1d3a      	adds	r2, r7, #4
 800ad56:	f107 0310 	add.w	r3, r7, #16
 800ad5a:	4611      	mov	r1, r2
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f000 fed5 	bl	800bb0c <xTaskCheckForTimeOut>
 800ad62:	4603      	mov	r3, r0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d123      	bne.n	800adb0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad6a:	f000 f917 	bl	800af9c <prvIsQueueEmpty>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d017      	beq.n	800ada4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad76:	3324      	adds	r3, #36	; 0x24
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	4611      	mov	r1, r2
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f000 fdf5 	bl	800b96c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad84:	f000 f8b8 	bl	800aef8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad88:	f000 fc0c 	bl	800b5a4 <xTaskResumeAll>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d189      	bne.n	800aca6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800ad92:	4b10      	ldr	r3, [pc, #64]	; (800add4 <xQueueReceive+0x1c8>)
 800ad94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad98:	601a      	str	r2, [r3, #0]
 800ad9a:	f3bf 8f4f 	dsb	sy
 800ad9e:	f3bf 8f6f 	isb	sy
 800ada2:	e780      	b.n	800aca6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ada4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ada6:	f000 f8a7 	bl	800aef8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800adaa:	f000 fbfb 	bl	800b5a4 <xTaskResumeAll>
 800adae:	e77a      	b.n	800aca6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800adb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adb2:	f000 f8a1 	bl	800aef8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800adb6:	f000 fbf5 	bl	800b5a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800adba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adbc:	f000 f8ee 	bl	800af9c <prvIsQueueEmpty>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f43f af6f 	beq.w	800aca6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800adc8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3730      	adds	r7, #48	; 0x30
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	e000ed04 	.word	0xe000ed04

0800add8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b086      	sub	sp, #24
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ade4:	2300      	movs	r3, #0
 800ade6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d10d      	bne.n	800ae12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d14d      	bne.n	800ae9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	689b      	ldr	r3, [r3, #8]
 800ae02:	4618      	mov	r0, r3
 800ae04:	f001 f826 	bl	800be54 <xTaskPriorityDisinherit>
 800ae08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	609a      	str	r2, [r3, #8]
 800ae10:	e043      	b.n	800ae9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d119      	bne.n	800ae4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	6858      	ldr	r0, [r3, #4]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae20:	461a      	mov	r2, r3
 800ae22:	68b9      	ldr	r1, [r7, #8]
 800ae24:	f002 fedc 	bl	800dbe0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	685a      	ldr	r2, [r3, #4]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae30:	441a      	add	r2, r3
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	685a      	ldr	r2, [r3, #4]
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d32b      	bcc.n	800ae9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681a      	ldr	r2, [r3, #0]
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	605a      	str	r2, [r3, #4]
 800ae4a:	e026      	b.n	800ae9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	68d8      	ldr	r0, [r3, #12]
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae54:	461a      	mov	r2, r3
 800ae56:	68b9      	ldr	r1, [r7, #8]
 800ae58:	f002 fec2 	bl	800dbe0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	68da      	ldr	r2, [r3, #12]
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae64:	425b      	negs	r3, r3
 800ae66:	441a      	add	r2, r3
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	68da      	ldr	r2, [r3, #12]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d207      	bcs.n	800ae88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	689a      	ldr	r2, [r3, #8]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae80:	425b      	negs	r3, r3
 800ae82:	441a      	add	r2, r3
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2b02      	cmp	r3, #2
 800ae8c:	d105      	bne.n	800ae9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d002      	beq.n	800ae9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	3b01      	subs	r3, #1
 800ae98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	1c5a      	adds	r2, r3, #1
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aea2:	697b      	ldr	r3, [r7, #20]
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3718      	adds	r7, #24
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d018      	beq.n	800aef0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	68da      	ldr	r2, [r3, #12]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec6:	441a      	add	r2, r3
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	68da      	ldr	r2, [r3, #12]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	689b      	ldr	r3, [r3, #8]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d303      	bcc.n	800aee0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	68d9      	ldr	r1, [r3, #12]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee8:	461a      	mov	r2, r3
 800aeea:	6838      	ldr	r0, [r7, #0]
 800aeec:	f002 fe78 	bl	800dbe0 <memcpy>
	}
}
 800aef0:	bf00      	nop
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af00:	f001 fd9c 	bl	800ca3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af0c:	e011      	b.n	800af32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af12:	2b00      	cmp	r3, #0
 800af14:	d012      	beq.n	800af3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	3324      	adds	r3, #36	; 0x24
 800af1a:	4618      	mov	r0, r3
 800af1c:	f000 fd7a 	bl	800ba14 <xTaskRemoveFromEventList>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d001      	beq.n	800af2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800af26:	f000 fe57 	bl	800bbd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800af2a:	7bfb      	ldrb	r3, [r7, #15]
 800af2c:	3b01      	subs	r3, #1
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af36:	2b00      	cmp	r3, #0
 800af38:	dce9      	bgt.n	800af0e <prvUnlockQueue+0x16>
 800af3a:	e000      	b.n	800af3e <prvUnlockQueue+0x46>
					break;
 800af3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	22ff      	movs	r2, #255	; 0xff
 800af42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800af46:	f001 fdad 	bl	800caa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800af4a:	f001 fd77 	bl	800ca3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af56:	e011      	b.n	800af7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	691b      	ldr	r3, [r3, #16]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d012      	beq.n	800af86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	3310      	adds	r3, #16
 800af64:	4618      	mov	r0, r3
 800af66:	f000 fd55 	bl	800ba14 <xTaskRemoveFromEventList>
 800af6a:	4603      	mov	r3, r0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d001      	beq.n	800af74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800af70:	f000 fe32 	bl	800bbd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800af74:	7bbb      	ldrb	r3, [r7, #14]
 800af76:	3b01      	subs	r3, #1
 800af78:	b2db      	uxtb	r3, r3
 800af7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af80:	2b00      	cmp	r3, #0
 800af82:	dce9      	bgt.n	800af58 <prvUnlockQueue+0x60>
 800af84:	e000      	b.n	800af88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800af86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	22ff      	movs	r2, #255	; 0xff
 800af8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800af90:	f001 fd88 	bl	800caa4 <vPortExitCritical>
}
 800af94:	bf00      	nop
 800af96:	3710      	adds	r7, #16
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800afa4:	f001 fd4a 	bl	800ca3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afac:	2b00      	cmp	r3, #0
 800afae:	d102      	bne.n	800afb6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800afb0:	2301      	movs	r3, #1
 800afb2:	60fb      	str	r3, [r7, #12]
 800afb4:	e001      	b.n	800afba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800afb6:	2300      	movs	r3, #0
 800afb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800afba:	f001 fd73 	bl	800caa4 <vPortExitCritical>

	return xReturn;
 800afbe:	68fb      	ldr	r3, [r7, #12]
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800afd0:	f001 fd34 	bl	800ca3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afdc:	429a      	cmp	r2, r3
 800afde:	d102      	bne.n	800afe6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800afe0:	2301      	movs	r3, #1
 800afe2:	60fb      	str	r3, [r7, #12]
 800afe4:	e001      	b.n	800afea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800afe6:	2300      	movs	r3, #0
 800afe8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800afea:	f001 fd5b 	bl	800caa4 <vPortExitCritical>

	return xReturn;
 800afee:	68fb      	ldr	r3, [r7, #12]
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3710      	adds	r7, #16
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aff8:	b480      	push	{r7}
 800affa:	b085      	sub	sp, #20
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b002:	2300      	movs	r3, #0
 800b004:	60fb      	str	r3, [r7, #12]
 800b006:	e014      	b.n	800b032 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b008:	4a0f      	ldr	r2, [pc, #60]	; (800b048 <vQueueAddToRegistry+0x50>)
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d10b      	bne.n	800b02c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b014:	490c      	ldr	r1, [pc, #48]	; (800b048 <vQueueAddToRegistry+0x50>)
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	683a      	ldr	r2, [r7, #0]
 800b01a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b01e:	4a0a      	ldr	r2, [pc, #40]	; (800b048 <vQueueAddToRegistry+0x50>)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	00db      	lsls	r3, r3, #3
 800b024:	4413      	add	r3, r2
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b02a:	e006      	b.n	800b03a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	3301      	adds	r3, #1
 800b030:	60fb      	str	r3, [r7, #12]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2b07      	cmp	r3, #7
 800b036:	d9e7      	bls.n	800b008 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b038:	bf00      	nop
 800b03a:	bf00      	nop
 800b03c:	3714      	adds	r7, #20
 800b03e:	46bd      	mov	sp, r7
 800b040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b044:	4770      	bx	lr
 800b046:	bf00      	nop
 800b048:	200016a4 	.word	0x200016a4

0800b04c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b086      	sub	sp, #24
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b05c:	f001 fcee 	bl	800ca3c <vPortEnterCritical>
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b066:	b25b      	sxtb	r3, r3
 800b068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b06c:	d103      	bne.n	800b076 <vQueueWaitForMessageRestricted+0x2a>
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	2200      	movs	r2, #0
 800b072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b07c:	b25b      	sxtb	r3, r3
 800b07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b082:	d103      	bne.n	800b08c <vQueueWaitForMessageRestricted+0x40>
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	2200      	movs	r2, #0
 800b088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b08c:	f001 fd0a 	bl	800caa4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b094:	2b00      	cmp	r3, #0
 800b096:	d106      	bne.n	800b0a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	3324      	adds	r3, #36	; 0x24
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	68b9      	ldr	r1, [r7, #8]
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f000 fc89 	bl	800b9b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b0a6:	6978      	ldr	r0, [r7, #20]
 800b0a8:	f7ff ff26 	bl	800aef8 <prvUnlockQueue>
	}
 800b0ac:	bf00      	nop
 800b0ae:	3718      	adds	r7, #24
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b08e      	sub	sp, #56	; 0x38
 800b0b8:	af04      	add	r7, sp, #16
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	607a      	str	r2, [r7, #4]
 800b0c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b0c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d10c      	bne.n	800b0e2 <xTaskCreateStatic+0x2e>
	__asm volatile
 800b0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0cc:	b672      	cpsid	i
 800b0ce:	f383 8811 	msr	BASEPRI, r3
 800b0d2:	f3bf 8f6f 	isb	sy
 800b0d6:	f3bf 8f4f 	dsb	sy
 800b0da:	b662      	cpsie	i
 800b0dc:	623b      	str	r3, [r7, #32]
}
 800b0de:	bf00      	nop
 800b0e0:	e7fe      	b.n	800b0e0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d10c      	bne.n	800b102 <xTaskCreateStatic+0x4e>
	__asm volatile
 800b0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ec:	b672      	cpsid	i
 800b0ee:	f383 8811 	msr	BASEPRI, r3
 800b0f2:	f3bf 8f6f 	isb	sy
 800b0f6:	f3bf 8f4f 	dsb	sy
 800b0fa:	b662      	cpsie	i
 800b0fc:	61fb      	str	r3, [r7, #28]
}
 800b0fe:	bf00      	nop
 800b100:	e7fe      	b.n	800b100 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b102:	23bc      	movs	r3, #188	; 0xbc
 800b104:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	2bbc      	cmp	r3, #188	; 0xbc
 800b10a:	d00c      	beq.n	800b126 <xTaskCreateStatic+0x72>
	__asm volatile
 800b10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b110:	b672      	cpsid	i
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	b662      	cpsie	i
 800b120:	61bb      	str	r3, [r7, #24]
}
 800b122:	bf00      	nop
 800b124:	e7fe      	b.n	800b124 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b126:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d01e      	beq.n	800b16c <xTaskCreateStatic+0xb8>
 800b12e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b130:	2b00      	cmp	r3, #0
 800b132:	d01b      	beq.n	800b16c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b136:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b13c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b140:	2202      	movs	r2, #2
 800b142:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b146:	2300      	movs	r3, #0
 800b148:	9303      	str	r3, [sp, #12]
 800b14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14c:	9302      	str	r3, [sp, #8]
 800b14e:	f107 0314 	add.w	r3, r7, #20
 800b152:	9301      	str	r3, [sp, #4]
 800b154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b156:	9300      	str	r3, [sp, #0]
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	68b9      	ldr	r1, [r7, #8]
 800b15e:	68f8      	ldr	r0, [r7, #12]
 800b160:	f000 f850 	bl	800b204 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b164:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b166:	f000 f8f5 	bl	800b354 <prvAddNewTaskToReadyList>
 800b16a:	e001      	b.n	800b170 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800b16c:	2300      	movs	r3, #0
 800b16e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b170:	697b      	ldr	r3, [r7, #20]
	}
 800b172:	4618      	mov	r0, r3
 800b174:	3728      	adds	r7, #40	; 0x28
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}

0800b17a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b17a:	b580      	push	{r7, lr}
 800b17c:	b08c      	sub	sp, #48	; 0x30
 800b17e:	af04      	add	r7, sp, #16
 800b180:	60f8      	str	r0, [r7, #12]
 800b182:	60b9      	str	r1, [r7, #8]
 800b184:	603b      	str	r3, [r7, #0]
 800b186:	4613      	mov	r3, r2
 800b188:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b18a:	88fb      	ldrh	r3, [r7, #6]
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	4618      	mov	r0, r3
 800b190:	f001 fd80 	bl	800cc94 <pvPortMalloc>
 800b194:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d00e      	beq.n	800b1ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b19c:	20bc      	movs	r0, #188	; 0xbc
 800b19e:	f001 fd79 	bl	800cc94 <pvPortMalloc>
 800b1a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d003      	beq.n	800b1b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b1aa:	69fb      	ldr	r3, [r7, #28]
 800b1ac:	697a      	ldr	r2, [r7, #20]
 800b1ae:	631a      	str	r2, [r3, #48]	; 0x30
 800b1b0:	e005      	b.n	800b1be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b1b2:	6978      	ldr	r0, [r7, #20]
 800b1b4:	f001 fe38 	bl	800ce28 <vPortFree>
 800b1b8:	e001      	b.n	800b1be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d017      	beq.n	800b1f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b1c4:	69fb      	ldr	r3, [r7, #28]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b1cc:	88fa      	ldrh	r2, [r7, #6]
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	9303      	str	r3, [sp, #12]
 800b1d2:	69fb      	ldr	r3, [r7, #28]
 800b1d4:	9302      	str	r3, [sp, #8]
 800b1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d8:	9301      	str	r3, [sp, #4]
 800b1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1dc:	9300      	str	r3, [sp, #0]
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	68b9      	ldr	r1, [r7, #8]
 800b1e2:	68f8      	ldr	r0, [r7, #12]
 800b1e4:	f000 f80e 	bl	800b204 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1e8:	69f8      	ldr	r0, [r7, #28]
 800b1ea:	f000 f8b3 	bl	800b354 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	61bb      	str	r3, [r7, #24]
 800b1f2:	e002      	b.n	800b1fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b1f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b1f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b1fa:	69bb      	ldr	r3, [r7, #24]
	}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3720      	adds	r7, #32
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b088      	sub	sp, #32
 800b208:	af00      	add	r7, sp, #0
 800b20a:	60f8      	str	r0, [r7, #12]
 800b20c:	60b9      	str	r1, [r7, #8]
 800b20e:	607a      	str	r2, [r7, #4]
 800b210:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b214:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	009b      	lsls	r3, r3, #2
 800b21a:	461a      	mov	r2, r3
 800b21c:	21a5      	movs	r1, #165	; 0xa5
 800b21e:	f002 fced 	bl	800dbfc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b226:	6879      	ldr	r1, [r7, #4]
 800b228:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b22c:	440b      	add	r3, r1
 800b22e:	009b      	lsls	r3, r3, #2
 800b230:	4413      	add	r3, r2
 800b232:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b234:	69bb      	ldr	r3, [r7, #24]
 800b236:	f023 0307 	bic.w	r3, r3, #7
 800b23a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b23c:	69bb      	ldr	r3, [r7, #24]
 800b23e:	f003 0307 	and.w	r3, r3, #7
 800b242:	2b00      	cmp	r3, #0
 800b244:	d00c      	beq.n	800b260 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800b246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24a:	b672      	cpsid	i
 800b24c:	f383 8811 	msr	BASEPRI, r3
 800b250:	f3bf 8f6f 	isb	sy
 800b254:	f3bf 8f4f 	dsb	sy
 800b258:	b662      	cpsie	i
 800b25a:	617b      	str	r3, [r7, #20]
}
 800b25c:	bf00      	nop
 800b25e:	e7fe      	b.n	800b25e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d01f      	beq.n	800b2a6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b266:	2300      	movs	r3, #0
 800b268:	61fb      	str	r3, [r7, #28]
 800b26a:	e012      	b.n	800b292 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b26c:	68ba      	ldr	r2, [r7, #8]
 800b26e:	69fb      	ldr	r3, [r7, #28]
 800b270:	4413      	add	r3, r2
 800b272:	7819      	ldrb	r1, [r3, #0]
 800b274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b276:	69fb      	ldr	r3, [r7, #28]
 800b278:	4413      	add	r3, r2
 800b27a:	3334      	adds	r3, #52	; 0x34
 800b27c:	460a      	mov	r2, r1
 800b27e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b280:	68ba      	ldr	r2, [r7, #8]
 800b282:	69fb      	ldr	r3, [r7, #28]
 800b284:	4413      	add	r3, r2
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d006      	beq.n	800b29a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	3301      	adds	r3, #1
 800b290:	61fb      	str	r3, [r7, #28]
 800b292:	69fb      	ldr	r3, [r7, #28]
 800b294:	2b0f      	cmp	r3, #15
 800b296:	d9e9      	bls.n	800b26c <prvInitialiseNewTask+0x68>
 800b298:	e000      	b.n	800b29c <prvInitialiseNewTask+0x98>
			{
				break;
 800b29a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b29e:	2200      	movs	r2, #0
 800b2a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b2a4:	e003      	b.n	800b2ae <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b0:	2b37      	cmp	r3, #55	; 0x37
 800b2b2:	d901      	bls.n	800b2b8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b2b4:	2337      	movs	r3, #55	; 0x37
 800b2b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2cc:	3304      	adds	r3, #4
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f7ff f910 	bl	800a4f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d6:	3318      	adds	r3, #24
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f7ff f90b 	bl	800a4f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fe:	2200      	movs	r2, #0
 800b300:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b306:	3354      	adds	r3, #84	; 0x54
 800b308:	2260      	movs	r2, #96	; 0x60
 800b30a:	2100      	movs	r1, #0
 800b30c:	4618      	mov	r0, r3
 800b30e:	f002 fc75 	bl	800dbfc <memset>
 800b312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b314:	4a0c      	ldr	r2, [pc, #48]	; (800b348 <prvInitialiseNewTask+0x144>)
 800b316:	659a      	str	r2, [r3, #88]	; 0x58
 800b318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31a:	4a0c      	ldr	r2, [pc, #48]	; (800b34c <prvInitialiseNewTask+0x148>)
 800b31c:	65da      	str	r2, [r3, #92]	; 0x5c
 800b31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b320:	4a0b      	ldr	r2, [pc, #44]	; (800b350 <prvInitialiseNewTask+0x14c>)
 800b322:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b324:	683a      	ldr	r2, [r7, #0]
 800b326:	68f9      	ldr	r1, [r7, #12]
 800b328:	69b8      	ldr	r0, [r7, #24]
 800b32a:	f001 fa77 	bl	800c81c <pxPortInitialiseStack>
 800b32e:	4602      	mov	r2, r0
 800b330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b332:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b336:	2b00      	cmp	r3, #0
 800b338:	d002      	beq.n	800b340 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b33c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b33e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b340:	bf00      	nop
 800b342:	3720      	adds	r7, #32
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}
 800b348:	0800e0f0 	.word	0x0800e0f0
 800b34c:	0800e110 	.word	0x0800e110
 800b350:	0800e0d0 	.word	0x0800e0d0

0800b354 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b35c:	f001 fb6e 	bl	800ca3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b360:	4b2d      	ldr	r3, [pc, #180]	; (800b418 <prvAddNewTaskToReadyList+0xc4>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	3301      	adds	r3, #1
 800b366:	4a2c      	ldr	r2, [pc, #176]	; (800b418 <prvAddNewTaskToReadyList+0xc4>)
 800b368:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b36a:	4b2c      	ldr	r3, [pc, #176]	; (800b41c <prvAddNewTaskToReadyList+0xc8>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d109      	bne.n	800b386 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b372:	4a2a      	ldr	r2, [pc, #168]	; (800b41c <prvAddNewTaskToReadyList+0xc8>)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b378:	4b27      	ldr	r3, [pc, #156]	; (800b418 <prvAddNewTaskToReadyList+0xc4>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d110      	bne.n	800b3a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b380:	f000 fc4e 	bl	800bc20 <prvInitialiseTaskLists>
 800b384:	e00d      	b.n	800b3a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b386:	4b26      	ldr	r3, [pc, #152]	; (800b420 <prvAddNewTaskToReadyList+0xcc>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d109      	bne.n	800b3a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b38e:	4b23      	ldr	r3, [pc, #140]	; (800b41c <prvAddNewTaskToReadyList+0xc8>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b398:	429a      	cmp	r2, r3
 800b39a:	d802      	bhi.n	800b3a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b39c:	4a1f      	ldr	r2, [pc, #124]	; (800b41c <prvAddNewTaskToReadyList+0xc8>)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b3a2:	4b20      	ldr	r3, [pc, #128]	; (800b424 <prvAddNewTaskToReadyList+0xd0>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	4a1e      	ldr	r2, [pc, #120]	; (800b424 <prvAddNewTaskToReadyList+0xd0>)
 800b3aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b3ac:	4b1d      	ldr	r3, [pc, #116]	; (800b424 <prvAddNewTaskToReadyList+0xd0>)
 800b3ae:	681a      	ldr	r2, [r3, #0]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3b8:	4b1b      	ldr	r3, [pc, #108]	; (800b428 <prvAddNewTaskToReadyList+0xd4>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d903      	bls.n	800b3c8 <prvAddNewTaskToReadyList+0x74>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c4:	4a18      	ldr	r2, [pc, #96]	; (800b428 <prvAddNewTaskToReadyList+0xd4>)
 800b3c6:	6013      	str	r3, [r2, #0]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3cc:	4613      	mov	r3, r2
 800b3ce:	009b      	lsls	r3, r3, #2
 800b3d0:	4413      	add	r3, r2
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	4a15      	ldr	r2, [pc, #84]	; (800b42c <prvAddNewTaskToReadyList+0xd8>)
 800b3d6:	441a      	add	r2, r3
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	3304      	adds	r3, #4
 800b3dc:	4619      	mov	r1, r3
 800b3de:	4610      	mov	r0, r2
 800b3e0:	f7ff f895 	bl	800a50e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b3e4:	f001 fb5e 	bl	800caa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b3e8:	4b0d      	ldr	r3, [pc, #52]	; (800b420 <prvAddNewTaskToReadyList+0xcc>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d00e      	beq.n	800b40e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b3f0:	4b0a      	ldr	r3, [pc, #40]	; (800b41c <prvAddNewTaskToReadyList+0xc8>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d207      	bcs.n	800b40e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b3fe:	4b0c      	ldr	r3, [pc, #48]	; (800b430 <prvAddNewTaskToReadyList+0xdc>)
 800b400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b404:	601a      	str	r2, [r3, #0]
 800b406:	f3bf 8f4f 	dsb	sy
 800b40a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b40e:	bf00      	nop
 800b410:	3708      	adds	r7, #8
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop
 800b418:	20001bb8 	.word	0x20001bb8
 800b41c:	200016e4 	.word	0x200016e4
 800b420:	20001bc4 	.word	0x20001bc4
 800b424:	20001bd4 	.word	0x20001bd4
 800b428:	20001bc0 	.word	0x20001bc0
 800b42c:	200016e8 	.word	0x200016e8
 800b430:	e000ed04 	.word	0xe000ed04

0800b434 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b43c:	2300      	movs	r3, #0
 800b43e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d019      	beq.n	800b47a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b446:	4b14      	ldr	r3, [pc, #80]	; (800b498 <vTaskDelay+0x64>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d00c      	beq.n	800b468 <vTaskDelay+0x34>
	__asm volatile
 800b44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b452:	b672      	cpsid	i
 800b454:	f383 8811 	msr	BASEPRI, r3
 800b458:	f3bf 8f6f 	isb	sy
 800b45c:	f3bf 8f4f 	dsb	sy
 800b460:	b662      	cpsie	i
 800b462:	60bb      	str	r3, [r7, #8]
}
 800b464:	bf00      	nop
 800b466:	e7fe      	b.n	800b466 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800b468:	f000 f88e 	bl	800b588 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b46c:	2100      	movs	r1, #0
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 fd62 	bl	800bf38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b474:	f000 f896 	bl	800b5a4 <xTaskResumeAll>
 800b478:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d107      	bne.n	800b490 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800b480:	4b06      	ldr	r3, [pc, #24]	; (800b49c <vTaskDelay+0x68>)
 800b482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b486:	601a      	str	r2, [r3, #0]
 800b488:	f3bf 8f4f 	dsb	sy
 800b48c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b490:	bf00      	nop
 800b492:	3710      	adds	r7, #16
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}
 800b498:	20001be0 	.word	0x20001be0
 800b49c:	e000ed04 	.word	0xe000ed04

0800b4a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b08a      	sub	sp, #40	; 0x28
 800b4a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b4ae:	463a      	mov	r2, r7
 800b4b0:	1d39      	adds	r1, r7, #4
 800b4b2:	f107 0308 	add.w	r3, r7, #8
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7fe ffc8 	bl	800a44c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b4bc:	6839      	ldr	r1, [r7, #0]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	68ba      	ldr	r2, [r7, #8]
 800b4c2:	9202      	str	r2, [sp, #8]
 800b4c4:	9301      	str	r3, [sp, #4]
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	9300      	str	r3, [sp, #0]
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	460a      	mov	r2, r1
 800b4ce:	4926      	ldr	r1, [pc, #152]	; (800b568 <vTaskStartScheduler+0xc8>)
 800b4d0:	4826      	ldr	r0, [pc, #152]	; (800b56c <vTaskStartScheduler+0xcc>)
 800b4d2:	f7ff fdef 	bl	800b0b4 <xTaskCreateStatic>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	4a25      	ldr	r2, [pc, #148]	; (800b570 <vTaskStartScheduler+0xd0>)
 800b4da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b4dc:	4b24      	ldr	r3, [pc, #144]	; (800b570 <vTaskStartScheduler+0xd0>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d002      	beq.n	800b4ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	617b      	str	r3, [r7, #20]
 800b4e8:	e001      	b.n	800b4ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d102      	bne.n	800b4fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b4f4:	f000 fd74 	bl	800bfe0 <xTimerCreateTimerTask>
 800b4f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d11d      	bne.n	800b53c <vTaskStartScheduler+0x9c>
	__asm volatile
 800b500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b504:	b672      	cpsid	i
 800b506:	f383 8811 	msr	BASEPRI, r3
 800b50a:	f3bf 8f6f 	isb	sy
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	b662      	cpsie	i
 800b514:	613b      	str	r3, [r7, #16]
}
 800b516:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b518:	4b16      	ldr	r3, [pc, #88]	; (800b574 <vTaskStartScheduler+0xd4>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	3354      	adds	r3, #84	; 0x54
 800b51e:	4a16      	ldr	r2, [pc, #88]	; (800b578 <vTaskStartScheduler+0xd8>)
 800b520:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b522:	4b16      	ldr	r3, [pc, #88]	; (800b57c <vTaskStartScheduler+0xdc>)
 800b524:	f04f 32ff 	mov.w	r2, #4294967295
 800b528:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b52a:	4b15      	ldr	r3, [pc, #84]	; (800b580 <vTaskStartScheduler+0xe0>)
 800b52c:	2201      	movs	r2, #1
 800b52e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b530:	4b14      	ldr	r3, [pc, #80]	; (800b584 <vTaskStartScheduler+0xe4>)
 800b532:	2200      	movs	r2, #0
 800b534:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b536:	f001 fa03 	bl	800c940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b53a:	e010      	b.n	800b55e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b542:	d10c      	bne.n	800b55e <vTaskStartScheduler+0xbe>
	__asm volatile
 800b544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b548:	b672      	cpsid	i
 800b54a:	f383 8811 	msr	BASEPRI, r3
 800b54e:	f3bf 8f6f 	isb	sy
 800b552:	f3bf 8f4f 	dsb	sy
 800b556:	b662      	cpsie	i
 800b558:	60fb      	str	r3, [r7, #12]
}
 800b55a:	bf00      	nop
 800b55c:	e7fe      	b.n	800b55c <vTaskStartScheduler+0xbc>
}
 800b55e:	bf00      	nop
 800b560:	3718      	adds	r7, #24
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	0800df90 	.word	0x0800df90
 800b56c:	0800bbf1 	.word	0x0800bbf1
 800b570:	20001bdc 	.word	0x20001bdc
 800b574:	200016e4 	.word	0x200016e4
 800b578:	20000110 	.word	0x20000110
 800b57c:	20001bd8 	.word	0x20001bd8
 800b580:	20001bc4 	.word	0x20001bc4
 800b584:	20001bbc 	.word	0x20001bbc

0800b588 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b588:	b480      	push	{r7}
 800b58a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b58c:	4b04      	ldr	r3, [pc, #16]	; (800b5a0 <vTaskSuspendAll+0x18>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	3301      	adds	r3, #1
 800b592:	4a03      	ldr	r2, [pc, #12]	; (800b5a0 <vTaskSuspendAll+0x18>)
 800b594:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b596:	bf00      	nop
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr
 800b5a0:	20001be0 	.word	0x20001be0

0800b5a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b5b2:	4b43      	ldr	r3, [pc, #268]	; (800b6c0 <xTaskResumeAll+0x11c>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d10c      	bne.n	800b5d4 <xTaskResumeAll+0x30>
	__asm volatile
 800b5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5be:	b672      	cpsid	i
 800b5c0:	f383 8811 	msr	BASEPRI, r3
 800b5c4:	f3bf 8f6f 	isb	sy
 800b5c8:	f3bf 8f4f 	dsb	sy
 800b5cc:	b662      	cpsie	i
 800b5ce:	603b      	str	r3, [r7, #0]
}
 800b5d0:	bf00      	nop
 800b5d2:	e7fe      	b.n	800b5d2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b5d4:	f001 fa32 	bl	800ca3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b5d8:	4b39      	ldr	r3, [pc, #228]	; (800b6c0 <xTaskResumeAll+0x11c>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	3b01      	subs	r3, #1
 800b5de:	4a38      	ldr	r2, [pc, #224]	; (800b6c0 <xTaskResumeAll+0x11c>)
 800b5e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5e2:	4b37      	ldr	r3, [pc, #220]	; (800b6c0 <xTaskResumeAll+0x11c>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d162      	bne.n	800b6b0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b5ea:	4b36      	ldr	r3, [pc, #216]	; (800b6c4 <xTaskResumeAll+0x120>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d05e      	beq.n	800b6b0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5f2:	e02f      	b.n	800b654 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5f4:	4b34      	ldr	r3, [pc, #208]	; (800b6c8 <xTaskResumeAll+0x124>)
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	68db      	ldr	r3, [r3, #12]
 800b5fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	3318      	adds	r3, #24
 800b600:	4618      	mov	r0, r3
 800b602:	f7fe ffe1 	bl	800a5c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	3304      	adds	r3, #4
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7fe ffdc 	bl	800a5c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b614:	4b2d      	ldr	r3, [pc, #180]	; (800b6cc <xTaskResumeAll+0x128>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	429a      	cmp	r2, r3
 800b61a:	d903      	bls.n	800b624 <xTaskResumeAll+0x80>
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b620:	4a2a      	ldr	r2, [pc, #168]	; (800b6cc <xTaskResumeAll+0x128>)
 800b622:	6013      	str	r3, [r2, #0]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b628:	4613      	mov	r3, r2
 800b62a:	009b      	lsls	r3, r3, #2
 800b62c:	4413      	add	r3, r2
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	4a27      	ldr	r2, [pc, #156]	; (800b6d0 <xTaskResumeAll+0x12c>)
 800b632:	441a      	add	r2, r3
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	3304      	adds	r3, #4
 800b638:	4619      	mov	r1, r3
 800b63a:	4610      	mov	r0, r2
 800b63c:	f7fe ff67 	bl	800a50e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b644:	4b23      	ldr	r3, [pc, #140]	; (800b6d4 <xTaskResumeAll+0x130>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d302      	bcc.n	800b654 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800b64e:	4b22      	ldr	r3, [pc, #136]	; (800b6d8 <xTaskResumeAll+0x134>)
 800b650:	2201      	movs	r2, #1
 800b652:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b654:	4b1c      	ldr	r3, [pc, #112]	; (800b6c8 <xTaskResumeAll+0x124>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d1cb      	bne.n	800b5f4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d001      	beq.n	800b666 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b662:	f000 fbb9 	bl	800bdd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b666:	4b1d      	ldr	r3, [pc, #116]	; (800b6dc <xTaskResumeAll+0x138>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d010      	beq.n	800b694 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b672:	f000 f859 	bl	800b728 <xTaskIncrementTick>
 800b676:	4603      	mov	r3, r0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d002      	beq.n	800b682 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800b67c:	4b16      	ldr	r3, [pc, #88]	; (800b6d8 <xTaskResumeAll+0x134>)
 800b67e:	2201      	movs	r2, #1
 800b680:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	3b01      	subs	r3, #1
 800b686:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d1f1      	bne.n	800b672 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800b68e:	4b13      	ldr	r3, [pc, #76]	; (800b6dc <xTaskResumeAll+0x138>)
 800b690:	2200      	movs	r2, #0
 800b692:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b694:	4b10      	ldr	r3, [pc, #64]	; (800b6d8 <xTaskResumeAll+0x134>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d009      	beq.n	800b6b0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b69c:	2301      	movs	r3, #1
 800b69e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b6a0:	4b0f      	ldr	r3, [pc, #60]	; (800b6e0 <xTaskResumeAll+0x13c>)
 800b6a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6a6:	601a      	str	r2, [r3, #0]
 800b6a8:	f3bf 8f4f 	dsb	sy
 800b6ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b6b0:	f001 f9f8 	bl	800caa4 <vPortExitCritical>

	return xAlreadyYielded;
 800b6b4:	68bb      	ldr	r3, [r7, #8]
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3710      	adds	r7, #16
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	20001be0 	.word	0x20001be0
 800b6c4:	20001bb8 	.word	0x20001bb8
 800b6c8:	20001b78 	.word	0x20001b78
 800b6cc:	20001bc0 	.word	0x20001bc0
 800b6d0:	200016e8 	.word	0x200016e8
 800b6d4:	200016e4 	.word	0x200016e4
 800b6d8:	20001bcc 	.word	0x20001bcc
 800b6dc:	20001bc8 	.word	0x20001bc8
 800b6e0:	e000ed04 	.word	0xe000ed04

0800b6e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b6ea:	4b05      	ldr	r3, [pc, #20]	; (800b700 <xTaskGetTickCount+0x1c>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b6f0:	687b      	ldr	r3, [r7, #4]
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	370c      	adds	r7, #12
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr
 800b6fe:	bf00      	nop
 800b700:	20001bbc 	.word	0x20001bbc

0800b704 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b70a:	f001 fa7f 	bl	800cc0c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b70e:	2300      	movs	r3, #0
 800b710:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b712:	4b04      	ldr	r3, [pc, #16]	; (800b724 <xTaskGetTickCountFromISR+0x20>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b718:	683b      	ldr	r3, [r7, #0]
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3708      	adds	r7, #8
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	20001bbc 	.word	0x20001bbc

0800b728 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b086      	sub	sp, #24
 800b72c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b72e:	2300      	movs	r3, #0
 800b730:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b732:	4b50      	ldr	r3, [pc, #320]	; (800b874 <xTaskIncrementTick+0x14c>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	f040 808b 	bne.w	800b852 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b73c:	4b4e      	ldr	r3, [pc, #312]	; (800b878 <xTaskIncrementTick+0x150>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	3301      	adds	r3, #1
 800b742:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b744:	4a4c      	ldr	r2, [pc, #304]	; (800b878 <xTaskIncrementTick+0x150>)
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d122      	bne.n	800b796 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800b750:	4b4a      	ldr	r3, [pc, #296]	; (800b87c <xTaskIncrementTick+0x154>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d00c      	beq.n	800b774 <xTaskIncrementTick+0x4c>
	__asm volatile
 800b75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75e:	b672      	cpsid	i
 800b760:	f383 8811 	msr	BASEPRI, r3
 800b764:	f3bf 8f6f 	isb	sy
 800b768:	f3bf 8f4f 	dsb	sy
 800b76c:	b662      	cpsie	i
 800b76e:	603b      	str	r3, [r7, #0]
}
 800b770:	bf00      	nop
 800b772:	e7fe      	b.n	800b772 <xTaskIncrementTick+0x4a>
 800b774:	4b41      	ldr	r3, [pc, #260]	; (800b87c <xTaskIncrementTick+0x154>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	60fb      	str	r3, [r7, #12]
 800b77a:	4b41      	ldr	r3, [pc, #260]	; (800b880 <xTaskIncrementTick+0x158>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4a3f      	ldr	r2, [pc, #252]	; (800b87c <xTaskIncrementTick+0x154>)
 800b780:	6013      	str	r3, [r2, #0]
 800b782:	4a3f      	ldr	r2, [pc, #252]	; (800b880 <xTaskIncrementTick+0x158>)
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	6013      	str	r3, [r2, #0]
 800b788:	4b3e      	ldr	r3, [pc, #248]	; (800b884 <xTaskIncrementTick+0x15c>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	3301      	adds	r3, #1
 800b78e:	4a3d      	ldr	r2, [pc, #244]	; (800b884 <xTaskIncrementTick+0x15c>)
 800b790:	6013      	str	r3, [r2, #0]
 800b792:	f000 fb21 	bl	800bdd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b796:	4b3c      	ldr	r3, [pc, #240]	; (800b888 <xTaskIncrementTick+0x160>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	693a      	ldr	r2, [r7, #16]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d349      	bcc.n	800b834 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7a0:	4b36      	ldr	r3, [pc, #216]	; (800b87c <xTaskIncrementTick+0x154>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d104      	bne.n	800b7b4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7aa:	4b37      	ldr	r3, [pc, #220]	; (800b888 <xTaskIncrementTick+0x160>)
 800b7ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b7b0:	601a      	str	r2, [r3, #0]
					break;
 800b7b2:	e03f      	b.n	800b834 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7b4:	4b31      	ldr	r3, [pc, #196]	; (800b87c <xTaskIncrementTick+0x154>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	68db      	ldr	r3, [r3, #12]
 800b7bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b7c4:	693a      	ldr	r2, [r7, #16]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d203      	bcs.n	800b7d4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b7cc:	4a2e      	ldr	r2, [pc, #184]	; (800b888 <xTaskIncrementTick+0x160>)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b7d2:	e02f      	b.n	800b834 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	3304      	adds	r3, #4
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f7fe fef5 	bl	800a5c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d004      	beq.n	800b7f0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	3318      	adds	r3, #24
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7fe feec 	bl	800a5c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f4:	4b25      	ldr	r3, [pc, #148]	; (800b88c <xTaskIncrementTick+0x164>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d903      	bls.n	800b804 <xTaskIncrementTick+0xdc>
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b800:	4a22      	ldr	r2, [pc, #136]	; (800b88c <xTaskIncrementTick+0x164>)
 800b802:	6013      	str	r3, [r2, #0]
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b808:	4613      	mov	r3, r2
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	4413      	add	r3, r2
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	4a1f      	ldr	r2, [pc, #124]	; (800b890 <xTaskIncrementTick+0x168>)
 800b812:	441a      	add	r2, r3
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	3304      	adds	r3, #4
 800b818:	4619      	mov	r1, r3
 800b81a:	4610      	mov	r0, r2
 800b81c:	f7fe fe77 	bl	800a50e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b824:	4b1b      	ldr	r3, [pc, #108]	; (800b894 <xTaskIncrementTick+0x16c>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d3b8      	bcc.n	800b7a0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800b82e:	2301      	movs	r3, #1
 800b830:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b832:	e7b5      	b.n	800b7a0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b834:	4b17      	ldr	r3, [pc, #92]	; (800b894 <xTaskIncrementTick+0x16c>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b83a:	4915      	ldr	r1, [pc, #84]	; (800b890 <xTaskIncrementTick+0x168>)
 800b83c:	4613      	mov	r3, r2
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	4413      	add	r3, r2
 800b842:	009b      	lsls	r3, r3, #2
 800b844:	440b      	add	r3, r1
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d907      	bls.n	800b85c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800b84c:	2301      	movs	r3, #1
 800b84e:	617b      	str	r3, [r7, #20]
 800b850:	e004      	b.n	800b85c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b852:	4b11      	ldr	r3, [pc, #68]	; (800b898 <xTaskIncrementTick+0x170>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	3301      	adds	r3, #1
 800b858:	4a0f      	ldr	r2, [pc, #60]	; (800b898 <xTaskIncrementTick+0x170>)
 800b85a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b85c:	4b0f      	ldr	r3, [pc, #60]	; (800b89c <xTaskIncrementTick+0x174>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d001      	beq.n	800b868 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800b864:	2301      	movs	r3, #1
 800b866:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b868:	697b      	ldr	r3, [r7, #20]
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3718      	adds	r7, #24
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	20001be0 	.word	0x20001be0
 800b878:	20001bbc 	.word	0x20001bbc
 800b87c:	20001b70 	.word	0x20001b70
 800b880:	20001b74 	.word	0x20001b74
 800b884:	20001bd0 	.word	0x20001bd0
 800b888:	20001bd8 	.word	0x20001bd8
 800b88c:	20001bc0 	.word	0x20001bc0
 800b890:	200016e8 	.word	0x200016e8
 800b894:	200016e4 	.word	0x200016e4
 800b898:	20001bc8 	.word	0x20001bc8
 800b89c:	20001bcc 	.word	0x20001bcc

0800b8a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b085      	sub	sp, #20
 800b8a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b8a6:	4b2b      	ldr	r3, [pc, #172]	; (800b954 <vTaskSwitchContext+0xb4>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d003      	beq.n	800b8b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b8ae:	4b2a      	ldr	r3, [pc, #168]	; (800b958 <vTaskSwitchContext+0xb8>)
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b8b4:	e048      	b.n	800b948 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800b8b6:	4b28      	ldr	r3, [pc, #160]	; (800b958 <vTaskSwitchContext+0xb8>)
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8bc:	4b27      	ldr	r3, [pc, #156]	; (800b95c <vTaskSwitchContext+0xbc>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	60fb      	str	r3, [r7, #12]
 800b8c2:	e012      	b.n	800b8ea <vTaskSwitchContext+0x4a>
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d10c      	bne.n	800b8e4 <vTaskSwitchContext+0x44>
	__asm volatile
 800b8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ce:	b672      	cpsid	i
 800b8d0:	f383 8811 	msr	BASEPRI, r3
 800b8d4:	f3bf 8f6f 	isb	sy
 800b8d8:	f3bf 8f4f 	dsb	sy
 800b8dc:	b662      	cpsie	i
 800b8de:	607b      	str	r3, [r7, #4]
}
 800b8e0:	bf00      	nop
 800b8e2:	e7fe      	b.n	800b8e2 <vTaskSwitchContext+0x42>
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	3b01      	subs	r3, #1
 800b8e8:	60fb      	str	r3, [r7, #12]
 800b8ea:	491d      	ldr	r1, [pc, #116]	; (800b960 <vTaskSwitchContext+0xc0>)
 800b8ec:	68fa      	ldr	r2, [r7, #12]
 800b8ee:	4613      	mov	r3, r2
 800b8f0:	009b      	lsls	r3, r3, #2
 800b8f2:	4413      	add	r3, r2
 800b8f4:	009b      	lsls	r3, r3, #2
 800b8f6:	440b      	add	r3, r1
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d0e2      	beq.n	800b8c4 <vTaskSwitchContext+0x24>
 800b8fe:	68fa      	ldr	r2, [r7, #12]
 800b900:	4613      	mov	r3, r2
 800b902:	009b      	lsls	r3, r3, #2
 800b904:	4413      	add	r3, r2
 800b906:	009b      	lsls	r3, r3, #2
 800b908:	4a15      	ldr	r2, [pc, #84]	; (800b960 <vTaskSwitchContext+0xc0>)
 800b90a:	4413      	add	r3, r2
 800b90c:	60bb      	str	r3, [r7, #8]
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	685a      	ldr	r2, [r3, #4]
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	605a      	str	r2, [r3, #4]
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	685a      	ldr	r2, [r3, #4]
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	3308      	adds	r3, #8
 800b920:	429a      	cmp	r2, r3
 800b922:	d104      	bne.n	800b92e <vTaskSwitchContext+0x8e>
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	685a      	ldr	r2, [r3, #4]
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	605a      	str	r2, [r3, #4]
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	68db      	ldr	r3, [r3, #12]
 800b934:	4a0b      	ldr	r2, [pc, #44]	; (800b964 <vTaskSwitchContext+0xc4>)
 800b936:	6013      	str	r3, [r2, #0]
 800b938:	4a08      	ldr	r2, [pc, #32]	; (800b95c <vTaskSwitchContext+0xbc>)
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b93e:	4b09      	ldr	r3, [pc, #36]	; (800b964 <vTaskSwitchContext+0xc4>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	3354      	adds	r3, #84	; 0x54
 800b944:	4a08      	ldr	r2, [pc, #32]	; (800b968 <vTaskSwitchContext+0xc8>)
 800b946:	6013      	str	r3, [r2, #0]
}
 800b948:	bf00      	nop
 800b94a:	3714      	adds	r7, #20
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr
 800b954:	20001be0 	.word	0x20001be0
 800b958:	20001bcc 	.word	0x20001bcc
 800b95c:	20001bc0 	.word	0x20001bc0
 800b960:	200016e8 	.word	0x200016e8
 800b964:	200016e4 	.word	0x200016e4
 800b968:	20000110 	.word	0x20000110

0800b96c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d10c      	bne.n	800b996 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800b97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b980:	b672      	cpsid	i
 800b982:	f383 8811 	msr	BASEPRI, r3
 800b986:	f3bf 8f6f 	isb	sy
 800b98a:	f3bf 8f4f 	dsb	sy
 800b98e:	b662      	cpsie	i
 800b990:	60fb      	str	r3, [r7, #12]
}
 800b992:	bf00      	nop
 800b994:	e7fe      	b.n	800b994 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b996:	4b07      	ldr	r3, [pc, #28]	; (800b9b4 <vTaskPlaceOnEventList+0x48>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	3318      	adds	r3, #24
 800b99c:	4619      	mov	r1, r3
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f7fe fdd9 	bl	800a556 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b9a4:	2101      	movs	r1, #1
 800b9a6:	6838      	ldr	r0, [r7, #0]
 800b9a8:	f000 fac6 	bl	800bf38 <prvAddCurrentTaskToDelayedList>
}
 800b9ac:	bf00      	nop
 800b9ae:	3710      	adds	r7, #16
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}
 800b9b4:	200016e4 	.word	0x200016e4

0800b9b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b086      	sub	sp, #24
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d10c      	bne.n	800b9e4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800b9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ce:	b672      	cpsid	i
 800b9d0:	f383 8811 	msr	BASEPRI, r3
 800b9d4:	f3bf 8f6f 	isb	sy
 800b9d8:	f3bf 8f4f 	dsb	sy
 800b9dc:	b662      	cpsie	i
 800b9de:	617b      	str	r3, [r7, #20]
}
 800b9e0:	bf00      	nop
 800b9e2:	e7fe      	b.n	800b9e2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b9e4:	4b0a      	ldr	r3, [pc, #40]	; (800ba10 <vTaskPlaceOnEventListRestricted+0x58>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	3318      	adds	r3, #24
 800b9ea:	4619      	mov	r1, r3
 800b9ec:	68f8      	ldr	r0, [r7, #12]
 800b9ee:	f7fe fd8e 	bl	800a50e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d002      	beq.n	800b9fe <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800b9f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b9fe:	6879      	ldr	r1, [r7, #4]
 800ba00:	68b8      	ldr	r0, [r7, #8]
 800ba02:	f000 fa99 	bl	800bf38 <prvAddCurrentTaskToDelayedList>
	}
 800ba06:	bf00      	nop
 800ba08:	3718      	adds	r7, #24
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}
 800ba0e:	bf00      	nop
 800ba10:	200016e4 	.word	0x200016e4

0800ba14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b086      	sub	sp, #24
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	68db      	ldr	r3, [r3, #12]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d10c      	bne.n	800ba44 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800ba2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2e:	b672      	cpsid	i
 800ba30:	f383 8811 	msr	BASEPRI, r3
 800ba34:	f3bf 8f6f 	isb	sy
 800ba38:	f3bf 8f4f 	dsb	sy
 800ba3c:	b662      	cpsie	i
 800ba3e:	60fb      	str	r3, [r7, #12]
}
 800ba40:	bf00      	nop
 800ba42:	e7fe      	b.n	800ba42 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	3318      	adds	r3, #24
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f7fe fdbd 	bl	800a5c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba4e:	4b1e      	ldr	r3, [pc, #120]	; (800bac8 <xTaskRemoveFromEventList+0xb4>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d11d      	bne.n	800ba92 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	3304      	adds	r3, #4
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7fe fdb4 	bl	800a5c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba64:	4b19      	ldr	r3, [pc, #100]	; (800bacc <xTaskRemoveFromEventList+0xb8>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d903      	bls.n	800ba74 <xTaskRemoveFromEventList+0x60>
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba70:	4a16      	ldr	r2, [pc, #88]	; (800bacc <xTaskRemoveFromEventList+0xb8>)
 800ba72:	6013      	str	r3, [r2, #0]
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba78:	4613      	mov	r3, r2
 800ba7a:	009b      	lsls	r3, r3, #2
 800ba7c:	4413      	add	r3, r2
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	4a13      	ldr	r2, [pc, #76]	; (800bad0 <xTaskRemoveFromEventList+0xbc>)
 800ba82:	441a      	add	r2, r3
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	3304      	adds	r3, #4
 800ba88:	4619      	mov	r1, r3
 800ba8a:	4610      	mov	r0, r2
 800ba8c:	f7fe fd3f 	bl	800a50e <vListInsertEnd>
 800ba90:	e005      	b.n	800ba9e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	3318      	adds	r3, #24
 800ba96:	4619      	mov	r1, r3
 800ba98:	480e      	ldr	r0, [pc, #56]	; (800bad4 <xTaskRemoveFromEventList+0xc0>)
 800ba9a:	f7fe fd38 	bl	800a50e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baa2:	4b0d      	ldr	r3, [pc, #52]	; (800bad8 <xTaskRemoveFromEventList+0xc4>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d905      	bls.n	800bab8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800baac:	2301      	movs	r3, #1
 800baae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bab0:	4b0a      	ldr	r3, [pc, #40]	; (800badc <xTaskRemoveFromEventList+0xc8>)
 800bab2:	2201      	movs	r2, #1
 800bab4:	601a      	str	r2, [r3, #0]
 800bab6:	e001      	b.n	800babc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800bab8:	2300      	movs	r3, #0
 800baba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800babc:	697b      	ldr	r3, [r7, #20]
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3718      	adds	r7, #24
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	20001be0 	.word	0x20001be0
 800bacc:	20001bc0 	.word	0x20001bc0
 800bad0:	200016e8 	.word	0x200016e8
 800bad4:	20001b78 	.word	0x20001b78
 800bad8:	200016e4 	.word	0x200016e4
 800badc:	20001bcc 	.word	0x20001bcc

0800bae0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bae0:	b480      	push	{r7}
 800bae2:	b083      	sub	sp, #12
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bae8:	4b06      	ldr	r3, [pc, #24]	; (800bb04 <vTaskInternalSetTimeOutState+0x24>)
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800baf0:	4b05      	ldr	r3, [pc, #20]	; (800bb08 <vTaskInternalSetTimeOutState+0x28>)
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	605a      	str	r2, [r3, #4]
}
 800baf8:	bf00      	nop
 800bafa:	370c      	adds	r7, #12
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr
 800bb04:	20001bd0 	.word	0x20001bd0
 800bb08:	20001bbc 	.word	0x20001bbc

0800bb0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b088      	sub	sp, #32
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d10c      	bne.n	800bb36 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800bb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb20:	b672      	cpsid	i
 800bb22:	f383 8811 	msr	BASEPRI, r3
 800bb26:	f3bf 8f6f 	isb	sy
 800bb2a:	f3bf 8f4f 	dsb	sy
 800bb2e:	b662      	cpsie	i
 800bb30:	613b      	str	r3, [r7, #16]
}
 800bb32:	bf00      	nop
 800bb34:	e7fe      	b.n	800bb34 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d10c      	bne.n	800bb56 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800bb3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb40:	b672      	cpsid	i
 800bb42:	f383 8811 	msr	BASEPRI, r3
 800bb46:	f3bf 8f6f 	isb	sy
 800bb4a:	f3bf 8f4f 	dsb	sy
 800bb4e:	b662      	cpsie	i
 800bb50:	60fb      	str	r3, [r7, #12]
}
 800bb52:	bf00      	nop
 800bb54:	e7fe      	b.n	800bb54 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800bb56:	f000 ff71 	bl	800ca3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bb5a:	4b1d      	ldr	r3, [pc, #116]	; (800bbd0 <xTaskCheckForTimeOut+0xc4>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	69ba      	ldr	r2, [r7, #24]
 800bb66:	1ad3      	subs	r3, r2, r3
 800bb68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb72:	d102      	bne.n	800bb7a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bb74:	2300      	movs	r3, #0
 800bb76:	61fb      	str	r3, [r7, #28]
 800bb78:	e023      	b.n	800bbc2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681a      	ldr	r2, [r3, #0]
 800bb7e:	4b15      	ldr	r3, [pc, #84]	; (800bbd4 <xTaskCheckForTimeOut+0xc8>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d007      	beq.n	800bb96 <xTaskCheckForTimeOut+0x8a>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	69ba      	ldr	r2, [r7, #24]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d302      	bcc.n	800bb96 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bb90:	2301      	movs	r3, #1
 800bb92:	61fb      	str	r3, [r7, #28]
 800bb94:	e015      	b.n	800bbc2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	697a      	ldr	r2, [r7, #20]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d20b      	bcs.n	800bbb8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	1ad2      	subs	r2, r2, r3
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f7ff ff97 	bl	800bae0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	61fb      	str	r3, [r7, #28]
 800bbb6:	e004      	b.n	800bbc2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bbc2:	f000 ff6f 	bl	800caa4 <vPortExitCritical>

	return xReturn;
 800bbc6:	69fb      	ldr	r3, [r7, #28]
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3720      	adds	r7, #32
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	20001bbc 	.word	0x20001bbc
 800bbd4:	20001bd0 	.word	0x20001bd0

0800bbd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bbd8:	b480      	push	{r7}
 800bbda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bbdc:	4b03      	ldr	r3, [pc, #12]	; (800bbec <vTaskMissedYield+0x14>)
 800bbde:	2201      	movs	r2, #1
 800bbe0:	601a      	str	r2, [r3, #0]
}
 800bbe2:	bf00      	nop
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr
 800bbec:	20001bcc 	.word	0x20001bcc

0800bbf0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bbf8:	f000 f852 	bl	800bca0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bbfc:	4b06      	ldr	r3, [pc, #24]	; (800bc18 <prvIdleTask+0x28>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d9f9      	bls.n	800bbf8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bc04:	4b05      	ldr	r3, [pc, #20]	; (800bc1c <prvIdleTask+0x2c>)
 800bc06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc0a:	601a      	str	r2, [r3, #0]
 800bc0c:	f3bf 8f4f 	dsb	sy
 800bc10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bc14:	e7f0      	b.n	800bbf8 <prvIdleTask+0x8>
 800bc16:	bf00      	nop
 800bc18:	200016e8 	.word	0x200016e8
 800bc1c:	e000ed04 	.word	0xe000ed04

0800bc20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc26:	2300      	movs	r3, #0
 800bc28:	607b      	str	r3, [r7, #4]
 800bc2a:	e00c      	b.n	800bc46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bc2c:	687a      	ldr	r2, [r7, #4]
 800bc2e:	4613      	mov	r3, r2
 800bc30:	009b      	lsls	r3, r3, #2
 800bc32:	4413      	add	r3, r2
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	4a12      	ldr	r2, [pc, #72]	; (800bc80 <prvInitialiseTaskLists+0x60>)
 800bc38:	4413      	add	r3, r2
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7fe fc3a 	bl	800a4b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	3301      	adds	r3, #1
 800bc44:	607b      	str	r3, [r7, #4]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2b37      	cmp	r3, #55	; 0x37
 800bc4a:	d9ef      	bls.n	800bc2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bc4c:	480d      	ldr	r0, [pc, #52]	; (800bc84 <prvInitialiseTaskLists+0x64>)
 800bc4e:	f7fe fc31 	bl	800a4b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bc52:	480d      	ldr	r0, [pc, #52]	; (800bc88 <prvInitialiseTaskLists+0x68>)
 800bc54:	f7fe fc2e 	bl	800a4b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bc58:	480c      	ldr	r0, [pc, #48]	; (800bc8c <prvInitialiseTaskLists+0x6c>)
 800bc5a:	f7fe fc2b 	bl	800a4b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bc5e:	480c      	ldr	r0, [pc, #48]	; (800bc90 <prvInitialiseTaskLists+0x70>)
 800bc60:	f7fe fc28 	bl	800a4b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bc64:	480b      	ldr	r0, [pc, #44]	; (800bc94 <prvInitialiseTaskLists+0x74>)
 800bc66:	f7fe fc25 	bl	800a4b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bc6a:	4b0b      	ldr	r3, [pc, #44]	; (800bc98 <prvInitialiseTaskLists+0x78>)
 800bc6c:	4a05      	ldr	r2, [pc, #20]	; (800bc84 <prvInitialiseTaskLists+0x64>)
 800bc6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bc70:	4b0a      	ldr	r3, [pc, #40]	; (800bc9c <prvInitialiseTaskLists+0x7c>)
 800bc72:	4a05      	ldr	r2, [pc, #20]	; (800bc88 <prvInitialiseTaskLists+0x68>)
 800bc74:	601a      	str	r2, [r3, #0]
}
 800bc76:	bf00      	nop
 800bc78:	3708      	adds	r7, #8
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	bf00      	nop
 800bc80:	200016e8 	.word	0x200016e8
 800bc84:	20001b48 	.word	0x20001b48
 800bc88:	20001b5c 	.word	0x20001b5c
 800bc8c:	20001b78 	.word	0x20001b78
 800bc90:	20001b8c 	.word	0x20001b8c
 800bc94:	20001ba4 	.word	0x20001ba4
 800bc98:	20001b70 	.word	0x20001b70
 800bc9c:	20001b74 	.word	0x20001b74

0800bca0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bca6:	e019      	b.n	800bcdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bca8:	f000 fec8 	bl	800ca3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcac:	4b10      	ldr	r3, [pc, #64]	; (800bcf0 <prvCheckTasksWaitingTermination+0x50>)
 800bcae:	68db      	ldr	r3, [r3, #12]
 800bcb0:	68db      	ldr	r3, [r3, #12]
 800bcb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	3304      	adds	r3, #4
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7fe fc85 	bl	800a5c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bcbe:	4b0d      	ldr	r3, [pc, #52]	; (800bcf4 <prvCheckTasksWaitingTermination+0x54>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	3b01      	subs	r3, #1
 800bcc4:	4a0b      	ldr	r2, [pc, #44]	; (800bcf4 <prvCheckTasksWaitingTermination+0x54>)
 800bcc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bcc8:	4b0b      	ldr	r3, [pc, #44]	; (800bcf8 <prvCheckTasksWaitingTermination+0x58>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	3b01      	subs	r3, #1
 800bcce:	4a0a      	ldr	r2, [pc, #40]	; (800bcf8 <prvCheckTasksWaitingTermination+0x58>)
 800bcd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bcd2:	f000 fee7 	bl	800caa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 f848 	bl	800bd6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bcdc:	4b06      	ldr	r3, [pc, #24]	; (800bcf8 <prvCheckTasksWaitingTermination+0x58>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d1e1      	bne.n	800bca8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bce4:	bf00      	nop
 800bce6:	bf00      	nop
 800bce8:	3708      	adds	r7, #8
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	20001b8c 	.word	0x20001b8c
 800bcf4:	20001bb8 	.word	0x20001bb8
 800bcf8:	20001ba0 	.word	0x20001ba0

0800bcfc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b085      	sub	sp, #20
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800bd04:	2300      	movs	r3, #0
 800bd06:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800bd08:	e005      	b.n	800bd16 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	607b      	str	r3, [r7, #4]
			ulCount++;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	3301      	adds	r3, #1
 800bd14:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	2ba5      	cmp	r3, #165	; 0xa5
 800bd1c:	d0f5      	beq.n	800bd0a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	089b      	lsrs	r3, r3, #2
 800bd22:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	b29b      	uxth	r3, r3
	}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3714      	adds	r7, #20
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr

0800bd34 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b086      	sub	sp, #24
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d102      	bne.n	800bd48 <uxTaskGetStackHighWaterMark+0x14>
 800bd42:	4b09      	ldr	r3, [pc, #36]	; (800bd68 <uxTaskGetStackHighWaterMark+0x34>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	e000      	b.n	800bd4a <uxTaskGetStackHighWaterMark+0x16>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd50:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800bd52:	6938      	ldr	r0, [r7, #16]
 800bd54:	f7ff ffd2 	bl	800bcfc <prvTaskCheckFreeStackSpace>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
	}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3718      	adds	r7, #24
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	200016e4 	.word	0x200016e4

0800bd6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b084      	sub	sp, #16
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	3354      	adds	r3, #84	; 0x54
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f002 f835 	bl	800dde8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d108      	bne.n	800bd9a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f001 f84b 	bl	800ce28 <vPortFree>
				vPortFree( pxTCB );
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f001 f848 	bl	800ce28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bd98:	e01a      	b.n	800bdd0 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d103      	bne.n	800bdac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f001 f83f 	bl	800ce28 <vPortFree>
	}
 800bdaa:	e011      	b.n	800bdd0 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bdb2:	2b02      	cmp	r3, #2
 800bdb4:	d00c      	beq.n	800bdd0 <prvDeleteTCB+0x64>
	__asm volatile
 800bdb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdba:	b672      	cpsid	i
 800bdbc:	f383 8811 	msr	BASEPRI, r3
 800bdc0:	f3bf 8f6f 	isb	sy
 800bdc4:	f3bf 8f4f 	dsb	sy
 800bdc8:	b662      	cpsie	i
 800bdca:	60fb      	str	r3, [r7, #12]
}
 800bdcc:	bf00      	nop
 800bdce:	e7fe      	b.n	800bdce <prvDeleteTCB+0x62>
	}
 800bdd0:	bf00      	nop
 800bdd2:	3710      	adds	r7, #16
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b083      	sub	sp, #12
 800bddc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bdde:	4b0c      	ldr	r3, [pc, #48]	; (800be10 <prvResetNextTaskUnblockTime+0x38>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d104      	bne.n	800bdf2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bde8:	4b0a      	ldr	r3, [pc, #40]	; (800be14 <prvResetNextTaskUnblockTime+0x3c>)
 800bdea:	f04f 32ff 	mov.w	r2, #4294967295
 800bdee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bdf0:	e008      	b.n	800be04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdf2:	4b07      	ldr	r3, [pc, #28]	; (800be10 <prvResetNextTaskUnblockTime+0x38>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	68db      	ldr	r3, [r3, #12]
 800bdf8:	68db      	ldr	r3, [r3, #12]
 800bdfa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	4a04      	ldr	r2, [pc, #16]	; (800be14 <prvResetNextTaskUnblockTime+0x3c>)
 800be02:	6013      	str	r3, [r2, #0]
}
 800be04:	bf00      	nop
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr
 800be10:	20001b70 	.word	0x20001b70
 800be14:	20001bd8 	.word	0x20001bd8

0800be18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800be18:	b480      	push	{r7}
 800be1a:	b083      	sub	sp, #12
 800be1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800be1e:	4b0b      	ldr	r3, [pc, #44]	; (800be4c <xTaskGetSchedulerState+0x34>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d102      	bne.n	800be2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800be26:	2301      	movs	r3, #1
 800be28:	607b      	str	r3, [r7, #4]
 800be2a:	e008      	b.n	800be3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be2c:	4b08      	ldr	r3, [pc, #32]	; (800be50 <xTaskGetSchedulerState+0x38>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d102      	bne.n	800be3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800be34:	2302      	movs	r3, #2
 800be36:	607b      	str	r3, [r7, #4]
 800be38:	e001      	b.n	800be3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800be3a:	2300      	movs	r3, #0
 800be3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800be3e:	687b      	ldr	r3, [r7, #4]
	}
 800be40:	4618      	mov	r0, r3
 800be42:	370c      	adds	r7, #12
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr
 800be4c:	20001bc4 	.word	0x20001bc4
 800be50:	20001be0 	.word	0x20001be0

0800be54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800be54:	b580      	push	{r7, lr}
 800be56:	b086      	sub	sp, #24
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800be60:	2300      	movs	r3, #0
 800be62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d05a      	beq.n	800bf20 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800be6a:	4b30      	ldr	r3, [pc, #192]	; (800bf2c <xTaskPriorityDisinherit+0xd8>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	693a      	ldr	r2, [r7, #16]
 800be70:	429a      	cmp	r2, r3
 800be72:	d00c      	beq.n	800be8e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800be74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be78:	b672      	cpsid	i
 800be7a:	f383 8811 	msr	BASEPRI, r3
 800be7e:	f3bf 8f6f 	isb	sy
 800be82:	f3bf 8f4f 	dsb	sy
 800be86:	b662      	cpsie	i
 800be88:	60fb      	str	r3, [r7, #12]
}
 800be8a:	bf00      	nop
 800be8c:	e7fe      	b.n	800be8c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be92:	2b00      	cmp	r3, #0
 800be94:	d10c      	bne.n	800beb0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800be96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9a:	b672      	cpsid	i
 800be9c:	f383 8811 	msr	BASEPRI, r3
 800bea0:	f3bf 8f6f 	isb	sy
 800bea4:	f3bf 8f4f 	dsb	sy
 800bea8:	b662      	cpsie	i
 800beaa:	60bb      	str	r3, [r7, #8]
}
 800beac:	bf00      	nop
 800beae:	e7fe      	b.n	800beae <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800beb4:	1e5a      	subs	r2, r3, #1
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d02c      	beq.n	800bf20 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800beca:	2b00      	cmp	r3, #0
 800becc:	d128      	bne.n	800bf20 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	3304      	adds	r3, #4
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7fe fb78 	bl	800a5c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bef0:	4b0f      	ldr	r3, [pc, #60]	; (800bf30 <xTaskPriorityDisinherit+0xdc>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d903      	bls.n	800bf00 <xTaskPriorityDisinherit+0xac>
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800befc:	4a0c      	ldr	r2, [pc, #48]	; (800bf30 <xTaskPriorityDisinherit+0xdc>)
 800befe:	6013      	str	r3, [r2, #0]
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf04:	4613      	mov	r3, r2
 800bf06:	009b      	lsls	r3, r3, #2
 800bf08:	4413      	add	r3, r2
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	4a09      	ldr	r2, [pc, #36]	; (800bf34 <xTaskPriorityDisinherit+0xe0>)
 800bf0e:	441a      	add	r2, r3
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	3304      	adds	r3, #4
 800bf14:	4619      	mov	r1, r3
 800bf16:	4610      	mov	r0, r2
 800bf18:	f7fe faf9 	bl	800a50e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bf20:	697b      	ldr	r3, [r7, #20]
	}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3718      	adds	r7, #24
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	200016e4 	.word	0x200016e4
 800bf30:	20001bc0 	.word	0x20001bc0
 800bf34:	200016e8 	.word	0x200016e8

0800bf38 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b084      	sub	sp, #16
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bf42:	4b21      	ldr	r3, [pc, #132]	; (800bfc8 <prvAddCurrentTaskToDelayedList+0x90>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf48:	4b20      	ldr	r3, [pc, #128]	; (800bfcc <prvAddCurrentTaskToDelayedList+0x94>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	3304      	adds	r3, #4
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7fe fb3a 	bl	800a5c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf5a:	d10a      	bne.n	800bf72 <prvAddCurrentTaskToDelayedList+0x3a>
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d007      	beq.n	800bf72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf62:	4b1a      	ldr	r3, [pc, #104]	; (800bfcc <prvAddCurrentTaskToDelayedList+0x94>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	3304      	adds	r3, #4
 800bf68:	4619      	mov	r1, r3
 800bf6a:	4819      	ldr	r0, [pc, #100]	; (800bfd0 <prvAddCurrentTaskToDelayedList+0x98>)
 800bf6c:	f7fe facf 	bl	800a50e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf70:	e026      	b.n	800bfc0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf72:	68fa      	ldr	r2, [r7, #12]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	4413      	add	r3, r2
 800bf78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bf7a:	4b14      	ldr	r3, [pc, #80]	; (800bfcc <prvAddCurrentTaskToDelayedList+0x94>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	68ba      	ldr	r2, [r7, #8]
 800bf80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf82:	68ba      	ldr	r2, [r7, #8]
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d209      	bcs.n	800bf9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf8a:	4b12      	ldr	r3, [pc, #72]	; (800bfd4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	4b0f      	ldr	r3, [pc, #60]	; (800bfcc <prvAddCurrentTaskToDelayedList+0x94>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	3304      	adds	r3, #4
 800bf94:	4619      	mov	r1, r3
 800bf96:	4610      	mov	r0, r2
 800bf98:	f7fe fadd 	bl	800a556 <vListInsert>
}
 800bf9c:	e010      	b.n	800bfc0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf9e:	4b0e      	ldr	r3, [pc, #56]	; (800bfd8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bfa0:	681a      	ldr	r2, [r3, #0]
 800bfa2:	4b0a      	ldr	r3, [pc, #40]	; (800bfcc <prvAddCurrentTaskToDelayedList+0x94>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	3304      	adds	r3, #4
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	4610      	mov	r0, r2
 800bfac:	f7fe fad3 	bl	800a556 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bfb0:	4b0a      	ldr	r3, [pc, #40]	; (800bfdc <prvAddCurrentTaskToDelayedList+0xa4>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	68ba      	ldr	r2, [r7, #8]
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d202      	bcs.n	800bfc0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bfba:	4a08      	ldr	r2, [pc, #32]	; (800bfdc <prvAddCurrentTaskToDelayedList+0xa4>)
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	6013      	str	r3, [r2, #0]
}
 800bfc0:	bf00      	nop
 800bfc2:	3710      	adds	r7, #16
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	20001bbc 	.word	0x20001bbc
 800bfcc:	200016e4 	.word	0x200016e4
 800bfd0:	20001ba4 	.word	0x20001ba4
 800bfd4:	20001b74 	.word	0x20001b74
 800bfd8:	20001b70 	.word	0x20001b70
 800bfdc:	20001bd8 	.word	0x20001bd8

0800bfe0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b08a      	sub	sp, #40	; 0x28
 800bfe4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bfea:	f000 fbb5 	bl	800c758 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bfee:	4b1d      	ldr	r3, [pc, #116]	; (800c064 <xTimerCreateTimerTask+0x84>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d021      	beq.n	800c03a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bff6:	2300      	movs	r3, #0
 800bff8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bffa:	2300      	movs	r3, #0
 800bffc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bffe:	1d3a      	adds	r2, r7, #4
 800c000:	f107 0108 	add.w	r1, r7, #8
 800c004:	f107 030c 	add.w	r3, r7, #12
 800c008:	4618      	mov	r0, r3
 800c00a:	f7fe fa39 	bl	800a480 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c00e:	6879      	ldr	r1, [r7, #4]
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	68fa      	ldr	r2, [r7, #12]
 800c014:	9202      	str	r2, [sp, #8]
 800c016:	9301      	str	r3, [sp, #4]
 800c018:	2302      	movs	r3, #2
 800c01a:	9300      	str	r3, [sp, #0]
 800c01c:	2300      	movs	r3, #0
 800c01e:	460a      	mov	r2, r1
 800c020:	4911      	ldr	r1, [pc, #68]	; (800c068 <xTimerCreateTimerTask+0x88>)
 800c022:	4812      	ldr	r0, [pc, #72]	; (800c06c <xTimerCreateTimerTask+0x8c>)
 800c024:	f7ff f846 	bl	800b0b4 <xTaskCreateStatic>
 800c028:	4603      	mov	r3, r0
 800c02a:	4a11      	ldr	r2, [pc, #68]	; (800c070 <xTimerCreateTimerTask+0x90>)
 800c02c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c02e:	4b10      	ldr	r3, [pc, #64]	; (800c070 <xTimerCreateTimerTask+0x90>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d001      	beq.n	800c03a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c036:	2301      	movs	r3, #1
 800c038:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d10c      	bne.n	800c05a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800c040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c044:	b672      	cpsid	i
 800c046:	f383 8811 	msr	BASEPRI, r3
 800c04a:	f3bf 8f6f 	isb	sy
 800c04e:	f3bf 8f4f 	dsb	sy
 800c052:	b662      	cpsie	i
 800c054:	613b      	str	r3, [r7, #16]
}
 800c056:	bf00      	nop
 800c058:	e7fe      	b.n	800c058 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800c05a:	697b      	ldr	r3, [r7, #20]
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3718      	adds	r7, #24
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}
 800c064:	20001c14 	.word	0x20001c14
 800c068:	0800df98 	.word	0x0800df98
 800c06c:	0800c2f1 	.word	0x0800c2f1
 800c070:	20001c18 	.word	0x20001c18

0800c074 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c074:	b580      	push	{r7, lr}
 800c076:	b088      	sub	sp, #32
 800c078:	af02      	add	r7, sp, #8
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	607a      	str	r2, [r7, #4]
 800c080:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c082:	202c      	movs	r0, #44	; 0x2c
 800c084:	f000 fe06 	bl	800cc94 <pvPortMalloc>
 800c088:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d00d      	beq.n	800c0ac <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	2200      	movs	r2, #0
 800c094:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	9301      	str	r3, [sp, #4]
 800c09c:	6a3b      	ldr	r3, [r7, #32]
 800c09e:	9300      	str	r3, [sp, #0]
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	68b9      	ldr	r1, [r7, #8]
 800c0a6:	68f8      	ldr	r0, [r7, #12]
 800c0a8:	f000 f847 	bl	800c13a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c0ac:	697b      	ldr	r3, [r7, #20]
	}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3718      	adds	r7, #24
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}

0800c0b6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c0b6:	b580      	push	{r7, lr}
 800c0b8:	b08a      	sub	sp, #40	; 0x28
 800c0ba:	af02      	add	r7, sp, #8
 800c0bc:	60f8      	str	r0, [r7, #12]
 800c0be:	60b9      	str	r1, [r7, #8]
 800c0c0:	607a      	str	r2, [r7, #4]
 800c0c2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c0c4:	232c      	movs	r3, #44	; 0x2c
 800c0c6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	2b2c      	cmp	r3, #44	; 0x2c
 800c0cc:	d00c      	beq.n	800c0e8 <xTimerCreateStatic+0x32>
	__asm volatile
 800c0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d2:	b672      	cpsid	i
 800c0d4:	f383 8811 	msr	BASEPRI, r3
 800c0d8:	f3bf 8f6f 	isb	sy
 800c0dc:	f3bf 8f4f 	dsb	sy
 800c0e0:	b662      	cpsie	i
 800c0e2:	61bb      	str	r3, [r7, #24]
}
 800c0e4:	bf00      	nop
 800c0e6:	e7fe      	b.n	800c0e6 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c0e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d10c      	bne.n	800c10a <xTimerCreateStatic+0x54>
	__asm volatile
 800c0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f4:	b672      	cpsid	i
 800c0f6:	f383 8811 	msr	BASEPRI, r3
 800c0fa:	f3bf 8f6f 	isb	sy
 800c0fe:	f3bf 8f4f 	dsb	sy
 800c102:	b662      	cpsie	i
 800c104:	617b      	str	r3, [r7, #20]
}
 800c106:	bf00      	nop
 800c108:	e7fe      	b.n	800c108 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800c10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c10c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c10e:	69fb      	ldr	r3, [r7, #28]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d00d      	beq.n	800c130 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800c114:	69fb      	ldr	r3, [r7, #28]
 800c116:	2202      	movs	r2, #2
 800c118:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	9301      	str	r3, [sp, #4]
 800c120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c122:	9300      	str	r3, [sp, #0]
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	68b9      	ldr	r1, [r7, #8]
 800c12a:	68f8      	ldr	r0, [r7, #12]
 800c12c:	f000 f805 	bl	800c13a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c130:	69fb      	ldr	r3, [r7, #28]
	}
 800c132:	4618      	mov	r0, r3
 800c134:	3720      	adds	r7, #32
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}

0800c13a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c13a:	b580      	push	{r7, lr}
 800c13c:	b086      	sub	sp, #24
 800c13e:	af00      	add	r7, sp, #0
 800c140:	60f8      	str	r0, [r7, #12]
 800c142:	60b9      	str	r1, [r7, #8]
 800c144:	607a      	str	r2, [r7, #4]
 800c146:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d10c      	bne.n	800c168 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800c14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c152:	b672      	cpsid	i
 800c154:	f383 8811 	msr	BASEPRI, r3
 800c158:	f3bf 8f6f 	isb	sy
 800c15c:	f3bf 8f4f 	dsb	sy
 800c160:	b662      	cpsie	i
 800c162:	617b      	str	r3, [r7, #20]
}
 800c164:	bf00      	nop
 800c166:	e7fe      	b.n	800c166 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800c168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d01e      	beq.n	800c1ac <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c16e:	f000 faf3 	bl	800c758 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c174:	68fa      	ldr	r2, [r7, #12]
 800c176:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c17a:	68ba      	ldr	r2, [r7, #8]
 800c17c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c180:	683a      	ldr	r2, [r7, #0]
 800c182:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c186:	6a3a      	ldr	r2, [r7, #32]
 800c188:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18c:	3304      	adds	r3, #4
 800c18e:	4618      	mov	r0, r3
 800c190:	f7fe f9b0 	bl	800a4f4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d008      	beq.n	800c1ac <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1a0:	f043 0304 	orr.w	r3, r3, #4
 800c1a4:	b2da      	uxtb	r2, r3
 800c1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c1ac:	bf00      	nop
 800c1ae:	3718      	adds	r7, #24
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b08a      	sub	sp, #40	; 0x28
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	607a      	str	r2, [r7, #4]
 800c1c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d10c      	bne.n	800c1e6 <xTimerGenericCommand+0x32>
	__asm volatile
 800c1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d0:	b672      	cpsid	i
 800c1d2:	f383 8811 	msr	BASEPRI, r3
 800c1d6:	f3bf 8f6f 	isb	sy
 800c1da:	f3bf 8f4f 	dsb	sy
 800c1de:	b662      	cpsie	i
 800c1e0:	623b      	str	r3, [r7, #32]
}
 800c1e2:	bf00      	nop
 800c1e4:	e7fe      	b.n	800c1e4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c1e6:	4b1a      	ldr	r3, [pc, #104]	; (800c250 <xTimerGenericCommand+0x9c>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d02a      	beq.n	800c244 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	2b05      	cmp	r3, #5
 800c1fe:	dc18      	bgt.n	800c232 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c200:	f7ff fe0a 	bl	800be18 <xTaskGetSchedulerState>
 800c204:	4603      	mov	r3, r0
 800c206:	2b02      	cmp	r3, #2
 800c208:	d109      	bne.n	800c21e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c20a:	4b11      	ldr	r3, [pc, #68]	; (800c250 <xTimerGenericCommand+0x9c>)
 800c20c:	6818      	ldr	r0, [r3, #0]
 800c20e:	f107 0110 	add.w	r1, r7, #16
 800c212:	2300      	movs	r3, #0
 800c214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c216:	f7fe fb53 	bl	800a8c0 <xQueueGenericSend>
 800c21a:	6278      	str	r0, [r7, #36]	; 0x24
 800c21c:	e012      	b.n	800c244 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c21e:	4b0c      	ldr	r3, [pc, #48]	; (800c250 <xTimerGenericCommand+0x9c>)
 800c220:	6818      	ldr	r0, [r3, #0]
 800c222:	f107 0110 	add.w	r1, r7, #16
 800c226:	2300      	movs	r3, #0
 800c228:	2200      	movs	r2, #0
 800c22a:	f7fe fb49 	bl	800a8c0 <xQueueGenericSend>
 800c22e:	6278      	str	r0, [r7, #36]	; 0x24
 800c230:	e008      	b.n	800c244 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c232:	4b07      	ldr	r3, [pc, #28]	; (800c250 <xTimerGenericCommand+0x9c>)
 800c234:	6818      	ldr	r0, [r3, #0]
 800c236:	f107 0110 	add.w	r1, r7, #16
 800c23a:	2300      	movs	r3, #0
 800c23c:	683a      	ldr	r2, [r7, #0]
 800c23e:	f7fe fc45 	bl	800aacc <xQueueGenericSendFromISR>
 800c242:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c246:	4618      	mov	r0, r3
 800c248:	3728      	adds	r7, #40	; 0x28
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	20001c14 	.word	0x20001c14

0800c254 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b088      	sub	sp, #32
 800c258:	af02      	add	r7, sp, #8
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c25e:	4b23      	ldr	r3, [pc, #140]	; (800c2ec <prvProcessExpiredTimer+0x98>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	68db      	ldr	r3, [r3, #12]
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	3304      	adds	r3, #4
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7fe f9ab 	bl	800a5c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c278:	f003 0304 	and.w	r3, r3, #4
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d024      	beq.n	800c2ca <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	699a      	ldr	r2, [r3, #24]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	18d1      	adds	r1, r2, r3
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	683a      	ldr	r2, [r7, #0]
 800c28c:	6978      	ldr	r0, [r7, #20]
 800c28e:	f000 f8d3 	bl	800c438 <prvInsertTimerInActiveList>
 800c292:	4603      	mov	r3, r0
 800c294:	2b00      	cmp	r3, #0
 800c296:	d021      	beq.n	800c2dc <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c298:	2300      	movs	r3, #0
 800c29a:	9300      	str	r3, [sp, #0]
 800c29c:	2300      	movs	r3, #0
 800c29e:	687a      	ldr	r2, [r7, #4]
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	6978      	ldr	r0, [r7, #20]
 800c2a4:	f7ff ff86 	bl	800c1b4 <xTimerGenericCommand>
 800c2a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d115      	bne.n	800c2dc <prvProcessExpiredTimer+0x88>
	__asm volatile
 800c2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b4:	b672      	cpsid	i
 800c2b6:	f383 8811 	msr	BASEPRI, r3
 800c2ba:	f3bf 8f6f 	isb	sy
 800c2be:	f3bf 8f4f 	dsb	sy
 800c2c2:	b662      	cpsie	i
 800c2c4:	60fb      	str	r3, [r7, #12]
}
 800c2c6:	bf00      	nop
 800c2c8:	e7fe      	b.n	800c2c8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2d0:	f023 0301 	bic.w	r3, r3, #1
 800c2d4:	b2da      	uxtb	r2, r3
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	6a1b      	ldr	r3, [r3, #32]
 800c2e0:	6978      	ldr	r0, [r7, #20]
 800c2e2:	4798      	blx	r3
}
 800c2e4:	bf00      	nop
 800c2e6:	3718      	adds	r7, #24
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	20001c0c 	.word	0x20001c0c

0800c2f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b084      	sub	sp, #16
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c2f8:	f107 0308 	add.w	r3, r7, #8
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f000 f857 	bl	800c3b0 <prvGetNextExpireTime>
 800c302:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	4619      	mov	r1, r3
 800c308:	68f8      	ldr	r0, [r7, #12]
 800c30a:	f000 f803 	bl	800c314 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c30e:	f000 f8d5 	bl	800c4bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c312:	e7f1      	b.n	800c2f8 <prvTimerTask+0x8>

0800c314 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c31e:	f7ff f933 	bl	800b588 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c322:	f107 0308 	add.w	r3, r7, #8
 800c326:	4618      	mov	r0, r3
 800c328:	f000 f866 	bl	800c3f8 <prvSampleTimeNow>
 800c32c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d130      	bne.n	800c396 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d10a      	bne.n	800c350 <prvProcessTimerOrBlockTask+0x3c>
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d806      	bhi.n	800c350 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c342:	f7ff f92f 	bl	800b5a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c346:	68f9      	ldr	r1, [r7, #12]
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f7ff ff83 	bl	800c254 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c34e:	e024      	b.n	800c39a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d008      	beq.n	800c368 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c356:	4b13      	ldr	r3, [pc, #76]	; (800c3a4 <prvProcessTimerOrBlockTask+0x90>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d101      	bne.n	800c364 <prvProcessTimerOrBlockTask+0x50>
 800c360:	2301      	movs	r3, #1
 800c362:	e000      	b.n	800c366 <prvProcessTimerOrBlockTask+0x52>
 800c364:	2300      	movs	r3, #0
 800c366:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c368:	4b0f      	ldr	r3, [pc, #60]	; (800c3a8 <prvProcessTimerOrBlockTask+0x94>)
 800c36a:	6818      	ldr	r0, [r3, #0]
 800c36c:	687a      	ldr	r2, [r7, #4]
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	1ad3      	subs	r3, r2, r3
 800c372:	683a      	ldr	r2, [r7, #0]
 800c374:	4619      	mov	r1, r3
 800c376:	f7fe fe69 	bl	800b04c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c37a:	f7ff f913 	bl	800b5a4 <xTaskResumeAll>
 800c37e:	4603      	mov	r3, r0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d10a      	bne.n	800c39a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c384:	4b09      	ldr	r3, [pc, #36]	; (800c3ac <prvProcessTimerOrBlockTask+0x98>)
 800c386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c38a:	601a      	str	r2, [r3, #0]
 800c38c:	f3bf 8f4f 	dsb	sy
 800c390:	f3bf 8f6f 	isb	sy
}
 800c394:	e001      	b.n	800c39a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c396:	f7ff f905 	bl	800b5a4 <xTaskResumeAll>
}
 800c39a:	bf00      	nop
 800c39c:	3710      	adds	r7, #16
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
 800c3a2:	bf00      	nop
 800c3a4:	20001c10 	.word	0x20001c10
 800c3a8:	20001c14 	.word	0x20001c14
 800c3ac:	e000ed04 	.word	0xe000ed04

0800c3b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	b085      	sub	sp, #20
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c3b8:	4b0e      	ldr	r3, [pc, #56]	; (800c3f4 <prvGetNextExpireTime+0x44>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d101      	bne.n	800c3c6 <prvGetNextExpireTime+0x16>
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	e000      	b.n	800c3c8 <prvGetNextExpireTime+0x18>
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d105      	bne.n	800c3e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c3d4:	4b07      	ldr	r3, [pc, #28]	; (800c3f4 <prvGetNextExpireTime+0x44>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	68db      	ldr	r3, [r3, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	60fb      	str	r3, [r7, #12]
 800c3de:	e001      	b.n	800c3e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3714      	adds	r7, #20
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr
 800c3f2:	bf00      	nop
 800c3f4:	20001c0c 	.word	0x20001c0c

0800c3f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b084      	sub	sp, #16
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c400:	f7ff f970 	bl	800b6e4 <xTaskGetTickCount>
 800c404:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c406:	4b0b      	ldr	r3, [pc, #44]	; (800c434 <prvSampleTimeNow+0x3c>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	68fa      	ldr	r2, [r7, #12]
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d205      	bcs.n	800c41c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c410:	f000 f93c 	bl	800c68c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2201      	movs	r2, #1
 800c418:	601a      	str	r2, [r3, #0]
 800c41a:	e002      	b.n	800c422 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2200      	movs	r2, #0
 800c420:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c422:	4a04      	ldr	r2, [pc, #16]	; (800c434 <prvSampleTimeNow+0x3c>)
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c428:	68fb      	ldr	r3, [r7, #12]
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3710      	adds	r7, #16
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	20001c1c 	.word	0x20001c1c

0800c438 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b086      	sub	sp, #24
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	60f8      	str	r0, [r7, #12]
 800c440:	60b9      	str	r1, [r7, #8]
 800c442:	607a      	str	r2, [r7, #4]
 800c444:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c446:	2300      	movs	r3, #0
 800c448:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	68ba      	ldr	r2, [r7, #8]
 800c44e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	68fa      	ldr	r2, [r7, #12]
 800c454:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c456:	68ba      	ldr	r2, [r7, #8]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	429a      	cmp	r2, r3
 800c45c:	d812      	bhi.n	800c484 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	1ad2      	subs	r2, r2, r3
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	699b      	ldr	r3, [r3, #24]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d302      	bcc.n	800c472 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c46c:	2301      	movs	r3, #1
 800c46e:	617b      	str	r3, [r7, #20]
 800c470:	e01b      	b.n	800c4aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c472:	4b10      	ldr	r3, [pc, #64]	; (800c4b4 <prvInsertTimerInActiveList+0x7c>)
 800c474:	681a      	ldr	r2, [r3, #0]
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	3304      	adds	r3, #4
 800c47a:	4619      	mov	r1, r3
 800c47c:	4610      	mov	r0, r2
 800c47e:	f7fe f86a 	bl	800a556 <vListInsert>
 800c482:	e012      	b.n	800c4aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c484:	687a      	ldr	r2, [r7, #4]
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	429a      	cmp	r2, r3
 800c48a:	d206      	bcs.n	800c49a <prvInsertTimerInActiveList+0x62>
 800c48c:	68ba      	ldr	r2, [r7, #8]
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	429a      	cmp	r2, r3
 800c492:	d302      	bcc.n	800c49a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c494:	2301      	movs	r3, #1
 800c496:	617b      	str	r3, [r7, #20]
 800c498:	e007      	b.n	800c4aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c49a:	4b07      	ldr	r3, [pc, #28]	; (800c4b8 <prvInsertTimerInActiveList+0x80>)
 800c49c:	681a      	ldr	r2, [r3, #0]
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	3304      	adds	r3, #4
 800c4a2:	4619      	mov	r1, r3
 800c4a4:	4610      	mov	r0, r2
 800c4a6:	f7fe f856 	bl	800a556 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c4aa:	697b      	ldr	r3, [r7, #20]
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3718      	adds	r7, #24
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}
 800c4b4:	20001c10 	.word	0x20001c10
 800c4b8:	20001c0c 	.word	0x20001c0c

0800c4bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b08e      	sub	sp, #56	; 0x38
 800c4c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c4c2:	e0d0      	b.n	800c666 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	da1a      	bge.n	800c500 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c4ca:	1d3b      	adds	r3, r7, #4
 800c4cc:	3304      	adds	r3, #4
 800c4ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d10c      	bne.n	800c4f0 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800c4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4da:	b672      	cpsid	i
 800c4dc:	f383 8811 	msr	BASEPRI, r3
 800c4e0:	f3bf 8f6f 	isb	sy
 800c4e4:	f3bf 8f4f 	dsb	sy
 800c4e8:	b662      	cpsie	i
 800c4ea:	61fb      	str	r3, [r7, #28]
}
 800c4ec:	bf00      	nop
 800c4ee:	e7fe      	b.n	800c4ee <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4f6:	6850      	ldr	r0, [r2, #4]
 800c4f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4fa:	6892      	ldr	r2, [r2, #8]
 800c4fc:	4611      	mov	r1, r2
 800c4fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2b00      	cmp	r3, #0
 800c504:	f2c0 80ae 	blt.w	800c664 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c50e:	695b      	ldr	r3, [r3, #20]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d004      	beq.n	800c51e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c516:	3304      	adds	r3, #4
 800c518:	4618      	mov	r0, r3
 800c51a:	f7fe f855 	bl	800a5c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c51e:	463b      	mov	r3, r7
 800c520:	4618      	mov	r0, r3
 800c522:	f7ff ff69 	bl	800c3f8 <prvSampleTimeNow>
 800c526:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2b09      	cmp	r3, #9
 800c52c:	f200 809b 	bhi.w	800c666 <prvProcessReceivedCommands+0x1aa>
 800c530:	a201      	add	r2, pc, #4	; (adr r2, 800c538 <prvProcessReceivedCommands+0x7c>)
 800c532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c536:	bf00      	nop
 800c538:	0800c561 	.word	0x0800c561
 800c53c:	0800c561 	.word	0x0800c561
 800c540:	0800c561 	.word	0x0800c561
 800c544:	0800c5d9 	.word	0x0800c5d9
 800c548:	0800c5ed 	.word	0x0800c5ed
 800c54c:	0800c63b 	.word	0x0800c63b
 800c550:	0800c561 	.word	0x0800c561
 800c554:	0800c561 	.word	0x0800c561
 800c558:	0800c5d9 	.word	0x0800c5d9
 800c55c:	0800c5ed 	.word	0x0800c5ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c562:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c566:	f043 0301 	orr.w	r3, r3, #1
 800c56a:	b2da      	uxtb	r2, r3
 800c56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c572:	68ba      	ldr	r2, [r7, #8]
 800c574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c576:	699b      	ldr	r3, [r3, #24]
 800c578:	18d1      	adds	r1, r2, r3
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c57e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c580:	f7ff ff5a 	bl	800c438 <prvInsertTimerInActiveList>
 800c584:	4603      	mov	r3, r0
 800c586:	2b00      	cmp	r3, #0
 800c588:	d06d      	beq.n	800c666 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c58c:	6a1b      	ldr	r3, [r3, #32]
 800c58e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c590:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c594:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c598:	f003 0304 	and.w	r3, r3, #4
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d062      	beq.n	800c666 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c5a0:	68ba      	ldr	r2, [r7, #8]
 800c5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a4:	699b      	ldr	r3, [r3, #24]
 800c5a6:	441a      	add	r2, r3
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	9300      	str	r3, [sp, #0]
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	2100      	movs	r1, #0
 800c5b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5b2:	f7ff fdff 	bl	800c1b4 <xTimerGenericCommand>
 800c5b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c5b8:	6a3b      	ldr	r3, [r7, #32]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d153      	bne.n	800c666 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800c5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c2:	b672      	cpsid	i
 800c5c4:	f383 8811 	msr	BASEPRI, r3
 800c5c8:	f3bf 8f6f 	isb	sy
 800c5cc:	f3bf 8f4f 	dsb	sy
 800c5d0:	b662      	cpsie	i
 800c5d2:	61bb      	str	r3, [r7, #24]
}
 800c5d4:	bf00      	nop
 800c5d6:	e7fe      	b.n	800c5d6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5de:	f023 0301 	bic.w	r3, r3, #1
 800c5e2:	b2da      	uxtb	r2, r3
 800c5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c5ea:	e03c      	b.n	800c666 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5f2:	f043 0301 	orr.w	r3, r3, #1
 800c5f6:	b2da      	uxtb	r2, r3
 800c5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c5fe:	68ba      	ldr	r2, [r7, #8]
 800c600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c602:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c606:	699b      	ldr	r3, [r3, #24]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d10c      	bne.n	800c626 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800c60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c610:	b672      	cpsid	i
 800c612:	f383 8811 	msr	BASEPRI, r3
 800c616:	f3bf 8f6f 	isb	sy
 800c61a:	f3bf 8f4f 	dsb	sy
 800c61e:	b662      	cpsie	i
 800c620:	617b      	str	r3, [r7, #20]
}
 800c622:	bf00      	nop
 800c624:	e7fe      	b.n	800c624 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c628:	699a      	ldr	r2, [r3, #24]
 800c62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c62c:	18d1      	adds	r1, r2, r3
 800c62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c634:	f7ff ff00 	bl	800c438 <prvInsertTimerInActiveList>
					break;
 800c638:	e015      	b.n	800c666 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c63c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c640:	f003 0302 	and.w	r3, r3, #2
 800c644:	2b00      	cmp	r3, #0
 800c646:	d103      	bne.n	800c650 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800c648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c64a:	f000 fbed 	bl	800ce28 <vPortFree>
 800c64e:	e00a      	b.n	800c666 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c652:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c656:	f023 0301 	bic.w	r3, r3, #1
 800c65a:	b2da      	uxtb	r2, r3
 800c65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c662:	e000      	b.n	800c666 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c664:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c666:	4b08      	ldr	r3, [pc, #32]	; (800c688 <prvProcessReceivedCommands+0x1cc>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	1d39      	adds	r1, r7, #4
 800c66c:	2200      	movs	r2, #0
 800c66e:	4618      	mov	r0, r3
 800c670:	f7fe facc 	bl	800ac0c <xQueueReceive>
 800c674:	4603      	mov	r3, r0
 800c676:	2b00      	cmp	r3, #0
 800c678:	f47f af24 	bne.w	800c4c4 <prvProcessReceivedCommands+0x8>
	}
}
 800c67c:	bf00      	nop
 800c67e:	bf00      	nop
 800c680:	3730      	adds	r7, #48	; 0x30
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	20001c14 	.word	0x20001c14

0800c68c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b088      	sub	sp, #32
 800c690:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c692:	e04a      	b.n	800c72a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c694:	4b2e      	ldr	r3, [pc, #184]	; (800c750 <prvSwitchTimerLists+0xc4>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	68db      	ldr	r3, [r3, #12]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c69e:	4b2c      	ldr	r3, [pc, #176]	; (800c750 <prvSwitchTimerLists+0xc4>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	68db      	ldr	r3, [r3, #12]
 800c6a4:	68db      	ldr	r3, [r3, #12]
 800c6a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	3304      	adds	r3, #4
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7fd ff8b 	bl	800a5c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	6a1b      	ldr	r3, [r3, #32]
 800c6b6:	68f8      	ldr	r0, [r7, #12]
 800c6b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6c0:	f003 0304 	and.w	r3, r3, #4
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d030      	beq.n	800c72a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	699b      	ldr	r3, [r3, #24]
 800c6cc:	693a      	ldr	r2, [r7, #16]
 800c6ce:	4413      	add	r3, r2
 800c6d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c6d2:	68ba      	ldr	r2, [r7, #8]
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d90e      	bls.n	800c6f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	68ba      	ldr	r2, [r7, #8]
 800c6de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	68fa      	ldr	r2, [r7, #12]
 800c6e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c6e6:	4b1a      	ldr	r3, [pc, #104]	; (800c750 <prvSwitchTimerLists+0xc4>)
 800c6e8:	681a      	ldr	r2, [r3, #0]
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	3304      	adds	r3, #4
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	4610      	mov	r0, r2
 800c6f2:	f7fd ff30 	bl	800a556 <vListInsert>
 800c6f6:	e018      	b.n	800c72a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	9300      	str	r3, [sp, #0]
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	693a      	ldr	r2, [r7, #16]
 800c700:	2100      	movs	r1, #0
 800c702:	68f8      	ldr	r0, [r7, #12]
 800c704:	f7ff fd56 	bl	800c1b4 <xTimerGenericCommand>
 800c708:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d10c      	bne.n	800c72a <prvSwitchTimerLists+0x9e>
	__asm volatile
 800c710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c714:	b672      	cpsid	i
 800c716:	f383 8811 	msr	BASEPRI, r3
 800c71a:	f3bf 8f6f 	isb	sy
 800c71e:	f3bf 8f4f 	dsb	sy
 800c722:	b662      	cpsie	i
 800c724:	603b      	str	r3, [r7, #0]
}
 800c726:	bf00      	nop
 800c728:	e7fe      	b.n	800c728 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c72a:	4b09      	ldr	r3, [pc, #36]	; (800c750 <prvSwitchTimerLists+0xc4>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d1af      	bne.n	800c694 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c734:	4b06      	ldr	r3, [pc, #24]	; (800c750 <prvSwitchTimerLists+0xc4>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c73a:	4b06      	ldr	r3, [pc, #24]	; (800c754 <prvSwitchTimerLists+0xc8>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	4a04      	ldr	r2, [pc, #16]	; (800c750 <prvSwitchTimerLists+0xc4>)
 800c740:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c742:	4a04      	ldr	r2, [pc, #16]	; (800c754 <prvSwitchTimerLists+0xc8>)
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	6013      	str	r3, [r2, #0]
}
 800c748:	bf00      	nop
 800c74a:	3718      	adds	r7, #24
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}
 800c750:	20001c0c 	.word	0x20001c0c
 800c754:	20001c10 	.word	0x20001c10

0800c758 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c75e:	f000 f96d 	bl	800ca3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c762:	4b15      	ldr	r3, [pc, #84]	; (800c7b8 <prvCheckForValidListAndQueue+0x60>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d120      	bne.n	800c7ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c76a:	4814      	ldr	r0, [pc, #80]	; (800c7bc <prvCheckForValidListAndQueue+0x64>)
 800c76c:	f7fd fea2 	bl	800a4b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c770:	4813      	ldr	r0, [pc, #76]	; (800c7c0 <prvCheckForValidListAndQueue+0x68>)
 800c772:	f7fd fe9f 	bl	800a4b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c776:	4b13      	ldr	r3, [pc, #76]	; (800c7c4 <prvCheckForValidListAndQueue+0x6c>)
 800c778:	4a10      	ldr	r2, [pc, #64]	; (800c7bc <prvCheckForValidListAndQueue+0x64>)
 800c77a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c77c:	4b12      	ldr	r3, [pc, #72]	; (800c7c8 <prvCheckForValidListAndQueue+0x70>)
 800c77e:	4a10      	ldr	r2, [pc, #64]	; (800c7c0 <prvCheckForValidListAndQueue+0x68>)
 800c780:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c782:	2300      	movs	r3, #0
 800c784:	9300      	str	r3, [sp, #0]
 800c786:	4b11      	ldr	r3, [pc, #68]	; (800c7cc <prvCheckForValidListAndQueue+0x74>)
 800c788:	4a11      	ldr	r2, [pc, #68]	; (800c7d0 <prvCheckForValidListAndQueue+0x78>)
 800c78a:	2110      	movs	r1, #16
 800c78c:	200a      	movs	r0, #10
 800c78e:	f7fd ffaf 	bl	800a6f0 <xQueueGenericCreateStatic>
 800c792:	4603      	mov	r3, r0
 800c794:	4a08      	ldr	r2, [pc, #32]	; (800c7b8 <prvCheckForValidListAndQueue+0x60>)
 800c796:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c798:	4b07      	ldr	r3, [pc, #28]	; (800c7b8 <prvCheckForValidListAndQueue+0x60>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d005      	beq.n	800c7ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c7a0:	4b05      	ldr	r3, [pc, #20]	; (800c7b8 <prvCheckForValidListAndQueue+0x60>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	490b      	ldr	r1, [pc, #44]	; (800c7d4 <prvCheckForValidListAndQueue+0x7c>)
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7fe fc26 	bl	800aff8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c7ac:	f000 f97a 	bl	800caa4 <vPortExitCritical>
}
 800c7b0:	bf00      	nop
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	20001c14 	.word	0x20001c14
 800c7bc:	20001be4 	.word	0x20001be4
 800c7c0:	20001bf8 	.word	0x20001bf8
 800c7c4:	20001c0c 	.word	0x20001c0c
 800c7c8:	20001c10 	.word	0x20001c10
 800c7cc:	20001cc0 	.word	0x20001cc0
 800c7d0:	20001c20 	.word	0x20001c20
 800c7d4:	0800dfa0 	.word	0x0800dfa0

0800c7d8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b086      	sub	sp, #24
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d10c      	bne.n	800c804 <pvTimerGetTimerID+0x2c>
	__asm volatile
 800c7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ee:	b672      	cpsid	i
 800c7f0:	f383 8811 	msr	BASEPRI, r3
 800c7f4:	f3bf 8f6f 	isb	sy
 800c7f8:	f3bf 8f4f 	dsb	sy
 800c7fc:	b662      	cpsie	i
 800c7fe:	60fb      	str	r3, [r7, #12]
}
 800c800:	bf00      	nop
 800c802:	e7fe      	b.n	800c802 <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800c804:	f000 f91a 	bl	800ca3c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	69db      	ldr	r3, [r3, #28]
 800c80c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800c80e:	f000 f949 	bl	800caa4 <vPortExitCritical>

	return pvReturn;
 800c812:	693b      	ldr	r3, [r7, #16]
}
 800c814:	4618      	mov	r0, r3
 800c816:	3718      	adds	r7, #24
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}

0800c81c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c81c:	b480      	push	{r7}
 800c81e:	b085      	sub	sp, #20
 800c820:	af00      	add	r7, sp, #0
 800c822:	60f8      	str	r0, [r7, #12]
 800c824:	60b9      	str	r1, [r7, #8]
 800c826:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	3b04      	subs	r3, #4
 800c82c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c834:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	3b04      	subs	r3, #4
 800c83a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	f023 0201 	bic.w	r2, r3, #1
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	3b04      	subs	r3, #4
 800c84a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c84c:	4a0c      	ldr	r2, [pc, #48]	; (800c880 <pxPortInitialiseStack+0x64>)
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	3b14      	subs	r3, #20
 800c856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c858:	687a      	ldr	r2, [r7, #4]
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	3b04      	subs	r3, #4
 800c862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	f06f 0202 	mvn.w	r2, #2
 800c86a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	3b20      	subs	r3, #32
 800c870:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c872:	68fb      	ldr	r3, [r7, #12]
}
 800c874:	4618      	mov	r0, r3
 800c876:	3714      	adds	r7, #20
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr
 800c880:	0800c885 	.word	0x0800c885

0800c884 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c884:	b480      	push	{r7}
 800c886:	b085      	sub	sp, #20
 800c888:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c88a:	2300      	movs	r3, #0
 800c88c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c88e:	4b14      	ldr	r3, [pc, #80]	; (800c8e0 <prvTaskExitError+0x5c>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c896:	d00c      	beq.n	800c8b2 <prvTaskExitError+0x2e>
	__asm volatile
 800c898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89c:	b672      	cpsid	i
 800c89e:	f383 8811 	msr	BASEPRI, r3
 800c8a2:	f3bf 8f6f 	isb	sy
 800c8a6:	f3bf 8f4f 	dsb	sy
 800c8aa:	b662      	cpsie	i
 800c8ac:	60fb      	str	r3, [r7, #12]
}
 800c8ae:	bf00      	nop
 800c8b0:	e7fe      	b.n	800c8b0 <prvTaskExitError+0x2c>
	__asm volatile
 800c8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b6:	b672      	cpsid	i
 800c8b8:	f383 8811 	msr	BASEPRI, r3
 800c8bc:	f3bf 8f6f 	isb	sy
 800c8c0:	f3bf 8f4f 	dsb	sy
 800c8c4:	b662      	cpsie	i
 800c8c6:	60bb      	str	r3, [r7, #8]
}
 800c8c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c8ca:	bf00      	nop
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d0fc      	beq.n	800c8cc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c8d2:	bf00      	nop
 800c8d4:	bf00      	nop
 800c8d6:	3714      	adds	r7, #20
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr
 800c8e0:	20000098 	.word	0x20000098
	...

0800c8f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c8f0:	4b07      	ldr	r3, [pc, #28]	; (800c910 <pxCurrentTCBConst2>)
 800c8f2:	6819      	ldr	r1, [r3, #0]
 800c8f4:	6808      	ldr	r0, [r1, #0]
 800c8f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8fa:	f380 8809 	msr	PSP, r0
 800c8fe:	f3bf 8f6f 	isb	sy
 800c902:	f04f 0000 	mov.w	r0, #0
 800c906:	f380 8811 	msr	BASEPRI, r0
 800c90a:	4770      	bx	lr
 800c90c:	f3af 8000 	nop.w

0800c910 <pxCurrentTCBConst2>:
 800c910:	200016e4 	.word	0x200016e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c914:	bf00      	nop
 800c916:	bf00      	nop

0800c918 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c918:	4808      	ldr	r0, [pc, #32]	; (800c93c <prvPortStartFirstTask+0x24>)
 800c91a:	6800      	ldr	r0, [r0, #0]
 800c91c:	6800      	ldr	r0, [r0, #0]
 800c91e:	f380 8808 	msr	MSP, r0
 800c922:	f04f 0000 	mov.w	r0, #0
 800c926:	f380 8814 	msr	CONTROL, r0
 800c92a:	b662      	cpsie	i
 800c92c:	b661      	cpsie	f
 800c92e:	f3bf 8f4f 	dsb	sy
 800c932:	f3bf 8f6f 	isb	sy
 800c936:	df00      	svc	0
 800c938:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c93a:	bf00      	nop
 800c93c:	e000ed08 	.word	0xe000ed08

0800c940 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b084      	sub	sp, #16
 800c944:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c946:	4b37      	ldr	r3, [pc, #220]	; (800ca24 <xPortStartScheduler+0xe4>)
 800c948:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	b2db      	uxtb	r3, r3
 800c950:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	22ff      	movs	r2, #255	; 0xff
 800c956:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	781b      	ldrb	r3, [r3, #0]
 800c95c:	b2db      	uxtb	r3, r3
 800c95e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c960:	78fb      	ldrb	r3, [r7, #3]
 800c962:	b2db      	uxtb	r3, r3
 800c964:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c968:	b2da      	uxtb	r2, r3
 800c96a:	4b2f      	ldr	r3, [pc, #188]	; (800ca28 <xPortStartScheduler+0xe8>)
 800c96c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c96e:	4b2f      	ldr	r3, [pc, #188]	; (800ca2c <xPortStartScheduler+0xec>)
 800c970:	2207      	movs	r2, #7
 800c972:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c974:	e009      	b.n	800c98a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c976:	4b2d      	ldr	r3, [pc, #180]	; (800ca2c <xPortStartScheduler+0xec>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	3b01      	subs	r3, #1
 800c97c:	4a2b      	ldr	r2, [pc, #172]	; (800ca2c <xPortStartScheduler+0xec>)
 800c97e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c980:	78fb      	ldrb	r3, [r7, #3]
 800c982:	b2db      	uxtb	r3, r3
 800c984:	005b      	lsls	r3, r3, #1
 800c986:	b2db      	uxtb	r3, r3
 800c988:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c98a:	78fb      	ldrb	r3, [r7, #3]
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c992:	2b80      	cmp	r3, #128	; 0x80
 800c994:	d0ef      	beq.n	800c976 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c996:	4b25      	ldr	r3, [pc, #148]	; (800ca2c <xPortStartScheduler+0xec>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f1c3 0307 	rsb	r3, r3, #7
 800c99e:	2b04      	cmp	r3, #4
 800c9a0:	d00c      	beq.n	800c9bc <xPortStartScheduler+0x7c>
	__asm volatile
 800c9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a6:	b672      	cpsid	i
 800c9a8:	f383 8811 	msr	BASEPRI, r3
 800c9ac:	f3bf 8f6f 	isb	sy
 800c9b0:	f3bf 8f4f 	dsb	sy
 800c9b4:	b662      	cpsie	i
 800c9b6:	60bb      	str	r3, [r7, #8]
}
 800c9b8:	bf00      	nop
 800c9ba:	e7fe      	b.n	800c9ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c9bc:	4b1b      	ldr	r3, [pc, #108]	; (800ca2c <xPortStartScheduler+0xec>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	021b      	lsls	r3, r3, #8
 800c9c2:	4a1a      	ldr	r2, [pc, #104]	; (800ca2c <xPortStartScheduler+0xec>)
 800c9c4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c9c6:	4b19      	ldr	r3, [pc, #100]	; (800ca2c <xPortStartScheduler+0xec>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c9ce:	4a17      	ldr	r2, [pc, #92]	; (800ca2c <xPortStartScheduler+0xec>)
 800c9d0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	b2da      	uxtb	r2, r3
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c9da:	4b15      	ldr	r3, [pc, #84]	; (800ca30 <xPortStartScheduler+0xf0>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	4a14      	ldr	r2, [pc, #80]	; (800ca30 <xPortStartScheduler+0xf0>)
 800c9e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c9e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c9e6:	4b12      	ldr	r3, [pc, #72]	; (800ca30 <xPortStartScheduler+0xf0>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4a11      	ldr	r2, [pc, #68]	; (800ca30 <xPortStartScheduler+0xf0>)
 800c9ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c9f0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c9f2:	f000 f8dd 	bl	800cbb0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c9f6:	4b0f      	ldr	r3, [pc, #60]	; (800ca34 <xPortStartScheduler+0xf4>)
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c9fc:	f000 f8fc 	bl	800cbf8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ca00:	4b0d      	ldr	r3, [pc, #52]	; (800ca38 <xPortStartScheduler+0xf8>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4a0c      	ldr	r2, [pc, #48]	; (800ca38 <xPortStartScheduler+0xf8>)
 800ca06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ca0a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ca0c:	f7ff ff84 	bl	800c918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ca10:	f7fe ff46 	bl	800b8a0 <vTaskSwitchContext>
	prvTaskExitError();
 800ca14:	f7ff ff36 	bl	800c884 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ca18:	2300      	movs	r3, #0
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3710      	adds	r7, #16
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
 800ca22:	bf00      	nop
 800ca24:	e000e400 	.word	0xe000e400
 800ca28:	20001d10 	.word	0x20001d10
 800ca2c:	20001d14 	.word	0x20001d14
 800ca30:	e000ed20 	.word	0xe000ed20
 800ca34:	20000098 	.word	0x20000098
 800ca38:	e000ef34 	.word	0xe000ef34

0800ca3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b083      	sub	sp, #12
 800ca40:	af00      	add	r7, sp, #0
	__asm volatile
 800ca42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca46:	b672      	cpsid	i
 800ca48:	f383 8811 	msr	BASEPRI, r3
 800ca4c:	f3bf 8f6f 	isb	sy
 800ca50:	f3bf 8f4f 	dsb	sy
 800ca54:	b662      	cpsie	i
 800ca56:	607b      	str	r3, [r7, #4]
}
 800ca58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ca5a:	4b10      	ldr	r3, [pc, #64]	; (800ca9c <vPortEnterCritical+0x60>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	3301      	adds	r3, #1
 800ca60:	4a0e      	ldr	r2, [pc, #56]	; (800ca9c <vPortEnterCritical+0x60>)
 800ca62:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ca64:	4b0d      	ldr	r3, [pc, #52]	; (800ca9c <vPortEnterCritical+0x60>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d111      	bne.n	800ca90 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ca6c:	4b0c      	ldr	r3, [pc, #48]	; (800caa0 <vPortEnterCritical+0x64>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d00c      	beq.n	800ca90 <vPortEnterCritical+0x54>
	__asm volatile
 800ca76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca7a:	b672      	cpsid	i
 800ca7c:	f383 8811 	msr	BASEPRI, r3
 800ca80:	f3bf 8f6f 	isb	sy
 800ca84:	f3bf 8f4f 	dsb	sy
 800ca88:	b662      	cpsie	i
 800ca8a:	603b      	str	r3, [r7, #0]
}
 800ca8c:	bf00      	nop
 800ca8e:	e7fe      	b.n	800ca8e <vPortEnterCritical+0x52>
	}
}
 800ca90:	bf00      	nop
 800ca92:	370c      	adds	r7, #12
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr
 800ca9c:	20000098 	.word	0x20000098
 800caa0:	e000ed04 	.word	0xe000ed04

0800caa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800caa4:	b480      	push	{r7}
 800caa6:	b083      	sub	sp, #12
 800caa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800caaa:	4b13      	ldr	r3, [pc, #76]	; (800caf8 <vPortExitCritical+0x54>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d10c      	bne.n	800cacc <vPortExitCritical+0x28>
	__asm volatile
 800cab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab6:	b672      	cpsid	i
 800cab8:	f383 8811 	msr	BASEPRI, r3
 800cabc:	f3bf 8f6f 	isb	sy
 800cac0:	f3bf 8f4f 	dsb	sy
 800cac4:	b662      	cpsie	i
 800cac6:	607b      	str	r3, [r7, #4]
}
 800cac8:	bf00      	nop
 800caca:	e7fe      	b.n	800caca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800cacc:	4b0a      	ldr	r3, [pc, #40]	; (800caf8 <vPortExitCritical+0x54>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	3b01      	subs	r3, #1
 800cad2:	4a09      	ldr	r2, [pc, #36]	; (800caf8 <vPortExitCritical+0x54>)
 800cad4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cad6:	4b08      	ldr	r3, [pc, #32]	; (800caf8 <vPortExitCritical+0x54>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d105      	bne.n	800caea <vPortExitCritical+0x46>
 800cade:	2300      	movs	r3, #0
 800cae0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	f383 8811 	msr	BASEPRI, r3
}
 800cae8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800caea:	bf00      	nop
 800caec:	370c      	adds	r7, #12
 800caee:	46bd      	mov	sp, r7
 800caf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf4:	4770      	bx	lr
 800caf6:	bf00      	nop
 800caf8:	20000098 	.word	0x20000098
 800cafc:	00000000 	.word	0x00000000

0800cb00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cb00:	f3ef 8009 	mrs	r0, PSP
 800cb04:	f3bf 8f6f 	isb	sy
 800cb08:	4b15      	ldr	r3, [pc, #84]	; (800cb60 <pxCurrentTCBConst>)
 800cb0a:	681a      	ldr	r2, [r3, #0]
 800cb0c:	f01e 0f10 	tst.w	lr, #16
 800cb10:	bf08      	it	eq
 800cb12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cb16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb1a:	6010      	str	r0, [r2, #0]
 800cb1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cb20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cb24:	b672      	cpsid	i
 800cb26:	f380 8811 	msr	BASEPRI, r0
 800cb2a:	f3bf 8f4f 	dsb	sy
 800cb2e:	f3bf 8f6f 	isb	sy
 800cb32:	b662      	cpsie	i
 800cb34:	f7fe feb4 	bl	800b8a0 <vTaskSwitchContext>
 800cb38:	f04f 0000 	mov.w	r0, #0
 800cb3c:	f380 8811 	msr	BASEPRI, r0
 800cb40:	bc09      	pop	{r0, r3}
 800cb42:	6819      	ldr	r1, [r3, #0]
 800cb44:	6808      	ldr	r0, [r1, #0]
 800cb46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb4a:	f01e 0f10 	tst.w	lr, #16
 800cb4e:	bf08      	it	eq
 800cb50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cb54:	f380 8809 	msr	PSP, r0
 800cb58:	f3bf 8f6f 	isb	sy
 800cb5c:	4770      	bx	lr
 800cb5e:	bf00      	nop

0800cb60 <pxCurrentTCBConst>:
 800cb60:	200016e4 	.word	0x200016e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cb64:	bf00      	nop
 800cb66:	bf00      	nop

0800cb68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b082      	sub	sp, #8
 800cb6c:	af00      	add	r7, sp, #0
	__asm volatile
 800cb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb72:	b672      	cpsid	i
 800cb74:	f383 8811 	msr	BASEPRI, r3
 800cb78:	f3bf 8f6f 	isb	sy
 800cb7c:	f3bf 8f4f 	dsb	sy
 800cb80:	b662      	cpsie	i
 800cb82:	607b      	str	r3, [r7, #4]
}
 800cb84:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cb86:	f7fe fdcf 	bl	800b728 <xTaskIncrementTick>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d003      	beq.n	800cb98 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cb90:	4b06      	ldr	r3, [pc, #24]	; (800cbac <SysTick_Handler+0x44>)
 800cb92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb96:	601a      	str	r2, [r3, #0]
 800cb98:	2300      	movs	r3, #0
 800cb9a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	f383 8811 	msr	BASEPRI, r3
}
 800cba2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cba4:	bf00      	nop
 800cba6:	3708      	adds	r7, #8
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}
 800cbac:	e000ed04 	.word	0xe000ed04

0800cbb0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cbb4:	4b0b      	ldr	r3, [pc, #44]	; (800cbe4 <vPortSetupTimerInterrupt+0x34>)
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cbba:	4b0b      	ldr	r3, [pc, #44]	; (800cbe8 <vPortSetupTimerInterrupt+0x38>)
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cbc0:	4b0a      	ldr	r3, [pc, #40]	; (800cbec <vPortSetupTimerInterrupt+0x3c>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4a0a      	ldr	r2, [pc, #40]	; (800cbf0 <vPortSetupTimerInterrupt+0x40>)
 800cbc6:	fba2 2303 	umull	r2, r3, r2, r3
 800cbca:	099b      	lsrs	r3, r3, #6
 800cbcc:	4a09      	ldr	r2, [pc, #36]	; (800cbf4 <vPortSetupTimerInterrupt+0x44>)
 800cbce:	3b01      	subs	r3, #1
 800cbd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cbd2:	4b04      	ldr	r3, [pc, #16]	; (800cbe4 <vPortSetupTimerInterrupt+0x34>)
 800cbd4:	2207      	movs	r2, #7
 800cbd6:	601a      	str	r2, [r3, #0]
}
 800cbd8:	bf00      	nop
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe0:	4770      	bx	lr
 800cbe2:	bf00      	nop
 800cbe4:	e000e010 	.word	0xe000e010
 800cbe8:	e000e018 	.word	0xe000e018
 800cbec:	20000000 	.word	0x20000000
 800cbf0:	10624dd3 	.word	0x10624dd3
 800cbf4:	e000e014 	.word	0xe000e014

0800cbf8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cbf8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cc08 <vPortEnableVFP+0x10>
 800cbfc:	6801      	ldr	r1, [r0, #0]
 800cbfe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cc02:	6001      	str	r1, [r0, #0]
 800cc04:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cc06:	bf00      	nop
 800cc08:	e000ed88 	.word	0xe000ed88

0800cc0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b085      	sub	sp, #20
 800cc10:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cc12:	f3ef 8305 	mrs	r3, IPSR
 800cc16:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2b0f      	cmp	r3, #15
 800cc1c:	d916      	bls.n	800cc4c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cc1e:	4a19      	ldr	r2, [pc, #100]	; (800cc84 <vPortValidateInterruptPriority+0x78>)
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	4413      	add	r3, r2
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cc28:	4b17      	ldr	r3, [pc, #92]	; (800cc88 <vPortValidateInterruptPriority+0x7c>)
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	7afa      	ldrb	r2, [r7, #11]
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d20c      	bcs.n	800cc4c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800cc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc36:	b672      	cpsid	i
 800cc38:	f383 8811 	msr	BASEPRI, r3
 800cc3c:	f3bf 8f6f 	isb	sy
 800cc40:	f3bf 8f4f 	dsb	sy
 800cc44:	b662      	cpsie	i
 800cc46:	607b      	str	r3, [r7, #4]
}
 800cc48:	bf00      	nop
 800cc4a:	e7fe      	b.n	800cc4a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cc4c:	4b0f      	ldr	r3, [pc, #60]	; (800cc8c <vPortValidateInterruptPriority+0x80>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cc54:	4b0e      	ldr	r3, [pc, #56]	; (800cc90 <vPortValidateInterruptPriority+0x84>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d90c      	bls.n	800cc76 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800cc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc60:	b672      	cpsid	i
 800cc62:	f383 8811 	msr	BASEPRI, r3
 800cc66:	f3bf 8f6f 	isb	sy
 800cc6a:	f3bf 8f4f 	dsb	sy
 800cc6e:	b662      	cpsie	i
 800cc70:	603b      	str	r3, [r7, #0]
}
 800cc72:	bf00      	nop
 800cc74:	e7fe      	b.n	800cc74 <vPortValidateInterruptPriority+0x68>
	}
 800cc76:	bf00      	nop
 800cc78:	3714      	adds	r7, #20
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc80:	4770      	bx	lr
 800cc82:	bf00      	nop
 800cc84:	e000e3f0 	.word	0xe000e3f0
 800cc88:	20001d10 	.word	0x20001d10
 800cc8c:	e000ed0c 	.word	0xe000ed0c
 800cc90:	20001d14 	.word	0x20001d14

0800cc94 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b08a      	sub	sp, #40	; 0x28
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cca0:	f7fe fc72 	bl	800b588 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cca4:	4b5b      	ldr	r3, [pc, #364]	; (800ce14 <pvPortMalloc+0x180>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d101      	bne.n	800ccb0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ccac:	f000 f91a 	bl	800cee4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ccb0:	4b59      	ldr	r3, [pc, #356]	; (800ce18 <pvPortMalloc+0x184>)
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	4013      	ands	r3, r2
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	f040 8092 	bne.w	800cde2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d01f      	beq.n	800cd04 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800ccc4:	2208      	movs	r2, #8
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	4413      	add	r3, r2
 800ccca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f003 0307 	and.w	r3, r3, #7
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d016      	beq.n	800cd04 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f023 0307 	bic.w	r3, r3, #7
 800ccdc:	3308      	adds	r3, #8
 800ccde:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f003 0307 	and.w	r3, r3, #7
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d00c      	beq.n	800cd04 <pvPortMalloc+0x70>
	__asm volatile
 800ccea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccee:	b672      	cpsid	i
 800ccf0:	f383 8811 	msr	BASEPRI, r3
 800ccf4:	f3bf 8f6f 	isb	sy
 800ccf8:	f3bf 8f4f 	dsb	sy
 800ccfc:	b662      	cpsie	i
 800ccfe:	617b      	str	r3, [r7, #20]
}
 800cd00:	bf00      	nop
 800cd02:	e7fe      	b.n	800cd02 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d06b      	beq.n	800cde2 <pvPortMalloc+0x14e>
 800cd0a:	4b44      	ldr	r3, [pc, #272]	; (800ce1c <pvPortMalloc+0x188>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d866      	bhi.n	800cde2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cd14:	4b42      	ldr	r3, [pc, #264]	; (800ce20 <pvPortMalloc+0x18c>)
 800cd16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cd18:	4b41      	ldr	r3, [pc, #260]	; (800ce20 <pvPortMalloc+0x18c>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd1e:	e004      	b.n	800cd2a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800cd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	687a      	ldr	r2, [r7, #4]
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d903      	bls.n	800cd3c <pvPortMalloc+0xa8>
 800cd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d1f1      	bne.n	800cd20 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cd3c:	4b35      	ldr	r3, [pc, #212]	; (800ce14 <pvPortMalloc+0x180>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d04d      	beq.n	800cde2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cd46:	6a3b      	ldr	r3, [r7, #32]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	2208      	movs	r2, #8
 800cd4c:	4413      	add	r3, r2
 800cd4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd52:	681a      	ldr	r2, [r3, #0]
 800cd54:	6a3b      	ldr	r3, [r7, #32]
 800cd56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd5a:	685a      	ldr	r2, [r3, #4]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	1ad2      	subs	r2, r2, r3
 800cd60:	2308      	movs	r3, #8
 800cd62:	005b      	lsls	r3, r3, #1
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d921      	bls.n	800cdac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cd68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	4413      	add	r3, r2
 800cd6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd70:	69bb      	ldr	r3, [r7, #24]
 800cd72:	f003 0307 	and.w	r3, r3, #7
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d00c      	beq.n	800cd94 <pvPortMalloc+0x100>
	__asm volatile
 800cd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd7e:	b672      	cpsid	i
 800cd80:	f383 8811 	msr	BASEPRI, r3
 800cd84:	f3bf 8f6f 	isb	sy
 800cd88:	f3bf 8f4f 	dsb	sy
 800cd8c:	b662      	cpsie	i
 800cd8e:	613b      	str	r3, [r7, #16]
}
 800cd90:	bf00      	nop
 800cd92:	e7fe      	b.n	800cd92 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd96:	685a      	ldr	r2, [r3, #4]
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	1ad2      	subs	r2, r2, r3
 800cd9c:	69bb      	ldr	r3, [r7, #24]
 800cd9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda2:	687a      	ldr	r2, [r7, #4]
 800cda4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cda6:	69b8      	ldr	r0, [r7, #24]
 800cda8:	f000 f8fe 	bl	800cfa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cdac:	4b1b      	ldr	r3, [pc, #108]	; (800ce1c <pvPortMalloc+0x188>)
 800cdae:	681a      	ldr	r2, [r3, #0]
 800cdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	1ad3      	subs	r3, r2, r3
 800cdb6:	4a19      	ldr	r2, [pc, #100]	; (800ce1c <pvPortMalloc+0x188>)
 800cdb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cdba:	4b18      	ldr	r3, [pc, #96]	; (800ce1c <pvPortMalloc+0x188>)
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	4b19      	ldr	r3, [pc, #100]	; (800ce24 <pvPortMalloc+0x190>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d203      	bcs.n	800cdce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cdc6:	4b15      	ldr	r3, [pc, #84]	; (800ce1c <pvPortMalloc+0x188>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	4a16      	ldr	r2, [pc, #88]	; (800ce24 <pvPortMalloc+0x190>)
 800cdcc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd0:	685a      	ldr	r2, [r3, #4]
 800cdd2:	4b11      	ldr	r3, [pc, #68]	; (800ce18 <pvPortMalloc+0x184>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	431a      	orrs	r2, r3
 800cdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdde:	2200      	movs	r2, #0
 800cde0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cde2:	f7fe fbdf 	bl	800b5a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cde6:	69fb      	ldr	r3, [r7, #28]
 800cde8:	f003 0307 	and.w	r3, r3, #7
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d00c      	beq.n	800ce0a <pvPortMalloc+0x176>
	__asm volatile
 800cdf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf4:	b672      	cpsid	i
 800cdf6:	f383 8811 	msr	BASEPRI, r3
 800cdfa:	f3bf 8f6f 	isb	sy
 800cdfe:	f3bf 8f4f 	dsb	sy
 800ce02:	b662      	cpsie	i
 800ce04:	60fb      	str	r3, [r7, #12]
}
 800ce06:	bf00      	nop
 800ce08:	e7fe      	b.n	800ce08 <pvPortMalloc+0x174>
	return pvReturn;
 800ce0a:	69fb      	ldr	r3, [r7, #28]
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3728      	adds	r7, #40	; 0x28
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}
 800ce14:	20005920 	.word	0x20005920
 800ce18:	2000592c 	.word	0x2000592c
 800ce1c:	20005924 	.word	0x20005924
 800ce20:	20005918 	.word	0x20005918
 800ce24:	20005928 	.word	0x20005928

0800ce28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b086      	sub	sp, #24
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d04c      	beq.n	800ced4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ce3a:	2308      	movs	r3, #8
 800ce3c:	425b      	negs	r3, r3
 800ce3e:	697a      	ldr	r2, [r7, #20]
 800ce40:	4413      	add	r3, r2
 800ce42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	685a      	ldr	r2, [r3, #4]
 800ce4c:	4b23      	ldr	r3, [pc, #140]	; (800cedc <vPortFree+0xb4>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	4013      	ands	r3, r2
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d10c      	bne.n	800ce70 <vPortFree+0x48>
	__asm volatile
 800ce56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce5a:	b672      	cpsid	i
 800ce5c:	f383 8811 	msr	BASEPRI, r3
 800ce60:	f3bf 8f6f 	isb	sy
 800ce64:	f3bf 8f4f 	dsb	sy
 800ce68:	b662      	cpsie	i
 800ce6a:	60fb      	str	r3, [r7, #12]
}
 800ce6c:	bf00      	nop
 800ce6e:	e7fe      	b.n	800ce6e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d00c      	beq.n	800ce92 <vPortFree+0x6a>
	__asm volatile
 800ce78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce7c:	b672      	cpsid	i
 800ce7e:	f383 8811 	msr	BASEPRI, r3
 800ce82:	f3bf 8f6f 	isb	sy
 800ce86:	f3bf 8f4f 	dsb	sy
 800ce8a:	b662      	cpsie	i
 800ce8c:	60bb      	str	r3, [r7, #8]
}
 800ce8e:	bf00      	nop
 800ce90:	e7fe      	b.n	800ce90 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	685a      	ldr	r2, [r3, #4]
 800ce96:	4b11      	ldr	r3, [pc, #68]	; (800cedc <vPortFree+0xb4>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	4013      	ands	r3, r2
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d019      	beq.n	800ced4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d115      	bne.n	800ced4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	685a      	ldr	r2, [r3, #4]
 800ceac:	4b0b      	ldr	r3, [pc, #44]	; (800cedc <vPortFree+0xb4>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	43db      	mvns	r3, r3
 800ceb2:	401a      	ands	r2, r3
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ceb8:	f7fe fb66 	bl	800b588 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	685a      	ldr	r2, [r3, #4]
 800cec0:	4b07      	ldr	r3, [pc, #28]	; (800cee0 <vPortFree+0xb8>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4413      	add	r3, r2
 800cec6:	4a06      	ldr	r2, [pc, #24]	; (800cee0 <vPortFree+0xb8>)
 800cec8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ceca:	6938      	ldr	r0, [r7, #16]
 800cecc:	f000 f86c 	bl	800cfa8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ced0:	f7fe fb68 	bl	800b5a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ced4:	bf00      	nop
 800ced6:	3718      	adds	r7, #24
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}
 800cedc:	2000592c 	.word	0x2000592c
 800cee0:	20005924 	.word	0x20005924

0800cee4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cee4:	b480      	push	{r7}
 800cee6:	b085      	sub	sp, #20
 800cee8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ceea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ceee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cef0:	4b27      	ldr	r3, [pc, #156]	; (800cf90 <prvHeapInit+0xac>)
 800cef2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f003 0307 	and.w	r3, r3, #7
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d00c      	beq.n	800cf18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	3307      	adds	r3, #7
 800cf02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	f023 0307 	bic.w	r3, r3, #7
 800cf0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cf0c:	68ba      	ldr	r2, [r7, #8]
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	1ad3      	subs	r3, r2, r3
 800cf12:	4a1f      	ldr	r2, [pc, #124]	; (800cf90 <prvHeapInit+0xac>)
 800cf14:	4413      	add	r3, r2
 800cf16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cf1c:	4a1d      	ldr	r2, [pc, #116]	; (800cf94 <prvHeapInit+0xb0>)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cf22:	4b1c      	ldr	r3, [pc, #112]	; (800cf94 <prvHeapInit+0xb0>)
 800cf24:	2200      	movs	r2, #0
 800cf26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	68ba      	ldr	r2, [r7, #8]
 800cf2c:	4413      	add	r3, r2
 800cf2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cf30:	2208      	movs	r2, #8
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	1a9b      	subs	r3, r3, r2
 800cf36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	f023 0307 	bic.w	r3, r3, #7
 800cf3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	4a15      	ldr	r2, [pc, #84]	; (800cf98 <prvHeapInit+0xb4>)
 800cf44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cf46:	4b14      	ldr	r3, [pc, #80]	; (800cf98 <prvHeapInit+0xb4>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cf4e:	4b12      	ldr	r3, [pc, #72]	; (800cf98 <prvHeapInit+0xb4>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	2200      	movs	r2, #0
 800cf54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	68fa      	ldr	r2, [r7, #12]
 800cf5e:	1ad2      	subs	r2, r2, r3
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cf64:	4b0c      	ldr	r3, [pc, #48]	; (800cf98 <prvHeapInit+0xb4>)
 800cf66:	681a      	ldr	r2, [r3, #0]
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	685b      	ldr	r3, [r3, #4]
 800cf70:	4a0a      	ldr	r2, [pc, #40]	; (800cf9c <prvHeapInit+0xb8>)
 800cf72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	685b      	ldr	r3, [r3, #4]
 800cf78:	4a09      	ldr	r2, [pc, #36]	; (800cfa0 <prvHeapInit+0xbc>)
 800cf7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cf7c:	4b09      	ldr	r3, [pc, #36]	; (800cfa4 <prvHeapInit+0xc0>)
 800cf7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cf82:	601a      	str	r2, [r3, #0]
}
 800cf84:	bf00      	nop
 800cf86:	3714      	adds	r7, #20
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr
 800cf90:	20001d18 	.word	0x20001d18
 800cf94:	20005918 	.word	0x20005918
 800cf98:	20005920 	.word	0x20005920
 800cf9c:	20005928 	.word	0x20005928
 800cfa0:	20005924 	.word	0x20005924
 800cfa4:	2000592c 	.word	0x2000592c

0800cfa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b085      	sub	sp, #20
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cfb0:	4b28      	ldr	r3, [pc, #160]	; (800d054 <prvInsertBlockIntoFreeList+0xac>)
 800cfb2:	60fb      	str	r3, [r7, #12]
 800cfb4:	e002      	b.n	800cfbc <prvInsertBlockIntoFreeList+0x14>
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	60fb      	str	r3, [r7, #12]
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	687a      	ldr	r2, [r7, #4]
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d8f7      	bhi.n	800cfb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	685b      	ldr	r3, [r3, #4]
 800cfce:	68ba      	ldr	r2, [r7, #8]
 800cfd0:	4413      	add	r3, r2
 800cfd2:	687a      	ldr	r2, [r7, #4]
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d108      	bne.n	800cfea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	685a      	ldr	r2, [r3, #4]
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	685b      	ldr	r3, [r3, #4]
 800cfe0:	441a      	add	r2, r3
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	68ba      	ldr	r2, [r7, #8]
 800cff4:	441a      	add	r2, r3
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d118      	bne.n	800d030 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681a      	ldr	r2, [r3, #0]
 800d002:	4b15      	ldr	r3, [pc, #84]	; (800d058 <prvInsertBlockIntoFreeList+0xb0>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	429a      	cmp	r2, r3
 800d008:	d00d      	beq.n	800d026 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	685a      	ldr	r2, [r3, #4]
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	685b      	ldr	r3, [r3, #4]
 800d014:	441a      	add	r2, r3
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	681a      	ldr	r2, [r3, #0]
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	601a      	str	r2, [r3, #0]
 800d024:	e008      	b.n	800d038 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d026:	4b0c      	ldr	r3, [pc, #48]	; (800d058 <prvInsertBlockIntoFreeList+0xb0>)
 800d028:	681a      	ldr	r2, [r3, #0]
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	601a      	str	r2, [r3, #0]
 800d02e:	e003      	b.n	800d038 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681a      	ldr	r2, [r3, #0]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d038:	68fa      	ldr	r2, [r7, #12]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d002      	beq.n	800d046 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	687a      	ldr	r2, [r7, #4]
 800d044:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d046:	bf00      	nop
 800d048:	3714      	adds	r7, #20
 800d04a:	46bd      	mov	sp, r7
 800d04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d050:	4770      	bx	lr
 800d052:	bf00      	nop
 800d054:	20005918 	.word	0x20005918
 800d058:	20005920 	.word	0x20005920

0800d05c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d060:	2200      	movs	r2, #0
 800d062:	4912      	ldr	r1, [pc, #72]	; (800d0ac <MX_USB_DEVICE_Init+0x50>)
 800d064:	4812      	ldr	r0, [pc, #72]	; (800d0b0 <MX_USB_DEVICE_Init+0x54>)
 800d066:	f7fb fc6f 	bl	8008948 <USBD_Init>
 800d06a:	4603      	mov	r3, r0
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d001      	beq.n	800d074 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d070:	f7f4 ff86 	bl	8001f80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d074:	490f      	ldr	r1, [pc, #60]	; (800d0b4 <MX_USB_DEVICE_Init+0x58>)
 800d076:	480e      	ldr	r0, [pc, #56]	; (800d0b0 <MX_USB_DEVICE_Init+0x54>)
 800d078:	f7fb fc96 	bl	80089a8 <USBD_RegisterClass>
 800d07c:	4603      	mov	r3, r0
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d001      	beq.n	800d086 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d082:	f7f4 ff7d 	bl	8001f80 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d086:	490c      	ldr	r1, [pc, #48]	; (800d0b8 <MX_USB_DEVICE_Init+0x5c>)
 800d088:	4809      	ldr	r0, [pc, #36]	; (800d0b0 <MX_USB_DEVICE_Init+0x54>)
 800d08a:	f7fb fbcd 	bl	8008828 <USBD_CDC_RegisterInterface>
 800d08e:	4603      	mov	r3, r0
 800d090:	2b00      	cmp	r3, #0
 800d092:	d001      	beq.n	800d098 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d094:	f7f4 ff74 	bl	8001f80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d098:	4805      	ldr	r0, [pc, #20]	; (800d0b0 <MX_USB_DEVICE_Init+0x54>)
 800d09a:	f7fb fcbb 	bl	8008a14 <USBD_Start>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d001      	beq.n	800d0a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d0a4:	f7f4 ff6c 	bl	8001f80 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d0a8:	bf00      	nop
 800d0aa:	bd80      	pop	{r7, pc}
 800d0ac:	200000b0 	.word	0x200000b0
 800d0b0:	20005930 	.word	0x20005930
 800d0b4:	20000018 	.word	0x20000018
 800d0b8:	2000009c 	.word	0x2000009c

0800d0bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	4905      	ldr	r1, [pc, #20]	; (800d0d8 <CDC_Init_FS+0x1c>)
 800d0c4:	4805      	ldr	r0, [pc, #20]	; (800d0dc <CDC_Init_FS+0x20>)
 800d0c6:	f7fb fbc9 	bl	800885c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d0ca:	4905      	ldr	r1, [pc, #20]	; (800d0e0 <CDC_Init_FS+0x24>)
 800d0cc:	4803      	ldr	r0, [pc, #12]	; (800d0dc <CDC_Init_FS+0x20>)
 800d0ce:	f7fb fbe7 	bl	80088a0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d0d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	2000640c 	.word	0x2000640c
 800d0dc:	20005930 	.word	0x20005930
 800d0e0:	20005c0c 	.word	0x20005c0c

0800d0e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d0e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr

0800d0f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	6039      	str	r1, [r7, #0]
 800d0fe:	71fb      	strb	r3, [r7, #7]
 800d100:	4613      	mov	r3, r2
 800d102:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d104:	79fb      	ldrb	r3, [r7, #7]
 800d106:	2b23      	cmp	r3, #35	; 0x23
 800d108:	d84a      	bhi.n	800d1a0 <CDC_Control_FS+0xac>
 800d10a:	a201      	add	r2, pc, #4	; (adr r2, 800d110 <CDC_Control_FS+0x1c>)
 800d10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d110:	0800d1a1 	.word	0x0800d1a1
 800d114:	0800d1a1 	.word	0x0800d1a1
 800d118:	0800d1a1 	.word	0x0800d1a1
 800d11c:	0800d1a1 	.word	0x0800d1a1
 800d120:	0800d1a1 	.word	0x0800d1a1
 800d124:	0800d1a1 	.word	0x0800d1a1
 800d128:	0800d1a1 	.word	0x0800d1a1
 800d12c:	0800d1a1 	.word	0x0800d1a1
 800d130:	0800d1a1 	.word	0x0800d1a1
 800d134:	0800d1a1 	.word	0x0800d1a1
 800d138:	0800d1a1 	.word	0x0800d1a1
 800d13c:	0800d1a1 	.word	0x0800d1a1
 800d140:	0800d1a1 	.word	0x0800d1a1
 800d144:	0800d1a1 	.word	0x0800d1a1
 800d148:	0800d1a1 	.word	0x0800d1a1
 800d14c:	0800d1a1 	.word	0x0800d1a1
 800d150:	0800d1a1 	.word	0x0800d1a1
 800d154:	0800d1a1 	.word	0x0800d1a1
 800d158:	0800d1a1 	.word	0x0800d1a1
 800d15c:	0800d1a1 	.word	0x0800d1a1
 800d160:	0800d1a1 	.word	0x0800d1a1
 800d164:	0800d1a1 	.word	0x0800d1a1
 800d168:	0800d1a1 	.word	0x0800d1a1
 800d16c:	0800d1a1 	.word	0x0800d1a1
 800d170:	0800d1a1 	.word	0x0800d1a1
 800d174:	0800d1a1 	.word	0x0800d1a1
 800d178:	0800d1a1 	.word	0x0800d1a1
 800d17c:	0800d1a1 	.word	0x0800d1a1
 800d180:	0800d1a1 	.word	0x0800d1a1
 800d184:	0800d1a1 	.word	0x0800d1a1
 800d188:	0800d1a1 	.word	0x0800d1a1
 800d18c:	0800d1a1 	.word	0x0800d1a1
 800d190:	0800d1a1 	.word	0x0800d1a1
 800d194:	0800d1a1 	.word	0x0800d1a1
 800d198:	0800d1a1 	.word	0x0800d1a1
 800d19c:	0800d1a1 	.word	0x0800d1a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d1a0:	bf00      	nop
  }

  return (USBD_OK);
 800d1a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	370c      	adds	r7, #12
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ae:	4770      	bx	lr

0800d1b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b084      	sub	sp, #16
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d1ba:	6879      	ldr	r1, [r7, #4]
 800d1bc:	480c      	ldr	r0, [pc, #48]	; (800d1f0 <CDC_Receive_FS+0x40>)
 800d1be:	f7fb fb6f 	bl	80088a0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d1c2:	480b      	ldr	r0, [pc, #44]	; (800d1f0 <CDC_Receive_FS+0x40>)
 800d1c4:	f7fb fb8a 	bl	80088dc <USBD_CDC_ReceivePacket>
  //uint8_t* command = "hi";
  //xQueueSend(commandQueueHandle, command, 100);
  uint8_t *data = "Hello World from USB CDC\n";
 800d1c8:	4b0a      	ldr	r3, [pc, #40]	; (800d1f4 <CDC_Receive_FS+0x44>)
 800d1ca:	60fb      	str	r3, [r7, #12]
  SEGGER_SYSVIEW_PrintfHost("send");
 800d1cc:	480a      	ldr	r0, [pc, #40]	; (800d1f8 <CDC_Receive_FS+0x48>)
 800d1ce:	f7f4 fbb3 	bl	8001938 <SEGGER_SYSVIEW_PrintfHost>
  xQueueSendFromISR(commandQueueHandle, data, 100);
 800d1d2:	4b0a      	ldr	r3, [pc, #40]	; (800d1fc <CDC_Receive_FS+0x4c>)
 800d1d4:	6818      	ldr	r0, [r3, #0]
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	2264      	movs	r2, #100	; 0x64
 800d1da:	68f9      	ldr	r1, [r7, #12]
 800d1dc:	f7fd fc76 	bl	800aacc <xQueueGenericSendFromISR>
  SEGGER_SYSVIEW_PrintfHost("send done");
 800d1e0:	4807      	ldr	r0, [pc, #28]	; (800d200 <CDC_Receive_FS+0x50>)
 800d1e2:	f7f4 fba9 	bl	8001938 <SEGGER_SYSVIEW_PrintfHost>



  return (USBD_OK);
 800d1e6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3710      	adds	r7, #16
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}
 800d1f0:	20005930 	.word	0x20005930
 800d1f4:	0800dfa8 	.word	0x0800dfa8
 800d1f8:	0800dfc4 	.word	0x0800dfc4
 800d1fc:	20000ec0 	.word	0x20000ec0
 800d200:	0800dfcc 	.word	0x0800dfcc

0800d204 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d204:	b480      	push	{r7}
 800d206:	b087      	sub	sp, #28
 800d208:	af00      	add	r7, sp, #0
 800d20a:	60f8      	str	r0, [r7, #12]
 800d20c:	60b9      	str	r1, [r7, #8]
 800d20e:	4613      	mov	r3, r2
 800d210:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d212:	2300      	movs	r3, #0
 800d214:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d216:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	371c      	adds	r7, #28
 800d21e:	46bd      	mov	sp, r7
 800d220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d224:	4770      	bx	lr
	...

0800d228 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d228:	b480      	push	{r7}
 800d22a:	b083      	sub	sp, #12
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	4603      	mov	r3, r0
 800d230:	6039      	str	r1, [r7, #0]
 800d232:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	2212      	movs	r2, #18
 800d238:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d23a:	4b03      	ldr	r3, [pc, #12]	; (800d248 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	370c      	adds	r7, #12
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr
 800d248:	200000d0 	.word	0x200000d0

0800d24c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b083      	sub	sp, #12
 800d250:	af00      	add	r7, sp, #0
 800d252:	4603      	mov	r3, r0
 800d254:	6039      	str	r1, [r7, #0]
 800d256:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	2204      	movs	r2, #4
 800d25c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d25e:	4b03      	ldr	r3, [pc, #12]	; (800d26c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d260:	4618      	mov	r0, r3
 800d262:	370c      	adds	r7, #12
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr
 800d26c:	200000f0 	.word	0x200000f0

0800d270 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b082      	sub	sp, #8
 800d274:	af00      	add	r7, sp, #0
 800d276:	4603      	mov	r3, r0
 800d278:	6039      	str	r1, [r7, #0]
 800d27a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d27c:	79fb      	ldrb	r3, [r7, #7]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d105      	bne.n	800d28e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d282:	683a      	ldr	r2, [r7, #0]
 800d284:	4907      	ldr	r1, [pc, #28]	; (800d2a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800d286:	4808      	ldr	r0, [pc, #32]	; (800d2a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800d288:	f7fc fd9a 	bl	8009dc0 <USBD_GetString>
 800d28c:	e004      	b.n	800d298 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d28e:	683a      	ldr	r2, [r7, #0]
 800d290:	4904      	ldr	r1, [pc, #16]	; (800d2a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800d292:	4805      	ldr	r0, [pc, #20]	; (800d2a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800d294:	f7fc fd94 	bl	8009dc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d298:	4b02      	ldr	r3, [pc, #8]	; (800d2a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3708      	adds	r7, #8
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	bf00      	nop
 800d2a4:	20006c0c 	.word	0x20006c0c
 800d2a8:	0800dfd8 	.word	0x0800dfd8

0800d2ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b082      	sub	sp, #8
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	6039      	str	r1, [r7, #0]
 800d2b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d2b8:	683a      	ldr	r2, [r7, #0]
 800d2ba:	4904      	ldr	r1, [pc, #16]	; (800d2cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d2bc:	4804      	ldr	r0, [pc, #16]	; (800d2d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d2be:	f7fc fd7f 	bl	8009dc0 <USBD_GetString>
  return USBD_StrDesc;
 800d2c2:	4b02      	ldr	r3, [pc, #8]	; (800d2cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3708      	adds	r7, #8
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}
 800d2cc:	20006c0c 	.word	0x20006c0c
 800d2d0:	0800dff0 	.word	0x0800dff0

0800d2d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	4603      	mov	r3, r0
 800d2dc:	6039      	str	r1, [r7, #0]
 800d2de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	221a      	movs	r2, #26
 800d2e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d2e6:	f000 f855 	bl	800d394 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d2ea:	4b02      	ldr	r3, [pc, #8]	; (800d2f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3708      	adds	r7, #8
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	200000f4 	.word	0x200000f4

0800d2f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	4603      	mov	r3, r0
 800d300:	6039      	str	r1, [r7, #0]
 800d302:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d304:	79fb      	ldrb	r3, [r7, #7]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d105      	bne.n	800d316 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d30a:	683a      	ldr	r2, [r7, #0]
 800d30c:	4907      	ldr	r1, [pc, #28]	; (800d32c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d30e:	4808      	ldr	r0, [pc, #32]	; (800d330 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d310:	f7fc fd56 	bl	8009dc0 <USBD_GetString>
 800d314:	e004      	b.n	800d320 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d316:	683a      	ldr	r2, [r7, #0]
 800d318:	4904      	ldr	r1, [pc, #16]	; (800d32c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d31a:	4805      	ldr	r0, [pc, #20]	; (800d330 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d31c:	f7fc fd50 	bl	8009dc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d320:	4b02      	ldr	r3, [pc, #8]	; (800d32c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d322:	4618      	mov	r0, r3
 800d324:	3708      	adds	r7, #8
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	bf00      	nop
 800d32c:	20006c0c 	.word	0x20006c0c
 800d330:	0800e004 	.word	0x0800e004

0800d334 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b082      	sub	sp, #8
 800d338:	af00      	add	r7, sp, #0
 800d33a:	4603      	mov	r3, r0
 800d33c:	6039      	str	r1, [r7, #0]
 800d33e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d340:	79fb      	ldrb	r3, [r7, #7]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d105      	bne.n	800d352 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d346:	683a      	ldr	r2, [r7, #0]
 800d348:	4907      	ldr	r1, [pc, #28]	; (800d368 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d34a:	4808      	ldr	r0, [pc, #32]	; (800d36c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d34c:	f7fc fd38 	bl	8009dc0 <USBD_GetString>
 800d350:	e004      	b.n	800d35c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d352:	683a      	ldr	r2, [r7, #0]
 800d354:	4904      	ldr	r1, [pc, #16]	; (800d368 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d356:	4805      	ldr	r0, [pc, #20]	; (800d36c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d358:	f7fc fd32 	bl	8009dc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d35c:	4b02      	ldr	r3, [pc, #8]	; (800d368 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3708      	adds	r7, #8
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}
 800d366:	bf00      	nop
 800d368:	20006c0c 	.word	0x20006c0c
 800d36c:	0800e010 	.word	0x0800e010

0800d370 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d370:	b480      	push	{r7}
 800d372:	b083      	sub	sp, #12
 800d374:	af00      	add	r7, sp, #0
 800d376:	4603      	mov	r3, r0
 800d378:	6039      	str	r1, [r7, #0]
 800d37a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	220c      	movs	r2, #12
 800d380:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d382:	4b03      	ldr	r3, [pc, #12]	; (800d390 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d384:	4618      	mov	r0, r3
 800d386:	370c      	adds	r7, #12
 800d388:	46bd      	mov	sp, r7
 800d38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38e:	4770      	bx	lr
 800d390:	200000e4 	.word	0x200000e4

0800d394 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b084      	sub	sp, #16
 800d398:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d39a:	4b0f      	ldr	r3, [pc, #60]	; (800d3d8 <Get_SerialNum+0x44>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d3a0:	4b0e      	ldr	r3, [pc, #56]	; (800d3dc <Get_SerialNum+0x48>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d3a6:	4b0e      	ldr	r3, [pc, #56]	; (800d3e0 <Get_SerialNum+0x4c>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d3ac:	68fa      	ldr	r2, [r7, #12]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	4413      	add	r3, r2
 800d3b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d009      	beq.n	800d3ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d3ba:	2208      	movs	r2, #8
 800d3bc:	4909      	ldr	r1, [pc, #36]	; (800d3e4 <Get_SerialNum+0x50>)
 800d3be:	68f8      	ldr	r0, [r7, #12]
 800d3c0:	f000 f814 	bl	800d3ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d3c4:	2204      	movs	r2, #4
 800d3c6:	4908      	ldr	r1, [pc, #32]	; (800d3e8 <Get_SerialNum+0x54>)
 800d3c8:	68b8      	ldr	r0, [r7, #8]
 800d3ca:	f000 f80f 	bl	800d3ec <IntToUnicode>
  }
}
 800d3ce:	bf00      	nop
 800d3d0:	3710      	adds	r7, #16
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}
 800d3d6:	bf00      	nop
 800d3d8:	1ff0f420 	.word	0x1ff0f420
 800d3dc:	1ff0f424 	.word	0x1ff0f424
 800d3e0:	1ff0f428 	.word	0x1ff0f428
 800d3e4:	200000f6 	.word	0x200000f6
 800d3e8:	20000106 	.word	0x20000106

0800d3ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b087      	sub	sp, #28
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	4613      	mov	r3, r2
 800d3f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d3fe:	2300      	movs	r3, #0
 800d400:	75fb      	strb	r3, [r7, #23]
 800d402:	e027      	b.n	800d454 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	0f1b      	lsrs	r3, r3, #28
 800d408:	2b09      	cmp	r3, #9
 800d40a:	d80b      	bhi.n	800d424 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	0f1b      	lsrs	r3, r3, #28
 800d410:	b2da      	uxtb	r2, r3
 800d412:	7dfb      	ldrb	r3, [r7, #23]
 800d414:	005b      	lsls	r3, r3, #1
 800d416:	4619      	mov	r1, r3
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	440b      	add	r3, r1
 800d41c:	3230      	adds	r2, #48	; 0x30
 800d41e:	b2d2      	uxtb	r2, r2
 800d420:	701a      	strb	r2, [r3, #0]
 800d422:	e00a      	b.n	800d43a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	0f1b      	lsrs	r3, r3, #28
 800d428:	b2da      	uxtb	r2, r3
 800d42a:	7dfb      	ldrb	r3, [r7, #23]
 800d42c:	005b      	lsls	r3, r3, #1
 800d42e:	4619      	mov	r1, r3
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	440b      	add	r3, r1
 800d434:	3237      	adds	r2, #55	; 0x37
 800d436:	b2d2      	uxtb	r2, r2
 800d438:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	011b      	lsls	r3, r3, #4
 800d43e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d440:	7dfb      	ldrb	r3, [r7, #23]
 800d442:	005b      	lsls	r3, r3, #1
 800d444:	3301      	adds	r3, #1
 800d446:	68ba      	ldr	r2, [r7, #8]
 800d448:	4413      	add	r3, r2
 800d44a:	2200      	movs	r2, #0
 800d44c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d44e:	7dfb      	ldrb	r3, [r7, #23]
 800d450:	3301      	adds	r3, #1
 800d452:	75fb      	strb	r3, [r7, #23]
 800d454:	7dfa      	ldrb	r2, [r7, #23]
 800d456:	79fb      	ldrb	r3, [r7, #7]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d3d3      	bcc.n	800d404 <IntToUnicode+0x18>
  }
}
 800d45c:	bf00      	nop
 800d45e:	bf00      	nop
 800d460:	371c      	adds	r7, #28
 800d462:	46bd      	mov	sp, r7
 800d464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d468:	4770      	bx	lr
	...

0800d46c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b0ae      	sub	sp, #184	; 0xb8
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d474:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d478:	2200      	movs	r2, #0
 800d47a:	601a      	str	r2, [r3, #0]
 800d47c:	605a      	str	r2, [r3, #4]
 800d47e:	609a      	str	r2, [r3, #8]
 800d480:	60da      	str	r2, [r3, #12]
 800d482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d484:	f107 0314 	add.w	r3, r7, #20
 800d488:	2290      	movs	r2, #144	; 0x90
 800d48a:	2100      	movs	r1, #0
 800d48c:	4618      	mov	r0, r3
 800d48e:	f000 fbb5 	bl	800dbfc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d49a:	d161      	bne.n	800d560 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800d49c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d4a0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d4a8:	f107 0314 	add.w	r3, r7, #20
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f7f7 fdff 	bl	80050b0 <HAL_RCCEx_PeriphCLKConfig>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d001      	beq.n	800d4bc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800d4b8:	f7f4 fd62 	bl	8001f80 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d4bc:	4b2a      	ldr	r3, [pc, #168]	; (800d568 <HAL_PCD_MspInit+0xfc>)
 800d4be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4c0:	4a29      	ldr	r2, [pc, #164]	; (800d568 <HAL_PCD_MspInit+0xfc>)
 800d4c2:	f043 0301 	orr.w	r3, r3, #1
 800d4c6:	6313      	str	r3, [r2, #48]	; 0x30
 800d4c8:	4b27      	ldr	r3, [pc, #156]	; (800d568 <HAL_PCD_MspInit+0xfc>)
 800d4ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4cc:	f003 0301 	and.w	r3, r3, #1
 800d4d0:	613b      	str	r3, [r7, #16]
 800d4d2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800d4d4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800d4d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4dc:	2302      	movs	r3, #2
 800d4de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d4e8:	2303      	movs	r3, #3
 800d4ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d4ee:	230a      	movs	r3, #10
 800d4f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d4f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	481c      	ldr	r0, [pc, #112]	; (800d56c <HAL_PCD_MspInit+0x100>)
 800d4fc:	f7f5 fbf4 	bl	8002ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800d500:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d504:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d508:	2300      	movs	r3, #0
 800d50a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d50e:	2300      	movs	r3, #0
 800d510:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800d514:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d518:	4619      	mov	r1, r3
 800d51a:	4814      	ldr	r0, [pc, #80]	; (800d56c <HAL_PCD_MspInit+0x100>)
 800d51c:	f7f5 fbe4 	bl	8002ce8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d520:	4b11      	ldr	r3, [pc, #68]	; (800d568 <HAL_PCD_MspInit+0xfc>)
 800d522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d524:	4a10      	ldr	r2, [pc, #64]	; (800d568 <HAL_PCD_MspInit+0xfc>)
 800d526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d52a:	6353      	str	r3, [r2, #52]	; 0x34
 800d52c:	4b0e      	ldr	r3, [pc, #56]	; (800d568 <HAL_PCD_MspInit+0xfc>)
 800d52e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d534:	60fb      	str	r3, [r7, #12]
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	4b0b      	ldr	r3, [pc, #44]	; (800d568 <HAL_PCD_MspInit+0xfc>)
 800d53a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d53c:	4a0a      	ldr	r2, [pc, #40]	; (800d568 <HAL_PCD_MspInit+0xfc>)
 800d53e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d542:	6453      	str	r3, [r2, #68]	; 0x44
 800d544:	4b08      	ldr	r3, [pc, #32]	; (800d568 <HAL_PCD_MspInit+0xfc>)
 800d546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d54c:	60bb      	str	r3, [r7, #8]
 800d54e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d550:	2200      	movs	r2, #0
 800d552:	2105      	movs	r1, #5
 800d554:	2043      	movs	r0, #67	; 0x43
 800d556:	f7f5 f877 	bl	8002648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d55a:	2043      	movs	r0, #67	; 0x43
 800d55c:	f7f5 f890 	bl	8002680 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d560:	bf00      	nop
 800d562:	37b8      	adds	r7, #184	; 0xb8
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}
 800d568:	40023800 	.word	0x40023800
 800d56c:	40020000 	.word	0x40020000

0800d570 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d584:	4619      	mov	r1, r3
 800d586:	4610      	mov	r0, r2
 800d588:	f7fb fa91 	bl	8008aae <USBD_LL_SetupStage>
}
 800d58c:	bf00      	nop
 800d58e:	3708      	adds	r7, #8
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	460b      	mov	r3, r1
 800d59e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800d5a6:	78fa      	ldrb	r2, [r7, #3]
 800d5a8:	6879      	ldr	r1, [r7, #4]
 800d5aa:	4613      	mov	r3, r2
 800d5ac:	00db      	lsls	r3, r3, #3
 800d5ae:	4413      	add	r3, r2
 800d5b0:	009b      	lsls	r3, r3, #2
 800d5b2:	440b      	add	r3, r1
 800d5b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d5b8:	681a      	ldr	r2, [r3, #0]
 800d5ba:	78fb      	ldrb	r3, [r7, #3]
 800d5bc:	4619      	mov	r1, r3
 800d5be:	f7fb facb 	bl	8008b58 <USBD_LL_DataOutStage>
}
 800d5c2:	bf00      	nop
 800d5c4:	3708      	adds	r7, #8
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}

0800d5ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5ca:	b580      	push	{r7, lr}
 800d5cc:	b082      	sub	sp, #8
 800d5ce:	af00      	add	r7, sp, #0
 800d5d0:	6078      	str	r0, [r7, #4]
 800d5d2:	460b      	mov	r3, r1
 800d5d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800d5dc:	78fa      	ldrb	r2, [r7, #3]
 800d5de:	6879      	ldr	r1, [r7, #4]
 800d5e0:	4613      	mov	r3, r2
 800d5e2:	00db      	lsls	r3, r3, #3
 800d5e4:	4413      	add	r3, r2
 800d5e6:	009b      	lsls	r3, r3, #2
 800d5e8:	440b      	add	r3, r1
 800d5ea:	334c      	adds	r3, #76	; 0x4c
 800d5ec:	681a      	ldr	r2, [r3, #0]
 800d5ee:	78fb      	ldrb	r3, [r7, #3]
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	f7fb fb64 	bl	8008cbe <USBD_LL_DataInStage>
}
 800d5f6:	bf00      	nop
 800d5f8:	3708      	adds	r7, #8
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}

0800d5fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5fe:	b580      	push	{r7, lr}
 800d600:	b082      	sub	sp, #8
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d60c:	4618      	mov	r0, r3
 800d60e:	f7fb fc98 	bl	8008f42 <USBD_LL_SOF>
}
 800d612:	bf00      	nop
 800d614:	3708      	adds	r7, #8
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}

0800d61a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d61a:	b580      	push	{r7, lr}
 800d61c:	b084      	sub	sp, #16
 800d61e:	af00      	add	r7, sp, #0
 800d620:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d622:	2301      	movs	r3, #1
 800d624:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d102      	bne.n	800d634 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d62e:	2300      	movs	r3, #0
 800d630:	73fb      	strb	r3, [r7, #15]
 800d632:	e008      	b.n	800d646 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	68db      	ldr	r3, [r3, #12]
 800d638:	2b02      	cmp	r3, #2
 800d63a:	d102      	bne.n	800d642 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d63c:	2301      	movs	r3, #1
 800d63e:	73fb      	strb	r3, [r7, #15]
 800d640:	e001      	b.n	800d646 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d642:	f7f4 fc9d 	bl	8001f80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d64c:	7bfa      	ldrb	r2, [r7, #15]
 800d64e:	4611      	mov	r1, r2
 800d650:	4618      	mov	r0, r3
 800d652:	f7fb fc38 	bl	8008ec6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d65c:	4618      	mov	r0, r3
 800d65e:	f7fb fbe0 	bl	8008e22 <USBD_LL_Reset>
}
 800d662:	bf00      	nop
 800d664:	3710      	adds	r7, #16
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}
	...

0800d66c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b082      	sub	sp, #8
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d67a:	4618      	mov	r0, r3
 800d67c:	f7fb fc33 	bl	8008ee6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	6812      	ldr	r2, [r2, #0]
 800d68e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d692:	f043 0301 	orr.w	r3, r3, #1
 800d696:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6a1b      	ldr	r3, [r3, #32]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d005      	beq.n	800d6ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d6a0:	4b04      	ldr	r3, [pc, #16]	; (800d6b4 <HAL_PCD_SuspendCallback+0x48>)
 800d6a2:	691b      	ldr	r3, [r3, #16]
 800d6a4:	4a03      	ldr	r2, [pc, #12]	; (800d6b4 <HAL_PCD_SuspendCallback+0x48>)
 800d6a6:	f043 0306 	orr.w	r3, r3, #6
 800d6aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d6ac:	bf00      	nop
 800d6ae:	3708      	adds	r7, #8
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	e000ed00 	.word	0xe000ed00

0800d6b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7fb fc23 	bl	8008f12 <USBD_LL_Resume>
}
 800d6cc:	bf00      	nop
 800d6ce:	3708      	adds	r7, #8
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}

0800d6d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b082      	sub	sp, #8
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	460b      	mov	r3, r1
 800d6de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d6e6:	78fa      	ldrb	r2, [r7, #3]
 800d6e8:	4611      	mov	r1, r2
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7fb fc7b 	bl	8008fe6 <USBD_LL_IsoOUTIncomplete>
}
 800d6f0:	bf00      	nop
 800d6f2:	3708      	adds	r7, #8
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}

0800d6f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b082      	sub	sp, #8
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	460b      	mov	r3, r1
 800d702:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d70a:	78fa      	ldrb	r2, [r7, #3]
 800d70c:	4611      	mov	r1, r2
 800d70e:	4618      	mov	r0, r3
 800d710:	f7fb fc37 	bl	8008f82 <USBD_LL_IsoINIncomplete>
}
 800d714:	bf00      	nop
 800d716:	3708      	adds	r7, #8
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b082      	sub	sp, #8
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7fb fc8d 	bl	800904a <USBD_LL_DevConnected>
}
 800d730:	bf00      	nop
 800d732:	3708      	adds	r7, #8
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}

0800d738 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d746:	4618      	mov	r0, r3
 800d748:	f7fb fc8a 	bl	8009060 <USBD_LL_DevDisconnected>
}
 800d74c:	bf00      	nop
 800d74e:	3708      	adds	r7, #8
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}

0800d754 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b082      	sub	sp, #8
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d13c      	bne.n	800d7de <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d764:	4a20      	ldr	r2, [pc, #128]	; (800d7e8 <USBD_LL_Init+0x94>)
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	4a1e      	ldr	r2, [pc, #120]	; (800d7e8 <USBD_LL_Init+0x94>)
 800d770:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d774:	4b1c      	ldr	r3, [pc, #112]	; (800d7e8 <USBD_LL_Init+0x94>)
 800d776:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d77a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d77c:	4b1a      	ldr	r3, [pc, #104]	; (800d7e8 <USBD_LL_Init+0x94>)
 800d77e:	2206      	movs	r2, #6
 800d780:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d782:	4b19      	ldr	r3, [pc, #100]	; (800d7e8 <USBD_LL_Init+0x94>)
 800d784:	2202      	movs	r2, #2
 800d786:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d788:	4b17      	ldr	r3, [pc, #92]	; (800d7e8 <USBD_LL_Init+0x94>)
 800d78a:	2200      	movs	r2, #0
 800d78c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d78e:	4b16      	ldr	r3, [pc, #88]	; (800d7e8 <USBD_LL_Init+0x94>)
 800d790:	2202      	movs	r2, #2
 800d792:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800d794:	4b14      	ldr	r3, [pc, #80]	; (800d7e8 <USBD_LL_Init+0x94>)
 800d796:	2201      	movs	r2, #1
 800d798:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d79a:	4b13      	ldr	r3, [pc, #76]	; (800d7e8 <USBD_LL_Init+0x94>)
 800d79c:	2200      	movs	r2, #0
 800d79e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d7a0:	4b11      	ldr	r3, [pc, #68]	; (800d7e8 <USBD_LL_Init+0x94>)
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800d7a6:	4b10      	ldr	r3, [pc, #64]	; (800d7e8 <USBD_LL_Init+0x94>)
 800d7a8:	2201      	movs	r2, #1
 800d7aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d7ac:	4b0e      	ldr	r3, [pc, #56]	; (800d7e8 <USBD_LL_Init+0x94>)
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d7b2:	480d      	ldr	r0, [pc, #52]	; (800d7e8 <USBD_LL_Init+0x94>)
 800d7b4:	f7f5 fc5d 	bl	8003072 <HAL_PCD_Init>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d001      	beq.n	800d7c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d7be:	f7f4 fbdf 	bl	8001f80 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d7c2:	2180      	movs	r1, #128	; 0x80
 800d7c4:	4808      	ldr	r0, [pc, #32]	; (800d7e8 <USBD_LL_Init+0x94>)
 800d7c6:	f7f6 fed8 	bl	800457a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d7ca:	2240      	movs	r2, #64	; 0x40
 800d7cc:	2100      	movs	r1, #0
 800d7ce:	4806      	ldr	r0, [pc, #24]	; (800d7e8 <USBD_LL_Init+0x94>)
 800d7d0:	f7f6 fe8c 	bl	80044ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d7d4:	2280      	movs	r2, #128	; 0x80
 800d7d6:	2101      	movs	r1, #1
 800d7d8:	4803      	ldr	r0, [pc, #12]	; (800d7e8 <USBD_LL_Init+0x94>)
 800d7da:	f7f6 fe87 	bl	80044ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d7de:	2300      	movs	r3, #0
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3708      	adds	r7, #8
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}
 800d7e8:	20006e0c 	.word	0x20006e0c

0800d7ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b084      	sub	sp, #16
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d802:	4618      	mov	r0, r3
 800d804:	f7f5 fd59 	bl	80032ba <HAL_PCD_Start>
 800d808:	4603      	mov	r3, r0
 800d80a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d80c:	7bfb      	ldrb	r3, [r7, #15]
 800d80e:	4618      	mov	r0, r3
 800d810:	f000 f97e 	bl	800db10 <USBD_Get_USB_Status>
 800d814:	4603      	mov	r3, r0
 800d816:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d818:	7bbb      	ldrb	r3, [r7, #14]
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3710      	adds	r7, #16
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}

0800d822 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d822:	b580      	push	{r7, lr}
 800d824:	b084      	sub	sp, #16
 800d826:	af00      	add	r7, sp, #0
 800d828:	6078      	str	r0, [r7, #4]
 800d82a:	4608      	mov	r0, r1
 800d82c:	4611      	mov	r1, r2
 800d82e:	461a      	mov	r2, r3
 800d830:	4603      	mov	r3, r0
 800d832:	70fb      	strb	r3, [r7, #3]
 800d834:	460b      	mov	r3, r1
 800d836:	70bb      	strb	r3, [r7, #2]
 800d838:	4613      	mov	r3, r2
 800d83a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d83c:	2300      	movs	r3, #0
 800d83e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d840:	2300      	movs	r3, #0
 800d842:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d84a:	78bb      	ldrb	r3, [r7, #2]
 800d84c:	883a      	ldrh	r2, [r7, #0]
 800d84e:	78f9      	ldrb	r1, [r7, #3]
 800d850:	f7f6 fa46 	bl	8003ce0 <HAL_PCD_EP_Open>
 800d854:	4603      	mov	r3, r0
 800d856:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d858:	7bfb      	ldrb	r3, [r7, #15]
 800d85a:	4618      	mov	r0, r3
 800d85c:	f000 f958 	bl	800db10 <USBD_Get_USB_Status>
 800d860:	4603      	mov	r3, r0
 800d862:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d864:	7bbb      	ldrb	r3, [r7, #14]
}
 800d866:	4618      	mov	r0, r3
 800d868:	3710      	adds	r7, #16
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}

0800d86e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d86e:	b580      	push	{r7, lr}
 800d870:	b084      	sub	sp, #16
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
 800d876:	460b      	mov	r3, r1
 800d878:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d87a:	2300      	movs	r3, #0
 800d87c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d87e:	2300      	movs	r3, #0
 800d880:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d888:	78fa      	ldrb	r2, [r7, #3]
 800d88a:	4611      	mov	r1, r2
 800d88c:	4618      	mov	r0, r3
 800d88e:	f7f6 fa8f 	bl	8003db0 <HAL_PCD_EP_Close>
 800d892:	4603      	mov	r3, r0
 800d894:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d896:	7bfb      	ldrb	r3, [r7, #15]
 800d898:	4618      	mov	r0, r3
 800d89a:	f000 f939 	bl	800db10 <USBD_Get_USB_Status>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3710      	adds	r7, #16
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b084      	sub	sp, #16
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	460b      	mov	r3, r1
 800d8b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d8c6:	78fa      	ldrb	r2, [r7, #3]
 800d8c8:	4611      	mov	r1, r2
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7f6 fb67 	bl	8003f9e <HAL_PCD_EP_SetStall>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8d4:	7bfb      	ldrb	r3, [r7, #15]
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f000 f91a 	bl	800db10 <USBD_Get_USB_Status>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	3710      	adds	r7, #16
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}

0800d8ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8ea:	b580      	push	{r7, lr}
 800d8ec:	b084      	sub	sp, #16
 800d8ee:	af00      	add	r7, sp, #0
 800d8f0:	6078      	str	r0, [r7, #4]
 800d8f2:	460b      	mov	r3, r1
 800d8f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d904:	78fa      	ldrb	r2, [r7, #3]
 800d906:	4611      	mov	r1, r2
 800d908:	4618      	mov	r0, r3
 800d90a:	f7f6 fbac 	bl	8004066 <HAL_PCD_EP_ClrStall>
 800d90e:	4603      	mov	r3, r0
 800d910:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d912:	7bfb      	ldrb	r3, [r7, #15]
 800d914:	4618      	mov	r0, r3
 800d916:	f000 f8fb 	bl	800db10 <USBD_Get_USB_Status>
 800d91a:	4603      	mov	r3, r0
 800d91c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d91e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d920:	4618      	mov	r0, r3
 800d922:	3710      	adds	r7, #16
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}

0800d928 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d928:	b480      	push	{r7}
 800d92a:	b085      	sub	sp, #20
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	460b      	mov	r3, r1
 800d932:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d93a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d93c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d940:	2b00      	cmp	r3, #0
 800d942:	da0b      	bge.n	800d95c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d944:	78fb      	ldrb	r3, [r7, #3]
 800d946:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d94a:	68f9      	ldr	r1, [r7, #12]
 800d94c:	4613      	mov	r3, r2
 800d94e:	00db      	lsls	r3, r3, #3
 800d950:	4413      	add	r3, r2
 800d952:	009b      	lsls	r3, r3, #2
 800d954:	440b      	add	r3, r1
 800d956:	333e      	adds	r3, #62	; 0x3e
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	e00b      	b.n	800d974 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d95c:	78fb      	ldrb	r3, [r7, #3]
 800d95e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d962:	68f9      	ldr	r1, [r7, #12]
 800d964:	4613      	mov	r3, r2
 800d966:	00db      	lsls	r3, r3, #3
 800d968:	4413      	add	r3, r2
 800d96a:	009b      	lsls	r3, r3, #2
 800d96c:	440b      	add	r3, r1
 800d96e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d972:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d974:	4618      	mov	r0, r3
 800d976:	3714      	adds	r7, #20
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr

0800d980 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b084      	sub	sp, #16
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	460b      	mov	r3, r1
 800d98a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d98c:	2300      	movs	r3, #0
 800d98e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d990:	2300      	movs	r3, #0
 800d992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d99a:	78fa      	ldrb	r2, [r7, #3]
 800d99c:	4611      	mov	r1, r2
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7f6 f979 	bl	8003c96 <HAL_PCD_SetAddress>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9a8:	7bfb      	ldrb	r3, [r7, #15]
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f000 f8b0 	bl	800db10 <USBD_Get_USB_Status>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	3710      	adds	r7, #16
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}

0800d9be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d9be:	b580      	push	{r7, lr}
 800d9c0:	b086      	sub	sp, #24
 800d9c2:	af00      	add	r7, sp, #0
 800d9c4:	60f8      	str	r0, [r7, #12]
 800d9c6:	607a      	str	r2, [r7, #4]
 800d9c8:	603b      	str	r3, [r7, #0]
 800d9ca:	460b      	mov	r3, r1
 800d9cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d9dc:	7af9      	ldrb	r1, [r7, #11]
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	687a      	ldr	r2, [r7, #4]
 800d9e2:	f7f6 fa92 	bl	8003f0a <HAL_PCD_EP_Transmit>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9ea:	7dfb      	ldrb	r3, [r7, #23]
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f000 f88f 	bl	800db10 <USBD_Get_USB_Status>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d9f6:	7dbb      	ldrb	r3, [r7, #22]
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3718      	adds	r7, #24
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}

0800da00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b086      	sub	sp, #24
 800da04:	af00      	add	r7, sp, #0
 800da06:	60f8      	str	r0, [r7, #12]
 800da08:	607a      	str	r2, [r7, #4]
 800da0a:	603b      	str	r3, [r7, #0]
 800da0c:	460b      	mov	r3, r1
 800da0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da10:	2300      	movs	r3, #0
 800da12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da14:	2300      	movs	r3, #0
 800da16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800da1e:	7af9      	ldrb	r1, [r7, #11]
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	687a      	ldr	r2, [r7, #4]
 800da24:	f7f6 fa0e 	bl	8003e44 <HAL_PCD_EP_Receive>
 800da28:	4603      	mov	r3, r0
 800da2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da2c:	7dfb      	ldrb	r3, [r7, #23]
 800da2e:	4618      	mov	r0, r3
 800da30:	f000 f86e 	bl	800db10 <USBD_Get_USB_Status>
 800da34:	4603      	mov	r3, r0
 800da36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da38:	7dbb      	ldrb	r3, [r7, #22]
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3718      	adds	r7, #24
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}

0800da42 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da42:	b580      	push	{r7, lr}
 800da44:	b082      	sub	sp, #8
 800da46:	af00      	add	r7, sp, #0
 800da48:	6078      	str	r0, [r7, #4]
 800da4a:	460b      	mov	r3, r1
 800da4c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800da54:	78fa      	ldrb	r2, [r7, #3]
 800da56:	4611      	mov	r1, r2
 800da58:	4618      	mov	r0, r3
 800da5a:	f7f6 fa3e 	bl	8003eda <HAL_PCD_EP_GetRxCount>
 800da5e:	4603      	mov	r3, r0
}
 800da60:	4618      	mov	r0, r3
 800da62:	3708      	adds	r7, #8
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b082      	sub	sp, #8
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	460b      	mov	r3, r1
 800da72:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800da74:	78fb      	ldrb	r3, [r7, #3]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d002      	beq.n	800da80 <HAL_PCDEx_LPM_Callback+0x18>
 800da7a:	2b01      	cmp	r3, #1
 800da7c:	d01f      	beq.n	800dabe <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800da7e:	e03b      	b.n	800daf8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6a1b      	ldr	r3, [r3, #32]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d007      	beq.n	800da98 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800da88:	f000 f83c 	bl	800db04 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800da8c:	4b1c      	ldr	r3, [pc, #112]	; (800db00 <HAL_PCDEx_LPM_Callback+0x98>)
 800da8e:	691b      	ldr	r3, [r3, #16]
 800da90:	4a1b      	ldr	r2, [pc, #108]	; (800db00 <HAL_PCDEx_LPM_Callback+0x98>)
 800da92:	f023 0306 	bic.w	r3, r3, #6
 800da96:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	687a      	ldr	r2, [r7, #4]
 800daa4:	6812      	ldr	r2, [r2, #0]
 800daa6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800daaa:	f023 0301 	bic.w	r3, r3, #1
 800daae:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dab6:	4618      	mov	r0, r3
 800dab8:	f7fb fa2b 	bl	8008f12 <USBD_LL_Resume>
    break;
 800dabc:	e01c      	b.n	800daf8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	687a      	ldr	r2, [r7, #4]
 800daca:	6812      	ldr	r2, [r2, #0]
 800dacc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dad0:	f043 0301 	orr.w	r3, r3, #1
 800dad4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dadc:	4618      	mov	r0, r3
 800dade:	f7fb fa02 	bl	8008ee6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6a1b      	ldr	r3, [r3, #32]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d005      	beq.n	800daf6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800daea:	4b05      	ldr	r3, [pc, #20]	; (800db00 <HAL_PCDEx_LPM_Callback+0x98>)
 800daec:	691b      	ldr	r3, [r3, #16]
 800daee:	4a04      	ldr	r2, [pc, #16]	; (800db00 <HAL_PCDEx_LPM_Callback+0x98>)
 800daf0:	f043 0306 	orr.w	r3, r3, #6
 800daf4:	6113      	str	r3, [r2, #16]
    break;
 800daf6:	bf00      	nop
}
 800daf8:	bf00      	nop
 800dafa:	3708      	adds	r7, #8
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	e000ed00 	.word	0xe000ed00

0800db04 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800db08:	f7f4 f868 	bl	8001bdc <SystemClock_Config>
}
 800db0c:	bf00      	nop
 800db0e:	bd80      	pop	{r7, pc}

0800db10 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800db10:	b480      	push	{r7}
 800db12:	b085      	sub	sp, #20
 800db14:	af00      	add	r7, sp, #0
 800db16:	4603      	mov	r3, r0
 800db18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db1a:	2300      	movs	r3, #0
 800db1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800db1e:	79fb      	ldrb	r3, [r7, #7]
 800db20:	2b03      	cmp	r3, #3
 800db22:	d817      	bhi.n	800db54 <USBD_Get_USB_Status+0x44>
 800db24:	a201      	add	r2, pc, #4	; (adr r2, 800db2c <USBD_Get_USB_Status+0x1c>)
 800db26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db2a:	bf00      	nop
 800db2c:	0800db3d 	.word	0x0800db3d
 800db30:	0800db43 	.word	0x0800db43
 800db34:	0800db49 	.word	0x0800db49
 800db38:	0800db4f 	.word	0x0800db4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800db3c:	2300      	movs	r3, #0
 800db3e:	73fb      	strb	r3, [r7, #15]
    break;
 800db40:	e00b      	b.n	800db5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db42:	2303      	movs	r3, #3
 800db44:	73fb      	strb	r3, [r7, #15]
    break;
 800db46:	e008      	b.n	800db5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db48:	2301      	movs	r3, #1
 800db4a:	73fb      	strb	r3, [r7, #15]
    break;
 800db4c:	e005      	b.n	800db5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db4e:	2303      	movs	r3, #3
 800db50:	73fb      	strb	r3, [r7, #15]
    break;
 800db52:	e002      	b.n	800db5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800db54:	2303      	movs	r3, #3
 800db56:	73fb      	strb	r3, [r7, #15]
    break;
 800db58:	bf00      	nop
  }
  return usb_status;
 800db5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3714      	adds	r7, #20
 800db60:	46bd      	mov	sp, r7
 800db62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db66:	4770      	bx	lr

0800db68 <__errno>:
 800db68:	4b01      	ldr	r3, [pc, #4]	; (800db70 <__errno+0x8>)
 800db6a:	6818      	ldr	r0, [r3, #0]
 800db6c:	4770      	bx	lr
 800db6e:	bf00      	nop
 800db70:	20000110 	.word	0x20000110

0800db74 <__libc_init_array>:
 800db74:	b570      	push	{r4, r5, r6, lr}
 800db76:	4d0d      	ldr	r5, [pc, #52]	; (800dbac <__libc_init_array+0x38>)
 800db78:	4c0d      	ldr	r4, [pc, #52]	; (800dbb0 <__libc_init_array+0x3c>)
 800db7a:	1b64      	subs	r4, r4, r5
 800db7c:	10a4      	asrs	r4, r4, #2
 800db7e:	2600      	movs	r6, #0
 800db80:	42a6      	cmp	r6, r4
 800db82:	d109      	bne.n	800db98 <__libc_init_array+0x24>
 800db84:	4d0b      	ldr	r5, [pc, #44]	; (800dbb4 <__libc_init_array+0x40>)
 800db86:	4c0c      	ldr	r4, [pc, #48]	; (800dbb8 <__libc_init_array+0x44>)
 800db88:	f000 f9a6 	bl	800ded8 <_init>
 800db8c:	1b64      	subs	r4, r4, r5
 800db8e:	10a4      	asrs	r4, r4, #2
 800db90:	2600      	movs	r6, #0
 800db92:	42a6      	cmp	r6, r4
 800db94:	d105      	bne.n	800dba2 <__libc_init_array+0x2e>
 800db96:	bd70      	pop	{r4, r5, r6, pc}
 800db98:	f855 3b04 	ldr.w	r3, [r5], #4
 800db9c:	4798      	blx	r3
 800db9e:	3601      	adds	r6, #1
 800dba0:	e7ee      	b.n	800db80 <__libc_init_array+0xc>
 800dba2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dba6:	4798      	blx	r3
 800dba8:	3601      	adds	r6, #1
 800dbaa:	e7f2      	b.n	800db92 <__libc_init_array+0x1e>
 800dbac:	0800e138 	.word	0x0800e138
 800dbb0:	0800e138 	.word	0x0800e138
 800dbb4:	0800e138 	.word	0x0800e138
 800dbb8:	0800e13c 	.word	0x0800e13c

0800dbbc <__retarget_lock_acquire_recursive>:
 800dbbc:	4770      	bx	lr

0800dbbe <__retarget_lock_release_recursive>:
 800dbbe:	4770      	bx	lr

0800dbc0 <malloc>:
 800dbc0:	4b02      	ldr	r3, [pc, #8]	; (800dbcc <malloc+0xc>)
 800dbc2:	4601      	mov	r1, r0
 800dbc4:	6818      	ldr	r0, [r3, #0]
 800dbc6:	f000 b88d 	b.w	800dce4 <_malloc_r>
 800dbca:	bf00      	nop
 800dbcc:	20000110 	.word	0x20000110

0800dbd0 <free>:
 800dbd0:	4b02      	ldr	r3, [pc, #8]	; (800dbdc <free+0xc>)
 800dbd2:	4601      	mov	r1, r0
 800dbd4:	6818      	ldr	r0, [r3, #0]
 800dbd6:	f000 b819 	b.w	800dc0c <_free_r>
 800dbda:	bf00      	nop
 800dbdc:	20000110 	.word	0x20000110

0800dbe0 <memcpy>:
 800dbe0:	440a      	add	r2, r1
 800dbe2:	4291      	cmp	r1, r2
 800dbe4:	f100 33ff 	add.w	r3, r0, #4294967295
 800dbe8:	d100      	bne.n	800dbec <memcpy+0xc>
 800dbea:	4770      	bx	lr
 800dbec:	b510      	push	{r4, lr}
 800dbee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dbf6:	4291      	cmp	r1, r2
 800dbf8:	d1f9      	bne.n	800dbee <memcpy+0xe>
 800dbfa:	bd10      	pop	{r4, pc}

0800dbfc <memset>:
 800dbfc:	4402      	add	r2, r0
 800dbfe:	4603      	mov	r3, r0
 800dc00:	4293      	cmp	r3, r2
 800dc02:	d100      	bne.n	800dc06 <memset+0xa>
 800dc04:	4770      	bx	lr
 800dc06:	f803 1b01 	strb.w	r1, [r3], #1
 800dc0a:	e7f9      	b.n	800dc00 <memset+0x4>

0800dc0c <_free_r>:
 800dc0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc0e:	2900      	cmp	r1, #0
 800dc10:	d044      	beq.n	800dc9c <_free_r+0x90>
 800dc12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc16:	9001      	str	r0, [sp, #4]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	f1a1 0404 	sub.w	r4, r1, #4
 800dc1e:	bfb8      	it	lt
 800dc20:	18e4      	addlt	r4, r4, r3
 800dc22:	f000 f94d 	bl	800dec0 <__malloc_lock>
 800dc26:	4a1e      	ldr	r2, [pc, #120]	; (800dca0 <_free_r+0x94>)
 800dc28:	9801      	ldr	r0, [sp, #4]
 800dc2a:	6813      	ldr	r3, [r2, #0]
 800dc2c:	b933      	cbnz	r3, 800dc3c <_free_r+0x30>
 800dc2e:	6063      	str	r3, [r4, #4]
 800dc30:	6014      	str	r4, [r2, #0]
 800dc32:	b003      	add	sp, #12
 800dc34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc38:	f000 b948 	b.w	800decc <__malloc_unlock>
 800dc3c:	42a3      	cmp	r3, r4
 800dc3e:	d908      	bls.n	800dc52 <_free_r+0x46>
 800dc40:	6825      	ldr	r5, [r4, #0]
 800dc42:	1961      	adds	r1, r4, r5
 800dc44:	428b      	cmp	r3, r1
 800dc46:	bf01      	itttt	eq
 800dc48:	6819      	ldreq	r1, [r3, #0]
 800dc4a:	685b      	ldreq	r3, [r3, #4]
 800dc4c:	1949      	addeq	r1, r1, r5
 800dc4e:	6021      	streq	r1, [r4, #0]
 800dc50:	e7ed      	b.n	800dc2e <_free_r+0x22>
 800dc52:	461a      	mov	r2, r3
 800dc54:	685b      	ldr	r3, [r3, #4]
 800dc56:	b10b      	cbz	r3, 800dc5c <_free_r+0x50>
 800dc58:	42a3      	cmp	r3, r4
 800dc5a:	d9fa      	bls.n	800dc52 <_free_r+0x46>
 800dc5c:	6811      	ldr	r1, [r2, #0]
 800dc5e:	1855      	adds	r5, r2, r1
 800dc60:	42a5      	cmp	r5, r4
 800dc62:	d10b      	bne.n	800dc7c <_free_r+0x70>
 800dc64:	6824      	ldr	r4, [r4, #0]
 800dc66:	4421      	add	r1, r4
 800dc68:	1854      	adds	r4, r2, r1
 800dc6a:	42a3      	cmp	r3, r4
 800dc6c:	6011      	str	r1, [r2, #0]
 800dc6e:	d1e0      	bne.n	800dc32 <_free_r+0x26>
 800dc70:	681c      	ldr	r4, [r3, #0]
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	6053      	str	r3, [r2, #4]
 800dc76:	4421      	add	r1, r4
 800dc78:	6011      	str	r1, [r2, #0]
 800dc7a:	e7da      	b.n	800dc32 <_free_r+0x26>
 800dc7c:	d902      	bls.n	800dc84 <_free_r+0x78>
 800dc7e:	230c      	movs	r3, #12
 800dc80:	6003      	str	r3, [r0, #0]
 800dc82:	e7d6      	b.n	800dc32 <_free_r+0x26>
 800dc84:	6825      	ldr	r5, [r4, #0]
 800dc86:	1961      	adds	r1, r4, r5
 800dc88:	428b      	cmp	r3, r1
 800dc8a:	bf04      	itt	eq
 800dc8c:	6819      	ldreq	r1, [r3, #0]
 800dc8e:	685b      	ldreq	r3, [r3, #4]
 800dc90:	6063      	str	r3, [r4, #4]
 800dc92:	bf04      	itt	eq
 800dc94:	1949      	addeq	r1, r1, r5
 800dc96:	6021      	streq	r1, [r4, #0]
 800dc98:	6054      	str	r4, [r2, #4]
 800dc9a:	e7ca      	b.n	800dc32 <_free_r+0x26>
 800dc9c:	b003      	add	sp, #12
 800dc9e:	bd30      	pop	{r4, r5, pc}
 800dca0:	20007318 	.word	0x20007318

0800dca4 <sbrk_aligned>:
 800dca4:	b570      	push	{r4, r5, r6, lr}
 800dca6:	4e0e      	ldr	r6, [pc, #56]	; (800dce0 <sbrk_aligned+0x3c>)
 800dca8:	460c      	mov	r4, r1
 800dcaa:	6831      	ldr	r1, [r6, #0]
 800dcac:	4605      	mov	r5, r0
 800dcae:	b911      	cbnz	r1, 800dcb6 <sbrk_aligned+0x12>
 800dcb0:	f000 f8f6 	bl	800dea0 <_sbrk_r>
 800dcb4:	6030      	str	r0, [r6, #0]
 800dcb6:	4621      	mov	r1, r4
 800dcb8:	4628      	mov	r0, r5
 800dcba:	f000 f8f1 	bl	800dea0 <_sbrk_r>
 800dcbe:	1c43      	adds	r3, r0, #1
 800dcc0:	d00a      	beq.n	800dcd8 <sbrk_aligned+0x34>
 800dcc2:	1cc4      	adds	r4, r0, #3
 800dcc4:	f024 0403 	bic.w	r4, r4, #3
 800dcc8:	42a0      	cmp	r0, r4
 800dcca:	d007      	beq.n	800dcdc <sbrk_aligned+0x38>
 800dccc:	1a21      	subs	r1, r4, r0
 800dcce:	4628      	mov	r0, r5
 800dcd0:	f000 f8e6 	bl	800dea0 <_sbrk_r>
 800dcd4:	3001      	adds	r0, #1
 800dcd6:	d101      	bne.n	800dcdc <sbrk_aligned+0x38>
 800dcd8:	f04f 34ff 	mov.w	r4, #4294967295
 800dcdc:	4620      	mov	r0, r4
 800dcde:	bd70      	pop	{r4, r5, r6, pc}
 800dce0:	2000731c 	.word	0x2000731c

0800dce4 <_malloc_r>:
 800dce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dce8:	1ccd      	adds	r5, r1, #3
 800dcea:	f025 0503 	bic.w	r5, r5, #3
 800dcee:	3508      	adds	r5, #8
 800dcf0:	2d0c      	cmp	r5, #12
 800dcf2:	bf38      	it	cc
 800dcf4:	250c      	movcc	r5, #12
 800dcf6:	2d00      	cmp	r5, #0
 800dcf8:	4607      	mov	r7, r0
 800dcfa:	db01      	blt.n	800dd00 <_malloc_r+0x1c>
 800dcfc:	42a9      	cmp	r1, r5
 800dcfe:	d905      	bls.n	800dd0c <_malloc_r+0x28>
 800dd00:	230c      	movs	r3, #12
 800dd02:	603b      	str	r3, [r7, #0]
 800dd04:	2600      	movs	r6, #0
 800dd06:	4630      	mov	r0, r6
 800dd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd0c:	4e2e      	ldr	r6, [pc, #184]	; (800ddc8 <_malloc_r+0xe4>)
 800dd0e:	f000 f8d7 	bl	800dec0 <__malloc_lock>
 800dd12:	6833      	ldr	r3, [r6, #0]
 800dd14:	461c      	mov	r4, r3
 800dd16:	bb34      	cbnz	r4, 800dd66 <_malloc_r+0x82>
 800dd18:	4629      	mov	r1, r5
 800dd1a:	4638      	mov	r0, r7
 800dd1c:	f7ff ffc2 	bl	800dca4 <sbrk_aligned>
 800dd20:	1c43      	adds	r3, r0, #1
 800dd22:	4604      	mov	r4, r0
 800dd24:	d14d      	bne.n	800ddc2 <_malloc_r+0xde>
 800dd26:	6834      	ldr	r4, [r6, #0]
 800dd28:	4626      	mov	r6, r4
 800dd2a:	2e00      	cmp	r6, #0
 800dd2c:	d140      	bne.n	800ddb0 <_malloc_r+0xcc>
 800dd2e:	6823      	ldr	r3, [r4, #0]
 800dd30:	4631      	mov	r1, r6
 800dd32:	4638      	mov	r0, r7
 800dd34:	eb04 0803 	add.w	r8, r4, r3
 800dd38:	f000 f8b2 	bl	800dea0 <_sbrk_r>
 800dd3c:	4580      	cmp	r8, r0
 800dd3e:	d13a      	bne.n	800ddb6 <_malloc_r+0xd2>
 800dd40:	6821      	ldr	r1, [r4, #0]
 800dd42:	3503      	adds	r5, #3
 800dd44:	1a6d      	subs	r5, r5, r1
 800dd46:	f025 0503 	bic.w	r5, r5, #3
 800dd4a:	3508      	adds	r5, #8
 800dd4c:	2d0c      	cmp	r5, #12
 800dd4e:	bf38      	it	cc
 800dd50:	250c      	movcc	r5, #12
 800dd52:	4629      	mov	r1, r5
 800dd54:	4638      	mov	r0, r7
 800dd56:	f7ff ffa5 	bl	800dca4 <sbrk_aligned>
 800dd5a:	3001      	adds	r0, #1
 800dd5c:	d02b      	beq.n	800ddb6 <_malloc_r+0xd2>
 800dd5e:	6823      	ldr	r3, [r4, #0]
 800dd60:	442b      	add	r3, r5
 800dd62:	6023      	str	r3, [r4, #0]
 800dd64:	e00e      	b.n	800dd84 <_malloc_r+0xa0>
 800dd66:	6822      	ldr	r2, [r4, #0]
 800dd68:	1b52      	subs	r2, r2, r5
 800dd6a:	d41e      	bmi.n	800ddaa <_malloc_r+0xc6>
 800dd6c:	2a0b      	cmp	r2, #11
 800dd6e:	d916      	bls.n	800dd9e <_malloc_r+0xba>
 800dd70:	1961      	adds	r1, r4, r5
 800dd72:	42a3      	cmp	r3, r4
 800dd74:	6025      	str	r5, [r4, #0]
 800dd76:	bf18      	it	ne
 800dd78:	6059      	strne	r1, [r3, #4]
 800dd7a:	6863      	ldr	r3, [r4, #4]
 800dd7c:	bf08      	it	eq
 800dd7e:	6031      	streq	r1, [r6, #0]
 800dd80:	5162      	str	r2, [r4, r5]
 800dd82:	604b      	str	r3, [r1, #4]
 800dd84:	4638      	mov	r0, r7
 800dd86:	f104 060b 	add.w	r6, r4, #11
 800dd8a:	f000 f89f 	bl	800decc <__malloc_unlock>
 800dd8e:	f026 0607 	bic.w	r6, r6, #7
 800dd92:	1d23      	adds	r3, r4, #4
 800dd94:	1af2      	subs	r2, r6, r3
 800dd96:	d0b6      	beq.n	800dd06 <_malloc_r+0x22>
 800dd98:	1b9b      	subs	r3, r3, r6
 800dd9a:	50a3      	str	r3, [r4, r2]
 800dd9c:	e7b3      	b.n	800dd06 <_malloc_r+0x22>
 800dd9e:	6862      	ldr	r2, [r4, #4]
 800dda0:	42a3      	cmp	r3, r4
 800dda2:	bf0c      	ite	eq
 800dda4:	6032      	streq	r2, [r6, #0]
 800dda6:	605a      	strne	r2, [r3, #4]
 800dda8:	e7ec      	b.n	800dd84 <_malloc_r+0xa0>
 800ddaa:	4623      	mov	r3, r4
 800ddac:	6864      	ldr	r4, [r4, #4]
 800ddae:	e7b2      	b.n	800dd16 <_malloc_r+0x32>
 800ddb0:	4634      	mov	r4, r6
 800ddb2:	6876      	ldr	r6, [r6, #4]
 800ddb4:	e7b9      	b.n	800dd2a <_malloc_r+0x46>
 800ddb6:	230c      	movs	r3, #12
 800ddb8:	603b      	str	r3, [r7, #0]
 800ddba:	4638      	mov	r0, r7
 800ddbc:	f000 f886 	bl	800decc <__malloc_unlock>
 800ddc0:	e7a1      	b.n	800dd06 <_malloc_r+0x22>
 800ddc2:	6025      	str	r5, [r4, #0]
 800ddc4:	e7de      	b.n	800dd84 <_malloc_r+0xa0>
 800ddc6:	bf00      	nop
 800ddc8:	20007318 	.word	0x20007318

0800ddcc <cleanup_glue>:
 800ddcc:	b538      	push	{r3, r4, r5, lr}
 800ddce:	460c      	mov	r4, r1
 800ddd0:	6809      	ldr	r1, [r1, #0]
 800ddd2:	4605      	mov	r5, r0
 800ddd4:	b109      	cbz	r1, 800ddda <cleanup_glue+0xe>
 800ddd6:	f7ff fff9 	bl	800ddcc <cleanup_glue>
 800ddda:	4621      	mov	r1, r4
 800dddc:	4628      	mov	r0, r5
 800ddde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dde2:	f7ff bf13 	b.w	800dc0c <_free_r>
	...

0800dde8 <_reclaim_reent>:
 800dde8:	4b2c      	ldr	r3, [pc, #176]	; (800de9c <_reclaim_reent+0xb4>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	4283      	cmp	r3, r0
 800ddee:	b570      	push	{r4, r5, r6, lr}
 800ddf0:	4604      	mov	r4, r0
 800ddf2:	d051      	beq.n	800de98 <_reclaim_reent+0xb0>
 800ddf4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ddf6:	b143      	cbz	r3, 800de0a <_reclaim_reent+0x22>
 800ddf8:	68db      	ldr	r3, [r3, #12]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d14a      	bne.n	800de94 <_reclaim_reent+0xac>
 800ddfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de00:	6819      	ldr	r1, [r3, #0]
 800de02:	b111      	cbz	r1, 800de0a <_reclaim_reent+0x22>
 800de04:	4620      	mov	r0, r4
 800de06:	f7ff ff01 	bl	800dc0c <_free_r>
 800de0a:	6961      	ldr	r1, [r4, #20]
 800de0c:	b111      	cbz	r1, 800de14 <_reclaim_reent+0x2c>
 800de0e:	4620      	mov	r0, r4
 800de10:	f7ff fefc 	bl	800dc0c <_free_r>
 800de14:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800de16:	b111      	cbz	r1, 800de1e <_reclaim_reent+0x36>
 800de18:	4620      	mov	r0, r4
 800de1a:	f7ff fef7 	bl	800dc0c <_free_r>
 800de1e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800de20:	b111      	cbz	r1, 800de28 <_reclaim_reent+0x40>
 800de22:	4620      	mov	r0, r4
 800de24:	f7ff fef2 	bl	800dc0c <_free_r>
 800de28:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800de2a:	b111      	cbz	r1, 800de32 <_reclaim_reent+0x4a>
 800de2c:	4620      	mov	r0, r4
 800de2e:	f7ff feed 	bl	800dc0c <_free_r>
 800de32:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800de34:	b111      	cbz	r1, 800de3c <_reclaim_reent+0x54>
 800de36:	4620      	mov	r0, r4
 800de38:	f7ff fee8 	bl	800dc0c <_free_r>
 800de3c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800de3e:	b111      	cbz	r1, 800de46 <_reclaim_reent+0x5e>
 800de40:	4620      	mov	r0, r4
 800de42:	f7ff fee3 	bl	800dc0c <_free_r>
 800de46:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800de48:	b111      	cbz	r1, 800de50 <_reclaim_reent+0x68>
 800de4a:	4620      	mov	r0, r4
 800de4c:	f7ff fede 	bl	800dc0c <_free_r>
 800de50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de52:	b111      	cbz	r1, 800de5a <_reclaim_reent+0x72>
 800de54:	4620      	mov	r0, r4
 800de56:	f7ff fed9 	bl	800dc0c <_free_r>
 800de5a:	69a3      	ldr	r3, [r4, #24]
 800de5c:	b1e3      	cbz	r3, 800de98 <_reclaim_reent+0xb0>
 800de5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800de60:	4620      	mov	r0, r4
 800de62:	4798      	blx	r3
 800de64:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800de66:	b1b9      	cbz	r1, 800de98 <_reclaim_reent+0xb0>
 800de68:	4620      	mov	r0, r4
 800de6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de6e:	f7ff bfad 	b.w	800ddcc <cleanup_glue>
 800de72:	5949      	ldr	r1, [r1, r5]
 800de74:	b941      	cbnz	r1, 800de88 <_reclaim_reent+0xa0>
 800de76:	3504      	adds	r5, #4
 800de78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de7a:	2d80      	cmp	r5, #128	; 0x80
 800de7c:	68d9      	ldr	r1, [r3, #12]
 800de7e:	d1f8      	bne.n	800de72 <_reclaim_reent+0x8a>
 800de80:	4620      	mov	r0, r4
 800de82:	f7ff fec3 	bl	800dc0c <_free_r>
 800de86:	e7ba      	b.n	800ddfe <_reclaim_reent+0x16>
 800de88:	680e      	ldr	r6, [r1, #0]
 800de8a:	4620      	mov	r0, r4
 800de8c:	f7ff febe 	bl	800dc0c <_free_r>
 800de90:	4631      	mov	r1, r6
 800de92:	e7ef      	b.n	800de74 <_reclaim_reent+0x8c>
 800de94:	2500      	movs	r5, #0
 800de96:	e7ef      	b.n	800de78 <_reclaim_reent+0x90>
 800de98:	bd70      	pop	{r4, r5, r6, pc}
 800de9a:	bf00      	nop
 800de9c:	20000110 	.word	0x20000110

0800dea0 <_sbrk_r>:
 800dea0:	b538      	push	{r3, r4, r5, lr}
 800dea2:	4d06      	ldr	r5, [pc, #24]	; (800debc <_sbrk_r+0x1c>)
 800dea4:	2300      	movs	r3, #0
 800dea6:	4604      	mov	r4, r0
 800dea8:	4608      	mov	r0, r1
 800deaa:	602b      	str	r3, [r5, #0]
 800deac:	f7f4 fa52 	bl	8002354 <_sbrk>
 800deb0:	1c43      	adds	r3, r0, #1
 800deb2:	d102      	bne.n	800deba <_sbrk_r+0x1a>
 800deb4:	682b      	ldr	r3, [r5, #0]
 800deb6:	b103      	cbz	r3, 800deba <_sbrk_r+0x1a>
 800deb8:	6023      	str	r3, [r4, #0]
 800deba:	bd38      	pop	{r3, r4, r5, pc}
 800debc:	20007320 	.word	0x20007320

0800dec0 <__malloc_lock>:
 800dec0:	4801      	ldr	r0, [pc, #4]	; (800dec8 <__malloc_lock+0x8>)
 800dec2:	f7ff be7b 	b.w	800dbbc <__retarget_lock_acquire_recursive>
 800dec6:	bf00      	nop
 800dec8:	20007314 	.word	0x20007314

0800decc <__malloc_unlock>:
 800decc:	4801      	ldr	r0, [pc, #4]	; (800ded4 <__malloc_unlock+0x8>)
 800dece:	f7ff be76 	b.w	800dbbe <__retarget_lock_release_recursive>
 800ded2:	bf00      	nop
 800ded4:	20007314 	.word	0x20007314

0800ded8 <_init>:
 800ded8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deda:	bf00      	nop
 800dedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dede:	bc08      	pop	{r3}
 800dee0:	469e      	mov	lr, r3
 800dee2:	4770      	bx	lr

0800dee4 <_fini>:
 800dee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dee6:	bf00      	nop
 800dee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deea:	bc08      	pop	{r3}
 800deec:	469e      	mov	lr, r3
 800deee:	4770      	bx	lr
