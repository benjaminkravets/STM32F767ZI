1. CAN communication (can_f103 and can_f767)
	1.1. Every 2 seconds the F767 transmits a CAN packet where the first data byte is an ON/OFF delay and the second byte is the ON/OFF count (the F767 will flash it's red LED to indicate the send). This is read by the F103 and the KW45 alternating which completes the ON/OFF sequence (with its LED), then sends back an acknowledgement CAN packet. When the F767 gets the acknowledgement packet, it will toggle its green LED.
	1.2. The F103 has pin PA12 connected to its CAN transceiver TX pin and PA11 connected to its CAN transceiver RX pin. Each circuit CAN transceiver is connected to the bus CANH to CANH and CANL to CANL. The F767 has pin PD1 connected to its CAN transceiver TX pin and PD0 connected to its CAN transceiver RX pin. Both CAN transceivers used by the ST chips are TJA1050 that get common 5V power. The KW45 has pin PTC4 is connected to the TX port of it's transceiver and pin PTC5 connected to the RX port, but both go through a 74LVCH1T45 transceiver. Both the level shifting and CAN transceiver are powered on board the evaluation kit.

2. SPI communication (spi_f767 and either spi_f103_irq or spi_f103_dma)
	2.1. Every 500 milliseconds the F767 transmits a SPI sequence of length 20, then toggles its blue LED to indicate that this is complete. The F103 interrupt is triggered when the sequence is started, and will collect 20 bytes to fill its buffer, then toggle its red LED to indicate that this was successful. A UART flag is marked, which can be read by the super loop when interrupts are over. When the flag is set, a newline sequence is sent followed by the buffer, then the flag is reset. The IRQ project uses interrupts to accomplish the receive while the DMA project collects the SPI transmission and moves it to memory without the use of the CPU (this would be far more beneficial if the SPI transmission was much longer). In this case, the chip select is not used but can be implemented using the NSS signal available to the SPI peripheral (enabling NSSP mode allows an active low chip select).
	2.2. The F767 has pin PA5 set as the serial clock (SCK) and goes to the F103 PA5 pin. The F767 has PIN PA6 set as the master in slave out (MISO) and goes to the F103 PA6. The F767 has pin PD7 set as the master out slave in (MOSI) and goes to the F103 PA7.

3. Read/write to EEPROM flash (AT24C256_eeprom_i2c)
	3.1. The F767 erases all memory on the AT24C256, then makes two writes to do different pages (at two different byte offsets in each page). This data is read back from the same places, then printed to UART every second, with the blue LED blinking to confirm completion.
	3.2. The F767 has pin PB9 set as SDA to the EEPROM's SDA and pin PB6 set as the SCL to the EEPROM's SCL. The EEPROM is powered by the board's 5V power (higher EEPROM clock speeds available here rather than 3.3V). Pin PA0 set as the UART output.

4. SPI communication (spi_f767_1 and spi_kw45_1)
	4.1 Every second the KW45 task transmits 64 bytes over SPI from it's buffer using DMA, then blocks on a semaphore which is given when the SPI transmission is complete. It then begins receiving with SPI via DMA. It waits on the semaphore again until this reception is complete. The F767 SPI DMA RX IRQ is called when data reception is complete, this releases a semaphore which frees a task to add 1 to each byte of the buffer, then begin a SPI DMA transmission of this back to the KW45. When the transmission is complete, the SPI DMA TX IRQ is called which begins SPI DMA reception again.
	4.2 The KW4 has pins A16, A17, A18, and A19 set as chip select, data in (MISO), data out (MOSI), and clock respectively. The F767 has pins PC2, PC3, PB10, and PB12 set as data out (MISO), data in (MOSI), clock, and chip select respectively.

5. KW45 spirate
	5.1 Windbond breakout
		1. in
		2. clk
		3. hold/reset
		4. 3.3V
		5. cs
		6. out
		7. wp
		8. GND

6. CAN communication 2 (can_kw45_2 and can_f767_2)
	6.1 kw45 (components 'FreeRTOS kernel', 'cm33 nontrustzone port', 'lpuart', 'lpuart_edma', 'lpuart_freertos', 'flexcan', 'flexcan_edma', 'mem_manager_freertos') when either a UART character is received on LPUART0 or LPIT0 triggers (which occurs once a second), a command is sent to a stream buffer. CanSenderReceiverTask, which has been blocking on this stream buffer, receives the command and sends 8 CAN messages of DLC 8 with message ID 0x123, then receives 8 messages of DLC 8 ID 0x321- both transactions use interrupts. As messages are received back, an interrupt sends their data to another stream buffer byte wise. CanPrintTask unblocks from waiting on this stream buffer and recieves these bytes, then prints them to the debug port (LPUART1). CAN TX and RX are PTC4 and PTC5.

	6.2 f767 8 messages of DLC 8 ID 0x123 are received. Afer 64 bytes (8 bytes x 8 messages) have accumulated in a buffer in CanReceiverTask, they are incremented and sent to another stream buffer. CanSenderTask unblocks from waiting on this stream buffer and receives these bytes, then sends them back in 8 byte packets ID 0x321. The sending and receiving use interrupts. CAN TX and RX are PD1 and PD0.

7. TMP1075 sensor 
	7.1 Breakoutboard (numbers are those on breakout board, not IC)
	1             10
	2 SDA *   VCC 9
	3 SCL     A0  8
	4 ALERT   A1  7
	5 GND     A2  6
	