
spi_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000514c  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005344  08005344  00006344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005364  08005364  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005364  08005364  00006364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800536c  0800536c  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800536c  0800536c  0000636c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005370  08005370  00006370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005374  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000010  08005384  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08005384  00007220  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c371  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b2a  00000000  00000000  000133af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  00014ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000073f  00000000  00000000  00015840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a86  00000000  00000000  00015f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c7f4  00000000  00000000  0003ca05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1452  00000000  00000000  000491f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013a64b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002624  00000000  00000000  0013a690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0013ccb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	0800532c 	.word	0x0800532c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	0800532c 	.word	0x0800532c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <HAL_SPI_RxCpltCallback>:
uint8_t receive_bytes[TRANSFER_SIZE] = {0};
uint8_t receive_queued = 0;
uint8_t rcpts = 65;

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	//HAL_SPI_Receive_IT(&hspi2, receive_bytes, TRANSFER_SIZE);
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000530:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000534:	4807      	ldr	r0, [pc, #28]	@ (8000554 <HAL_SPI_RxCpltCallback+0x2c>)
 8000536:	f001 fbb6 	bl	8001ca6 <HAL_GPIO_TogglePin>
	receive_queued = 1;
 800053a:	4b07      	ldr	r3, [pc, #28]	@ (8000558 <HAL_SPI_RxCpltCallback+0x30>)
 800053c:	2201      	movs	r2, #1
 800053e:	701a      	strb	r2, [r3, #0]
	rcpts += 1;
 8000540:	4b06      	ldr	r3, [pc, #24]	@ (800055c <HAL_SPI_RxCpltCallback+0x34>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	3301      	adds	r3, #1
 8000546:	b2da      	uxtb	r2, r3
 8000548:	4b04      	ldr	r3, [pc, #16]	@ (800055c <HAL_SPI_RxCpltCallback+0x34>)
 800054a:	701a      	strb	r2, [r3, #0]

}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40020400 	.word	0x40020400
 8000558:	20000218 	.word	0x20000218
 800055c:	20000000 	.word	0x20000000

08000560 <HAL_SPI_TxCpltCallback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	HAL_SPI_Receive_DMA(&hspi2, receive_bytes, TRANSFER_SIZE);
 8000568:	2240      	movs	r2, #64	@ 0x40
 800056a:	4904      	ldr	r1, [pc, #16]	@ (800057c <HAL_SPI_TxCpltCallback+0x1c>)
 800056c:	4804      	ldr	r0, [pc, #16]	@ (8000580 <HAL_SPI_TxCpltCallback+0x20>)
 800056e:	f002 fe4f 	bl	8003210 <HAL_SPI_Receive_DMA>

}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	200001d8 	.word	0x200001d8
 8000580:	2000002c 	.word	0x2000002c

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

  for (uint8_t i = 0; i < 64; i++){
 800058a:	2300      	movs	r3, #0
 800058c:	71fb      	strb	r3, [r7, #7]
 800058e:	e008      	b.n	80005a2 <main+0x1e>
	  receive_bytes[i] = i + 64;
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	79fa      	ldrb	r2, [r7, #7]
 8000594:	3240      	adds	r2, #64	@ 0x40
 8000596:	b2d1      	uxtb	r1, r2
 8000598:	4a15      	ldr	r2, [pc, #84]	@ (80005f0 <main+0x6c>)
 800059a:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < 64; i++){
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	3301      	adds	r3, #1
 80005a0:	71fb      	strb	r3, [r7, #7]
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80005a6:	d9f3      	bls.n	8000590 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 fc3f 	bl	8000e2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f828 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 f910 	bl	80007d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b4:	f000 f8e8 	bl	8000788 <MX_DMA_Init>
  MX_SPI2_Init();
 80005b8:	f000 f87e 	bl	80006b8 <MX_SPI2_Init>
  MX_UART4_Init();
 80005bc:	f000 f8b4 	bl	8000728 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  HAL_SPI_Receive_DMA(&hspi2, receive_bytes, TRANSFER_SIZE);
 80005c0:	2240      	movs	r2, #64	@ 0x40
 80005c2:	490b      	ldr	r1, [pc, #44]	@ (80005f0 <main+0x6c>)
 80005c4:	480b      	ldr	r0, [pc, #44]	@ (80005f4 <main+0x70>)
 80005c6:	f002 fe23 	bl	8003210 <HAL_SPI_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (receive_queued == 1){
 80005ca:	4b0b      	ldr	r3, [pc, #44]	@ (80005f8 <main+0x74>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d1fb      	bne.n	80005ca <main+0x46>

		  HAL_UART_Transmit_IT(&huart4, receive_bytes, TRANSFER_SIZE);
 80005d2:	2240      	movs	r2, #64	@ 0x40
 80005d4:	4906      	ldr	r1, [pc, #24]	@ (80005f0 <main+0x6c>)
 80005d6:	4809      	ldr	r0, [pc, #36]	@ (80005fc <main+0x78>)
 80005d8:	f003 fd94 	bl	8004104 <HAL_UART_Transmit_IT>
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
		  } */



		  HAL_SPI_Transmit_DMA(&hspi2, receive_bytes, TRANSFER_SIZE);
 80005dc:	2240      	movs	r2, #64	@ 0x40
 80005de:	4904      	ldr	r1, [pc, #16]	@ (80005f0 <main+0x6c>)
 80005e0:	4804      	ldr	r0, [pc, #16]	@ (80005f4 <main+0x70>)
 80005e2:	f002 fd21 	bl	8003028 <HAL_SPI_Transmit_DMA>



		  //HAL_SPI_Transmit(&hspi2, receive_bytes, TRANSFER_SIZE, 100);

		  receive_queued = 0;
 80005e6:	4b04      	ldr	r3, [pc, #16]	@ (80005f8 <main+0x74>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]
	  if (receive_queued == 1){
 80005ec:	e7ed      	b.n	80005ca <main+0x46>
 80005ee:	bf00      	nop
 80005f0:	200001d8 	.word	0x200001d8
 80005f4:	2000002c 	.word	0x2000002c
 80005f8:	20000218 	.word	0x20000218
 80005fc:	20000150 	.word	0x20000150

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	@ 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	2234      	movs	r2, #52	@ 0x34
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f004 fe60 	bl	80052d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	4b22      	ldr	r3, [pc, #136]	@ (80006b0 <SystemClock_Config+0xb0>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000628:	4a21      	ldr	r2, [pc, #132]	@ (80006b0 <SystemClock_Config+0xb0>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000630:	4b1f      	ldr	r3, [pc, #124]	@ (80006b0 <SystemClock_Config+0xb0>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800063c:	4b1d      	ldr	r3, [pc, #116]	@ (80006b4 <SystemClock_Config+0xb4>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000644:	4a1b      	ldr	r2, [pc, #108]	@ (80006b4 <SystemClock_Config+0xb4>)
 8000646:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b19      	ldr	r3, [pc, #100]	@ (80006b4 <SystemClock_Config+0xb4>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000658:	2302      	movs	r3, #2
 800065a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000660:	2310      	movs	r3, #16
 8000662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000664:	2300      	movs	r3, #0
 8000666:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4618      	mov	r0, r3
 800066e:	f001 fb35 	bl	8001cdc <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000678:	f000 f9c2 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000688:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800068c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000692:	f107 0308 	add.w	r3, r7, #8
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f001 fdcd 	bl	8002238 <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80006a4:	f000 f9ac 	bl	8000a00 <Error_Handler>
  }
}
 80006a8:	bf00      	nop
 80006aa:	3750      	adds	r7, #80	@ 0x50
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006bc:	4b18      	ldr	r3, [pc, #96]	@ (8000720 <MX_SPI2_Init+0x68>)
 80006be:	4a19      	ldr	r2, [pc, #100]	@ (8000724 <MX_SPI2_Init+0x6c>)
 80006c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80006c2:	4b17      	ldr	r3, [pc, #92]	@ (8000720 <MX_SPI2_Init+0x68>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006c8:	4b15      	ldr	r3, [pc, #84]	@ (8000720 <MX_SPI2_Init+0x68>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ce:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <MX_SPI2_Init+0x68>)
 80006d0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80006d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d6:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <MX_SPI2_Init+0x68>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006dc:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <MX_SPI2_Init+0x68>)
 80006de:	2200      	movs	r2, #0
 80006e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80006e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <MX_SPI2_Init+0x68>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <MX_SPI2_Init+0x68>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MX_SPI2_Init+0x68>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <MX_SPI2_Init+0x68>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80006fa:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_SPI2_Init+0x68>)
 80006fc:	2207      	movs	r2, #7
 80006fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000700:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <MX_SPI2_Init+0x68>)
 8000702:	2200      	movs	r2, #0
 8000704:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000706:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_SPI2_Init+0x68>)
 8000708:	2200      	movs	r2, #0
 800070a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	@ (8000720 <MX_SPI2_Init+0x68>)
 800070e:	f002 fbdf 	bl	8002ed0 <HAL_SPI_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 8000718:	f000 f972 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	2000002c 	.word	0x2000002c
 8000724:	40003800 	.word	0x40003800

08000728 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800072c:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <MX_UART4_Init+0x58>)
 800072e:	4a15      	ldr	r2, [pc, #84]	@ (8000784 <MX_UART4_Init+0x5c>)
 8000730:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000732:	4b13      	ldr	r3, [pc, #76]	@ (8000780 <MX_UART4_Init+0x58>)
 8000734:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000738:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <MX_UART4_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0f      	ldr	r3, [pc, #60]	@ (8000780 <MX_UART4_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <MX_UART4_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <MX_UART4_Init+0x58>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	@ (8000780 <MX_UART4_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <MX_UART4_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075e:	4b08      	ldr	r3, [pc, #32]	@ (8000780 <MX_UART4_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000764:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <MX_UART4_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	@ (8000780 <MX_UART4_Init+0x58>)
 800076c:	f003 fc7c 	bl	8004068 <HAL_UART_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000776:	f000 f943 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000150 	.word	0x20000150
 8000784:	40004c00 	.word	0x40004c00

08000788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800078e:	4b10      	ldr	r3, [pc, #64]	@ (80007d0 <MX_DMA_Init+0x48>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a0f      	ldr	r2, [pc, #60]	@ (80007d0 <MX_DMA_Init+0x48>)
 8000794:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <MX_DMA_Init+0x48>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	200c      	movs	r0, #12
 80007ac:	f000 fc75 	bl	800109a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80007b0:	200c      	movs	r0, #12
 80007b2:	f000 fc8e 	bl	80010d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	200f      	movs	r0, #15
 80007bc:	f000 fc6d 	bl	800109a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80007c0:	200f      	movs	r0, #15
 80007c2:	f000 fc86 	bl	80010d2 <HAL_NVIC_EnableIRQ>

}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08c      	sub	sp, #48	@ 0x30
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	4b7f      	ldr	r3, [pc, #508]	@ (80009e8 <MX_GPIO_Init+0x214>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a7e      	ldr	r2, [pc, #504]	@ (80009e8 <MX_GPIO_Init+0x214>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b7c      	ldr	r3, [pc, #496]	@ (80009e8 <MX_GPIO_Init+0x214>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	61bb      	str	r3, [r7, #24]
 8000800:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	4b79      	ldr	r3, [pc, #484]	@ (80009e8 <MX_GPIO_Init+0x214>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a78      	ldr	r2, [pc, #480]	@ (80009e8 <MX_GPIO_Init+0x214>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b76      	ldr	r3, [pc, #472]	@ (80009e8 <MX_GPIO_Init+0x214>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b73      	ldr	r3, [pc, #460]	@ (80009e8 <MX_GPIO_Init+0x214>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a72      	ldr	r2, [pc, #456]	@ (80009e8 <MX_GPIO_Init+0x214>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b70      	ldr	r3, [pc, #448]	@ (80009e8 <MX_GPIO_Init+0x214>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	4b6d      	ldr	r3, [pc, #436]	@ (80009e8 <MX_GPIO_Init+0x214>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a6c      	ldr	r2, [pc, #432]	@ (80009e8 <MX_GPIO_Init+0x214>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b6a      	ldr	r3, [pc, #424]	@ (80009e8 <MX_GPIO_Init+0x214>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084a:	4b67      	ldr	r3, [pc, #412]	@ (80009e8 <MX_GPIO_Init+0x214>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a66      	ldr	r2, [pc, #408]	@ (80009e8 <MX_GPIO_Init+0x214>)
 8000850:	f043 0308 	orr.w	r3, r3, #8
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b64      	ldr	r3, [pc, #400]	@ (80009e8 <MX_GPIO_Init+0x214>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0308 	and.w	r3, r3, #8
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000862:	4b61      	ldr	r3, [pc, #388]	@ (80009e8 <MX_GPIO_Init+0x214>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a60      	ldr	r2, [pc, #384]	@ (80009e8 <MX_GPIO_Init+0x214>)
 8000868:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b5e      	ldr	r3, [pc, #376]	@ (80009e8 <MX_GPIO_Init+0x214>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000880:	485a      	ldr	r0, [pc, #360]	@ (80009ec <MX_GPIO_Init+0x218>)
 8000882:	f001 f9f7 	bl	8001c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2140      	movs	r1, #64	@ 0x40
 800088a:	4859      	ldr	r0, [pc, #356]	@ (80009f0 <MX_GPIO_Init+0x21c>)
 800088c:	f001 f9f2 	bl	8001c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000890:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000896:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	4853      	ldr	r0, [pc, #332]	@ (80009f4 <MX_GPIO_Init+0x220>)
 80008a8:	f001 f838 	bl	800191c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008ac:	2332      	movs	r3, #50	@ 0x32
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b8:	2303      	movs	r3, #3
 80008ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008bc:	230b      	movs	r3, #11
 80008be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	484b      	ldr	r0, [pc, #300]	@ (80009f4 <MX_GPIO_Init+0x220>)
 80008c8:	f001 f828 	bl	800191c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008cc:	2386      	movs	r3, #134	@ 0x86
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d8:	2303      	movs	r3, #3
 80008da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008dc:	230b      	movs	r3, #11
 80008de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4844      	ldr	r0, [pc, #272]	@ (80009f8 <MX_GPIO_Init+0x224>)
 80008e8:	f001 f818 	bl	800191c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008ec:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4839      	ldr	r0, [pc, #228]	@ (80009ec <MX_GPIO_Init+0x218>)
 8000906:	f001 f809 	bl	800191c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800090a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000918:	2303      	movs	r3, #3
 800091a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800091c:	230b      	movs	r3, #11
 800091e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4831      	ldr	r0, [pc, #196]	@ (80009ec <MX_GPIO_Init+0x218>)
 8000928:	f000 fff8 	bl	800191c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800092c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800093e:	2307      	movs	r3, #7
 8000940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	482c      	ldr	r0, [pc, #176]	@ (80009fc <MX_GPIO_Init+0x228>)
 800094a:	f000 ffe7 	bl	800191c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800094e:	2340      	movs	r3, #64	@ 0x40
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	4822      	ldr	r0, [pc, #136]	@ (80009f0 <MX_GPIO_Init+0x21c>)
 8000966:	f000 ffd9 	bl	800191c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800096a:	2380      	movs	r3, #128	@ 0x80
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	481c      	ldr	r0, [pc, #112]	@ (80009f0 <MX_GPIO_Init+0x21c>)
 800097e:	f000 ffcd 	bl	800191c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000982:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000994:	230a      	movs	r3, #10
 8000996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4816      	ldr	r0, [pc, #88]	@ (80009f8 <MX_GPIO_Init+0x224>)
 80009a0:	f000 ffbc 	bl	800191c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	480f      	ldr	r0, [pc, #60]	@ (80009f8 <MX_GPIO_Init+0x224>)
 80009ba:	f000 ffaf 	bl	800191c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009be:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009cc:	2303      	movs	r3, #3
 80009ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009d0:	230b      	movs	r3, #11
 80009d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <MX_GPIO_Init+0x21c>)
 80009dc:	f000 ff9e 	bl	800191c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e0:	bf00      	nop
 80009e2:	3730      	adds	r7, #48	@ 0x30
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020400 	.word	0x40020400
 80009f0:	40021800 	.word	0x40021800
 80009f4:	40020800 	.word	0x40020800
 80009f8:	40020000 	.word	0x40020000
 80009fc:	40020c00 	.word	0x40020c00

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <Error_Handler+0x8>

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <HAL_MspInit+0x44>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a16:	4a0e      	ldr	r2, [pc, #56]	@ (8000a50 <HAL_MspInit+0x44>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <HAL_MspInit+0x44>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <HAL_MspInit+0x44>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a2e:	4a08      	ldr	r2, [pc, #32]	@ (8000a50 <HAL_MspInit+0x44>)
 8000a30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <HAL_MspInit+0x44>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	@ 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a57      	ldr	r2, [pc, #348]	@ (8000bd0 <HAL_SPI_MspInit+0x17c>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	f040 80a8 	bne.w	8000bc8 <HAL_SPI_MspInit+0x174>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a78:	4b56      	ldr	r3, [pc, #344]	@ (8000bd4 <HAL_SPI_MspInit+0x180>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7c:	4a55      	ldr	r2, [pc, #340]	@ (8000bd4 <HAL_SPI_MspInit+0x180>)
 8000a7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a84:	4b53      	ldr	r3, [pc, #332]	@ (8000bd4 <HAL_SPI_MspInit+0x180>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a90:	4b50      	ldr	r3, [pc, #320]	@ (8000bd4 <HAL_SPI_MspInit+0x180>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a94:	4a4f      	ldr	r2, [pc, #316]	@ (8000bd4 <HAL_SPI_MspInit+0x180>)
 8000a96:	f043 0304 	orr.w	r3, r3, #4
 8000a9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9c:	4b4d      	ldr	r3, [pc, #308]	@ (8000bd4 <HAL_SPI_MspInit+0x180>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa8:	4b4a      	ldr	r3, [pc, #296]	@ (8000bd4 <HAL_SPI_MspInit+0x180>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aac:	4a49      	ldr	r2, [pc, #292]	@ (8000bd4 <HAL_SPI_MspInit+0x180>)
 8000aae:	f043 0302 	orr.w	r3, r3, #2
 8000ab2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab4:	4b47      	ldr	r3, [pc, #284]	@ (8000bd4 <HAL_SPI_MspInit+0x180>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab8:	f003 0302 	and.w	r3, r3, #2
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ac0:	230c      	movs	r3, #12
 8000ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ad0:	2305      	movs	r3, #5
 8000ad2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	483f      	ldr	r0, [pc, #252]	@ (8000bd8 <HAL_SPI_MspInit+0x184>)
 8000adc:	f000 ff1e 	bl	800191c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000ae0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aee:	2303      	movs	r3, #3
 8000af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000af2:	2305      	movs	r3, #5
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	4837      	ldr	r0, [pc, #220]	@ (8000bdc <HAL_SPI_MspInit+0x188>)
 8000afe:	f000 ff0d 	bl	800191c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8000b02:	4b37      	ldr	r3, [pc, #220]	@ (8000be0 <HAL_SPI_MspInit+0x18c>)
 8000b04:	4a37      	ldr	r2, [pc, #220]	@ (8000be4 <HAL_SPI_MspInit+0x190>)
 8000b06:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_9;
 8000b08:	4b35      	ldr	r3, [pc, #212]	@ (8000be0 <HAL_SPI_MspInit+0x18c>)
 8000b0a:	f04f 5290 	mov.w	r2, #301989888	@ 0x12000000
 8000b0e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b10:	4b33      	ldr	r3, [pc, #204]	@ (8000be0 <HAL_SPI_MspInit+0x18c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b16:	4b32      	ldr	r3, [pc, #200]	@ (8000be0 <HAL_SPI_MspInit+0x18c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b1c:	4b30      	ldr	r3, [pc, #192]	@ (8000be0 <HAL_SPI_MspInit+0x18c>)
 8000b1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b22:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b24:	4b2e      	ldr	r3, [pc, #184]	@ (8000be0 <HAL_SPI_MspInit+0x18c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000be0 <HAL_SPI_MspInit+0x18c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000b30:	4b2b      	ldr	r3, [pc, #172]	@ (8000be0 <HAL_SPI_MspInit+0x18c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b36:	4b2a      	ldr	r3, [pc, #168]	@ (8000be0 <HAL_SPI_MspInit+0x18c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b3c:	4b28      	ldr	r3, [pc, #160]	@ (8000be0 <HAL_SPI_MspInit+0x18c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000b42:	4827      	ldr	r0, [pc, #156]	@ (8000be0 <HAL_SPI_MspInit+0x18c>)
 8000b44:	f000 fae0 	bl	8001108 <HAL_DMA_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <HAL_SPI_MspInit+0xfe>
    {
      Error_Handler();
 8000b4e:	f7ff ff57 	bl	8000a00 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a22      	ldr	r2, [pc, #136]	@ (8000be0 <HAL_SPI_MspInit+0x18c>)
 8000b56:	659a      	str	r2, [r3, #88]	@ 0x58
 8000b58:	4a21      	ldr	r2, [pc, #132]	@ (8000be0 <HAL_SPI_MspInit+0x18c>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000b5e:	4b22      	ldr	r3, [pc, #136]	@ (8000be8 <HAL_SPI_MspInit+0x194>)
 8000b60:	4a22      	ldr	r2, [pc, #136]	@ (8000bec <HAL_SPI_MspInit+0x198>)
 8000b62:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000b64:	4b20      	ldr	r3, [pc, #128]	@ (8000be8 <HAL_SPI_MspInit+0x194>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000be8 <HAL_SPI_MspInit+0x194>)
 8000b6c:	2240      	movs	r2, #64	@ 0x40
 8000b6e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b70:	4b1d      	ldr	r3, [pc, #116]	@ (8000be8 <HAL_SPI_MspInit+0x194>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b76:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <HAL_SPI_MspInit+0x194>)
 8000b78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b7c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000be8 <HAL_SPI_MspInit+0x194>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b84:	4b18      	ldr	r3, [pc, #96]	@ (8000be8 <HAL_SPI_MspInit+0x194>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	@ (8000be8 <HAL_SPI_MspInit+0x194>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b90:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <HAL_SPI_MspInit+0x194>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b96:	4b14      	ldr	r3, [pc, #80]	@ (8000be8 <HAL_SPI_MspInit+0x194>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000b9c:	4812      	ldr	r0, [pc, #72]	@ (8000be8 <HAL_SPI_MspInit+0x194>)
 8000b9e:	f000 fab3 	bl	8001108 <HAL_DMA_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8000ba8:	f7ff ff2a 	bl	8000a00 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a0e      	ldr	r2, [pc, #56]	@ (8000be8 <HAL_SPI_MspInit+0x194>)
 8000bb0:	655a      	str	r2, [r3, #84]	@ 0x54
 8000bb2:	4a0d      	ldr	r2, [pc, #52]	@ (8000be8 <HAL_SPI_MspInit+0x194>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2024      	movs	r0, #36	@ 0x24
 8000bbe:	f000 fa6c 	bl	800109a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000bc2:	2024      	movs	r0, #36	@ 0x24
 8000bc4:	f000 fa85 	bl	80010d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	@ 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40003800 	.word	0x40003800
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020800 	.word	0x40020800
 8000bdc:	40020400 	.word	0x40020400
 8000be0:	20000090 	.word	0x20000090
 8000be4:	40026028 	.word	0x40026028
 8000be8:	200000f0 	.word	0x200000f0
 8000bec:	40026070 	.word	0x40026070

08000bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b0ae      	sub	sp, #184	@ 0xb8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2290      	movs	r2, #144	@ 0x90
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f004 fb5f 	bl	80052d4 <memset>
  if(huart->Instance==UART4)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a36      	ldr	r2, [pc, #216]	@ (8000cf4 <HAL_UART_MspInit+0x104>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d165      	bne.n	8000cec <HAL_UART_MspInit+0xfc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000c20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c24:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f001 fd26 	bl	8002680 <HAL_RCCEx_PeriphCLKConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c3a:	f7ff fee1 	bl	8000a00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c3e:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf8 <HAL_UART_MspInit+0x108>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c42:	4a2d      	ldr	r2, [pc, #180]	@ (8000cf8 <HAL_UART_MspInit+0x108>)
 8000c44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf8 <HAL_UART_MspInit+0x108>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	4b28      	ldr	r3, [pc, #160]	@ (8000cf8 <HAL_UART_MspInit+0x108>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a27      	ldr	r2, [pc, #156]	@ (8000cf8 <HAL_UART_MspInit+0x108>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b25      	ldr	r3, [pc, #148]	@ (8000cf8 <HAL_UART_MspInit+0x108>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6e:	4b22      	ldr	r3, [pc, #136]	@ (8000cf8 <HAL_UART_MspInit+0x108>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a21      	ldr	r2, [pc, #132]	@ (8000cf8 <HAL_UART_MspInit+0x108>)
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf8 <HAL_UART_MspInit+0x108>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c86:	2301      	movs	r3, #1
 8000c88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c9e:	2308      	movs	r3, #8
 8000ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4814      	ldr	r0, [pc, #80]	@ (8000cfc <HAL_UART_MspInit+0x10c>)
 8000cac:	f000 fe36 	bl	800191c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000cb0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000cb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000cca:	2308      	movs	r3, #8
 8000ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	480a      	ldr	r0, [pc, #40]	@ (8000d00 <HAL_UART_MspInit+0x110>)
 8000cd8:	f000 fe20 	bl	800191c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2034      	movs	r0, #52	@ 0x34
 8000ce2:	f000 f9da 	bl	800109a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000ce6:	2034      	movs	r0, #52	@ 0x34
 8000ce8:	f000 f9f3 	bl	80010d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000cec:	bf00      	nop
 8000cee:	37b8      	adds	r7, #184	@ 0xb8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40004c00 	.word	0x40004c00
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020000 	.word	0x40020000
 8000d00:	40020800 	.word	0x40020800

08000d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <NMI_Handler+0x4>

08000d0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <BusFault_Handler+0x4>

08000d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <UsageFault_Handler+0x4>

08000d2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5a:	f000 f8a3 	bl	8000ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000d68:	4802      	ldr	r0, [pc, #8]	@ (8000d74 <DMA1_Stream1_IRQHandler+0x10>)
 8000d6a:	f000 fb6d 	bl	8001448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000090 	.word	0x20000090

08000d78 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000d7c:	4802      	ldr	r0, [pc, #8]	@ (8000d88 <DMA1_Stream4_IRQHandler+0x10>)
 8000d7e:	f000 fb63 	bl	8001448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200000f0 	.word	0x200000f0

08000d8c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000d90:	4802      	ldr	r0, [pc, #8]	@ (8000d9c <SPI2_IRQHandler+0x10>)
 8000d92:	f002 fced 	bl	8003770 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000002c 	.word	0x2000002c

08000da0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000da4:	4802      	ldr	r0, [pc, #8]	@ (8000db0 <UART4_IRQHandler+0x10>)
 8000da6:	f003 fa0b 	bl	80041c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000150 	.word	0x20000150

08000db4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db8:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <SystemInit+0x20>)
 8000dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dbe:	4a05      	ldr	r2, [pc, #20]	@ (8000dd4 <SystemInit+0x20>)
 8000dc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ddc:	480d      	ldr	r0, [pc, #52]	@ (8000e14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dde:	490e      	ldr	r1, [pc, #56]	@ (8000e18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000de0:	4a0e      	ldr	r2, [pc, #56]	@ (8000e1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de4:	e002      	b.n	8000dec <LoopCopyDataInit>

08000de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dea:	3304      	adds	r3, #4

08000dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df0:	d3f9      	bcc.n	8000de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df2:	4a0b      	ldr	r2, [pc, #44]	@ (8000e20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000df4:	4c0b      	ldr	r4, [pc, #44]	@ (8000e24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df8:	e001      	b.n	8000dfe <LoopFillZerobss>

08000dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dfc:	3204      	adds	r2, #4

08000dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e00:	d3fb      	bcc.n	8000dfa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e02:	f7ff ffd7 	bl	8000db4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e06:	f004 fa6d 	bl	80052e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0a:	f7ff fbbb 	bl	8000584 <main>
  bx  lr    
 8000e0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e10:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e18:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e1c:	08005374 	.word	0x08005374
  ldr r2, =_sbss
 8000e20:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e24:	20000220 	.word	0x20000220

08000e28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e28:	e7fe      	b.n	8000e28 <ADC_IRQHandler>

08000e2a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e2e:	2003      	movs	r0, #3
 8000e30:	f000 f928 	bl	8001084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e34:	2000      	movs	r0, #0
 8000e36:	f000 f805 	bl	8000e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e3a:	f7ff fde7 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e3e:	2300      	movs	r3, #0
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e4c:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <HAL_InitTick+0x54>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <HAL_InitTick+0x58>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f943 	bl	80010ee <HAL_SYSTICK_Config>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00e      	b.n	8000e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	d80a      	bhi.n	8000e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f000 f90b 	bl	800109a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e84:	4a06      	ldr	r2, [pc, #24]	@ (8000ea0 <HAL_InitTick+0x5c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000004 	.word	0x20000004
 8000e9c:	2000000c 	.word	0x2000000c
 8000ea0:	20000008 	.word	0x20000008

08000ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_IncTick+0x20>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <HAL_IncTick+0x24>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a04      	ldr	r2, [pc, #16]	@ (8000ec8 <HAL_IncTick+0x24>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	2000000c 	.word	0x2000000c
 8000ec8:	2000021c 	.word	0x2000021c

08000ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	@ (8000ee0 <HAL_GetTick+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	2000021c 	.word	0x2000021c

08000ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <__NVIC_SetPriorityGrouping+0x40>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f00:	4013      	ands	r3, r2
 8000f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f0c:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f12:	4a04      	ldr	r2, [pc, #16]	@ (8000f24 <__NVIC_SetPriorityGrouping+0x40>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00
 8000f28:	05fa0000 	.word	0x05fa0000

08000f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f30:	4b04      	ldr	r3, [pc, #16]	@ (8000f44 <__NVIC_GetPriorityGrouping+0x18>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	f003 0307 	and.w	r3, r3, #7
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	db0b      	blt.n	8000f72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	f003 021f 	and.w	r2, r3, #31
 8000f60:	4907      	ldr	r1, [pc, #28]	@ (8000f80 <__NVIC_EnableIRQ+0x38>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	095b      	lsrs	r3, r3, #5
 8000f68:	2001      	movs	r0, #1
 8000f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000e100 	.word	0xe000e100

08000f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	db0a      	blt.n	8000fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	490c      	ldr	r1, [pc, #48]	@ (8000fd0 <__NVIC_SetPriority+0x4c>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	0112      	lsls	r2, r2, #4
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fac:	e00a      	b.n	8000fc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4908      	ldr	r1, [pc, #32]	@ (8000fd4 <__NVIC_SetPriority+0x50>)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	3b04      	subs	r3, #4
 8000fbc:	0112      	lsls	r2, r2, #4
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	761a      	strb	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000e100 	.word	0xe000e100
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	@ 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f1c3 0307 	rsb	r3, r3, #7
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	bf28      	it	cs
 8000ff6:	2304      	movcs	r3, #4
 8000ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	2b06      	cmp	r3, #6
 8001000:	d902      	bls.n	8001008 <NVIC_EncodePriority+0x30>
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3b03      	subs	r3, #3
 8001006:	e000      	b.n	800100a <NVIC_EncodePriority+0x32>
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	f04f 32ff 	mov.w	r2, #4294967295
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43da      	mvns	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	401a      	ands	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001020:	f04f 31ff 	mov.w	r1, #4294967295
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43d9      	mvns	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	4313      	orrs	r3, r2
         );
}
 8001032:	4618      	mov	r0, r3
 8001034:	3724      	adds	r7, #36	@ 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001050:	d301      	bcc.n	8001056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001052:	2301      	movs	r3, #1
 8001054:	e00f      	b.n	8001076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001056:	4a0a      	ldr	r2, [pc, #40]	@ (8001080 <SysTick_Config+0x40>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105e:	210f      	movs	r1, #15
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	f7ff ff8e 	bl	8000f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001068:	4b05      	ldr	r3, [pc, #20]	@ (8001080 <SysTick_Config+0x40>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106e:	4b04      	ldr	r3, [pc, #16]	@ (8001080 <SysTick_Config+0x40>)
 8001070:	2207      	movs	r2, #7
 8001072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	e000e010 	.word	0xe000e010

08001084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff29 	bl	8000ee4 <__NVIC_SetPriorityGrouping>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800109a:	b580      	push	{r7, lr}
 800109c:	b086      	sub	sp, #24
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ac:	f7ff ff3e 	bl	8000f2c <__NVIC_GetPriorityGrouping>
 80010b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	6978      	ldr	r0, [r7, #20]
 80010b8:	f7ff ff8e 	bl	8000fd8 <NVIC_EncodePriority>
 80010bc:	4602      	mov	r2, r0
 80010be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff5d 	bl	8000f84 <__NVIC_SetPriority>
}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff31 	bl	8000f48 <__NVIC_EnableIRQ>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ffa2 	bl	8001040 <SysTick_Config>
 80010fc:	4603      	mov	r3, r0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001114:	f7ff feda 	bl	8000ecc <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d101      	bne.n	8001124 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e099      	b.n	8001258 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2202      	movs	r2, #2
 8001128:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f022 0201 	bic.w	r2, r2, #1
 8001142:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001144:	e00f      	b.n	8001166 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001146:	f7ff fec1 	bl	8000ecc <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b05      	cmp	r3, #5
 8001152:	d908      	bls.n	8001166 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2220      	movs	r2, #32
 8001158:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2203      	movs	r2, #3
 800115e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e078      	b.n	8001258 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1e8      	bne.n	8001146 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800117c:	697a      	ldr	r2, [r7, #20]
 800117e:	4b38      	ldr	r3, [pc, #224]	@ (8001260 <HAL_DMA_Init+0x158>)
 8001180:	4013      	ands	r3, r2
 8001182:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001192:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800119e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011bc:	2b04      	cmp	r3, #4
 80011be:	d107      	bne.n	80011d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c8:	4313      	orrs	r3, r2
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	f023 0307 	bic.w	r3, r3, #7
 80011e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d117      	bne.n	800122a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	4313      	orrs	r3, r2
 8001202:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00e      	beq.n	800122a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 fb09 	bl	8001824 <DMA_CheckFifoParam>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d008      	beq.n	800122a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2240      	movs	r2, #64	@ 0x40
 800121c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2201      	movs	r2, #1
 8001222:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001226:	2301      	movs	r3, #1
 8001228:	e016      	b.n	8001258 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 fac0 	bl	80017b8 <DMA_CalcBaseAndBitshift>
 8001238:	4603      	mov	r3, r0
 800123a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001240:	223f      	movs	r2, #63	@ 0x3f
 8001242:	409a      	lsls	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2201      	movs	r2, #1
 8001252:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	e010803f 	.word	0xe010803f

08001264 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
 8001270:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001282:	2b01      	cmp	r3, #1
 8001284:	d101      	bne.n	800128a <HAL_DMA_Start_IT+0x26>
 8001286:	2302      	movs	r3, #2
 8001288:	e048      	b.n	800131c <HAL_DMA_Start_IT+0xb8>
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2201      	movs	r2, #1
 800128e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b01      	cmp	r3, #1
 800129c:	d137      	bne.n	800130e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2202      	movs	r2, #2
 80012a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2200      	movs	r2, #0
 80012aa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	68b9      	ldr	r1, [r7, #8]
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f000 fa52 	bl	800175c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012bc:	223f      	movs	r2, #63	@ 0x3f
 80012be:	409a      	lsls	r2, r3
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f042 0216 	orr.w	r2, r2, #22
 80012d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	695a      	ldr	r2, [r3, #20]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012e2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d007      	beq.n	80012fc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f042 0208 	orr.w	r2, r2, #8
 80012fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f042 0201 	orr.w	r2, r2, #1
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	e005      	b.n	800131a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001316:	2302      	movs	r3, #2
 8001318:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800131a:	7dfb      	ldrb	r3, [r7, #23]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001330:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001332:	f7ff fdcb 	bl	8000ecc <HAL_GetTick>
 8001336:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d008      	beq.n	8001356 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2280      	movs	r2, #128	@ 0x80
 8001348:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e052      	b.n	80013fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 0216 	bic.w	r2, r2, #22
 8001364:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	695a      	ldr	r2, [r3, #20]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001374:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	2b00      	cmp	r3, #0
 800137c:	d103      	bne.n	8001386 <HAL_DMA_Abort+0x62>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001382:	2b00      	cmp	r3, #0
 8001384:	d007      	beq.n	8001396 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0208 	bic.w	r2, r2, #8
 8001394:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 0201 	bic.w	r2, r2, #1
 80013a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013a6:	e013      	b.n	80013d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013a8:	f7ff fd90 	bl	8000ecc <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b05      	cmp	r3, #5
 80013b4:	d90c      	bls.n	80013d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2220      	movs	r2, #32
 80013ba:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2203      	movs	r2, #3
 80013c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e015      	b.n	80013fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1e4      	bne.n	80013a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013e2:	223f      	movs	r2, #63	@ 0x3f
 80013e4:	409a      	lsls	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d004      	beq.n	8001422 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2280      	movs	r2, #128	@ 0x80
 800141c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e00c      	b.n	800143c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2205      	movs	r2, #5
 8001426:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 0201 	bic.w	r2, r2, #1
 8001438:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001454:	4b8e      	ldr	r3, [pc, #568]	@ (8001690 <HAL_DMA_IRQHandler+0x248>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a8e      	ldr	r2, [pc, #568]	@ (8001694 <HAL_DMA_IRQHandler+0x24c>)
 800145a:	fba2 2303 	umull	r2, r3, r2, r3
 800145e:	0a9b      	lsrs	r3, r3, #10
 8001460:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001466:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001472:	2208      	movs	r2, #8
 8001474:	409a      	lsls	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4013      	ands	r3, r2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d01a      	beq.n	80014b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b00      	cmp	r3, #0
 800148a:	d013      	beq.n	80014b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0204 	bic.w	r2, r2, #4
 800149a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014a0:	2208      	movs	r2, #8
 80014a2:	409a      	lsls	r2, r3
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014ac:	f043 0201 	orr.w	r2, r3, #1
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014b8:	2201      	movs	r2, #1
 80014ba:	409a      	lsls	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4013      	ands	r3, r2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d012      	beq.n	80014ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00b      	beq.n	80014ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014d6:	2201      	movs	r2, #1
 80014d8:	409a      	lsls	r2, r3
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014e2:	f043 0202 	orr.w	r2, r3, #2
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014ee:	2204      	movs	r2, #4
 80014f0:	409a      	lsls	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	4013      	ands	r3, r2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d012      	beq.n	8001520 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d00b      	beq.n	8001520 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800150c:	2204      	movs	r2, #4
 800150e:	409a      	lsls	r2, r3
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001518:	f043 0204 	orr.w	r2, r3, #4
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001524:	2210      	movs	r2, #16
 8001526:	409a      	lsls	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4013      	ands	r3, r2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d043      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	2b00      	cmp	r3, #0
 800153c:	d03c      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001542:	2210      	movs	r2, #16
 8001544:	409a      	lsls	r2, r3
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d018      	beq.n	800158a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d108      	bne.n	8001578 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	2b00      	cmp	r3, #0
 800156c:	d024      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	4798      	blx	r3
 8001576:	e01f      	b.n	80015b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800157c:	2b00      	cmp	r3, #0
 800157e:	d01b      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	4798      	blx	r3
 8001588:	e016      	b.n	80015b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001594:	2b00      	cmp	r3, #0
 8001596:	d107      	bne.n	80015a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0208 	bic.w	r2, r2, #8
 80015a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015bc:	2220      	movs	r2, #32
 80015be:	409a      	lsls	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4013      	ands	r3, r2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 808f 	beq.w	80016e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0310 	and.w	r3, r3, #16
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 8087 	beq.w	80016e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015de:	2220      	movs	r2, #32
 80015e0:	409a      	lsls	r2, r3
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b05      	cmp	r3, #5
 80015f0:	d136      	bne.n	8001660 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 0216 	bic.w	r2, r2, #22
 8001600:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	695a      	ldr	r2, [r3, #20]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001610:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001616:	2b00      	cmp	r3, #0
 8001618:	d103      	bne.n	8001622 <HAL_DMA_IRQHandler+0x1da>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800161e:	2b00      	cmp	r3, #0
 8001620:	d007      	beq.n	8001632 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 0208 	bic.w	r2, r2, #8
 8001630:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001636:	223f      	movs	r2, #63	@ 0x3f
 8001638:	409a      	lsls	r2, r3
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001652:	2b00      	cmp	r3, #0
 8001654:	d07e      	beq.n	8001754 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	4798      	blx	r3
        }
        return;
 800165e:	e079      	b.n	8001754 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d01d      	beq.n	80016aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d10d      	bne.n	8001698 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001680:	2b00      	cmp	r3, #0
 8001682:	d031      	beq.n	80016e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	4798      	blx	r3
 800168c:	e02c      	b.n	80016e8 <HAL_DMA_IRQHandler+0x2a0>
 800168e:	bf00      	nop
 8001690:	20000004 	.word	0x20000004
 8001694:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800169c:	2b00      	cmp	r3, #0
 800169e:	d023      	beq.n	80016e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	4798      	blx	r3
 80016a8:	e01e      	b.n	80016e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d10f      	bne.n	80016d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0210 	bic.w	r2, r2, #16
 80016c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d032      	beq.n	8001756 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d022      	beq.n	8001742 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2205      	movs	r2, #5
 8001700:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0201 	bic.w	r2, r2, #1
 8001712:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	3301      	adds	r3, #1
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	429a      	cmp	r2, r3
 800171e:	d307      	bcc.n	8001730 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f2      	bne.n	8001714 <HAL_DMA_IRQHandler+0x2cc>
 800172e:	e000      	b.n	8001732 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001730:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001746:	2b00      	cmp	r3, #0
 8001748:	d005      	beq.n	8001756 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	4798      	blx	r3
 8001752:	e000      	b.n	8001756 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001754:	bf00      	nop
    }
  }
}
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
 8001768:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001778:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2b40      	cmp	r3, #64	@ 0x40
 8001788:	d108      	bne.n	800179c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800179a:	e007      	b.n	80017ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68ba      	ldr	r2, [r7, #8]
 80017a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	60da      	str	r2, [r3, #12]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	3b10      	subs	r3, #16
 80017c8:	4a13      	ldr	r2, [pc, #76]	@ (8001818 <DMA_CalcBaseAndBitshift+0x60>)
 80017ca:	fba2 2303 	umull	r2, r3, r2, r3
 80017ce:	091b      	lsrs	r3, r3, #4
 80017d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017d2:	4a12      	ldr	r2, [pc, #72]	@ (800181c <DMA_CalcBaseAndBitshift+0x64>)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4413      	add	r3, r2
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d908      	bls.n	80017f8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <DMA_CalcBaseAndBitshift+0x68>)
 80017ee:	4013      	ands	r3, r2
 80017f0:	1d1a      	adds	r2, r3, #4
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80017f6:	e006      	b.n	8001806 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b08      	ldr	r3, [pc, #32]	@ (8001820 <DMA_CalcBaseAndBitshift+0x68>)
 8001800:	4013      	ands	r3, r2
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800180a:	4618      	mov	r0, r3
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	aaaaaaab 	.word	0xaaaaaaab
 800181c:	0800535c 	.word	0x0800535c
 8001820:	fffffc00 	.word	0xfffffc00

08001824 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001834:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d11f      	bne.n	800187e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	2b03      	cmp	r3, #3
 8001842:	d856      	bhi.n	80018f2 <DMA_CheckFifoParam+0xce>
 8001844:	a201      	add	r2, pc, #4	@ (adr r2, 800184c <DMA_CheckFifoParam+0x28>)
 8001846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800184a:	bf00      	nop
 800184c:	0800185d 	.word	0x0800185d
 8001850:	0800186f 	.word	0x0800186f
 8001854:	0800185d 	.word	0x0800185d
 8001858:	080018f3 	.word	0x080018f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001860:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d046      	beq.n	80018f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800186c:	e043      	b.n	80018f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001872:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001876:	d140      	bne.n	80018fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800187c:	e03d      	b.n	80018fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001886:	d121      	bne.n	80018cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	2b03      	cmp	r3, #3
 800188c:	d837      	bhi.n	80018fe <DMA_CheckFifoParam+0xda>
 800188e:	a201      	add	r2, pc, #4	@ (adr r2, 8001894 <DMA_CheckFifoParam+0x70>)
 8001890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001894:	080018a5 	.word	0x080018a5
 8001898:	080018ab 	.word	0x080018ab
 800189c:	080018a5 	.word	0x080018a5
 80018a0:	080018bd 	.word	0x080018bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	73fb      	strb	r3, [r7, #15]
      break;
 80018a8:	e030      	b.n	800190c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d025      	beq.n	8001902 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018ba:	e022      	b.n	8001902 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80018c4:	d11f      	bne.n	8001906 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018ca:	e01c      	b.n	8001906 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d903      	bls.n	80018da <DMA_CheckFifoParam+0xb6>
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d003      	beq.n	80018e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018d8:	e018      	b.n	800190c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	73fb      	strb	r3, [r7, #15]
      break;
 80018de:	e015      	b.n	800190c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00e      	beq.n	800190a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	73fb      	strb	r3, [r7, #15]
      break;
 80018f0:	e00b      	b.n	800190a <DMA_CheckFifoParam+0xe6>
      break;
 80018f2:	bf00      	nop
 80018f4:	e00a      	b.n	800190c <DMA_CheckFifoParam+0xe8>
      break;
 80018f6:	bf00      	nop
 80018f8:	e008      	b.n	800190c <DMA_CheckFifoParam+0xe8>
      break;
 80018fa:	bf00      	nop
 80018fc:	e006      	b.n	800190c <DMA_CheckFifoParam+0xe8>
      break;
 80018fe:	bf00      	nop
 8001900:	e004      	b.n	800190c <DMA_CheckFifoParam+0xe8>
      break;
 8001902:	bf00      	nop
 8001904:	e002      	b.n	800190c <DMA_CheckFifoParam+0xe8>
      break;   
 8001906:	bf00      	nop
 8001908:	e000      	b.n	800190c <DMA_CheckFifoParam+0xe8>
      break;
 800190a:	bf00      	nop
    }
  } 
  
  return status; 
 800190c:	7bfb      	ldrb	r3, [r7, #15]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop

0800191c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800191c:	b480      	push	{r7}
 800191e:	b089      	sub	sp, #36	@ 0x24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001932:	2300      	movs	r3, #0
 8001934:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
 800193a:	e175      	b.n	8001c28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800193c:	2201      	movs	r2, #1
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	429a      	cmp	r2, r3
 8001956:	f040 8164 	bne.w	8001c22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	2b01      	cmp	r3, #1
 8001964:	d005      	beq.n	8001972 <HAL_GPIO_Init+0x56>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d130      	bne.n	80019d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	2203      	movs	r2, #3
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	68da      	ldr	r2, [r3, #12]
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019a8:	2201      	movs	r2, #1
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	091b      	lsrs	r3, r3, #4
 80019be:	f003 0201 	and.w	r2, r3, #1
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 0303 	and.w	r3, r3, #3
 80019dc:	2b03      	cmp	r3, #3
 80019de:	d017      	beq.n	8001a10 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	2203      	movs	r2, #3
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d123      	bne.n	8001a64 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	08da      	lsrs	r2, r3, #3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3208      	adds	r2, #8
 8001a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	220f      	movs	r2, #15
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	691a      	ldr	r2, [r3, #16]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	08da      	lsrs	r2, r3, #3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3208      	adds	r2, #8
 8001a5e:	69b9      	ldr	r1, [r7, #24]
 8001a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	2203      	movs	r2, #3
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 0203 	and.w	r2, r3, #3
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 80be 	beq.w	8001c22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa6:	4b66      	ldr	r3, [pc, #408]	@ (8001c40 <HAL_GPIO_Init+0x324>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aaa:	4a65      	ldr	r2, [pc, #404]	@ (8001c40 <HAL_GPIO_Init+0x324>)
 8001aac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ab0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ab2:	4b63      	ldr	r3, [pc, #396]	@ (8001c40 <HAL_GPIO_Init+0x324>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001abe:	4a61      	ldr	r2, [pc, #388]	@ (8001c44 <HAL_GPIO_Init+0x328>)
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	089b      	lsrs	r3, r3, #2
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	220f      	movs	r2, #15
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a58      	ldr	r2, [pc, #352]	@ (8001c48 <HAL_GPIO_Init+0x32c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d037      	beq.n	8001b5a <HAL_GPIO_Init+0x23e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a57      	ldr	r2, [pc, #348]	@ (8001c4c <HAL_GPIO_Init+0x330>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d031      	beq.n	8001b56 <HAL_GPIO_Init+0x23a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a56      	ldr	r2, [pc, #344]	@ (8001c50 <HAL_GPIO_Init+0x334>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d02b      	beq.n	8001b52 <HAL_GPIO_Init+0x236>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a55      	ldr	r2, [pc, #340]	@ (8001c54 <HAL_GPIO_Init+0x338>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d025      	beq.n	8001b4e <HAL_GPIO_Init+0x232>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a54      	ldr	r2, [pc, #336]	@ (8001c58 <HAL_GPIO_Init+0x33c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d01f      	beq.n	8001b4a <HAL_GPIO_Init+0x22e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a53      	ldr	r2, [pc, #332]	@ (8001c5c <HAL_GPIO_Init+0x340>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d019      	beq.n	8001b46 <HAL_GPIO_Init+0x22a>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a52      	ldr	r2, [pc, #328]	@ (8001c60 <HAL_GPIO_Init+0x344>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d013      	beq.n	8001b42 <HAL_GPIO_Init+0x226>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a51      	ldr	r2, [pc, #324]	@ (8001c64 <HAL_GPIO_Init+0x348>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d00d      	beq.n	8001b3e <HAL_GPIO_Init+0x222>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a50      	ldr	r2, [pc, #320]	@ (8001c68 <HAL_GPIO_Init+0x34c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d007      	beq.n	8001b3a <HAL_GPIO_Init+0x21e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a4f      	ldr	r2, [pc, #316]	@ (8001c6c <HAL_GPIO_Init+0x350>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d101      	bne.n	8001b36 <HAL_GPIO_Init+0x21a>
 8001b32:	2309      	movs	r3, #9
 8001b34:	e012      	b.n	8001b5c <HAL_GPIO_Init+0x240>
 8001b36:	230a      	movs	r3, #10
 8001b38:	e010      	b.n	8001b5c <HAL_GPIO_Init+0x240>
 8001b3a:	2308      	movs	r3, #8
 8001b3c:	e00e      	b.n	8001b5c <HAL_GPIO_Init+0x240>
 8001b3e:	2307      	movs	r3, #7
 8001b40:	e00c      	b.n	8001b5c <HAL_GPIO_Init+0x240>
 8001b42:	2306      	movs	r3, #6
 8001b44:	e00a      	b.n	8001b5c <HAL_GPIO_Init+0x240>
 8001b46:	2305      	movs	r3, #5
 8001b48:	e008      	b.n	8001b5c <HAL_GPIO_Init+0x240>
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x240>
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e004      	b.n	8001b5c <HAL_GPIO_Init+0x240>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e002      	b.n	8001b5c <HAL_GPIO_Init+0x240>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <HAL_GPIO_Init+0x240>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	69fa      	ldr	r2, [r7, #28]
 8001b5e:	f002 0203 	and.w	r2, r2, #3
 8001b62:	0092      	lsls	r2, r2, #2
 8001b64:	4093      	lsls	r3, r2
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b6c:	4935      	ldr	r1, [pc, #212]	@ (8001c44 <HAL_GPIO_Init+0x328>)
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	089b      	lsrs	r3, r3, #2
 8001b72:	3302      	adds	r3, #2
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b7a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c70 <HAL_GPIO_Init+0x354>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	43db      	mvns	r3, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4013      	ands	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b9e:	4a34      	ldr	r2, [pc, #208]	@ (8001c70 <HAL_GPIO_Init+0x354>)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ba4:	4b32      	ldr	r3, [pc, #200]	@ (8001c70 <HAL_GPIO_Init+0x354>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bc8:	4a29      	ldr	r2, [pc, #164]	@ (8001c70 <HAL_GPIO_Init+0x354>)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bce:	4b28      	ldr	r3, [pc, #160]	@ (8001c70 <HAL_GPIO_Init+0x354>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bf2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c70 <HAL_GPIO_Init+0x354>)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c70 <HAL_GPIO_Init+0x354>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c1c:	4a14      	ldr	r2, [pc, #80]	@ (8001c70 <HAL_GPIO_Init+0x354>)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3301      	adds	r3, #1
 8001c26:	61fb      	str	r3, [r7, #28]
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	2b0f      	cmp	r3, #15
 8001c2c:	f67f ae86 	bls.w	800193c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	3724      	adds	r7, #36	@ 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40013800 	.word	0x40013800
 8001c48:	40020000 	.word	0x40020000
 8001c4c:	40020400 	.word	0x40020400
 8001c50:	40020800 	.word	0x40020800
 8001c54:	40020c00 	.word	0x40020c00
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40021400 	.word	0x40021400
 8001c60:	40021800 	.word	0x40021800
 8001c64:	40021c00 	.word	0x40021c00
 8001c68:	40022000 	.word	0x40022000
 8001c6c:	40022400 	.word	0x40022400
 8001c70:	40013c00 	.word	0x40013c00

08001c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	807b      	strh	r3, [r7, #2]
 8001c80:	4613      	mov	r3, r2
 8001c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c84:	787b      	ldrb	r3, [r7, #1]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c8a:	887a      	ldrh	r2, [r7, #2]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c90:	e003      	b.n	8001c9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c92:	887b      	ldrh	r3, [r7, #2]
 8001c94:	041a      	lsls	r2, r3, #16
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	619a      	str	r2, [r3, #24]
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b085      	sub	sp, #20
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cb8:	887a      	ldrh	r2, [r7, #2]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	041a      	lsls	r2, r3, #16
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	43d9      	mvns	r1, r3
 8001cc4:	887b      	ldrh	r3, [r7, #2]
 8001cc6:	400b      	ands	r3, r1
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	619a      	str	r2, [r3, #24]
}
 8001cce:	bf00      	nop
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e29b      	b.n	800222a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 8087 	beq.w	8001e0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d00:	4b96      	ldr	r3, [pc, #600]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d00c      	beq.n	8001d26 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d0c:	4b93      	ldr	r3, [pc, #588]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 030c 	and.w	r3, r3, #12
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d112      	bne.n	8001d3e <HAL_RCC_OscConfig+0x62>
 8001d18:	4b90      	ldr	r3, [pc, #576]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d24:	d10b      	bne.n	8001d3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d26:	4b8d      	ldr	r3, [pc, #564]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d06c      	beq.n	8001e0c <HAL_RCC_OscConfig+0x130>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d168      	bne.n	8001e0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e275      	b.n	800222a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d46:	d106      	bne.n	8001d56 <HAL_RCC_OscConfig+0x7a>
 8001d48:	4b84      	ldr	r3, [pc, #528]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a83      	ldr	r2, [pc, #524]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	e02e      	b.n	8001db4 <HAL_RCC_OscConfig+0xd8>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x9c>
 8001d5e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a7e      	ldr	r2, [pc, #504]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	4b7c      	ldr	r3, [pc, #496]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a7b      	ldr	r2, [pc, #492]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e01d      	b.n	8001db4 <HAL_RCC_OscConfig+0xd8>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0xc0>
 8001d82:	4b76      	ldr	r3, [pc, #472]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a75      	ldr	r2, [pc, #468]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	4b73      	ldr	r3, [pc, #460]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a72      	ldr	r2, [pc, #456]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e00b      	b.n	8001db4 <HAL_RCC_OscConfig+0xd8>
 8001d9c:	4b6f      	ldr	r3, [pc, #444]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a6e      	ldr	r2, [pc, #440]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	4b6c      	ldr	r3, [pc, #432]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a6b      	ldr	r2, [pc, #428]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001dae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d013      	beq.n	8001de4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7ff f886 	bl	8000ecc <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc4:	f7ff f882 	bl	8000ecc <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	@ 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e229      	b.n	800222a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd6:	4b61      	ldr	r3, [pc, #388]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0xe8>
 8001de2:	e014      	b.n	8001e0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff f872 	bl	8000ecc <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dec:	f7ff f86e 	bl	8000ecc <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	@ 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e215      	b.n	800222a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfe:	4b57      	ldr	r3, [pc, #348]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x110>
 8001e0a:	e000      	b.n	8001e0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d069      	beq.n	8001eee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e1a:	4b50      	ldr	r3, [pc, #320]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00b      	beq.n	8001e3e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e26:	4b4d      	ldr	r3, [pc, #308]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d11c      	bne.n	8001e6c <HAL_RCC_OscConfig+0x190>
 8001e32:	4b4a      	ldr	r3, [pc, #296]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d116      	bne.n	8001e6c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3e:	4b47      	ldr	r3, [pc, #284]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <HAL_RCC_OscConfig+0x17a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e1e9      	b.n	800222a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e56:	4b41      	ldr	r3, [pc, #260]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	493d      	ldr	r1, [pc, #244]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6a:	e040      	b.n	8001eee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d023      	beq.n	8001ebc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e74:	4b39      	ldr	r3, [pc, #228]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a38      	ldr	r2, [pc, #224]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e80:	f7ff f824 	bl	8000ecc <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e88:	f7ff f820 	bl	8000ecc <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e1c7      	b.n	800222a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9a:	4b30      	ldr	r3, [pc, #192]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	4929      	ldr	r1, [pc, #164]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]
 8001eba:	e018      	b.n	8001eee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ebc:	4b27      	ldr	r3, [pc, #156]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a26      	ldr	r2, [pc, #152]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001ec2:	f023 0301 	bic.w	r3, r3, #1
 8001ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec8:	f7ff f800 	bl	8000ecc <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed0:	f7fe fffc 	bl	8000ecc <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e1a3      	b.n	800222a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d038      	beq.n	8001f6c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d019      	beq.n	8001f36 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f02:	4b16      	ldr	r3, [pc, #88]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001f04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f06:	4a15      	ldr	r2, [pc, #84]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0e:	f7fe ffdd 	bl	8000ecc <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f16:	f7fe ffd9 	bl	8000ecc <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e180      	b.n	800222a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f28:	4b0c      	ldr	r3, [pc, #48]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001f2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0x23a>
 8001f34:	e01a      	b.n	8001f6c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f36:	4b09      	ldr	r3, [pc, #36]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001f38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f3a:	4a08      	ldr	r2, [pc, #32]	@ (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001f3c:	f023 0301 	bic.w	r3, r3, #1
 8001f40:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f42:	f7fe ffc3 	bl	8000ecc <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f48:	e00a      	b.n	8001f60 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f4a:	f7fe ffbf 	bl	8000ecc <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d903      	bls.n	8001f60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e166      	b.n	800222a <HAL_RCC_OscConfig+0x54e>
 8001f5c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f60:	4b92      	ldr	r3, [pc, #584]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 8001f62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1ee      	bne.n	8001f4a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 80a4 	beq.w	80020c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f7a:	4b8c      	ldr	r3, [pc, #560]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10d      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f86:	4b89      	ldr	r3, [pc, #548]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	4a88      	ldr	r2, [pc, #544]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 8001f8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f92:	4b86      	ldr	r3, [pc, #536]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa2:	4b83      	ldr	r3, [pc, #524]	@ (80021b0 <HAL_RCC_OscConfig+0x4d4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d118      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001fae:	4b80      	ldr	r3, [pc, #512]	@ (80021b0 <HAL_RCC_OscConfig+0x4d4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a7f      	ldr	r2, [pc, #508]	@ (80021b0 <HAL_RCC_OscConfig+0x4d4>)
 8001fb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fba:	f7fe ff87 	bl	8000ecc <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc2:	f7fe ff83 	bl	8000ecc <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b64      	cmp	r3, #100	@ 0x64
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e12a      	b.n	800222a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fd4:	4b76      	ldr	r3, [pc, #472]	@ (80021b0 <HAL_RCC_OscConfig+0x4d4>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d106      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x31a>
 8001fe8:	4b70      	ldr	r3, [pc, #448]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 8001fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fec:	4a6f      	ldr	r2, [pc, #444]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ff4:	e02d      	b.n	8002052 <HAL_RCC_OscConfig+0x376>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10c      	bne.n	8002018 <HAL_RCC_OscConfig+0x33c>
 8001ffe:	4b6b      	ldr	r3, [pc, #428]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 8002000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002002:	4a6a      	ldr	r2, [pc, #424]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 8002004:	f023 0301 	bic.w	r3, r3, #1
 8002008:	6713      	str	r3, [r2, #112]	@ 0x70
 800200a:	4b68      	ldr	r3, [pc, #416]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 800200c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800200e:	4a67      	ldr	r2, [pc, #412]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 8002010:	f023 0304 	bic.w	r3, r3, #4
 8002014:	6713      	str	r3, [r2, #112]	@ 0x70
 8002016:	e01c      	b.n	8002052 <HAL_RCC_OscConfig+0x376>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b05      	cmp	r3, #5
 800201e:	d10c      	bne.n	800203a <HAL_RCC_OscConfig+0x35e>
 8002020:	4b62      	ldr	r3, [pc, #392]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 8002022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002024:	4a61      	ldr	r2, [pc, #388]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 8002026:	f043 0304 	orr.w	r3, r3, #4
 800202a:	6713      	str	r3, [r2, #112]	@ 0x70
 800202c:	4b5f      	ldr	r3, [pc, #380]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 800202e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002030:	4a5e      	ldr	r2, [pc, #376]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	6713      	str	r3, [r2, #112]	@ 0x70
 8002038:	e00b      	b.n	8002052 <HAL_RCC_OscConfig+0x376>
 800203a:	4b5c      	ldr	r3, [pc, #368]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 800203c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800203e:	4a5b      	ldr	r2, [pc, #364]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	6713      	str	r3, [r2, #112]	@ 0x70
 8002046:	4b59      	ldr	r3, [pc, #356]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 8002048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800204a:	4a58      	ldr	r2, [pc, #352]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 800204c:	f023 0304 	bic.w	r3, r3, #4
 8002050:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d015      	beq.n	8002086 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205a:	f7fe ff37 	bl	8000ecc <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002060:	e00a      	b.n	8002078 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002062:	f7fe ff33 	bl	8000ecc <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002070:	4293      	cmp	r3, r2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e0d8      	b.n	800222a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002078:	4b4c      	ldr	r3, [pc, #304]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 800207a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0ee      	beq.n	8002062 <HAL_RCC_OscConfig+0x386>
 8002084:	e014      	b.n	80020b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002086:	f7fe ff21 	bl	8000ecc <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800208c:	e00a      	b.n	80020a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208e:	f7fe ff1d 	bl	8000ecc <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	f241 3288 	movw	r2, #5000	@ 0x1388
 800209c:	4293      	cmp	r3, r2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e0c2      	b.n	800222a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a4:	4b41      	ldr	r3, [pc, #260]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 80020a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1ee      	bne.n	800208e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020b0:	7dfb      	ldrb	r3, [r7, #23]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d105      	bne.n	80020c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b6:	4b3d      	ldr	r3, [pc, #244]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	4a3c      	ldr	r2, [pc, #240]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 80020bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020c0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 80ae 	beq.w	8002228 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020cc:	4b37      	ldr	r3, [pc, #220]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 030c 	and.w	r3, r3, #12
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d06d      	beq.n	80021b4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d14b      	bne.n	8002178 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e0:	4b32      	ldr	r3, [pc, #200]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a31      	ldr	r2, [pc, #196]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 80020e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ec:	f7fe feee 	bl	8000ecc <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f4:	f7fe feea 	bl	8000ecc <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e091      	b.n	800222a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002106:	4b29      	ldr	r3, [pc, #164]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f0      	bne.n	80020f4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69da      	ldr	r2, [r3, #28]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002120:	019b      	lsls	r3, r3, #6
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002128:	085b      	lsrs	r3, r3, #1
 800212a:	3b01      	subs	r3, #1
 800212c:	041b      	lsls	r3, r3, #16
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002134:	061b      	lsls	r3, r3, #24
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213c:	071b      	lsls	r3, r3, #28
 800213e:	491b      	ldr	r1, [pc, #108]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 8002140:	4313      	orrs	r3, r2
 8002142:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002144:	4b19      	ldr	r3, [pc, #100]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a18      	ldr	r2, [pc, #96]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 800214a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800214e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7fe febc 	bl	8000ecc <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002158:	f7fe feb8 	bl	8000ecc <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e05f      	b.n	800222a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216a:	4b10      	ldr	r3, [pc, #64]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0x47c>
 8002176:	e057      	b.n	8002228 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002178:	4b0c      	ldr	r3, [pc, #48]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0b      	ldr	r2, [pc, #44]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 800217e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7fe fea2 	bl	8000ecc <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218c:	f7fe fe9e 	bl	8000ecc <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e045      	b.n	800222a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219e:	4b03      	ldr	r3, [pc, #12]	@ (80021ac <HAL_RCC_OscConfig+0x4d0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x4b0>
 80021aa:	e03d      	b.n	8002228 <HAL_RCC_OscConfig+0x54c>
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80021b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002234 <HAL_RCC_OscConfig+0x558>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d030      	beq.n	8002224 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d129      	bne.n	8002224 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021da:	429a      	cmp	r2, r3
 80021dc:	d122      	bne.n	8002224 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021e4:	4013      	ands	r3, r2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d119      	bne.n	8002224 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fa:	085b      	lsrs	r3, r3, #1
 80021fc:	3b01      	subs	r3, #1
 80021fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002200:	429a      	cmp	r2, r3
 8002202:	d10f      	bne.n	8002224 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800220e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002210:	429a      	cmp	r2, r3
 8002212:	d107      	bne.n	8002224 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e000      	b.n	800222a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800

08002238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0d0      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002250:	4b6a      	ldr	r3, [pc, #424]	@ (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 030f 	and.w	r3, r3, #15
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d910      	bls.n	8002280 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225e:	4b67      	ldr	r3, [pc, #412]	@ (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 020f 	bic.w	r2, r3, #15
 8002266:	4965      	ldr	r1, [pc, #404]	@ (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	4313      	orrs	r3, r2
 800226c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226e:	4b63      	ldr	r3, [pc, #396]	@ (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d001      	beq.n	8002280 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0b8      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d020      	beq.n	80022ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002298:	4b59      	ldr	r3, [pc, #356]	@ (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	4a58      	ldr	r2, [pc, #352]	@ (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 800229e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0308 	and.w	r3, r3, #8
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022b0:	4b53      	ldr	r3, [pc, #332]	@ (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	4a52      	ldr	r2, [pc, #328]	@ (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 80022b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022bc:	4b50      	ldr	r3, [pc, #320]	@ (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	494d      	ldr	r1, [pc, #308]	@ (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d040      	beq.n	800235c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d107      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	4b47      	ldr	r3, [pc, #284]	@ (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d115      	bne.n	800231a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e07f      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d107      	bne.n	800230a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fa:	4b41      	ldr	r3, [pc, #260]	@ (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d109      	bne.n	800231a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e073      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230a:	4b3d      	ldr	r3, [pc, #244]	@ (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e06b      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800231a:	4b39      	ldr	r3, [pc, #228]	@ (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f023 0203 	bic.w	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4936      	ldr	r1, [pc, #216]	@ (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 8002328:	4313      	orrs	r3, r2
 800232a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800232c:	f7fe fdce 	bl	8000ecc <HAL_GetTick>
 8002330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002332:	e00a      	b.n	800234a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002334:	f7fe fdca 	bl	8000ecc <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e053      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234a:	4b2d      	ldr	r3, [pc, #180]	@ (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 020c 	and.w	r2, r3, #12
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	429a      	cmp	r2, r3
 800235a:	d1eb      	bne.n	8002334 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800235c:	4b27      	ldr	r3, [pc, #156]	@ (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 030f 	and.w	r3, r3, #15
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d210      	bcs.n	800238c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236a:	4b24      	ldr	r3, [pc, #144]	@ (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 020f 	bic.w	r2, r3, #15
 8002372:	4922      	ldr	r1, [pc, #136]	@ (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	4313      	orrs	r3, r2
 8002378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800237a:	4b20      	ldr	r3, [pc, #128]	@ (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d001      	beq.n	800238c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e032      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d008      	beq.n	80023aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002398:	4b19      	ldr	r3, [pc, #100]	@ (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	4916      	ldr	r1, [pc, #88]	@ (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d009      	beq.n	80023ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023b6:	4b12      	ldr	r3, [pc, #72]	@ (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	490e      	ldr	r1, [pc, #56]	@ (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023ca:	f000 f821 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 80023ce:	4602      	mov	r2, r0
 80023d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	490a      	ldr	r1, [pc, #40]	@ (8002404 <HAL_RCC_ClockConfig+0x1cc>)
 80023dc:	5ccb      	ldrb	r3, [r1, r3]
 80023de:	fa22 f303 	lsr.w	r3, r2, r3
 80023e2:	4a09      	ldr	r2, [pc, #36]	@ (8002408 <HAL_RCC_ClockConfig+0x1d0>)
 80023e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023e6:	4b09      	ldr	r3, [pc, #36]	@ (800240c <HAL_RCC_ClockConfig+0x1d4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe fd2a 	bl	8000e44 <HAL_InitTick>

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40023c00 	.word	0x40023c00
 8002400:	40023800 	.word	0x40023800
 8002404:	08005344 	.word	0x08005344
 8002408:	20000004 	.word	0x20000004
 800240c:	20000008 	.word	0x20000008

08002410 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002414:	b094      	sub	sp, #80	@ 0x50
 8002416:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	647b      	str	r3, [r7, #68]	@ 0x44
 800241c:	2300      	movs	r3, #0
 800241e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002420:	2300      	movs	r3, #0
 8002422:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002428:	4b79      	ldr	r3, [pc, #484]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x200>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 030c 	and.w	r3, r3, #12
 8002430:	2b08      	cmp	r3, #8
 8002432:	d00d      	beq.n	8002450 <HAL_RCC_GetSysClockFreq+0x40>
 8002434:	2b08      	cmp	r3, #8
 8002436:	f200 80e1 	bhi.w	80025fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <HAL_RCC_GetSysClockFreq+0x34>
 800243e:	2b04      	cmp	r3, #4
 8002440:	d003      	beq.n	800244a <HAL_RCC_GetSysClockFreq+0x3a>
 8002442:	e0db      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002444:	4b73      	ldr	r3, [pc, #460]	@ (8002614 <HAL_RCC_GetSysClockFreq+0x204>)
 8002446:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002448:	e0db      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800244a:	4b72      	ldr	r3, [pc, #456]	@ (8002614 <HAL_RCC_GetSysClockFreq+0x204>)
 800244c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800244e:	e0d8      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002450:	4b6f      	ldr	r3, [pc, #444]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x200>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002458:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800245a:	4b6d      	ldr	r3, [pc, #436]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x200>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d063      	beq.n	800252e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002466:	4b6a      	ldr	r3, [pc, #424]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x200>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	099b      	lsrs	r3, r3, #6
 800246c:	2200      	movs	r2, #0
 800246e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002470:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002478:	633b      	str	r3, [r7, #48]	@ 0x30
 800247a:	2300      	movs	r3, #0
 800247c:	637b      	str	r3, [r7, #52]	@ 0x34
 800247e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002482:	4622      	mov	r2, r4
 8002484:	462b      	mov	r3, r5
 8002486:	f04f 0000 	mov.w	r0, #0
 800248a:	f04f 0100 	mov.w	r1, #0
 800248e:	0159      	lsls	r1, r3, #5
 8002490:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002494:	0150      	lsls	r0, r2, #5
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4621      	mov	r1, r4
 800249c:	1a51      	subs	r1, r2, r1
 800249e:	6139      	str	r1, [r7, #16]
 80024a0:	4629      	mov	r1, r5
 80024a2:	eb63 0301 	sbc.w	r3, r3, r1
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	f04f 0300 	mov.w	r3, #0
 80024b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024b4:	4659      	mov	r1, fp
 80024b6:	018b      	lsls	r3, r1, #6
 80024b8:	4651      	mov	r1, sl
 80024ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024be:	4651      	mov	r1, sl
 80024c0:	018a      	lsls	r2, r1, #6
 80024c2:	4651      	mov	r1, sl
 80024c4:	ebb2 0801 	subs.w	r8, r2, r1
 80024c8:	4659      	mov	r1, fp
 80024ca:	eb63 0901 	sbc.w	r9, r3, r1
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024e2:	4690      	mov	r8, r2
 80024e4:	4699      	mov	r9, r3
 80024e6:	4623      	mov	r3, r4
 80024e8:	eb18 0303 	adds.w	r3, r8, r3
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	462b      	mov	r3, r5
 80024f0:	eb49 0303 	adc.w	r3, r9, r3
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002502:	4629      	mov	r1, r5
 8002504:	028b      	lsls	r3, r1, #10
 8002506:	4621      	mov	r1, r4
 8002508:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800250c:	4621      	mov	r1, r4
 800250e:	028a      	lsls	r2, r1, #10
 8002510:	4610      	mov	r0, r2
 8002512:	4619      	mov	r1, r3
 8002514:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002516:	2200      	movs	r2, #0
 8002518:	62bb      	str	r3, [r7, #40]	@ 0x28
 800251a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800251c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002520:	f7fd fe8a 	bl	8000238 <__aeabi_uldivmod>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4613      	mov	r3, r2
 800252a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800252c:	e058      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800252e:	4b38      	ldr	r3, [pc, #224]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x200>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	099b      	lsrs	r3, r3, #6
 8002534:	2200      	movs	r2, #0
 8002536:	4618      	mov	r0, r3
 8002538:	4611      	mov	r1, r2
 800253a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800253e:	623b      	str	r3, [r7, #32]
 8002540:	2300      	movs	r3, #0
 8002542:	627b      	str	r3, [r7, #36]	@ 0x24
 8002544:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002548:	4642      	mov	r2, r8
 800254a:	464b      	mov	r3, r9
 800254c:	f04f 0000 	mov.w	r0, #0
 8002550:	f04f 0100 	mov.w	r1, #0
 8002554:	0159      	lsls	r1, r3, #5
 8002556:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800255a:	0150      	lsls	r0, r2, #5
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4641      	mov	r1, r8
 8002562:	ebb2 0a01 	subs.w	sl, r2, r1
 8002566:	4649      	mov	r1, r9
 8002568:	eb63 0b01 	sbc.w	fp, r3, r1
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002578:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800257c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002580:	ebb2 040a 	subs.w	r4, r2, sl
 8002584:	eb63 050b 	sbc.w	r5, r3, fp
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	f04f 0300 	mov.w	r3, #0
 8002590:	00eb      	lsls	r3, r5, #3
 8002592:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002596:	00e2      	lsls	r2, r4, #3
 8002598:	4614      	mov	r4, r2
 800259a:	461d      	mov	r5, r3
 800259c:	4643      	mov	r3, r8
 800259e:	18e3      	adds	r3, r4, r3
 80025a0:	603b      	str	r3, [r7, #0]
 80025a2:	464b      	mov	r3, r9
 80025a4:	eb45 0303 	adc.w	r3, r5, r3
 80025a8:	607b      	str	r3, [r7, #4]
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	f04f 0300 	mov.w	r3, #0
 80025b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025b6:	4629      	mov	r1, r5
 80025b8:	028b      	lsls	r3, r1, #10
 80025ba:	4621      	mov	r1, r4
 80025bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025c0:	4621      	mov	r1, r4
 80025c2:	028a      	lsls	r2, r1, #10
 80025c4:	4610      	mov	r0, r2
 80025c6:	4619      	mov	r1, r3
 80025c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025ca:	2200      	movs	r2, #0
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	61fa      	str	r2, [r7, #28]
 80025d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025d4:	f7fd fe30 	bl	8000238 <__aeabi_uldivmod>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4613      	mov	r3, r2
 80025de:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80025e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x200>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	0c1b      	lsrs	r3, r3, #16
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	3301      	adds	r3, #1
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80025f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025fa:	e002      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025fc:	4b05      	ldr	r3, [pc, #20]	@ (8002614 <HAL_RCC_GetSysClockFreq+0x204>)
 80025fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002600:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002602:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002604:	4618      	mov	r0, r3
 8002606:	3750      	adds	r7, #80	@ 0x50
 8002608:	46bd      	mov	sp, r7
 800260a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800260e:	bf00      	nop
 8002610:	40023800 	.word	0x40023800
 8002614:	00f42400 	.word	0x00f42400

08002618 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800261c:	4b03      	ldr	r3, [pc, #12]	@ (800262c <HAL_RCC_GetHCLKFreq+0x14>)
 800261e:	681b      	ldr	r3, [r3, #0]
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	20000004 	.word	0x20000004

08002630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002634:	f7ff fff0 	bl	8002618 <HAL_RCC_GetHCLKFreq>
 8002638:	4602      	mov	r2, r0
 800263a:	4b05      	ldr	r3, [pc, #20]	@ (8002650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	0a9b      	lsrs	r3, r3, #10
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	4903      	ldr	r1, [pc, #12]	@ (8002654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002646:	5ccb      	ldrb	r3, [r1, r3]
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800264c:	4618      	mov	r0, r3
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40023800 	.word	0x40023800
 8002654:	08005354 	.word	0x08005354

08002658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800265c:	f7ff ffdc 	bl	8002618 <HAL_RCC_GetHCLKFreq>
 8002660:	4602      	mov	r2, r0
 8002662:	4b05      	ldr	r3, [pc, #20]	@ (8002678 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	0b5b      	lsrs	r3, r3, #13
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	4903      	ldr	r1, [pc, #12]	@ (800267c <HAL_RCC_GetPCLK2Freq+0x24>)
 800266e:	5ccb      	ldrb	r3, [r1, r3]
 8002670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002674:	4618      	mov	r0, r3
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40023800 	.word	0x40023800
 800267c:	08005354 	.word	0x08005354

08002680 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b088      	sub	sp, #32
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d012      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026a8:	4b69      	ldr	r3, [pc, #420]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	4a68      	ldr	r2, [pc, #416]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ae:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80026b2:	6093      	str	r3, [r2, #8]
 80026b4:	4b66      	ldr	r3, [pc, #408]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026bc:	4964      	ldr	r1, [pc, #400]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80026ca:	2301      	movs	r3, #1
 80026cc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d017      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026da:	4b5d      	ldr	r3, [pc, #372]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026e0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e8:	4959      	ldr	r1, [pc, #356]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026f8:	d101      	bne.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80026fa:	2301      	movs	r3, #1
 80026fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002706:	2301      	movs	r3, #1
 8002708:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d017      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002716:	4b4e      	ldr	r3, [pc, #312]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002718:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800271c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002724:	494a      	ldr	r1, [pc, #296]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002730:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002734:	d101      	bne.n	800273a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002736:	2301      	movs	r3, #1
 8002738:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002742:	2301      	movs	r3, #1
 8002744:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002752:	2301      	movs	r3, #1
 8002754:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0320 	and.w	r3, r3, #32
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 808b 	beq.w	800287a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002764:	4b3a      	ldr	r3, [pc, #232]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002768:	4a39      	ldr	r2, [pc, #228]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800276a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800276e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002770:	4b37      	ldr	r3, [pc, #220]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800277c:	4b35      	ldr	r3, [pc, #212]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a34      	ldr	r2, [pc, #208]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002782:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002786:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002788:	f7fe fba0 	bl	8000ecc <HAL_GetTick>
 800278c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002790:	f7fe fb9c 	bl	8000ecc <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b64      	cmp	r3, #100	@ 0x64
 800279c:	d901      	bls.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e38f      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027ae:	4b28      	ldr	r3, [pc, #160]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027b6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d035      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d02e      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027cc:	4b20      	ldr	r3, [pc, #128]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027d4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027da:	4a1d      	ldr	r2, [pc, #116]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027e0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80027ee:	4a18      	ldr	r2, [pc, #96]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027f4:	4b16      	ldr	r3, [pc, #88]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d114      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002800:	f7fe fb64 	bl	8000ecc <HAL_GetTick>
 8002804:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002806:	e00a      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002808:	f7fe fb60 	bl	8000ecc <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e351      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281e:	4b0c      	ldr	r3, [pc, #48]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0ee      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002832:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002836:	d111      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002838:	4b05      	ldr	r3, [pc, #20]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002844:	4b04      	ldr	r3, [pc, #16]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002846:	400b      	ands	r3, r1
 8002848:	4901      	ldr	r1, [pc, #4]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800284a:	4313      	orrs	r3, r2
 800284c:	608b      	str	r3, [r1, #8]
 800284e:	e00b      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002850:	40023800 	.word	0x40023800
 8002854:	40007000 	.word	0x40007000
 8002858:	0ffffcff 	.word	0x0ffffcff
 800285c:	4bac      	ldr	r3, [pc, #688]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	4aab      	ldr	r2, [pc, #684]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002862:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002866:	6093      	str	r3, [r2, #8]
 8002868:	4ba9      	ldr	r3, [pc, #676]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800286a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002874:	49a6      	ldr	r1, [pc, #664]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002876:	4313      	orrs	r3, r2
 8002878:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0310 	and.w	r3, r3, #16
 8002882:	2b00      	cmp	r3, #0
 8002884:	d010      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002886:	4ba2      	ldr	r3, [pc, #648]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002888:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800288c:	4aa0      	ldr	r2, [pc, #640]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800288e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002892:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002896:	4b9e      	ldr	r3, [pc, #632]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002898:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a0:	499b      	ldr	r1, [pc, #620]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00a      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028b4:	4b96      	ldr	r3, [pc, #600]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028c2:	4993      	ldr	r1, [pc, #588]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028d6:	4b8e      	ldr	r3, [pc, #568]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028e4:	498a      	ldr	r1, [pc, #552]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028f8:	4b85      	ldr	r3, [pc, #532]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002906:	4982      	ldr	r1, [pc, #520]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800291a:	4b7d      	ldr	r3, [pc, #500]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800291c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002920:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002928:	4979      	ldr	r1, [pc, #484]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800293c:	4b74      	ldr	r3, [pc, #464]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002942:	f023 0203 	bic.w	r2, r3, #3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294a:	4971      	ldr	r1, [pc, #452]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800295e:	4b6c      	ldr	r3, [pc, #432]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002964:	f023 020c 	bic.w	r2, r3, #12
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800296c:	4968      	ldr	r1, [pc, #416]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002980:	4b63      	ldr	r3, [pc, #396]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002986:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800298e:	4960      	ldr	r1, [pc, #384]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029a2:	4b5b      	ldr	r3, [pc, #364]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029a8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029b0:	4957      	ldr	r1, [pc, #348]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029c4:	4b52      	ldr	r3, [pc, #328]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d2:	494f      	ldr	r1, [pc, #316]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80029e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f4:	4946      	ldr	r1, [pc, #280]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002a08:	4b41      	ldr	r3, [pc, #260]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a0e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a16:	493e      	ldr	r1, [pc, #248]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002a2a:	4b39      	ldr	r3, [pc, #228]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a30:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a38:	4935      	ldr	r1, [pc, #212]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00a      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a4c:	4b30      	ldr	r3, [pc, #192]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a52:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a5a:	492d      	ldr	r1, [pc, #180]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d011      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a6e:	4b28      	ldr	r3, [pc, #160]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a74:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a7c:	4924      	ldr	r1, [pc, #144]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a8c:	d101      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002aae:	4b18      	ldr	r3, [pc, #96]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002abc:	4914      	ldr	r1, [pc, #80]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00b      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ae0:	490b      	ldr	r1, [pc, #44]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00f      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002af4:	4b06      	ldr	r3, [pc, #24]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002afa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b04:	4902      	ldr	r1, [pc, #8]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002b0c:	e002      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002b0e:	bf00      	nop
 8002b10:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00b      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b20:	4b8a      	ldr	r3, [pc, #552]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b26:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b30:	4986      	ldr	r1, [pc, #536]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00b      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002b44:	4b81      	ldr	r3, [pc, #516]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b4a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b54:	497d      	ldr	r1, [pc, #500]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d006      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 80d6 	beq.w	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b70:	4b76      	ldr	r3, [pc, #472]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a75      	ldr	r2, [pc, #468]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002b7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b7c:	f7fe f9a6 	bl	8000ecc <HAL_GetTick>
 8002b80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b84:	f7fe f9a2 	bl	8000ecc <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b64      	cmp	r3, #100	@ 0x64
 8002b90:	d901      	bls.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e195      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b96:	4b6d      	ldr	r3, [pc, #436]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d021      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d11d      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002bb6:	4b65      	ldr	r3, [pc, #404]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bbc:	0c1b      	lsrs	r3, r3, #16
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002bc4:	4b61      	ldr	r3, [pc, #388]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bca:	0e1b      	lsrs	r3, r3, #24
 8002bcc:	f003 030f 	and.w	r3, r3, #15
 8002bd0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	019a      	lsls	r2, r3, #6
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	041b      	lsls	r3, r3, #16
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	061b      	lsls	r3, r3, #24
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	071b      	lsls	r3, r3, #28
 8002bea:	4958      	ldr	r1, [pc, #352]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d004      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c06:	d00a      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d02e      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c1c:	d129      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c1e:	4b4b      	ldr	r3, [pc, #300]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c24:	0c1b      	lsrs	r3, r3, #16
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c2c:	4b47      	ldr	r3, [pc, #284]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c32:	0f1b      	lsrs	r3, r3, #28
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	019a      	lsls	r2, r3, #6
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	041b      	lsls	r3, r3, #16
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	061b      	lsls	r3, r3, #24
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	071b      	lsls	r3, r3, #28
 8002c52:	493e      	ldr	r1, [pc, #248]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c5a:	4b3c      	ldr	r3, [pc, #240]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c60:	f023 021f 	bic.w	r2, r3, #31
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	4938      	ldr	r1, [pc, #224]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d01d      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c7e:	4b33      	ldr	r3, [pc, #204]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c84:	0e1b      	lsrs	r3, r3, #24
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c8c:	4b2f      	ldr	r3, [pc, #188]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c92:	0f1b      	lsrs	r3, r3, #28
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	019a      	lsls	r2, r3, #6
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	041b      	lsls	r3, r3, #16
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	061b      	lsls	r3, r3, #24
 8002cac:	431a      	orrs	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	071b      	lsls	r3, r3, #28
 8002cb2:	4926      	ldr	r1, [pc, #152]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d011      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	019a      	lsls	r2, r3, #6
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	041b      	lsls	r3, r3, #16
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	061b      	lsls	r3, r3, #24
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	071b      	lsls	r3, r3, #28
 8002ce2:	491a      	ldr	r1, [pc, #104]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002cea:	4b18      	ldr	r3, [pc, #96]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a17      	ldr	r2, [pc, #92]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cf0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002cf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf6:	f7fe f8e9 	bl	8000ecc <HAL_GetTick>
 8002cfa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cfe:	f7fe f8e5 	bl	8000ecc <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b64      	cmp	r3, #100	@ 0x64
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e0d8      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d10:	4b0e      	ldr	r3, [pc, #56]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f0      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	f040 80ce 	bne.w	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d24:	4b09      	ldr	r3, [pc, #36]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a08      	ldr	r2, [pc, #32]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d30:	f7fe f8cc 	bl	8000ecc <HAL_GetTick>
 8002d34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d36:	e00b      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d38:	f7fe f8c8 	bl	8000ecc <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b64      	cmp	r3, #100	@ 0x64
 8002d44:	d904      	bls.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e0bb      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002d4a:	bf00      	nop
 8002d4c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d50:	4b5e      	ldr	r3, [pc, #376]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d5c:	d0ec      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d009      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d02e      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d12a      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d86:	4b51      	ldr	r3, [pc, #324]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d8c:	0c1b      	lsrs	r3, r3, #16
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d94:	4b4d      	ldr	r3, [pc, #308]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d9a:	0f1b      	lsrs	r3, r3, #28
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	019a      	lsls	r2, r3, #6
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	041b      	lsls	r3, r3, #16
 8002dac:	431a      	orrs	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	061b      	lsls	r3, r3, #24
 8002db4:	431a      	orrs	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	071b      	lsls	r3, r3, #28
 8002dba:	4944      	ldr	r1, [pc, #272]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002dc2:	4b42      	ldr	r3, [pc, #264]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dc8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	021b      	lsls	r3, r3, #8
 8002dd4:	493d      	ldr	r1, [pc, #244]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d022      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002df0:	d11d      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002df2:	4b36      	ldr	r3, [pc, #216]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df8:	0e1b      	lsrs	r3, r3, #24
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e00:	4b32      	ldr	r3, [pc, #200]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e06:	0f1b      	lsrs	r3, r3, #28
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	019a      	lsls	r2, r3, #6
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	041b      	lsls	r3, r3, #16
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	061b      	lsls	r3, r3, #24
 8002e20:	431a      	orrs	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	071b      	lsls	r3, r3, #28
 8002e26:	4929      	ldr	r1, [pc, #164]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d028      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e3a:	4b24      	ldr	r3, [pc, #144]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e40:	0e1b      	lsrs	r3, r3, #24
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e48:	4b20      	ldr	r3, [pc, #128]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4e:	0c1b      	lsrs	r3, r3, #16
 8002e50:	f003 0303 	and.w	r3, r3, #3
 8002e54:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	019a      	lsls	r2, r3, #6
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	041b      	lsls	r3, r3, #16
 8002e60:	431a      	orrs	r2, r3
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	061b      	lsls	r3, r3, #24
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	071b      	lsls	r3, r3, #28
 8002e6e:	4917      	ldr	r1, [pc, #92]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002e76:	4b15      	ldr	r3, [pc, #84]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e84:	4911      	ldr	r1, [pc, #68]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a0e      	ldr	r2, [pc, #56]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e98:	f7fe f818 	bl	8000ecc <HAL_GetTick>
 8002e9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ea0:	f7fe f814 	bl	8000ecc <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	@ 0x64
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e007      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002eb2:	4b06      	ldr	r3, [pc, #24]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002eba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ebe:	d1ef      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3720      	adds	r7, #32
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800

08002ed0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e09d      	b.n	800301e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d108      	bne.n	8002efc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ef2:	d009      	beq.n	8002f08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	61da      	str	r2, [r3, #28]
 8002efa:	e005      	b.n	8002f08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fd fd96 	bl	8000a54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f48:	d902      	bls.n	8002f50 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	e002      	b.n	8002f56 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002f5e:	d007      	beq.n	8002f70 <HAL_SPI_Init+0xa0>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f68:	d002      	beq.n	8002f70 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fb2:	ea42 0103 	orr.w	r1, r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	0c1b      	lsrs	r3, r3, #16
 8002fcc:	f003 0204 	and.w	r2, r3, #4
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd4:	f003 0310 	and.w	r3, r3, #16
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002fec:	ea42 0103 	orr.w	r1, r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	69da      	ldr	r2, [r3, #28]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800300c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	4613      	mov	r3, r2
 8003034:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_SPI_Transmit_DMA+0x20>
 8003044:	2302      	movs	r3, #2
 8003046:	e0d8      	b.n	80031fa <HAL_SPI_Transmit_DMA+0x1d2>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b01      	cmp	r3, #1
 800305a:	d002      	beq.n	8003062 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800305c:	2302      	movs	r3, #2
 800305e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003060:	e0c6      	b.n	80031f0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <HAL_SPI_Transmit_DMA+0x46>
 8003068:	88fb      	ldrh	r3, [r7, #6]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d102      	bne.n	8003074 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003072:	e0bd      	b.n	80031f0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2203      	movs	r2, #3
 8003078:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	88fa      	ldrh	r2, [r7, #6]
 800308c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	88fa      	ldrh	r2, [r7, #6]
 8003092:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030be:	d10f      	bne.n	80030e0 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e4:	4a47      	ldr	r2, [pc, #284]	@ (8003204 <HAL_SPI_Transmit_DMA+0x1dc>)
 80030e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ec:	4a46      	ldr	r2, [pc, #280]	@ (8003208 <HAL_SPI_Transmit_DMA+0x1e0>)
 80030ee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f4:	4a45      	ldr	r2, [pc, #276]	@ (800320c <HAL_SPI_Transmit_DMA+0x1e4>)
 80030f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030fc:	2200      	movs	r2, #0
 80030fe:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800310e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003118:	d82d      	bhi.n	8003176 <HAL_SPI_Transmit_DMA+0x14e>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003124:	d127      	bne.n	8003176 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800312a:	b29b      	uxth	r3, r3
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10f      	bne.n	8003154 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003142:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003148:	b29b      	uxth	r3, r3
 800314a:	085b      	lsrs	r3, r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003152:	e010      	b.n	8003176 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003162:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003168:	b29b      	uxth	r3, r3
 800316a:	085b      	lsrs	r3, r3, #1
 800316c:	b29b      	uxth	r3, r3
 800316e:	3301      	adds	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800317e:	4619      	mov	r1, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	330c      	adds	r3, #12
 8003186:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800318c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800318e:	f7fe f869 	bl	8001264 <HAL_DMA_Start_IT>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00c      	beq.n	80031b2 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800319c:	f043 0210 	orr.w	r2, r3, #16
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    goto error;
 80031b0:	e01e      	b.n	80031f0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031bc:	2b40      	cmp	r3, #64	@ 0x40
 80031be:	d007      	beq.n	80031d0 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031ce:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0220 	orr.w	r2, r2, #32
 80031de:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0202 	orr.w	r2, r2, #2
 80031ee:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80031f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	08003ba1 	.word	0x08003ba1
 8003208:	080039bd 	.word	0x080039bd
 800320c:	08003bf5 	.word	0x08003bf5

08003210 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	4613      	mov	r3, r2
 800321c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d110      	bne.n	800324c <HAL_SPI_Receive_DMA+0x3c>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003232:	d10b      	bne.n	800324c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2204      	movs	r2, #4
 8003238:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800323c:	88fb      	ldrh	r3, [r7, #6]
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 f908 	bl	8003458 <HAL_SPI_TransmitReceive_DMA>
 8003248:	4603      	mov	r3, r0
 800324a:	e0fb      	b.n	8003444 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003252:	2b01      	cmp	r3, #1
 8003254:	d101      	bne.n	800325a <HAL_SPI_Receive_DMA+0x4a>
 8003256:	2302      	movs	r3, #2
 8003258:	e0f4      	b.n	8003444 <HAL_SPI_Receive_DMA+0x234>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b01      	cmp	r3, #1
 800326c:	d002      	beq.n	8003274 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800326e:	2302      	movs	r3, #2
 8003270:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003272:	e0e2      	b.n	800343a <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <HAL_SPI_Receive_DMA+0x70>
 800327a:	88fb      	ldrh	r3, [r7, #6]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d102      	bne.n	8003286 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003284:	e0d9      	b.n	800343a <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2204      	movs	r2, #4
 800328a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	88fa      	ldrh	r2, [r7, #6]
 800329e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	88fa      	ldrh	r2, [r7, #6]
 80032a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032ca:	d10f      	bne.n	80032ec <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80032ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032fa:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003304:	d908      	bls.n	8003318 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003314:	605a      	str	r2, [r3, #4]
 8003316:	e042      	b.n	800339e <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003326:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003332:	d134      	bne.n	800339e <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003342:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800334a:	b29b      	uxth	r3, r3
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d111      	bne.n	8003378 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003362:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800336a:	b29b      	uxth	r3, r3
 800336c:	085b      	lsrs	r3, r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003376:	e012      	b.n	800339e <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003386:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800338e:	b29b      	uxth	r3, r3
 8003390:	085b      	lsrs	r3, r3, #1
 8003392:	b29b      	uxth	r3, r3
 8003394:	3301      	adds	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a2:	4a2a      	ldr	r2, [pc, #168]	@ (800344c <HAL_SPI_Receive_DMA+0x23c>)
 80033a4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033aa:	4a29      	ldr	r2, [pc, #164]	@ (8003450 <HAL_SPI_Receive_DMA+0x240>)
 80033ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b2:	4a28      	ldr	r2, [pc, #160]	@ (8003454 <HAL_SPI_Receive_DMA+0x244>)
 80033b4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ba:	2200      	movs	r2, #0
 80033bc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	330c      	adds	r3, #12
 80033c8:	4619      	mov	r1, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ce:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033d6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80033d8:	f7fd ff44 	bl	8001264 <HAL_DMA_Start_IT>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00c      	beq.n	80033fc <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e6:	f043 0210 	orr.w	r2, r3, #16
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    goto error;
 80033fa:	e01e      	b.n	800343a <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003406:	2b40      	cmp	r3, #64	@ 0x40
 8003408:	d007      	beq.n	800341a <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003418:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 0220 	orr.w	r2, r2, #32
 8003428:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f042 0201 	orr.w	r2, r2, #1
 8003438:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003442:	7dfb      	ldrb	r3, [r7, #23]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	08003bbd 	.word	0x08003bbd
 8003450:	08003a65 	.word	0x08003a65
 8003454:	08003bf5 	.word	0x08003bf5

08003458 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_SPI_TransmitReceive_DMA+0x20>
 8003474:	2302      	movs	r3, #2
 8003476:	e16c      	b.n	8003752 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003486:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800348e:	7dbb      	ldrb	r3, [r7, #22]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d00d      	beq.n	80034b0 <HAL_SPI_TransmitReceive_DMA+0x58>
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800349a:	d106      	bne.n	80034aa <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d102      	bne.n	80034aa <HAL_SPI_TransmitReceive_DMA+0x52>
 80034a4:	7dbb      	ldrb	r3, [r7, #22]
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d002      	beq.n	80034b0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80034aa:	2302      	movs	r3, #2
 80034ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034ae:	e14b      	b.n	8003748 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d005      	beq.n	80034c2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80034bc:	887b      	ldrh	r3, [r7, #2]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d102      	bne.n	80034c8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034c6:	e13f      	b.n	8003748 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d003      	beq.n	80034dc <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2205      	movs	r2, #5
 80034d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	887a      	ldrh	r2, [r7, #2]
 80034ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	887a      	ldrh	r2, [r7, #2]
 80034f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	887a      	ldrh	r2, [r7, #2]
 80034fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	887a      	ldrh	r2, [r7, #2]
 8003506:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8003524:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800352e:	d908      	bls.n	8003542 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800353e:	605a      	str	r2, [r3, #4]
 8003540:	e06f      	b.n	8003622 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003550:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800355c:	d126      	bne.n	80035ac <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10f      	bne.n	800358a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003578:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800357e:	b29b      	uxth	r3, r3
 8003580:	085b      	lsrs	r3, r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003588:	e010      	b.n	80035ac <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003598:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800359e:	b29b      	uxth	r3, r3
 80035a0:	085b      	lsrs	r3, r3, #1
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3301      	adds	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035b6:	d134      	bne.n	8003622 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035c6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d111      	bne.n	80035fc <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035e6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	085b      	lsrs	r3, r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80035fa:	e012      	b.n	8003622 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800360a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003612:	b29b      	uxth	r3, r3
 8003614:	085b      	lsrs	r3, r3, #1
 8003616:	b29b      	uxth	r3, r3
 8003618:	3301      	adds	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b04      	cmp	r3, #4
 800362c:	d108      	bne.n	8003640 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003632:	4a4a      	ldr	r2, [pc, #296]	@ (800375c <HAL_SPI_TransmitReceive_DMA+0x304>)
 8003634:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363a:	4a49      	ldr	r2, [pc, #292]	@ (8003760 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800363c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800363e:	e007      	b.n	8003650 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003644:	4a47      	ldr	r2, [pc, #284]	@ (8003764 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8003646:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364c:	4a46      	ldr	r2, [pc, #280]	@ (8003768 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800364e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003654:	4a45      	ldr	r2, [pc, #276]	@ (800376c <HAL_SPI_TransmitReceive_DMA+0x314>)
 8003656:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800365c:	2200      	movs	r2, #0
 800365e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	330c      	adds	r3, #12
 800366a:	4619      	mov	r1, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003670:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003678:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800367a:	f7fd fdf3 	bl	8001264 <HAL_DMA_Start_IT>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00c      	beq.n	800369e <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003688:	f043 0210 	orr.w	r2, r3, #16
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    goto error;
 800369c:	e054      	b.n	8003748 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 0201 	orr.w	r2, r2, #1
 80036ac:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b2:	2200      	movs	r2, #0
 80036b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ba:	2200      	movs	r2, #0
 80036bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c2:	2200      	movs	r2, #0
 80036c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ca:	2200      	movs	r2, #0
 80036cc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d6:	4619      	mov	r1, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	330c      	adds	r3, #12
 80036de:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036e4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80036e6:	f7fd fdbd 	bl	8001264 <HAL_DMA_Start_IT>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00c      	beq.n	800370a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f4:	f043 0210 	orr.w	r2, r3, #16
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    goto error;
 8003708:	e01e      	b.n	8003748 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003714:	2b40      	cmp	r3, #64	@ 0x40
 8003716:	d007      	beq.n	8003728 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003726:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0220 	orr.w	r2, r2, #32
 8003736:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0202 	orr.w	r2, r2, #2
 8003746:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003750:	7dfb      	ldrb	r3, [r7, #23]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	08003bbd 	.word	0x08003bbd
 8003760:	08003a65 	.word	0x08003a65
 8003764:	08003bd9 	.word	0x08003bd9
 8003768:	08003b0f 	.word	0x08003b0f
 800376c:	08003bf5 	.word	0x08003bf5

08003770 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10e      	bne.n	80037b0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003798:	2b00      	cmp	r3, #0
 800379a:	d009      	beq.n	80037b0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d004      	beq.n	80037b0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	4798      	blx	r3
    return;
 80037ae:	e0ce      	b.n	800394e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d009      	beq.n	80037ce <HAL_SPI_IRQHandler+0x5e>
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d004      	beq.n	80037ce <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	4798      	blx	r3
    return;
 80037cc:	e0bf      	b.n	800394e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	f003 0320 	and.w	r3, r3, #32
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10a      	bne.n	80037ee <HAL_SPI_IRQHandler+0x7e>
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d105      	bne.n	80037ee <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 80b0 	beq.w	800394e <HAL_SPI_IRQHandler+0x1de>
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	f003 0320 	and.w	r3, r3, #32
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 80aa 	beq.w	800394e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003800:	2b00      	cmp	r3, #0
 8003802:	d023      	beq.n	800384c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b03      	cmp	r3, #3
 800380e:	d011      	beq.n	8003834 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003814:	f043 0204 	orr.w	r2, r3, #4
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	e00b      	b.n	800384c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003834:	2300      	movs	r3, #0
 8003836:	613b      	str	r3, [r7, #16]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	613b      	str	r3, [r7, #16]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	693b      	ldr	r3, [r7, #16]
        return;
 800384a:	e080      	b.n	800394e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	f003 0320 	and.w	r3, r3, #32
 8003852:	2b00      	cmp	r3, #0
 8003854:	d014      	beq.n	8003880 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800385a:	f043 0201 	orr.w	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00c      	beq.n	80038a4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800388e:	f043 0208 	orr.w	r2, r3, #8
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003896:	2300      	movs	r3, #0
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	60bb      	str	r3, [r7, #8]
 80038a2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d04f      	beq.n	800394c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80038ba:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d104      	bne.n	80038d8 <HAL_SPI_IRQHandler+0x168>
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d034      	beq.n	8003942 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0203 	bic.w	r2, r2, #3
 80038e6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d011      	beq.n	8003914 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f4:	4a17      	ldr	r2, [pc, #92]	@ (8003954 <HAL_SPI_IRQHandler+0x1e4>)
 80038f6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fd fd81 	bl	8001404 <HAL_DMA_Abort_IT>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800390c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003918:	2b00      	cmp	r3, #0
 800391a:	d016      	beq.n	800394a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003920:	4a0c      	ldr	r2, [pc, #48]	@ (8003954 <HAL_SPI_IRQHandler+0x1e4>)
 8003922:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003928:	4618      	mov	r0, r3
 800392a:	f7fd fd6b 	bl	8001404 <HAL_DMA_Abort_IT>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003938:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003940:	e003      	b.n	800394a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f830 	bl	80039a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003948:	e000      	b.n	800394c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800394a:	bf00      	nop
    return;
 800394c:	bf00      	nop
  }
}
 800394e:	3720      	adds	r7, #32
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	08003c35 	.word	0x08003c35

08003958 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039ca:	f7fd fa7f 	bl	8000ecc <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039de:	d03b      	beq.n	8003a58 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0220 	bic.w	r2, r2, #32
 80039ee:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0202 	bic.w	r2, r2, #2
 80039fe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	2164      	movs	r1, #100	@ 0x64
 8003a04:	6978      	ldr	r0, [r7, #20]
 8003a06:	f000 fac5 	bl	8003f94 <SPI_EndRxTxTransaction>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a14:	f043 0220 	orr.w	r2, r3, #32
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a24:	2300      	movs	r3, #0
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003a50:	6978      	ldr	r0, [r7, #20]
 8003a52:	f7ff ffa9 	bl	80039a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003a56:	e002      	b.n	8003a5e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003a58:	6978      	ldr	r0, [r7, #20]
 8003a5a:	f7fc fd81 	bl	8000560 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a70:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a72:	f7fd fa2b 	bl	8000ecc <HAL_GetTick>
 8003a76:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a86:	d03c      	beq.n	8003b02 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0220 	bic.w	r2, r2, #32
 8003a96:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10d      	bne.n	8003abc <SPI_DMAReceiveCplt+0x58>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003aa8:	d108      	bne.n	8003abc <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0203 	bic.w	r2, r2, #3
 8003ab8:	605a      	str	r2, [r3, #4]
 8003aba:	e007      	b.n	8003acc <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0201 	bic.w	r2, r2, #1
 8003aca:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	2164      	movs	r1, #100	@ 0x64
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 f9e3 	bl	8003e9c <SPI_EndRxTransaction>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d002      	beq.n	8003ae2 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f7ff ff54 	bl	80039a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003b00:	e002      	b.n	8003b08 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f7fc fd10 	bl	8000528 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b1a:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b1c:	f7fd f9d6 	bl	8000ecc <HAL_GetTick>
 8003b20:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b30:	d030      	beq.n	8003b94 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0220 	bic.w	r2, r2, #32
 8003b40:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	2164      	movs	r1, #100	@ 0x64
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 fa24 	bl	8003f94 <SPI_EndRxTxTransaction>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b56:	f043 0220 	orr.w	r2, r3, #32
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0203 	bic.w	r2, r2, #3
 8003b6c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f7ff ff0b 	bl	80039a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003b92:	e002      	b.n	8003b9a <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f7ff fedf 	bl	8003958 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bac:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f7ff fedc 	bl	800396c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003bb4:	bf00      	nop
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f7ff fed8 	bl	8003980 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003bd0:	bf00      	nop
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f7ff fed4 	bl	8003994 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003bec:	bf00      	nop
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c00:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0203 	bic.w	r2, r2, #3
 8003c10:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c16:	f043 0210 	orr.w	r2, r3, #16
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f7ff febe 	bl	80039a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c2c:	bf00      	nop
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c40:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f7ff fea9 	bl	80039a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c56:	bf00      	nop
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
	...

08003c60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b088      	sub	sp, #32
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c70:	f7fd f92c 	bl	8000ecc <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c78:	1a9b      	subs	r3, r3, r2
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c80:	f7fd f924 	bl	8000ecc <HAL_GetTick>
 8003c84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c86:	4b39      	ldr	r3, [pc, #228]	@ (8003d6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	015b      	lsls	r3, r3, #5
 8003c8c:	0d1b      	lsrs	r3, r3, #20
 8003c8e:	69fa      	ldr	r2, [r7, #28]
 8003c90:	fb02 f303 	mul.w	r3, r2, r3
 8003c94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c96:	e054      	b.n	8003d42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9e:	d050      	beq.n	8003d42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ca0:	f7fd f914 	bl	8000ecc <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	69fa      	ldr	r2, [r7, #28]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d902      	bls.n	8003cb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d13d      	bne.n	8003d32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003cc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cce:	d111      	bne.n	8003cf4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cd8:	d004      	beq.n	8003ce4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ce2:	d107      	bne.n	8003cf4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cf2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cfc:	d10f      	bne.n	8003d1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e017      	b.n	8003d62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	bf0c      	ite	eq
 8003d52:	2301      	moveq	r3, #1
 8003d54:	2300      	movne	r3, #0
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	461a      	mov	r2, r3
 8003d5a:	79fb      	ldrb	r3, [r7, #7]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d19b      	bne.n	8003c98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3720      	adds	r7, #32
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20000004 	.word	0x20000004

08003d70 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08a      	sub	sp, #40	@ 0x28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
 8003d7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d82:	f7fd f8a3 	bl	8000ecc <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8a:	1a9b      	subs	r3, r3, r2
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	4413      	add	r3, r2
 8003d90:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003d92:	f7fd f89b 	bl	8000ecc <HAL_GetTick>
 8003d96:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	330c      	adds	r3, #12
 8003d9e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003da0:	4b3d      	ldr	r3, [pc, #244]	@ (8003e98 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	4613      	mov	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	00da      	lsls	r2, r3, #3
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	0d1b      	lsrs	r3, r3, #20
 8003db0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003db2:	fb02 f303 	mul.w	r3, r2, r3
 8003db6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003db8:	e060      	b.n	8003e7c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003dc0:	d107      	bne.n	8003dd2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d104      	bne.n	8003dd2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003dd0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd8:	d050      	beq.n	8003e7c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dda:	f7fd f877 	bl	8000ecc <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d902      	bls.n	8003df0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d13d      	bne.n	8003e6c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003dfe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e08:	d111      	bne.n	8003e2e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e12:	d004      	beq.n	8003e1e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e1c:	d107      	bne.n	8003e2e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e2c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e36:	d10f      	bne.n	8003e58 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e010      	b.n	8003e8e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	4013      	ands	r3, r2
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d196      	bne.n	8003dba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3728      	adds	r7, #40	@ 0x28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	20000004 	.word	0x20000004

08003e9c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af02      	add	r7, sp, #8
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003eb0:	d111      	bne.n	8003ed6 <SPI_EndRxTransaction+0x3a>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eba:	d004      	beq.n	8003ec6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ec4:	d107      	bne.n	8003ed6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ed4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ede:	d112      	bne.n	8003f06 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	2180      	movs	r1, #128	@ 0x80
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f7ff feb8 	bl	8003c60 <SPI_WaitFlagStateUntilTimeout>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d021      	beq.n	8003f3a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003efa:	f043 0220 	orr.w	r2, r3, #32
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e03d      	b.n	8003f82 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f06:	4b21      	ldr	r3, [pc, #132]	@ (8003f8c <SPI_EndRxTransaction+0xf0>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a21      	ldr	r2, [pc, #132]	@ (8003f90 <SPI_EndRxTransaction+0xf4>)
 8003f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f10:	0d5b      	lsrs	r3, r3, #21
 8003f12:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f16:	fb02 f303 	mul.w	r3, r2, r3
 8003f1a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	3b01      	subs	r3, #1
 8003f26:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f32:	2b80      	cmp	r3, #128	@ 0x80
 8003f34:	d0f2      	beq.n	8003f1c <SPI_EndRxTransaction+0x80>
 8003f36:	e000      	b.n	8003f3a <SPI_EndRxTransaction+0x9e>
        break;
 8003f38:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f42:	d11d      	bne.n	8003f80 <SPI_EndRxTransaction+0xe4>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f4c:	d004      	beq.n	8003f58 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f56:	d113      	bne.n	8003f80 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f7ff ff03 	bl	8003d70 <SPI_WaitFifoStateUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d007      	beq.n	8003f80 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f74:	f043 0220 	orr.w	r2, r3, #32
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e000      	b.n	8003f82 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000004 	.word	0x20000004
 8003f90:	165e9f81 	.word	0x165e9f81

08003f94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af02      	add	r7, sp, #8
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f7ff fedf 	bl	8003d70 <SPI_WaitFifoStateUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d007      	beq.n	8003fc8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fbc:	f043 0220 	orr.w	r2, r3, #32
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e046      	b.n	8004056 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003fc8:	4b25      	ldr	r3, [pc, #148]	@ (8004060 <SPI_EndRxTxTransaction+0xcc>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a25      	ldr	r2, [pc, #148]	@ (8004064 <SPI_EndRxTxTransaction+0xd0>)
 8003fce:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd2:	0d5b      	lsrs	r3, r3, #21
 8003fd4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003fd8:	fb02 f303 	mul.w	r3, r2, r3
 8003fdc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fe6:	d112      	bne.n	800400e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2180      	movs	r1, #128	@ 0x80
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f7ff fe34 	bl	8003c60 <SPI_WaitFlagStateUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d016      	beq.n	800402c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004002:	f043 0220 	orr.w	r2, r3, #32
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e023      	b.n	8004056 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	3b01      	subs	r3, #1
 8004018:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004024:	2b80      	cmp	r3, #128	@ 0x80
 8004026:	d0f2      	beq.n	800400e <SPI_EndRxTxTransaction+0x7a>
 8004028:	e000      	b.n	800402c <SPI_EndRxTxTransaction+0x98>
        break;
 800402a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2200      	movs	r2, #0
 8004034:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f7ff fe99 	bl	8003d70 <SPI_WaitFifoStateUntilTimeout>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d007      	beq.n	8004054 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004048:	f043 0220 	orr.w	r2, r3, #32
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e000      	b.n	8004056 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	20000004 	.word	0x20000004
 8004064:	165e9f81 	.word	0x165e9f81

08004068 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e040      	b.n	80040fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800407e:	2b00      	cmp	r3, #0
 8004080:	d106      	bne.n	8004090 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fc fdb0 	bl	8000bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2224      	movs	r2, #36	@ 0x24
 8004094:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0201 	bic.w	r2, r2, #1
 80040a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 fb9c 	bl	80047e4 <UART_SetConfig>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e022      	b.n	80040fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d002      	beq.n	80040c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fdf4 	bl	8004cac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fe7b 	bl	8004df0 <UART_CheckIdleState>
 80040fa:	4603      	mov	r3, r0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004104:	b480      	push	{r7}
 8004106:	b08b      	sub	sp, #44	@ 0x2c
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	4613      	mov	r3, r2
 8004110:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004116:	2b20      	cmp	r3, #32
 8004118:	d147      	bne.n	80041aa <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <HAL_UART_Transmit_IT+0x22>
 8004120:	88fb      	ldrh	r3, [r7, #6]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e040      	b.n	80041ac <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	88fa      	ldrh	r2, [r7, #6]
 8004134:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	88fa      	ldrh	r2, [r7, #6]
 800413c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2221      	movs	r2, #33	@ 0x21
 8004152:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800415c:	d107      	bne.n	800416e <HAL_UART_Transmit_IT+0x6a>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d103      	bne.n	800416e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4a13      	ldr	r2, [pc, #76]	@ (80041b8 <HAL_UART_Transmit_IT+0xb4>)
 800416a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800416c:	e002      	b.n	8004174 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4a12      	ldr	r2, [pc, #72]	@ (80041bc <HAL_UART_Transmit_IT+0xb8>)
 8004172:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	e853 3f00 	ldrex	r3, [r3]
 8004180:	613b      	str	r3, [r7, #16]
   return(result);
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004188:	627b      	str	r3, [r7, #36]	@ 0x24
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004192:	623b      	str	r3, [r7, #32]
 8004194:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004196:	69f9      	ldr	r1, [r7, #28]
 8004198:	6a3a      	ldr	r2, [r7, #32]
 800419a:	e841 2300 	strex	r3, r2, [r1]
 800419e:	61bb      	str	r3, [r7, #24]
   return(result);
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1e6      	bne.n	8004174 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	e000      	b.n	80041ac <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80041aa:	2302      	movs	r3, #2
  }
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	372c      	adds	r7, #44	@ 0x2c
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	080051c1 	.word	0x080051c1
 80041bc:	0800510b 	.word	0x0800510b

080041c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b0ba      	sub	sp, #232	@ 0xe8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80041ea:	f640 030f 	movw	r3, #2063	@ 0x80f
 80041ee:	4013      	ands	r3, r2
 80041f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80041f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d115      	bne.n	8004228 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00f      	beq.n	8004228 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800420c:	f003 0320 	and.w	r3, r3, #32
 8004210:	2b00      	cmp	r3, #0
 8004212:	d009      	beq.n	8004228 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 82ac 	beq.w	8004776 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	4798      	blx	r3
      }
      return;
 8004226:	e2a6      	b.n	8004776 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004228:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 8117 	beq.w	8004460 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d106      	bne.n	800424c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800423e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004242:	4b85      	ldr	r3, [pc, #532]	@ (8004458 <HAL_UART_IRQHandler+0x298>)
 8004244:	4013      	ands	r3, r2
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 810a 	beq.w	8004460 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800424c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d011      	beq.n	800427c <HAL_UART_IRQHandler+0xbc>
 8004258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800425c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00b      	beq.n	800427c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2201      	movs	r2, #1
 800426a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004272:	f043 0201 	orr.w	r2, r3, #1
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800427c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d011      	beq.n	80042ac <HAL_UART_IRQHandler+0xec>
 8004288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00b      	beq.n	80042ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2202      	movs	r2, #2
 800429a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042a2:	f043 0204 	orr.w	r2, r3, #4
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d011      	beq.n	80042dc <HAL_UART_IRQHandler+0x11c>
 80042b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00b      	beq.n	80042dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2204      	movs	r2, #4
 80042ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042d2:	f043 0202 	orr.w	r2, r3, #2
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d017      	beq.n	8004318 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ec:	f003 0320 	and.w	r3, r3, #32
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d105      	bne.n	8004300 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80042f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00b      	beq.n	8004318 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2208      	movs	r2, #8
 8004306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800430e:	f043 0208 	orr.w	r2, r3, #8
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800431c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004320:	2b00      	cmp	r3, #0
 8004322:	d012      	beq.n	800434a <HAL_UART_IRQHandler+0x18a>
 8004324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004328:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00c      	beq.n	800434a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004338:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004340:	f043 0220 	orr.w	r2, r3, #32
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 8212 	beq.w	800477a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00d      	beq.n	800437e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004366:	f003 0320 	and.w	r3, r3, #32
 800436a:	2b00      	cmp	r3, #0
 800436c:	d007      	beq.n	800437e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004384:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004392:	2b40      	cmp	r3, #64	@ 0x40
 8004394:	d005      	beq.n	80043a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800439a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d04f      	beq.n	8004442 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fe37 	bl	8005016 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b2:	2b40      	cmp	r3, #64	@ 0x40
 80043b4:	d141      	bne.n	800443a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	3308      	adds	r3, #8
 80043bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043c4:	e853 3f00 	ldrex	r3, [r3]
 80043c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80043cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3308      	adds	r3, #8
 80043de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80043e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80043e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80043ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80043fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1d9      	bne.n	80043b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004406:	2b00      	cmp	r3, #0
 8004408:	d013      	beq.n	8004432 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800440e:	4a13      	ldr	r2, [pc, #76]	@ (800445c <HAL_UART_IRQHandler+0x29c>)
 8004410:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004416:	4618      	mov	r0, r3
 8004418:	f7fc fff4 	bl	8001404 <HAL_DMA_Abort_IT>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d017      	beq.n	8004452 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800442c:	4610      	mov	r0, r2
 800442e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004430:	e00f      	b.n	8004452 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f9b6 	bl	80047a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004438:	e00b      	b.n	8004452 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f9b2 	bl	80047a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004440:	e007      	b.n	8004452 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f9ae 	bl	80047a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004450:	e193      	b.n	800477a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004452:	bf00      	nop
    return;
 8004454:	e191      	b.n	800477a <HAL_UART_IRQHandler+0x5ba>
 8004456:	bf00      	nop
 8004458:	04000120 	.word	0x04000120
 800445c:	080050df 	.word	0x080050df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004464:	2b01      	cmp	r3, #1
 8004466:	f040 814c 	bne.w	8004702 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800446a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800446e:	f003 0310 	and.w	r3, r3, #16
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 8145 	beq.w	8004702 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800447c:	f003 0310 	and.w	r3, r3, #16
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 813e 	beq.w	8004702 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2210      	movs	r2, #16
 800448c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004498:	2b40      	cmp	r3, #64	@ 0x40
 800449a:	f040 80b6 	bne.w	800460a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 8165 	beq.w	800477e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80044ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044be:	429a      	cmp	r2, r3
 80044c0:	f080 815d 	bcs.w	800477e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044d8:	f000 8086 	beq.w	80045e8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80044f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	461a      	mov	r2, r3
 8004502:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004506:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800450a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004512:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004516:	e841 2300 	strex	r3, r2, [r1]
 800451a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800451e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1da      	bne.n	80044dc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3308      	adds	r3, #8
 800452c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004530:	e853 3f00 	ldrex	r3, [r3]
 8004534:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004536:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004538:	f023 0301 	bic.w	r3, r3, #1
 800453c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3308      	adds	r3, #8
 8004546:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800454a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800454e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004550:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004552:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004556:	e841 2300 	strex	r3, r2, [r1]
 800455a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800455c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1e1      	bne.n	8004526 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	3308      	adds	r3, #8
 8004568:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800456c:	e853 3f00 	ldrex	r3, [r3]
 8004570:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004572:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004574:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004578:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3308      	adds	r3, #8
 8004582:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004586:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004588:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800458c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800458e:	e841 2300 	strex	r3, r2, [r1]
 8004592:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004594:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1e3      	bne.n	8004562 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2220      	movs	r2, #32
 800459e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045b0:	e853 3f00 	ldrex	r3, [r3]
 80045b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80045b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045b8:	f023 0310 	bic.w	r3, r3, #16
 80045bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	461a      	mov	r2, r3
 80045c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80045ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045d2:	e841 2300 	strex	r3, r2, [r1]
 80045d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1e4      	bne.n	80045a8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fc fe9e 	bl	8001324 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	b29b      	uxth	r3, r3
 8004600:	4619      	mov	r1, r3
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f8d8 	bl	80047b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004608:	e0b9      	b.n	800477e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004616:	b29b      	uxth	r3, r3
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 80ab 	beq.w	8004782 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 800462c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 80a6 	beq.w	8004782 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800463e:	e853 3f00 	ldrex	r3, [r3]
 8004642:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004646:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800464a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004658:	647b      	str	r3, [r7, #68]	@ 0x44
 800465a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800465e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004660:	e841 2300 	strex	r3, r2, [r1]
 8004664:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1e4      	bne.n	8004636 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3308      	adds	r3, #8
 8004672:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004676:	e853 3f00 	ldrex	r3, [r3]
 800467a:	623b      	str	r3, [r7, #32]
   return(result);
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	f023 0301 	bic.w	r3, r3, #1
 8004682:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3308      	adds	r3, #8
 800468c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004690:	633a      	str	r2, [r7, #48]	@ 0x30
 8004692:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004694:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004696:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004698:	e841 2300 	strex	r3, r2, [r1]
 800469c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800469e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e3      	bne.n	800466c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2220      	movs	r2, #32
 80046a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	e853 3f00 	ldrex	r3, [r3]
 80046c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f023 0310 	bic.w	r3, r3, #16
 80046cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	461a      	mov	r2, r3
 80046d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80046da:	61fb      	str	r3, [r7, #28]
 80046dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046de:	69b9      	ldr	r1, [r7, #24]
 80046e0:	69fa      	ldr	r2, [r7, #28]
 80046e2:	e841 2300 	strex	r3, r2, [r1]
 80046e6:	617b      	str	r3, [r7, #20]
   return(result);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1e4      	bne.n	80046b8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2202      	movs	r2, #2
 80046f2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046f8:	4619      	mov	r1, r3
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f85c 	bl	80047b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004700:	e03f      	b.n	8004782 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004706:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00e      	beq.n	800472c <HAL_UART_IRQHandler+0x56c>
 800470e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004712:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d008      	beq.n	800472c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004722:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f853 	bl	80047d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800472a:	e02d      	b.n	8004788 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800472c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00e      	beq.n	8004756 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800473c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004748:	2b00      	cmp	r3, #0
 800474a:	d01c      	beq.n	8004786 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	4798      	blx	r3
    }
    return;
 8004754:	e017      	b.n	8004786 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800475a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800475e:	2b00      	cmp	r3, #0
 8004760:	d012      	beq.n	8004788 <HAL_UART_IRQHandler+0x5c8>
 8004762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00c      	beq.n	8004788 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fd86 	bl	8005280 <UART_EndTransmit_IT>
    return;
 8004774:	e008      	b.n	8004788 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004776:	bf00      	nop
 8004778:	e006      	b.n	8004788 <HAL_UART_IRQHandler+0x5c8>
    return;
 800477a:	bf00      	nop
 800477c:	e004      	b.n	8004788 <HAL_UART_IRQHandler+0x5c8>
      return;
 800477e:	bf00      	nop
 8004780:	e002      	b.n	8004788 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004782:	bf00      	nop
 8004784:	e000      	b.n	8004788 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004786:	bf00      	nop
  }

}
 8004788:	37e8      	adds	r7, #232	@ 0xe8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop

08004790 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b088      	sub	sp, #32
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047ec:	2300      	movs	r3, #0
 80047ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	4313      	orrs	r3, r2
 8004806:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	4ba6      	ldr	r3, [pc, #664]	@ (8004aa8 <UART_SetConfig+0x2c4>)
 8004810:	4013      	ands	r3, r2
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6812      	ldr	r2, [r2, #0]
 8004816:	6979      	ldr	r1, [r7, #20]
 8004818:	430b      	orrs	r3, r1
 800481a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	4313      	orrs	r3, r2
 8004840:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	430a      	orrs	r2, r1
 8004854:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a94      	ldr	r2, [pc, #592]	@ (8004aac <UART_SetConfig+0x2c8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d120      	bne.n	80048a2 <UART_SetConfig+0xbe>
 8004860:	4b93      	ldr	r3, [pc, #588]	@ (8004ab0 <UART_SetConfig+0x2cc>)
 8004862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	2b03      	cmp	r3, #3
 800486c:	d816      	bhi.n	800489c <UART_SetConfig+0xb8>
 800486e:	a201      	add	r2, pc, #4	@ (adr r2, 8004874 <UART_SetConfig+0x90>)
 8004870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004874:	08004885 	.word	0x08004885
 8004878:	08004891 	.word	0x08004891
 800487c:	0800488b 	.word	0x0800488b
 8004880:	08004897 	.word	0x08004897
 8004884:	2301      	movs	r3, #1
 8004886:	77fb      	strb	r3, [r7, #31]
 8004888:	e150      	b.n	8004b2c <UART_SetConfig+0x348>
 800488a:	2302      	movs	r3, #2
 800488c:	77fb      	strb	r3, [r7, #31]
 800488e:	e14d      	b.n	8004b2c <UART_SetConfig+0x348>
 8004890:	2304      	movs	r3, #4
 8004892:	77fb      	strb	r3, [r7, #31]
 8004894:	e14a      	b.n	8004b2c <UART_SetConfig+0x348>
 8004896:	2308      	movs	r3, #8
 8004898:	77fb      	strb	r3, [r7, #31]
 800489a:	e147      	b.n	8004b2c <UART_SetConfig+0x348>
 800489c:	2310      	movs	r3, #16
 800489e:	77fb      	strb	r3, [r7, #31]
 80048a0:	e144      	b.n	8004b2c <UART_SetConfig+0x348>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a83      	ldr	r2, [pc, #524]	@ (8004ab4 <UART_SetConfig+0x2d0>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d132      	bne.n	8004912 <UART_SetConfig+0x12e>
 80048ac:	4b80      	ldr	r3, [pc, #512]	@ (8004ab0 <UART_SetConfig+0x2cc>)
 80048ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b2:	f003 030c 	and.w	r3, r3, #12
 80048b6:	2b0c      	cmp	r3, #12
 80048b8:	d828      	bhi.n	800490c <UART_SetConfig+0x128>
 80048ba:	a201      	add	r2, pc, #4	@ (adr r2, 80048c0 <UART_SetConfig+0xdc>)
 80048bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c0:	080048f5 	.word	0x080048f5
 80048c4:	0800490d 	.word	0x0800490d
 80048c8:	0800490d 	.word	0x0800490d
 80048cc:	0800490d 	.word	0x0800490d
 80048d0:	08004901 	.word	0x08004901
 80048d4:	0800490d 	.word	0x0800490d
 80048d8:	0800490d 	.word	0x0800490d
 80048dc:	0800490d 	.word	0x0800490d
 80048e0:	080048fb 	.word	0x080048fb
 80048e4:	0800490d 	.word	0x0800490d
 80048e8:	0800490d 	.word	0x0800490d
 80048ec:	0800490d 	.word	0x0800490d
 80048f0:	08004907 	.word	0x08004907
 80048f4:	2300      	movs	r3, #0
 80048f6:	77fb      	strb	r3, [r7, #31]
 80048f8:	e118      	b.n	8004b2c <UART_SetConfig+0x348>
 80048fa:	2302      	movs	r3, #2
 80048fc:	77fb      	strb	r3, [r7, #31]
 80048fe:	e115      	b.n	8004b2c <UART_SetConfig+0x348>
 8004900:	2304      	movs	r3, #4
 8004902:	77fb      	strb	r3, [r7, #31]
 8004904:	e112      	b.n	8004b2c <UART_SetConfig+0x348>
 8004906:	2308      	movs	r3, #8
 8004908:	77fb      	strb	r3, [r7, #31]
 800490a:	e10f      	b.n	8004b2c <UART_SetConfig+0x348>
 800490c:	2310      	movs	r3, #16
 800490e:	77fb      	strb	r3, [r7, #31]
 8004910:	e10c      	b.n	8004b2c <UART_SetConfig+0x348>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a68      	ldr	r2, [pc, #416]	@ (8004ab8 <UART_SetConfig+0x2d4>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d120      	bne.n	800495e <UART_SetConfig+0x17a>
 800491c:	4b64      	ldr	r3, [pc, #400]	@ (8004ab0 <UART_SetConfig+0x2cc>)
 800491e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004922:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004926:	2b30      	cmp	r3, #48	@ 0x30
 8004928:	d013      	beq.n	8004952 <UART_SetConfig+0x16e>
 800492a:	2b30      	cmp	r3, #48	@ 0x30
 800492c:	d814      	bhi.n	8004958 <UART_SetConfig+0x174>
 800492e:	2b20      	cmp	r3, #32
 8004930:	d009      	beq.n	8004946 <UART_SetConfig+0x162>
 8004932:	2b20      	cmp	r3, #32
 8004934:	d810      	bhi.n	8004958 <UART_SetConfig+0x174>
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <UART_SetConfig+0x15c>
 800493a:	2b10      	cmp	r3, #16
 800493c:	d006      	beq.n	800494c <UART_SetConfig+0x168>
 800493e:	e00b      	b.n	8004958 <UART_SetConfig+0x174>
 8004940:	2300      	movs	r3, #0
 8004942:	77fb      	strb	r3, [r7, #31]
 8004944:	e0f2      	b.n	8004b2c <UART_SetConfig+0x348>
 8004946:	2302      	movs	r3, #2
 8004948:	77fb      	strb	r3, [r7, #31]
 800494a:	e0ef      	b.n	8004b2c <UART_SetConfig+0x348>
 800494c:	2304      	movs	r3, #4
 800494e:	77fb      	strb	r3, [r7, #31]
 8004950:	e0ec      	b.n	8004b2c <UART_SetConfig+0x348>
 8004952:	2308      	movs	r3, #8
 8004954:	77fb      	strb	r3, [r7, #31]
 8004956:	e0e9      	b.n	8004b2c <UART_SetConfig+0x348>
 8004958:	2310      	movs	r3, #16
 800495a:	77fb      	strb	r3, [r7, #31]
 800495c:	e0e6      	b.n	8004b2c <UART_SetConfig+0x348>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a56      	ldr	r2, [pc, #344]	@ (8004abc <UART_SetConfig+0x2d8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d120      	bne.n	80049aa <UART_SetConfig+0x1c6>
 8004968:	4b51      	ldr	r3, [pc, #324]	@ (8004ab0 <UART_SetConfig+0x2cc>)
 800496a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004972:	2bc0      	cmp	r3, #192	@ 0xc0
 8004974:	d013      	beq.n	800499e <UART_SetConfig+0x1ba>
 8004976:	2bc0      	cmp	r3, #192	@ 0xc0
 8004978:	d814      	bhi.n	80049a4 <UART_SetConfig+0x1c0>
 800497a:	2b80      	cmp	r3, #128	@ 0x80
 800497c:	d009      	beq.n	8004992 <UART_SetConfig+0x1ae>
 800497e:	2b80      	cmp	r3, #128	@ 0x80
 8004980:	d810      	bhi.n	80049a4 <UART_SetConfig+0x1c0>
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <UART_SetConfig+0x1a8>
 8004986:	2b40      	cmp	r3, #64	@ 0x40
 8004988:	d006      	beq.n	8004998 <UART_SetConfig+0x1b4>
 800498a:	e00b      	b.n	80049a4 <UART_SetConfig+0x1c0>
 800498c:	2300      	movs	r3, #0
 800498e:	77fb      	strb	r3, [r7, #31]
 8004990:	e0cc      	b.n	8004b2c <UART_SetConfig+0x348>
 8004992:	2302      	movs	r3, #2
 8004994:	77fb      	strb	r3, [r7, #31]
 8004996:	e0c9      	b.n	8004b2c <UART_SetConfig+0x348>
 8004998:	2304      	movs	r3, #4
 800499a:	77fb      	strb	r3, [r7, #31]
 800499c:	e0c6      	b.n	8004b2c <UART_SetConfig+0x348>
 800499e:	2308      	movs	r3, #8
 80049a0:	77fb      	strb	r3, [r7, #31]
 80049a2:	e0c3      	b.n	8004b2c <UART_SetConfig+0x348>
 80049a4:	2310      	movs	r3, #16
 80049a6:	77fb      	strb	r3, [r7, #31]
 80049a8:	e0c0      	b.n	8004b2c <UART_SetConfig+0x348>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a44      	ldr	r2, [pc, #272]	@ (8004ac0 <UART_SetConfig+0x2dc>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d125      	bne.n	8004a00 <UART_SetConfig+0x21c>
 80049b4:	4b3e      	ldr	r3, [pc, #248]	@ (8004ab0 <UART_SetConfig+0x2cc>)
 80049b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049c2:	d017      	beq.n	80049f4 <UART_SetConfig+0x210>
 80049c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049c8:	d817      	bhi.n	80049fa <UART_SetConfig+0x216>
 80049ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049ce:	d00b      	beq.n	80049e8 <UART_SetConfig+0x204>
 80049d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049d4:	d811      	bhi.n	80049fa <UART_SetConfig+0x216>
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <UART_SetConfig+0x1fe>
 80049da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049de:	d006      	beq.n	80049ee <UART_SetConfig+0x20a>
 80049e0:	e00b      	b.n	80049fa <UART_SetConfig+0x216>
 80049e2:	2300      	movs	r3, #0
 80049e4:	77fb      	strb	r3, [r7, #31]
 80049e6:	e0a1      	b.n	8004b2c <UART_SetConfig+0x348>
 80049e8:	2302      	movs	r3, #2
 80049ea:	77fb      	strb	r3, [r7, #31]
 80049ec:	e09e      	b.n	8004b2c <UART_SetConfig+0x348>
 80049ee:	2304      	movs	r3, #4
 80049f0:	77fb      	strb	r3, [r7, #31]
 80049f2:	e09b      	b.n	8004b2c <UART_SetConfig+0x348>
 80049f4:	2308      	movs	r3, #8
 80049f6:	77fb      	strb	r3, [r7, #31]
 80049f8:	e098      	b.n	8004b2c <UART_SetConfig+0x348>
 80049fa:	2310      	movs	r3, #16
 80049fc:	77fb      	strb	r3, [r7, #31]
 80049fe:	e095      	b.n	8004b2c <UART_SetConfig+0x348>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a2f      	ldr	r2, [pc, #188]	@ (8004ac4 <UART_SetConfig+0x2e0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d125      	bne.n	8004a56 <UART_SetConfig+0x272>
 8004a0a:	4b29      	ldr	r3, [pc, #164]	@ (8004ab0 <UART_SetConfig+0x2cc>)
 8004a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a10:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a18:	d017      	beq.n	8004a4a <UART_SetConfig+0x266>
 8004a1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a1e:	d817      	bhi.n	8004a50 <UART_SetConfig+0x26c>
 8004a20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a24:	d00b      	beq.n	8004a3e <UART_SetConfig+0x25a>
 8004a26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a2a:	d811      	bhi.n	8004a50 <UART_SetConfig+0x26c>
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <UART_SetConfig+0x254>
 8004a30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a34:	d006      	beq.n	8004a44 <UART_SetConfig+0x260>
 8004a36:	e00b      	b.n	8004a50 <UART_SetConfig+0x26c>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	77fb      	strb	r3, [r7, #31]
 8004a3c:	e076      	b.n	8004b2c <UART_SetConfig+0x348>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	77fb      	strb	r3, [r7, #31]
 8004a42:	e073      	b.n	8004b2c <UART_SetConfig+0x348>
 8004a44:	2304      	movs	r3, #4
 8004a46:	77fb      	strb	r3, [r7, #31]
 8004a48:	e070      	b.n	8004b2c <UART_SetConfig+0x348>
 8004a4a:	2308      	movs	r3, #8
 8004a4c:	77fb      	strb	r3, [r7, #31]
 8004a4e:	e06d      	b.n	8004b2c <UART_SetConfig+0x348>
 8004a50:	2310      	movs	r3, #16
 8004a52:	77fb      	strb	r3, [r7, #31]
 8004a54:	e06a      	b.n	8004b2c <UART_SetConfig+0x348>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac8 <UART_SetConfig+0x2e4>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d138      	bne.n	8004ad2 <UART_SetConfig+0x2ee>
 8004a60:	4b13      	ldr	r3, [pc, #76]	@ (8004ab0 <UART_SetConfig+0x2cc>)
 8004a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a66:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004a6a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a6e:	d017      	beq.n	8004aa0 <UART_SetConfig+0x2bc>
 8004a70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a74:	d82a      	bhi.n	8004acc <UART_SetConfig+0x2e8>
 8004a76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a7a:	d00b      	beq.n	8004a94 <UART_SetConfig+0x2b0>
 8004a7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a80:	d824      	bhi.n	8004acc <UART_SetConfig+0x2e8>
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <UART_SetConfig+0x2aa>
 8004a86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a8a:	d006      	beq.n	8004a9a <UART_SetConfig+0x2b6>
 8004a8c:	e01e      	b.n	8004acc <UART_SetConfig+0x2e8>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	77fb      	strb	r3, [r7, #31]
 8004a92:	e04b      	b.n	8004b2c <UART_SetConfig+0x348>
 8004a94:	2302      	movs	r3, #2
 8004a96:	77fb      	strb	r3, [r7, #31]
 8004a98:	e048      	b.n	8004b2c <UART_SetConfig+0x348>
 8004a9a:	2304      	movs	r3, #4
 8004a9c:	77fb      	strb	r3, [r7, #31]
 8004a9e:	e045      	b.n	8004b2c <UART_SetConfig+0x348>
 8004aa0:	2308      	movs	r3, #8
 8004aa2:	77fb      	strb	r3, [r7, #31]
 8004aa4:	e042      	b.n	8004b2c <UART_SetConfig+0x348>
 8004aa6:	bf00      	nop
 8004aa8:	efff69f3 	.word	0xefff69f3
 8004aac:	40011000 	.word	0x40011000
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	40004400 	.word	0x40004400
 8004ab8:	40004800 	.word	0x40004800
 8004abc:	40004c00 	.word	0x40004c00
 8004ac0:	40005000 	.word	0x40005000
 8004ac4:	40011400 	.word	0x40011400
 8004ac8:	40007800 	.word	0x40007800
 8004acc:	2310      	movs	r3, #16
 8004ace:	77fb      	strb	r3, [r7, #31]
 8004ad0:	e02c      	b.n	8004b2c <UART_SetConfig+0x348>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a72      	ldr	r2, [pc, #456]	@ (8004ca0 <UART_SetConfig+0x4bc>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d125      	bne.n	8004b28 <UART_SetConfig+0x344>
 8004adc:	4b71      	ldr	r3, [pc, #452]	@ (8004ca4 <UART_SetConfig+0x4c0>)
 8004ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ae2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004ae6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004aea:	d017      	beq.n	8004b1c <UART_SetConfig+0x338>
 8004aec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004af0:	d817      	bhi.n	8004b22 <UART_SetConfig+0x33e>
 8004af2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004af6:	d00b      	beq.n	8004b10 <UART_SetConfig+0x32c>
 8004af8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004afc:	d811      	bhi.n	8004b22 <UART_SetConfig+0x33e>
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <UART_SetConfig+0x326>
 8004b02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b06:	d006      	beq.n	8004b16 <UART_SetConfig+0x332>
 8004b08:	e00b      	b.n	8004b22 <UART_SetConfig+0x33e>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	77fb      	strb	r3, [r7, #31]
 8004b0e:	e00d      	b.n	8004b2c <UART_SetConfig+0x348>
 8004b10:	2302      	movs	r3, #2
 8004b12:	77fb      	strb	r3, [r7, #31]
 8004b14:	e00a      	b.n	8004b2c <UART_SetConfig+0x348>
 8004b16:	2304      	movs	r3, #4
 8004b18:	77fb      	strb	r3, [r7, #31]
 8004b1a:	e007      	b.n	8004b2c <UART_SetConfig+0x348>
 8004b1c:	2308      	movs	r3, #8
 8004b1e:	77fb      	strb	r3, [r7, #31]
 8004b20:	e004      	b.n	8004b2c <UART_SetConfig+0x348>
 8004b22:	2310      	movs	r3, #16
 8004b24:	77fb      	strb	r3, [r7, #31]
 8004b26:	e001      	b.n	8004b2c <UART_SetConfig+0x348>
 8004b28:	2310      	movs	r3, #16
 8004b2a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b34:	d15b      	bne.n	8004bee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004b36:	7ffb      	ldrb	r3, [r7, #31]
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d828      	bhi.n	8004b8e <UART_SetConfig+0x3aa>
 8004b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b44 <UART_SetConfig+0x360>)
 8004b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b42:	bf00      	nop
 8004b44:	08004b69 	.word	0x08004b69
 8004b48:	08004b71 	.word	0x08004b71
 8004b4c:	08004b79 	.word	0x08004b79
 8004b50:	08004b8f 	.word	0x08004b8f
 8004b54:	08004b7f 	.word	0x08004b7f
 8004b58:	08004b8f 	.word	0x08004b8f
 8004b5c:	08004b8f 	.word	0x08004b8f
 8004b60:	08004b8f 	.word	0x08004b8f
 8004b64:	08004b87 	.word	0x08004b87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b68:	f7fd fd62 	bl	8002630 <HAL_RCC_GetPCLK1Freq>
 8004b6c:	61b8      	str	r0, [r7, #24]
        break;
 8004b6e:	e013      	b.n	8004b98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b70:	f7fd fd72 	bl	8002658 <HAL_RCC_GetPCLK2Freq>
 8004b74:	61b8      	str	r0, [r7, #24]
        break;
 8004b76:	e00f      	b.n	8004b98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b78:	4b4b      	ldr	r3, [pc, #300]	@ (8004ca8 <UART_SetConfig+0x4c4>)
 8004b7a:	61bb      	str	r3, [r7, #24]
        break;
 8004b7c:	e00c      	b.n	8004b98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b7e:	f7fd fc47 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 8004b82:	61b8      	str	r0, [r7, #24]
        break;
 8004b84:	e008      	b.n	8004b98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b8a:	61bb      	str	r3, [r7, #24]
        break;
 8004b8c:	e004      	b.n	8004b98 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	77bb      	strb	r3, [r7, #30]
        break;
 8004b96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d074      	beq.n	8004c88 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	005a      	lsls	r2, r3, #1
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	085b      	lsrs	r3, r3, #1
 8004ba8:	441a      	add	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	2b0f      	cmp	r3, #15
 8004bb8:	d916      	bls.n	8004be8 <UART_SetConfig+0x404>
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bc0:	d212      	bcs.n	8004be8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	f023 030f 	bic.w	r3, r3, #15
 8004bca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	085b      	lsrs	r3, r3, #1
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	89fb      	ldrh	r3, [r7, #14]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	89fa      	ldrh	r2, [r7, #14]
 8004be4:	60da      	str	r2, [r3, #12]
 8004be6:	e04f      	b.n	8004c88 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	77bb      	strb	r3, [r7, #30]
 8004bec:	e04c      	b.n	8004c88 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bee:	7ffb      	ldrb	r3, [r7, #31]
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d828      	bhi.n	8004c46 <UART_SetConfig+0x462>
 8004bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bfc <UART_SetConfig+0x418>)
 8004bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfa:	bf00      	nop
 8004bfc:	08004c21 	.word	0x08004c21
 8004c00:	08004c29 	.word	0x08004c29
 8004c04:	08004c31 	.word	0x08004c31
 8004c08:	08004c47 	.word	0x08004c47
 8004c0c:	08004c37 	.word	0x08004c37
 8004c10:	08004c47 	.word	0x08004c47
 8004c14:	08004c47 	.word	0x08004c47
 8004c18:	08004c47 	.word	0x08004c47
 8004c1c:	08004c3f 	.word	0x08004c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c20:	f7fd fd06 	bl	8002630 <HAL_RCC_GetPCLK1Freq>
 8004c24:	61b8      	str	r0, [r7, #24]
        break;
 8004c26:	e013      	b.n	8004c50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c28:	f7fd fd16 	bl	8002658 <HAL_RCC_GetPCLK2Freq>
 8004c2c:	61b8      	str	r0, [r7, #24]
        break;
 8004c2e:	e00f      	b.n	8004c50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c30:	4b1d      	ldr	r3, [pc, #116]	@ (8004ca8 <UART_SetConfig+0x4c4>)
 8004c32:	61bb      	str	r3, [r7, #24]
        break;
 8004c34:	e00c      	b.n	8004c50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c36:	f7fd fbeb 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 8004c3a:	61b8      	str	r0, [r7, #24]
        break;
 8004c3c:	e008      	b.n	8004c50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c42:	61bb      	str	r3, [r7, #24]
        break;
 8004c44:	e004      	b.n	8004c50 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	77bb      	strb	r3, [r7, #30]
        break;
 8004c4e:	bf00      	nop
    }

    if (pclk != 0U)
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d018      	beq.n	8004c88 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	085a      	lsrs	r2, r3, #1
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	441a      	add	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	2b0f      	cmp	r3, #15
 8004c6e:	d909      	bls.n	8004c84 <UART_SetConfig+0x4a0>
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c76:	d205      	bcs.n	8004c84 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	60da      	str	r2, [r3, #12]
 8004c82:	e001      	b.n	8004c88 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004c94:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3720      	adds	r7, #32
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40007c00 	.word	0x40007c00
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	00f42400 	.word	0x00f42400

08004cac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1e:	f003 0308 	and.w	r3, r3, #8
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d40:	f003 0310 	and.w	r3, r3, #16
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d01a      	beq.n	8004dc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004daa:	d10a      	bne.n	8004dc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	605a      	str	r2, [r3, #4]
  }
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af02      	add	r7, sp, #8
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e00:	f7fc f864 	bl	8000ecc <HAL_GetTick>
 8004e04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d10e      	bne.n	8004e32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f831 	bl	8004e8a <UART_WaitOnFlagUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e027      	b.n	8004e82 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0304 	and.w	r3, r3, #4
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d10e      	bne.n	8004e5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f81b 	bl	8004e8a <UART_WaitOnFlagUntilTimeout>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e011      	b.n	8004e82 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2220      	movs	r2, #32
 8004e62:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b09c      	sub	sp, #112	@ 0x70
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	60f8      	str	r0, [r7, #12]
 8004e92:	60b9      	str	r1, [r7, #8]
 8004e94:	603b      	str	r3, [r7, #0]
 8004e96:	4613      	mov	r3, r2
 8004e98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e9a:	e0a7      	b.n	8004fec <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea2:	f000 80a3 	beq.w	8004fec <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea6:	f7fc f811 	bl	8000ecc <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d302      	bcc.n	8004ebc <UART_WaitOnFlagUntilTimeout+0x32>
 8004eb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d13f      	bne.n	8004f3c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ec4:	e853 3f00 	ldrex	r3, [r3]
 8004ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004eca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ecc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004ed0:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004eda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004edc:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ede:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004ee0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004ee2:	e841 2300 	strex	r3, r2, [r1]
 8004ee6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004ee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1e6      	bne.n	8004ebc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3308      	adds	r3, #8
 8004ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ef8:	e853 3f00 	ldrex	r3, [r3]
 8004efc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f00:	f023 0301 	bic.w	r3, r3, #1
 8004f04:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3308      	adds	r3, #8
 8004f0c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004f0e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004f10:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f12:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f16:	e841 2300 	strex	r3, r2, [r1]
 8004f1a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004f1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1e5      	bne.n	8004eee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2220      	movs	r2, #32
 8004f26:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e068      	b.n	800500e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0304 	and.w	r3, r3, #4
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d050      	beq.n	8004fec <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f58:	d148      	bne.n	8004fec <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f62:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f6c:	e853 3f00 	ldrex	r3, [r3]
 8004f70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f74:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004f78:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f82:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f84:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f86:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f8a:	e841 2300 	strex	r3, r2, [r1]
 8004f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1e6      	bne.n	8004f64 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	3308      	adds	r3, #8
 8004f9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	e853 3f00 	ldrex	r3, [r3]
 8004fa4:	613b      	str	r3, [r7, #16]
   return(result);
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f023 0301 	bic.w	r3, r3, #1
 8004fac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3308      	adds	r3, #8
 8004fb4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004fb6:	623a      	str	r2, [r7, #32]
 8004fb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fba:	69f9      	ldr	r1, [r7, #28]
 8004fbc:	6a3a      	ldr	r2, [r7, #32]
 8004fbe:	e841 2300 	strex	r3, r2, [r1]
 8004fc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1e5      	bne.n	8004f96 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2220      	movs	r2, #32
 8004fce:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e010      	b.n	800500e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	69da      	ldr	r2, [r3, #28]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	bf0c      	ite	eq
 8004ffc:	2301      	moveq	r3, #1
 8004ffe:	2300      	movne	r3, #0
 8005000:	b2db      	uxtb	r3, r3
 8005002:	461a      	mov	r2, r3
 8005004:	79fb      	ldrb	r3, [r7, #7]
 8005006:	429a      	cmp	r2, r3
 8005008:	f43f af48 	beq.w	8004e9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3770      	adds	r7, #112	@ 0x70
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005016:	b480      	push	{r7}
 8005018:	b095      	sub	sp, #84	@ 0x54
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005026:	e853 3f00 	ldrex	r3, [r3]
 800502a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800502c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005032:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	461a      	mov	r2, r3
 800503a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800503c:	643b      	str	r3, [r7, #64]	@ 0x40
 800503e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005040:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005042:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005044:	e841 2300 	strex	r3, r2, [r1]
 8005048:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800504a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1e6      	bne.n	800501e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3308      	adds	r3, #8
 8005056:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	e853 3f00 	ldrex	r3, [r3]
 800505e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	f023 0301 	bic.w	r3, r3, #1
 8005066:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	3308      	adds	r3, #8
 800506e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005070:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005072:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005074:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005076:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005078:	e841 2300 	strex	r3, r2, [r1]
 800507c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800507e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e5      	bne.n	8005050 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005088:	2b01      	cmp	r3, #1
 800508a:	d118      	bne.n	80050be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	e853 3f00 	ldrex	r3, [r3]
 8005098:	60bb      	str	r3, [r7, #8]
   return(result);
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	f023 0310 	bic.w	r3, r3, #16
 80050a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	461a      	mov	r2, r3
 80050a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050aa:	61bb      	str	r3, [r7, #24]
 80050ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ae:	6979      	ldr	r1, [r7, #20]
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	e841 2300 	strex	r3, r2, [r1]
 80050b6:	613b      	str	r3, [r7, #16]
   return(result);
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1e6      	bne.n	800508c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80050d2:	bf00      	nop
 80050d4:	3754      	adds	r7, #84	@ 0x54
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b084      	sub	sp, #16
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f7ff fb51 	bl	80047a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005102:	bf00      	nop
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800510a:	b480      	push	{r7}
 800510c:	b08f      	sub	sp, #60	@ 0x3c
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005116:	2b21      	cmp	r3, #33	@ 0x21
 8005118:	d14c      	bne.n	80051b4 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005120:	b29b      	uxth	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d132      	bne.n	800518c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	e853 3f00 	ldrex	r3, [r3]
 8005132:	61fb      	str	r3, [r7, #28]
   return(result);
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800513a:	637b      	str	r3, [r7, #52]	@ 0x34
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	461a      	mov	r2, r3
 8005142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005144:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005146:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005148:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800514a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800514c:	e841 2300 	strex	r3, r2, [r1]
 8005150:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1e6      	bne.n	8005126 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	e853 3f00 	ldrex	r3, [r3]
 8005164:	60bb      	str	r3, [r7, #8]
   return(result);
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800516c:	633b      	str	r3, [r7, #48]	@ 0x30
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005176:	61bb      	str	r3, [r7, #24]
 8005178:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517a:	6979      	ldr	r1, [r7, #20]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	e841 2300 	strex	r3, r2, [r1]
 8005182:	613b      	str	r3, [r7, #16]
   return(result);
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1e6      	bne.n	8005158 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800518a:	e013      	b.n	80051b4 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005190:	781a      	ldrb	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	3b01      	subs	r3, #1
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80051b4:	bf00      	nop
 80051b6:	373c      	adds	r7, #60	@ 0x3c
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b091      	sub	sp, #68	@ 0x44
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051cc:	2b21      	cmp	r3, #33	@ 0x21
 80051ce:	d151      	bne.n	8005274 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d132      	bne.n	8005242 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e4:	e853 3f00 	ldrex	r3, [r3]
 80051e8:	623b      	str	r3, [r7, #32]
   return(result);
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	461a      	mov	r2, r3
 80051f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80051fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005200:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005202:	e841 2300 	strex	r3, r2, [r1]
 8005206:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1e6      	bne.n	80051dc <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	e853 3f00 	ldrex	r3, [r3]
 800521a:	60fb      	str	r3, [r7, #12]
   return(result);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005222:	637b      	str	r3, [r7, #52]	@ 0x34
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	461a      	mov	r2, r3
 800522a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800522c:	61fb      	str	r3, [r7, #28]
 800522e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005230:	69b9      	ldr	r1, [r7, #24]
 8005232:	69fa      	ldr	r2, [r7, #28]
 8005234:	e841 2300 	strex	r3, r2, [r1]
 8005238:	617b      	str	r3, [r7, #20]
   return(result);
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1e6      	bne.n	800520e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005240:	e018      	b.n	8005274 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005246:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	461a      	mov	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005256:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800525c:	1c9a      	adds	r2, r3, #2
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005268:	b29b      	uxth	r3, r3
 800526a:	3b01      	subs	r3, #1
 800526c:	b29a      	uxth	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8005274:	bf00      	nop
 8005276:	3744      	adds	r7, #68	@ 0x44
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b088      	sub	sp, #32
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	e853 3f00 	ldrex	r3, [r3]
 8005294:	60bb      	str	r3, [r7, #8]
   return(result);
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800529c:	61fb      	str	r3, [r7, #28]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	461a      	mov	r2, r3
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	61bb      	str	r3, [r7, #24]
 80052a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052aa:	6979      	ldr	r1, [r7, #20]
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	e841 2300 	strex	r3, r2, [r1]
 80052b2:	613b      	str	r3, [r7, #16]
   return(result);
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1e6      	bne.n	8005288 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2220      	movs	r2, #32
 80052be:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7ff fa62 	bl	8004790 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052cc:	bf00      	nop
 80052ce:	3720      	adds	r7, #32
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <memset>:
 80052d4:	4402      	add	r2, r0
 80052d6:	4603      	mov	r3, r0
 80052d8:	4293      	cmp	r3, r2
 80052da:	d100      	bne.n	80052de <memset+0xa>
 80052dc:	4770      	bx	lr
 80052de:	f803 1b01 	strb.w	r1, [r3], #1
 80052e2:	e7f9      	b.n	80052d8 <memset+0x4>

080052e4 <__libc_init_array>:
 80052e4:	b570      	push	{r4, r5, r6, lr}
 80052e6:	4d0d      	ldr	r5, [pc, #52]	@ (800531c <__libc_init_array+0x38>)
 80052e8:	4c0d      	ldr	r4, [pc, #52]	@ (8005320 <__libc_init_array+0x3c>)
 80052ea:	1b64      	subs	r4, r4, r5
 80052ec:	10a4      	asrs	r4, r4, #2
 80052ee:	2600      	movs	r6, #0
 80052f0:	42a6      	cmp	r6, r4
 80052f2:	d109      	bne.n	8005308 <__libc_init_array+0x24>
 80052f4:	4d0b      	ldr	r5, [pc, #44]	@ (8005324 <__libc_init_array+0x40>)
 80052f6:	4c0c      	ldr	r4, [pc, #48]	@ (8005328 <__libc_init_array+0x44>)
 80052f8:	f000 f818 	bl	800532c <_init>
 80052fc:	1b64      	subs	r4, r4, r5
 80052fe:	10a4      	asrs	r4, r4, #2
 8005300:	2600      	movs	r6, #0
 8005302:	42a6      	cmp	r6, r4
 8005304:	d105      	bne.n	8005312 <__libc_init_array+0x2e>
 8005306:	bd70      	pop	{r4, r5, r6, pc}
 8005308:	f855 3b04 	ldr.w	r3, [r5], #4
 800530c:	4798      	blx	r3
 800530e:	3601      	adds	r6, #1
 8005310:	e7ee      	b.n	80052f0 <__libc_init_array+0xc>
 8005312:	f855 3b04 	ldr.w	r3, [r5], #4
 8005316:	4798      	blx	r3
 8005318:	3601      	adds	r6, #1
 800531a:	e7f2      	b.n	8005302 <__libc_init_array+0x1e>
 800531c:	0800536c 	.word	0x0800536c
 8005320:	0800536c 	.word	0x0800536c
 8005324:	0800536c 	.word	0x0800536c
 8005328:	08005370 	.word	0x08005370

0800532c <_init>:
 800532c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532e:	bf00      	nop
 8005330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005332:	bc08      	pop	{r3}
 8005334:	469e      	mov	lr, r3
 8005336:	4770      	bx	lr

08005338 <_fini>:
 8005338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533a:	bf00      	nop
 800533c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800533e:	bc08      	pop	{r3}
 8005340:	469e      	mov	lr, r3
 8005342:	4770      	bx	lr
