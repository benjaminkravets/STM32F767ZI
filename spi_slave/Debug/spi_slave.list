
spi_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005134  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800532c  0800532c  0000632c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800534c  0800534c  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  0800534c  0800534c  0000634c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005354  08005354  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005354  08005354  00006354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005358  08005358  00006358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800535c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000010  0800536c  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  0800536c  00007220  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c415  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b1f  00000000  00000000  00013453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  00014f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000074c  00000000  00000000  000158e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ab8  00000000  00000000  00016034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c8d5  00000000  00000000  0003caec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f15d0  00000000  00000000  000493c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013a991  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002674  00000000  00000000  0013a9d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0013d048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	08005314 	.word	0x08005314

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	08005314 	.word	0x08005314

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <HAL_SPI_RxCpltCallback>:
uint8_t transfer_bytes[TRANSFER_SIZE] = {0};
uint8_t receive_queued = 0;
uint8_t rcpts = 65;

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	//HAL_SPI_Receive_IT(&hspi2, transfer_bytes, TRANSFER_SIZE);
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000530:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000534:	4807      	ldr	r0, [pc, #28]	@ (8000554 <HAL_SPI_RxCpltCallback+0x2c>)
 8000536:	f001 fbb8 	bl	8001caa <HAL_GPIO_TogglePin>
	receive_queued = 1;
 800053a:	4b07      	ldr	r3, [pc, #28]	@ (8000558 <HAL_SPI_RxCpltCallback+0x30>)
 800053c:	2201      	movs	r2, #1
 800053e:	701a      	strb	r2, [r3, #0]
	rcpts += 1;
 8000540:	4b06      	ldr	r3, [pc, #24]	@ (800055c <HAL_SPI_RxCpltCallback+0x34>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	3301      	adds	r3, #1
 8000546:	b2da      	uxtb	r2, r3
 8000548:	4b04      	ldr	r3, [pc, #16]	@ (800055c <HAL_SPI_RxCpltCallback+0x34>)
 800054a:	701a      	strb	r2, [r3, #0]

}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40020400 	.word	0x40020400
 8000558:	20000218 	.word	0x20000218
 800055c:	20000000 	.word	0x20000000

08000560 <HAL_SPI_TxCpltCallback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	HAL_SPI_Receive_DMA(&hspi2, transfer_bytes, TRANSFER_SIZE);
 8000568:	2240      	movs	r2, #64	@ 0x40
 800056a:	4904      	ldr	r1, [pc, #16]	@ (800057c <HAL_SPI_TxCpltCallback+0x1c>)
 800056c:	4804      	ldr	r0, [pc, #16]	@ (8000580 <HAL_SPI_TxCpltCallback+0x20>)
 800056e:	f002 fe4d 	bl	800320c <HAL_SPI_Receive_DMA>

}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	200001d8 	.word	0x200001d8
 8000580:	2000002c 	.word	0x2000002c

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fc50 	bl	8000e2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f839 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f921 	bl	80007d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000596:	f000 f8f9 	bl	800078c <MX_DMA_Init>
  MX_SPI2_Init();
 800059a:	f000 f88f 	bl	80006bc <MX_SPI2_Init>
  MX_UART4_Init();
 800059e:	f000 f8c5 	bl	800072c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  HAL_SPI_Receive_DMA(&hspi2, transfer_bytes, TRANSFER_SIZE);
 80005a2:	2240      	movs	r2, #64	@ 0x40
 80005a4:	4913      	ldr	r1, [pc, #76]	@ (80005f4 <main+0x70>)
 80005a6:	4814      	ldr	r0, [pc, #80]	@ (80005f8 <main+0x74>)
 80005a8:	f002 fe30 	bl	800320c <HAL_SPI_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (receive_queued == 1){
 80005ac:	4b13      	ldr	r3, [pc, #76]	@ (80005fc <main+0x78>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d1fb      	bne.n	80005ac <main+0x28>

		  HAL_UART_Transmit_IT(&huart4, transfer_bytes, TRANSFER_SIZE);
 80005b4:	2240      	movs	r2, #64	@ 0x40
 80005b6:	490f      	ldr	r1, [pc, #60]	@ (80005f4 <main+0x70>)
 80005b8:	4811      	ldr	r0, [pc, #68]	@ (8000600 <main+0x7c>)
 80005ba:	f003 fd95 	bl	80040e8 <HAL_UART_Transmit_IT>
		  /*
		  if (HAL_SPI_Transmit(&hspi2, transfer_bytes, TRANSFER_SIZE, 1000) != HAL_OK){
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
		  } */

		  for(uint8_t i = 0; i < TRANSFER_SIZE; i++){
 80005be:	2300      	movs	r3, #0
 80005c0:	71fb      	strb	r3, [r7, #7]
 80005c2:	e00a      	b.n	80005da <main+0x56>
			  transfer_bytes[i] += 1;
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	4a0b      	ldr	r2, [pc, #44]	@ (80005f4 <main+0x70>)
 80005c8:	5cd2      	ldrb	r2, [r2, r3]
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	3201      	adds	r2, #1
 80005ce:	b2d1      	uxtb	r1, r2
 80005d0:	4a08      	ldr	r2, [pc, #32]	@ (80005f4 <main+0x70>)
 80005d2:	54d1      	strb	r1, [r2, r3]
		  for(uint8_t i = 0; i < TRANSFER_SIZE; i++){
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	3301      	adds	r3, #1
 80005d8:	71fb      	strb	r3, [r7, #7]
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80005de:	d9f1      	bls.n	80005c4 <main+0x40>
		  }

		  HAL_SPI_Transmit_DMA(&hspi2, transfer_bytes, TRANSFER_SIZE);
 80005e0:	2240      	movs	r2, #64	@ 0x40
 80005e2:	4904      	ldr	r1, [pc, #16]	@ (80005f4 <main+0x70>)
 80005e4:	4804      	ldr	r0, [pc, #16]	@ (80005f8 <main+0x74>)
 80005e6:	f002 fd21 	bl	800302c <HAL_SPI_Transmit_DMA>


		  receive_queued = 0;
 80005ea:	4b04      	ldr	r3, [pc, #16]	@ (80005fc <main+0x78>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	  if (receive_queued == 1){
 80005f0:	e7dc      	b.n	80005ac <main+0x28>
 80005f2:	bf00      	nop
 80005f4:	200001d8 	.word	0x200001d8
 80005f8:	2000002c 	.word	0x2000002c
 80005fc:	20000218 	.word	0x20000218
 8000600:	20000150 	.word	0x20000150

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	@ 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	2234      	movs	r2, #52	@ 0x34
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f004 fe52 	bl	80052bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 0308 	add.w	r3, r7, #8
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	4b22      	ldr	r3, [pc, #136]	@ (80006b4 <SystemClock_Config+0xb0>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062c:	4a21      	ldr	r2, [pc, #132]	@ (80006b4 <SystemClock_Config+0xb0>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	@ 0x40
 8000634:	4b1f      	ldr	r3, [pc, #124]	@ (80006b4 <SystemClock_Config+0xb0>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000640:	4b1d      	ldr	r3, [pc, #116]	@ (80006b8 <SystemClock_Config+0xb4>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000648:	4a1b      	ldr	r2, [pc, #108]	@ (80006b8 <SystemClock_Config+0xb4>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b19      	ldr	r3, [pc, #100]	@ (80006b8 <SystemClock_Config+0xb4>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000658:	603b      	str	r3, [r7, #0]
 800065a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065c:	2302      	movs	r3, #2
 800065e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	2310      	movs	r3, #16
 8000666:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000668:	2300      	movs	r3, #0
 800066a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fb35 	bl	8001ce0 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800067c:	f000 f9c2 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000690:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f001 fdcd 	bl	800223c <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80006a8:	f000 f9ac 	bl	8000a04 <Error_Handler>
  }
}
 80006ac:	bf00      	nop
 80006ae:	3750      	adds	r7, #80	@ 0x50
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006c0:	4b18      	ldr	r3, [pc, #96]	@ (8000724 <MX_SPI2_Init+0x68>)
 80006c2:	4a19      	ldr	r2, [pc, #100]	@ (8000728 <MX_SPI2_Init+0x6c>)
 80006c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80006c6:	4b17      	ldr	r3, [pc, #92]	@ (8000724 <MX_SPI2_Init+0x68>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006cc:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <MX_SPI2_Init+0x68>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d2:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <MX_SPI2_Init+0x68>)
 80006d4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80006d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006da:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <MX_SPI2_Init+0x68>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e0:	4b10      	ldr	r3, [pc, #64]	@ (8000724 <MX_SPI2_Init+0x68>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80006e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <MX_SPI2_Init+0x68>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000724 <MX_SPI2_Init+0x68>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <MX_SPI2_Init+0x68>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000724 <MX_SPI2_Init+0x68>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80006fe:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <MX_SPI2_Init+0x68>)
 8000700:	2207      	movs	r2, #7
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000704:	4b07      	ldr	r3, [pc, #28]	@ (8000724 <MX_SPI2_Init+0x68>)
 8000706:	2200      	movs	r2, #0
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800070a:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <MX_SPI2_Init+0x68>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000710:	4804      	ldr	r0, [pc, #16]	@ (8000724 <MX_SPI2_Init+0x68>)
 8000712:	f002 fbdf 	bl	8002ed4 <HAL_SPI_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 800071c:	f000 f972 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	2000002c 	.word	0x2000002c
 8000728:	40003800 	.word	0x40003800

0800072c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000730:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <MX_UART4_Init+0x58>)
 8000732:	4a15      	ldr	r2, [pc, #84]	@ (8000788 <MX_UART4_Init+0x5c>)
 8000734:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000736:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <MX_UART4_Init+0x58>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <MX_UART4_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <MX_UART4_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <MX_UART4_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <MX_UART4_Init+0x58>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <MX_UART4_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <MX_UART4_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000762:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <MX_UART4_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <MX_UART4_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	@ (8000784 <MX_UART4_Init+0x58>)
 8000770:	f003 fc6c 	bl	800404c <HAL_UART_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800077a:	f000 f943 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000150 	.word	0x20000150
 8000788:	40004c00 	.word	0x40004c00

0800078c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000792:	4b10      	ldr	r3, [pc, #64]	@ (80007d4 <MX_DMA_Init+0x48>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a0f      	ldr	r2, [pc, #60]	@ (80007d4 <MX_DMA_Init+0x48>)
 8000798:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <MX_DMA_Init+0x48>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	200c      	movs	r0, #12
 80007b0:	f000 fc75 	bl	800109e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80007b4:	200c      	movs	r0, #12
 80007b6:	f000 fc8e 	bl	80010d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	200f      	movs	r0, #15
 80007c0:	f000 fc6d 	bl	800109e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80007c4:	200f      	movs	r0, #15
 80007c6:	f000 fc86 	bl	80010d6 <HAL_NVIC_EnableIRQ>

}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08c      	sub	sp, #48	@ 0x30
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	4b7f      	ldr	r3, [pc, #508]	@ (80009ec <MX_GPIO_Init+0x214>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a7e      	ldr	r2, [pc, #504]	@ (80009ec <MX_GPIO_Init+0x214>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b7c      	ldr	r3, [pc, #496]	@ (80009ec <MX_GPIO_Init+0x214>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	61bb      	str	r3, [r7, #24]
 8000804:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	4b79      	ldr	r3, [pc, #484]	@ (80009ec <MX_GPIO_Init+0x214>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a78      	ldr	r2, [pc, #480]	@ (80009ec <MX_GPIO_Init+0x214>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b76      	ldr	r3, [pc, #472]	@ (80009ec <MX_GPIO_Init+0x214>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b73      	ldr	r3, [pc, #460]	@ (80009ec <MX_GPIO_Init+0x214>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a72      	ldr	r2, [pc, #456]	@ (80009ec <MX_GPIO_Init+0x214>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b70      	ldr	r3, [pc, #448]	@ (80009ec <MX_GPIO_Init+0x214>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	4b6d      	ldr	r3, [pc, #436]	@ (80009ec <MX_GPIO_Init+0x214>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a6c      	ldr	r2, [pc, #432]	@ (80009ec <MX_GPIO_Init+0x214>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b6a      	ldr	r3, [pc, #424]	@ (80009ec <MX_GPIO_Init+0x214>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084e:	4b67      	ldr	r3, [pc, #412]	@ (80009ec <MX_GPIO_Init+0x214>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a66      	ldr	r2, [pc, #408]	@ (80009ec <MX_GPIO_Init+0x214>)
 8000854:	f043 0308 	orr.w	r3, r3, #8
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b64      	ldr	r3, [pc, #400]	@ (80009ec <MX_GPIO_Init+0x214>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0308 	and.w	r3, r3, #8
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000866:	4b61      	ldr	r3, [pc, #388]	@ (80009ec <MX_GPIO_Init+0x214>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a60      	ldr	r2, [pc, #384]	@ (80009ec <MX_GPIO_Init+0x214>)
 800086c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b5e      	ldr	r3, [pc, #376]	@ (80009ec <MX_GPIO_Init+0x214>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000884:	485a      	ldr	r0, [pc, #360]	@ (80009f0 <MX_GPIO_Init+0x218>)
 8000886:	f001 f9f7 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2140      	movs	r1, #64	@ 0x40
 800088e:	4859      	ldr	r0, [pc, #356]	@ (80009f4 <MX_GPIO_Init+0x21c>)
 8000890:	f001 f9f2 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000894:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800089a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800089e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	4619      	mov	r1, r3
 80008aa:	4853      	ldr	r0, [pc, #332]	@ (80009f8 <MX_GPIO_Init+0x220>)
 80008ac:	f001 f838 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008b0:	2332      	movs	r3, #50	@ 0x32
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	2302      	movs	r3, #2
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008bc:	2303      	movs	r3, #3
 80008be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008c0:	230b      	movs	r3, #11
 80008c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	484b      	ldr	r0, [pc, #300]	@ (80009f8 <MX_GPIO_Init+0x220>)
 80008cc:	f001 f828 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008d0:	2386      	movs	r3, #134	@ 0x86
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008dc:	2303      	movs	r3, #3
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008e0:	230b      	movs	r3, #11
 80008e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4844      	ldr	r0, [pc, #272]	@ (80009fc <MX_GPIO_Init+0x224>)
 80008ec:	f001 f818 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008f0:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	4839      	ldr	r0, [pc, #228]	@ (80009f0 <MX_GPIO_Init+0x218>)
 800090a:	f001 f809 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800090e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000920:	230b      	movs	r3, #11
 8000922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4831      	ldr	r0, [pc, #196]	@ (80009f0 <MX_GPIO_Init+0x218>)
 800092c:	f000 fff8 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000930:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000942:	2307      	movs	r3, #7
 8000944:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	482c      	ldr	r0, [pc, #176]	@ (8000a00 <MX_GPIO_Init+0x228>)
 800094e:	f000 ffe7 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000952:	2340      	movs	r3, #64	@ 0x40
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000956:	2301      	movs	r3, #1
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	4822      	ldr	r0, [pc, #136]	@ (80009f4 <MX_GPIO_Init+0x21c>)
 800096a:	f000 ffd9 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800096e:	2380      	movs	r3, #128	@ 0x80
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	481c      	ldr	r0, [pc, #112]	@ (80009f4 <MX_GPIO_Init+0x21c>)
 8000982:	f000 ffcd 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000986:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000998:	230a      	movs	r3, #10
 800099a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	4816      	ldr	r0, [pc, #88]	@ (80009fc <MX_GPIO_Init+0x224>)
 80009a4:	f000 ffbc 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ae:	2300      	movs	r3, #0
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	480f      	ldr	r0, [pc, #60]	@ (80009fc <MX_GPIO_Init+0x224>)
 80009be:	f000 ffaf 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009c2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d0:	2303      	movs	r3, #3
 80009d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009d4:	230b      	movs	r3, #11
 80009d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <MX_GPIO_Init+0x21c>)
 80009e0:	f000 ff9e 	bl	8001920 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e4:	bf00      	nop
 80009e6:	3730      	adds	r7, #48	@ 0x30
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40020400 	.word	0x40020400
 80009f4:	40021800 	.word	0x40021800
 80009f8:	40020800 	.word	0x40020800
 80009fc:	40020000 	.word	0x40020000
 8000a00:	40020c00 	.word	0x40020c00

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <Error_Handler+0x8>

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a22:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a32:	4a08      	ldr	r2, [pc, #32]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800

08000a58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	@ 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a57      	ldr	r2, [pc, #348]	@ (8000bd4 <HAL_SPI_MspInit+0x17c>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	f040 80a8 	bne.w	8000bcc <HAL_SPI_MspInit+0x174>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a7c:	4b56      	ldr	r3, [pc, #344]	@ (8000bd8 <HAL_SPI_MspInit+0x180>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a80:	4a55      	ldr	r2, [pc, #340]	@ (8000bd8 <HAL_SPI_MspInit+0x180>)
 8000a82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a88:	4b53      	ldr	r3, [pc, #332]	@ (8000bd8 <HAL_SPI_MspInit+0x180>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a94:	4b50      	ldr	r3, [pc, #320]	@ (8000bd8 <HAL_SPI_MspInit+0x180>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a98:	4a4f      	ldr	r2, [pc, #316]	@ (8000bd8 <HAL_SPI_MspInit+0x180>)
 8000a9a:	f043 0304 	orr.w	r3, r3, #4
 8000a9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa0:	4b4d      	ldr	r3, [pc, #308]	@ (8000bd8 <HAL_SPI_MspInit+0x180>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa4:	f003 0304 	and.w	r3, r3, #4
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aac:	4b4a      	ldr	r3, [pc, #296]	@ (8000bd8 <HAL_SPI_MspInit+0x180>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab0:	4a49      	ldr	r2, [pc, #292]	@ (8000bd8 <HAL_SPI_MspInit+0x180>)
 8000ab2:	f043 0302 	orr.w	r3, r3, #2
 8000ab6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab8:	4b47      	ldr	r3, [pc, #284]	@ (8000bd8 <HAL_SPI_MspInit+0x180>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abc:	f003 0302 	and.w	r3, r3, #2
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ac4:	230c      	movs	r3, #12
 8000ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ad4:	2305      	movs	r3, #5
 8000ad6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	483f      	ldr	r0, [pc, #252]	@ (8000bdc <HAL_SPI_MspInit+0x184>)
 8000ae0:	f000 ff1e 	bl	8001920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000ae4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af2:	2303      	movs	r3, #3
 8000af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000af6:	2305      	movs	r3, #5
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	4837      	ldr	r0, [pc, #220]	@ (8000be0 <HAL_SPI_MspInit+0x188>)
 8000b02:	f000 ff0d 	bl	8001920 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8000b06:	4b37      	ldr	r3, [pc, #220]	@ (8000be4 <HAL_SPI_MspInit+0x18c>)
 8000b08:	4a37      	ldr	r2, [pc, #220]	@ (8000be8 <HAL_SPI_MspInit+0x190>)
 8000b0a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_9;
 8000b0c:	4b35      	ldr	r3, [pc, #212]	@ (8000be4 <HAL_SPI_MspInit+0x18c>)
 8000b0e:	f04f 5290 	mov.w	r2, #301989888	@ 0x12000000
 8000b12:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b14:	4b33      	ldr	r3, [pc, #204]	@ (8000be4 <HAL_SPI_MspInit+0x18c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b1a:	4b32      	ldr	r3, [pc, #200]	@ (8000be4 <HAL_SPI_MspInit+0x18c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b20:	4b30      	ldr	r3, [pc, #192]	@ (8000be4 <HAL_SPI_MspInit+0x18c>)
 8000b22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b26:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b28:	4b2e      	ldr	r3, [pc, #184]	@ (8000be4 <HAL_SPI_MspInit+0x18c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000be4 <HAL_SPI_MspInit+0x18c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000b34:	4b2b      	ldr	r3, [pc, #172]	@ (8000be4 <HAL_SPI_MspInit+0x18c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000be4 <HAL_SPI_MspInit+0x18c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b40:	4b28      	ldr	r3, [pc, #160]	@ (8000be4 <HAL_SPI_MspInit+0x18c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000b46:	4827      	ldr	r0, [pc, #156]	@ (8000be4 <HAL_SPI_MspInit+0x18c>)
 8000b48:	f000 fae0 	bl	800110c <HAL_DMA_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_SPI_MspInit+0xfe>
    {
      Error_Handler();
 8000b52:	f7ff ff57 	bl	8000a04 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a22      	ldr	r2, [pc, #136]	@ (8000be4 <HAL_SPI_MspInit+0x18c>)
 8000b5a:	659a      	str	r2, [r3, #88]	@ 0x58
 8000b5c:	4a21      	ldr	r2, [pc, #132]	@ (8000be4 <HAL_SPI_MspInit+0x18c>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000b62:	4b22      	ldr	r3, [pc, #136]	@ (8000bec <HAL_SPI_MspInit+0x194>)
 8000b64:	4a22      	ldr	r2, [pc, #136]	@ (8000bf0 <HAL_SPI_MspInit+0x198>)
 8000b66:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000b68:	4b20      	ldr	r3, [pc, #128]	@ (8000bec <HAL_SPI_MspInit+0x194>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bec <HAL_SPI_MspInit+0x194>)
 8000b70:	2240      	movs	r2, #64	@ 0x40
 8000b72:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b74:	4b1d      	ldr	r3, [pc, #116]	@ (8000bec <HAL_SPI_MspInit+0x194>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bec <HAL_SPI_MspInit+0x194>)
 8000b7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b80:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b82:	4b1a      	ldr	r3, [pc, #104]	@ (8000bec <HAL_SPI_MspInit+0x194>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b88:	4b18      	ldr	r3, [pc, #96]	@ (8000bec <HAL_SPI_MspInit+0x194>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000b8e:	4b17      	ldr	r3, [pc, #92]	@ (8000bec <HAL_SPI_MspInit+0x194>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b94:	4b15      	ldr	r3, [pc, #84]	@ (8000bec <HAL_SPI_MspInit+0x194>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b9a:	4b14      	ldr	r3, [pc, #80]	@ (8000bec <HAL_SPI_MspInit+0x194>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000ba0:	4812      	ldr	r0, [pc, #72]	@ (8000bec <HAL_SPI_MspInit+0x194>)
 8000ba2:	f000 fab3 	bl	800110c <HAL_DMA_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8000bac:	f7ff ff2a 	bl	8000a04 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	@ (8000bec <HAL_SPI_MspInit+0x194>)
 8000bb4:	655a      	str	r2, [r3, #84]	@ 0x54
 8000bb6:	4a0d      	ldr	r2, [pc, #52]	@ (8000bec <HAL_SPI_MspInit+0x194>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	2024      	movs	r0, #36	@ 0x24
 8000bc2:	f000 fa6c 	bl	800109e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000bc6:	2024      	movs	r0, #36	@ 0x24
 8000bc8:	f000 fa85 	bl	80010d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000bcc:	bf00      	nop
 8000bce:	3728      	adds	r7, #40	@ 0x28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40003800 	.word	0x40003800
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020800 	.word	0x40020800
 8000be0:	40020400 	.word	0x40020400
 8000be4:	20000090 	.word	0x20000090
 8000be8:	40026028 	.word	0x40026028
 8000bec:	200000f0 	.word	0x200000f0
 8000bf0:	40026070 	.word	0x40026070

08000bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b0ae      	sub	sp, #184	@ 0xb8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2290      	movs	r2, #144	@ 0x90
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f004 fb51 	bl	80052bc <memset>
  if(huart->Instance==UART4)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a36      	ldr	r2, [pc, #216]	@ (8000cf8 <HAL_UART_MspInit+0x104>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d165      	bne.n	8000cf0 <HAL_UART_MspInit+0xfc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000c24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c28:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 fd26 	bl	8002684 <HAL_RCCEx_PeriphCLKConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c3e:	f7ff fee1 	bl	8000a04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c42:	4b2e      	ldr	r3, [pc, #184]	@ (8000cfc <HAL_UART_MspInit+0x108>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c46:	4a2d      	ldr	r2, [pc, #180]	@ (8000cfc <HAL_UART_MspInit+0x108>)
 8000c48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000cfc <HAL_UART_MspInit+0x108>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	4b28      	ldr	r3, [pc, #160]	@ (8000cfc <HAL_UART_MspInit+0x108>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a27      	ldr	r2, [pc, #156]	@ (8000cfc <HAL_UART_MspInit+0x108>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c66:	4b25      	ldr	r3, [pc, #148]	@ (8000cfc <HAL_UART_MspInit+0x108>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c72:	4b22      	ldr	r3, [pc, #136]	@ (8000cfc <HAL_UART_MspInit+0x108>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	4a21      	ldr	r2, [pc, #132]	@ (8000cfc <HAL_UART_MspInit+0x108>)
 8000c78:	f043 0304 	orr.w	r3, r3, #4
 8000c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cfc <HAL_UART_MspInit+0x108>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	f003 0304 	and.w	r3, r3, #4
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ca2:	2308      	movs	r3, #8
 8000ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cac:	4619      	mov	r1, r3
 8000cae:	4814      	ldr	r0, [pc, #80]	@ (8000d00 <HAL_UART_MspInit+0x10c>)
 8000cb0:	f000 fe36 	bl	8001920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000cb4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000cb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000cce:	2308      	movs	r3, #8
 8000cd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cd8:	4619      	mov	r1, r3
 8000cda:	480a      	ldr	r0, [pc, #40]	@ (8000d04 <HAL_UART_MspInit+0x110>)
 8000cdc:	f000 fe20 	bl	8001920 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2034      	movs	r0, #52	@ 0x34
 8000ce6:	f000 f9da 	bl	800109e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000cea:	2034      	movs	r0, #52	@ 0x34
 8000cec:	f000 f9f3 	bl	80010d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8000cf0:	bf00      	nop
 8000cf2:	37b8      	adds	r7, #184	@ 0xb8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40004c00 	.word	0x40004c00
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020000 	.word	0x40020000
 8000d04:	40020800 	.word	0x40020800

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <NMI_Handler+0x4>

08000d10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <HardFault_Handler+0x4>

08000d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <MemManage_Handler+0x4>

08000d20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <BusFault_Handler+0x4>

08000d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <UsageFault_Handler+0x4>

08000d30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5e:	f000 f8a3 	bl	8000ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000d6c:	4802      	ldr	r0, [pc, #8]	@ (8000d78 <DMA1_Stream1_IRQHandler+0x10>)
 8000d6e:	f000 fb6d 	bl	800144c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000090 	.word	0x20000090

08000d7c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000d80:	4802      	ldr	r0, [pc, #8]	@ (8000d8c <DMA1_Stream4_IRQHandler+0x10>)
 8000d82:	f000 fb63 	bl	800144c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200000f0 	.word	0x200000f0

08000d90 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000d94:	4802      	ldr	r0, [pc, #8]	@ (8000da0 <SPI2_IRQHandler+0x10>)
 8000d96:	f002 fcdd 	bl	8003754 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2000002c 	.word	0x2000002c

08000da4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000da8:	4802      	ldr	r0, [pc, #8]	@ (8000db4 <UART4_IRQHandler+0x10>)
 8000daa:	f003 f9fb 	bl	80041a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000150 	.word	0x20000150

08000db8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <SystemInit+0x20>)
 8000dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dc2:	4a05      	ldr	r2, [pc, #20]	@ (8000dd8 <SystemInit+0x20>)
 8000dc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ddc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de0:	480d      	ldr	r0, [pc, #52]	@ (8000e18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000de2:	490e      	ldr	r1, [pc, #56]	@ (8000e1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000de4:	4a0e      	ldr	r2, [pc, #56]	@ (8000e20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de8:	e002      	b.n	8000df0 <LoopCopyDataInit>

08000dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dee:	3304      	adds	r3, #4

08000df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df4:	d3f9      	bcc.n	8000dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df6:	4a0b      	ldr	r2, [pc, #44]	@ (8000e24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000df8:	4c0b      	ldr	r4, [pc, #44]	@ (8000e28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dfc:	e001      	b.n	8000e02 <LoopFillZerobss>

08000dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e00:	3204      	adds	r2, #4

08000e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e04:	d3fb      	bcc.n	8000dfe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e06:	f7ff ffd7 	bl	8000db8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e0a:	f004 fa5f 	bl	80052cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0e:	f7ff fbb9 	bl	8000584 <main>
  bx  lr    
 8000e12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e14:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e1c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e20:	0800535c 	.word	0x0800535c
  ldr r2, =_sbss
 8000e24:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e28:	20000220 	.word	0x20000220

08000e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC_IRQHandler>

08000e2e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e32:	2003      	movs	r0, #3
 8000e34:	f000 f928 	bl	8001088 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f000 f805 	bl	8000e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e3e:	f7ff fde7 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e42:	2300      	movs	r3, #0
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e50:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <HAL_InitTick+0x54>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4b12      	ldr	r3, [pc, #72]	@ (8000ea0 <HAL_InitTick+0x58>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f943 	bl	80010f2 <HAL_SYSTICK_Config>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e00e      	b.n	8000e94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b0f      	cmp	r3, #15
 8000e7a:	d80a      	bhi.n	8000e92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	f000 f90b 	bl	800109e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e88:	4a06      	ldr	r2, [pc, #24]	@ (8000ea4 <HAL_InitTick+0x5c>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	e000      	b.n	8000e94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000004 	.word	0x20000004
 8000ea0:	2000000c 	.word	0x2000000c
 8000ea4:	20000008 	.word	0x20000008

08000ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <HAL_IncTick+0x20>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <HAL_IncTick+0x24>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a04      	ldr	r2, [pc, #16]	@ (8000ecc <HAL_IncTick+0x24>)
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	2000000c 	.word	0x2000000c
 8000ecc:	2000021c 	.word	0x2000021c

08000ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	@ (8000ee4 <HAL_GetTick+0x14>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	2000021c 	.word	0x2000021c

08000ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f28 <__NVIC_SetPriorityGrouping+0x40>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f04:	4013      	ands	r3, r2
 8000f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000f12:	4313      	orrs	r3, r2
 8000f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f16:	4a04      	ldr	r2, [pc, #16]	@ (8000f28 <__NVIC_SetPriorityGrouping+0x40>)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	60d3      	str	r3, [r2, #12]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00
 8000f2c:	05fa0000 	.word	0x05fa0000

08000f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f34:	4b04      	ldr	r3, [pc, #16]	@ (8000f48 <__NVIC_GetPriorityGrouping+0x18>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	f003 0307 	and.w	r3, r3, #7
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	db0b      	blt.n	8000f76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f003 021f 	and.w	r2, r3, #31
 8000f64:	4907      	ldr	r1, [pc, #28]	@ (8000f84 <__NVIC_EnableIRQ+0x38>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	095b      	lsrs	r3, r3, #5
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000e100 	.word	0xe000e100

08000f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	db0a      	blt.n	8000fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	490c      	ldr	r1, [pc, #48]	@ (8000fd4 <__NVIC_SetPriority+0x4c>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	0112      	lsls	r2, r2, #4
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	440b      	add	r3, r1
 8000fac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb0:	e00a      	b.n	8000fc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4908      	ldr	r1, [pc, #32]	@ (8000fd8 <__NVIC_SetPriority+0x50>)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 030f 	and.w	r3, r3, #15
 8000fbe:	3b04      	subs	r3, #4
 8000fc0:	0112      	lsls	r2, r2, #4
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	761a      	strb	r2, [r3, #24]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000e100 	.word	0xe000e100
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	@ 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f1c3 0307 	rsb	r3, r3, #7
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	bf28      	it	cs
 8000ffa:	2304      	movcs	r3, #4
 8000ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3304      	adds	r3, #4
 8001002:	2b06      	cmp	r3, #6
 8001004:	d902      	bls.n	800100c <NVIC_EncodePriority+0x30>
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3b03      	subs	r3, #3
 800100a:	e000      	b.n	800100e <NVIC_EncodePriority+0x32>
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	f04f 32ff 	mov.w	r2, #4294967295
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43da      	mvns	r2, r3
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	401a      	ands	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001024:	f04f 31ff 	mov.w	r1, #4294967295
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	43d9      	mvns	r1, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	4313      	orrs	r3, r2
         );
}
 8001036:	4618      	mov	r0, r3
 8001038:	3724      	adds	r7, #36	@ 0x24
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001054:	d301      	bcc.n	800105a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001056:	2301      	movs	r3, #1
 8001058:	e00f      	b.n	800107a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105a:	4a0a      	ldr	r2, [pc, #40]	@ (8001084 <SysTick_Config+0x40>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001062:	210f      	movs	r1, #15
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f7ff ff8e 	bl	8000f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800106c:	4b05      	ldr	r3, [pc, #20]	@ (8001084 <SysTick_Config+0x40>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001072:	4b04      	ldr	r3, [pc, #16]	@ (8001084 <SysTick_Config+0x40>)
 8001074:	2207      	movs	r2, #7
 8001076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	e000e010 	.word	0xe000e010

08001088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ff29 	bl	8000ee8 <__NVIC_SetPriorityGrouping>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800109e:	b580      	push	{r7, lr}
 80010a0:	b086      	sub	sp, #24
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4603      	mov	r3, r0
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
 80010aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b0:	f7ff ff3e 	bl	8000f30 <__NVIC_GetPriorityGrouping>
 80010b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	68b9      	ldr	r1, [r7, #8]
 80010ba:	6978      	ldr	r0, [r7, #20]
 80010bc:	f7ff ff8e 	bl	8000fdc <NVIC_EncodePriority>
 80010c0:	4602      	mov	r2, r0
 80010c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c6:	4611      	mov	r1, r2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff5d 	bl	8000f88 <__NVIC_SetPriority>
}
 80010ce:	bf00      	nop
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff31 	bl	8000f4c <__NVIC_EnableIRQ>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ffa2 	bl	8001044 <SysTick_Config>
 8001100:	4603      	mov	r3, r0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001118:	f7ff feda 	bl	8000ed0 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e099      	b.n	800125c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2202      	movs	r2, #2
 800112c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0201 	bic.w	r2, r2, #1
 8001146:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001148:	e00f      	b.n	800116a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800114a:	f7ff fec1 	bl	8000ed0 <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b05      	cmp	r3, #5
 8001156:	d908      	bls.n	800116a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2220      	movs	r2, #32
 800115c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2203      	movs	r2, #3
 8001162:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e078      	b.n	800125c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1e8      	bne.n	800114a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	4b38      	ldr	r3, [pc, #224]	@ (8001264 <HAL_DMA_Init+0x158>)
 8001184:	4013      	ands	r3, r2
 8001186:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001196:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c0:	2b04      	cmp	r3, #4
 80011c2:	d107      	bne.n	80011d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011cc:	4313      	orrs	r3, r2
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	f023 0307 	bic.w	r3, r3, #7
 80011ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	d117      	bne.n	800122e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	4313      	orrs	r3, r2
 8001206:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00e      	beq.n	800122e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 fb09 	bl	8001828 <DMA_CheckFifoParam>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d008      	beq.n	800122e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2240      	movs	r2, #64	@ 0x40
 8001220:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800122a:	2301      	movs	r3, #1
 800122c:	e016      	b.n	800125c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 fac0 	bl	80017bc <DMA_CalcBaseAndBitshift>
 800123c:	4603      	mov	r3, r0
 800123e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001244:	223f      	movs	r2, #63	@ 0x3f
 8001246:	409a      	lsls	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2201      	movs	r2, #1
 8001256:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	e010803f 	.word	0xe010803f

08001268 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001276:	2300      	movs	r3, #0
 8001278:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001286:	2b01      	cmp	r3, #1
 8001288:	d101      	bne.n	800128e <HAL_DMA_Start_IT+0x26>
 800128a:	2302      	movs	r3, #2
 800128c:	e048      	b.n	8001320 <HAL_DMA_Start_IT+0xb8>
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2201      	movs	r2, #1
 8001292:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d137      	bne.n	8001312 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2202      	movs	r2, #2
 80012a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2200      	movs	r2, #0
 80012ae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f000 fa52 	bl	8001760 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012c0:	223f      	movs	r2, #63	@ 0x3f
 80012c2:	409a      	lsls	r2, r3
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 0216 	orr.w	r2, r2, #22
 80012d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	695a      	ldr	r2, [r3, #20]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012e6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d007      	beq.n	8001300 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 0208 	orr.w	r2, r2, #8
 80012fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0201 	orr.w	r2, r2, #1
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	e005      	b.n	800131e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800131a:	2302      	movs	r3, #2
 800131c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800131e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001334:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001336:	f7ff fdcb 	bl	8000ed0 <HAL_GetTick>
 800133a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d008      	beq.n	800135a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2280      	movs	r2, #128	@ 0x80
 800134c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e052      	b.n	8001400 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 0216 	bic.w	r2, r2, #22
 8001368:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	695a      	ldr	r2, [r3, #20]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001378:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137e:	2b00      	cmp	r3, #0
 8001380:	d103      	bne.n	800138a <HAL_DMA_Abort+0x62>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001386:	2b00      	cmp	r3, #0
 8001388:	d007      	beq.n	800139a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 0208 	bic.w	r2, r2, #8
 8001398:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0201 	bic.w	r2, r2, #1
 80013a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013aa:	e013      	b.n	80013d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013ac:	f7ff fd90 	bl	8000ed0 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b05      	cmp	r3, #5
 80013b8:	d90c      	bls.n	80013d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2220      	movs	r2, #32
 80013be:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2203      	movs	r2, #3
 80013c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e015      	b.n	8001400 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1e4      	bne.n	80013ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013e6:	223f      	movs	r2, #63	@ 0x3f
 80013e8:	409a      	lsls	r2, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d004      	beq.n	8001426 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2280      	movs	r2, #128	@ 0x80
 8001420:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e00c      	b.n	8001440 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2205      	movs	r2, #5
 800142a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0201 	bic.w	r2, r2, #1
 800143c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001458:	4b8e      	ldr	r3, [pc, #568]	@ (8001694 <HAL_DMA_IRQHandler+0x248>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a8e      	ldr	r2, [pc, #568]	@ (8001698 <HAL_DMA_IRQHandler+0x24c>)
 800145e:	fba2 2303 	umull	r2, r3, r2, r3
 8001462:	0a9b      	lsrs	r3, r3, #10
 8001464:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800146a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001476:	2208      	movs	r2, #8
 8001478:	409a      	lsls	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	4013      	ands	r3, r2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d01a      	beq.n	80014b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	2b00      	cmp	r3, #0
 800148e:	d013      	beq.n	80014b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0204 	bic.w	r2, r2, #4
 800149e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014a4:	2208      	movs	r2, #8
 80014a6:	409a      	lsls	r2, r3
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014b0:	f043 0201 	orr.w	r2, r3, #1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014bc:	2201      	movs	r2, #1
 80014be:	409a      	lsls	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4013      	ands	r3, r2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d012      	beq.n	80014ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00b      	beq.n	80014ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014da:	2201      	movs	r2, #1
 80014dc:	409a      	lsls	r2, r3
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014e6:	f043 0202 	orr.w	r2, r3, #2
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014f2:	2204      	movs	r2, #4
 80014f4:	409a      	lsls	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d012      	beq.n	8001524 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00b      	beq.n	8001524 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001510:	2204      	movs	r2, #4
 8001512:	409a      	lsls	r2, r3
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800151c:	f043 0204 	orr.w	r2, r3, #4
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001528:	2210      	movs	r2, #16
 800152a:	409a      	lsls	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4013      	ands	r3, r2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d043      	beq.n	80015bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d03c      	beq.n	80015bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001546:	2210      	movs	r2, #16
 8001548:	409a      	lsls	r2, r3
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d018      	beq.n	800158e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d108      	bne.n	800157c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	2b00      	cmp	r3, #0
 8001570:	d024      	beq.n	80015bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	4798      	blx	r3
 800157a:	e01f      	b.n	80015bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001580:	2b00      	cmp	r3, #0
 8001582:	d01b      	beq.n	80015bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	4798      	blx	r3
 800158c:	e016      	b.n	80015bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001598:	2b00      	cmp	r3, #0
 800159a:	d107      	bne.n	80015ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 0208 	bic.w	r2, r2, #8
 80015aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c0:	2220      	movs	r2, #32
 80015c2:	409a      	lsls	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 808f 	beq.w	80016ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0310 	and.w	r3, r3, #16
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 8087 	beq.w	80016ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015e2:	2220      	movs	r2, #32
 80015e4:	409a      	lsls	r2, r3
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b05      	cmp	r3, #5
 80015f4:	d136      	bne.n	8001664 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0216 	bic.w	r2, r2, #22
 8001604:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	695a      	ldr	r2, [r3, #20]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001614:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	2b00      	cmp	r3, #0
 800161c:	d103      	bne.n	8001626 <HAL_DMA_IRQHandler+0x1da>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001622:	2b00      	cmp	r3, #0
 8001624:	d007      	beq.n	8001636 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0208 	bic.w	r2, r2, #8
 8001634:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800163a:	223f      	movs	r2, #63	@ 0x3f
 800163c:	409a      	lsls	r2, r3
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001656:	2b00      	cmp	r3, #0
 8001658:	d07e      	beq.n	8001758 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	4798      	blx	r3
        }
        return;
 8001662:	e079      	b.n	8001758 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d01d      	beq.n	80016ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d10d      	bne.n	800169c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001684:	2b00      	cmp	r3, #0
 8001686:	d031      	beq.n	80016ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	4798      	blx	r3
 8001690:	e02c      	b.n	80016ec <HAL_DMA_IRQHandler+0x2a0>
 8001692:	bf00      	nop
 8001694:	20000004 	.word	0x20000004
 8001698:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d023      	beq.n	80016ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	4798      	blx	r3
 80016ac:	e01e      	b.n	80016ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10f      	bne.n	80016dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0210 	bic.w	r2, r2, #16
 80016ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d032      	beq.n	800175a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d022      	beq.n	8001746 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2205      	movs	r2, #5
 8001704:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0201 	bic.w	r2, r2, #1
 8001716:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	3301      	adds	r3, #1
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	429a      	cmp	r2, r3
 8001722:	d307      	bcc.n	8001734 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f2      	bne.n	8001718 <HAL_DMA_IRQHandler+0x2cc>
 8001732:	e000      	b.n	8001736 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001734:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174a:	2b00      	cmp	r3, #0
 800174c:	d005      	beq.n	800175a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	4798      	blx	r3
 8001756:	e000      	b.n	800175a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001758:	bf00      	nop
    }
  }
}
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800177c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2b40      	cmp	r3, #64	@ 0x40
 800178c:	d108      	bne.n	80017a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800179e:	e007      	b.n	80017b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68ba      	ldr	r2, [r7, #8]
 80017a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	60da      	str	r2, [r3, #12]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	3b10      	subs	r3, #16
 80017cc:	4a13      	ldr	r2, [pc, #76]	@ (800181c <DMA_CalcBaseAndBitshift+0x60>)
 80017ce:	fba2 2303 	umull	r2, r3, r2, r3
 80017d2:	091b      	lsrs	r3, r3, #4
 80017d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017d6:	4a12      	ldr	r2, [pc, #72]	@ (8001820 <DMA_CalcBaseAndBitshift+0x64>)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4413      	add	r3, r2
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	461a      	mov	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d908      	bls.n	80017fc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	461a      	mov	r2, r3
 80017f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <DMA_CalcBaseAndBitshift+0x68>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	1d1a      	adds	r2, r3, #4
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80017fa:	e006      	b.n	800180a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b08      	ldr	r3, [pc, #32]	@ (8001824 <DMA_CalcBaseAndBitshift+0x68>)
 8001804:	4013      	ands	r3, r2
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800180e:	4618      	mov	r0, r3
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	aaaaaaab 	.word	0xaaaaaaab
 8001820:	08005344 	.word	0x08005344
 8001824:	fffffc00 	.word	0xfffffc00

08001828 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001838:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d11f      	bne.n	8001882 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	2b03      	cmp	r3, #3
 8001846:	d856      	bhi.n	80018f6 <DMA_CheckFifoParam+0xce>
 8001848:	a201      	add	r2, pc, #4	@ (adr r2, 8001850 <DMA_CheckFifoParam+0x28>)
 800184a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800184e:	bf00      	nop
 8001850:	08001861 	.word	0x08001861
 8001854:	08001873 	.word	0x08001873
 8001858:	08001861 	.word	0x08001861
 800185c:	080018f7 	.word	0x080018f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001864:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d046      	beq.n	80018fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001870:	e043      	b.n	80018fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001876:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800187a:	d140      	bne.n	80018fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001880:	e03d      	b.n	80018fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800188a:	d121      	bne.n	80018d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	2b03      	cmp	r3, #3
 8001890:	d837      	bhi.n	8001902 <DMA_CheckFifoParam+0xda>
 8001892:	a201      	add	r2, pc, #4	@ (adr r2, 8001898 <DMA_CheckFifoParam+0x70>)
 8001894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001898:	080018a9 	.word	0x080018a9
 800189c:	080018af 	.word	0x080018af
 80018a0:	080018a9 	.word	0x080018a9
 80018a4:	080018c1 	.word	0x080018c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
      break;
 80018ac:	e030      	b.n	8001910 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d025      	beq.n	8001906 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018be:	e022      	b.n	8001906 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80018c8:	d11f      	bne.n	800190a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018ce:	e01c      	b.n	800190a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d903      	bls.n	80018de <DMA_CheckFifoParam+0xb6>
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d003      	beq.n	80018e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018dc:	e018      	b.n	8001910 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	73fb      	strb	r3, [r7, #15]
      break;
 80018e2:	e015      	b.n	8001910 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d00e      	beq.n	800190e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	73fb      	strb	r3, [r7, #15]
      break;
 80018f4:	e00b      	b.n	800190e <DMA_CheckFifoParam+0xe6>
      break;
 80018f6:	bf00      	nop
 80018f8:	e00a      	b.n	8001910 <DMA_CheckFifoParam+0xe8>
      break;
 80018fa:	bf00      	nop
 80018fc:	e008      	b.n	8001910 <DMA_CheckFifoParam+0xe8>
      break;
 80018fe:	bf00      	nop
 8001900:	e006      	b.n	8001910 <DMA_CheckFifoParam+0xe8>
      break;
 8001902:	bf00      	nop
 8001904:	e004      	b.n	8001910 <DMA_CheckFifoParam+0xe8>
      break;
 8001906:	bf00      	nop
 8001908:	e002      	b.n	8001910 <DMA_CheckFifoParam+0xe8>
      break;   
 800190a:	bf00      	nop
 800190c:	e000      	b.n	8001910 <DMA_CheckFifoParam+0xe8>
      break;
 800190e:	bf00      	nop
    }
  } 
  
  return status; 
 8001910:	7bfb      	ldrb	r3, [r7, #15]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop

08001920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001920:	b480      	push	{r7}
 8001922:	b089      	sub	sp, #36	@ 0x24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
 800193e:	e175      	b.n	8001c2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001940:	2201      	movs	r2, #1
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	429a      	cmp	r2, r3
 800195a:	f040 8164 	bne.w	8001c26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	2b01      	cmp	r3, #1
 8001968:	d005      	beq.n	8001976 <HAL_GPIO_Init+0x56>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 0303 	and.w	r3, r3, #3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d130      	bne.n	80019d8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	2203      	movs	r2, #3
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4013      	ands	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019ac:	2201      	movs	r2, #1
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	091b      	lsrs	r3, r3, #4
 80019c2:	f003 0201 	and.w	r2, r3, #1
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d017      	beq.n	8001a14 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	2203      	movs	r2, #3
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d123      	bne.n	8001a68 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	08da      	lsrs	r2, r3, #3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3208      	adds	r2, #8
 8001a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	220f      	movs	r2, #15
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	08da      	lsrs	r2, r3, #3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3208      	adds	r2, #8
 8001a62:	69b9      	ldr	r1, [r7, #24]
 8001a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0203 	and.w	r2, r3, #3
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80be 	beq.w	8001c26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aaa:	4b66      	ldr	r3, [pc, #408]	@ (8001c44 <HAL_GPIO_Init+0x324>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aae:	4a65      	ldr	r2, [pc, #404]	@ (8001c44 <HAL_GPIO_Init+0x324>)
 8001ab0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ab4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ab6:	4b63      	ldr	r3, [pc, #396]	@ (8001c44 <HAL_GPIO_Init+0x324>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ac2:	4a61      	ldr	r2, [pc, #388]	@ (8001c48 <HAL_GPIO_Init+0x328>)
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	089b      	lsrs	r3, r3, #2
 8001ac8:	3302      	adds	r3, #2
 8001aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	220f      	movs	r2, #15
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a58      	ldr	r2, [pc, #352]	@ (8001c4c <HAL_GPIO_Init+0x32c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d037      	beq.n	8001b5e <HAL_GPIO_Init+0x23e>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a57      	ldr	r2, [pc, #348]	@ (8001c50 <HAL_GPIO_Init+0x330>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d031      	beq.n	8001b5a <HAL_GPIO_Init+0x23a>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a56      	ldr	r2, [pc, #344]	@ (8001c54 <HAL_GPIO_Init+0x334>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d02b      	beq.n	8001b56 <HAL_GPIO_Init+0x236>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a55      	ldr	r2, [pc, #340]	@ (8001c58 <HAL_GPIO_Init+0x338>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d025      	beq.n	8001b52 <HAL_GPIO_Init+0x232>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a54      	ldr	r2, [pc, #336]	@ (8001c5c <HAL_GPIO_Init+0x33c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d01f      	beq.n	8001b4e <HAL_GPIO_Init+0x22e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a53      	ldr	r2, [pc, #332]	@ (8001c60 <HAL_GPIO_Init+0x340>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d019      	beq.n	8001b4a <HAL_GPIO_Init+0x22a>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a52      	ldr	r2, [pc, #328]	@ (8001c64 <HAL_GPIO_Init+0x344>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d013      	beq.n	8001b46 <HAL_GPIO_Init+0x226>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a51      	ldr	r2, [pc, #324]	@ (8001c68 <HAL_GPIO_Init+0x348>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d00d      	beq.n	8001b42 <HAL_GPIO_Init+0x222>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a50      	ldr	r2, [pc, #320]	@ (8001c6c <HAL_GPIO_Init+0x34c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d007      	beq.n	8001b3e <HAL_GPIO_Init+0x21e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a4f      	ldr	r2, [pc, #316]	@ (8001c70 <HAL_GPIO_Init+0x350>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d101      	bne.n	8001b3a <HAL_GPIO_Init+0x21a>
 8001b36:	2309      	movs	r3, #9
 8001b38:	e012      	b.n	8001b60 <HAL_GPIO_Init+0x240>
 8001b3a:	230a      	movs	r3, #10
 8001b3c:	e010      	b.n	8001b60 <HAL_GPIO_Init+0x240>
 8001b3e:	2308      	movs	r3, #8
 8001b40:	e00e      	b.n	8001b60 <HAL_GPIO_Init+0x240>
 8001b42:	2307      	movs	r3, #7
 8001b44:	e00c      	b.n	8001b60 <HAL_GPIO_Init+0x240>
 8001b46:	2306      	movs	r3, #6
 8001b48:	e00a      	b.n	8001b60 <HAL_GPIO_Init+0x240>
 8001b4a:	2305      	movs	r3, #5
 8001b4c:	e008      	b.n	8001b60 <HAL_GPIO_Init+0x240>
 8001b4e:	2304      	movs	r3, #4
 8001b50:	e006      	b.n	8001b60 <HAL_GPIO_Init+0x240>
 8001b52:	2303      	movs	r3, #3
 8001b54:	e004      	b.n	8001b60 <HAL_GPIO_Init+0x240>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e002      	b.n	8001b60 <HAL_GPIO_Init+0x240>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <HAL_GPIO_Init+0x240>
 8001b5e:	2300      	movs	r3, #0
 8001b60:	69fa      	ldr	r2, [r7, #28]
 8001b62:	f002 0203 	and.w	r2, r2, #3
 8001b66:	0092      	lsls	r2, r2, #2
 8001b68:	4093      	lsls	r3, r2
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b70:	4935      	ldr	r1, [pc, #212]	@ (8001c48 <HAL_GPIO_Init+0x328>)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	089b      	lsrs	r3, r3, #2
 8001b76:	3302      	adds	r3, #2
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c74 <HAL_GPIO_Init+0x354>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ba2:	4a34      	ldr	r2, [pc, #208]	@ (8001c74 <HAL_GPIO_Init+0x354>)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ba8:	4b32      	ldr	r3, [pc, #200]	@ (8001c74 <HAL_GPIO_Init+0x354>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bcc:	4a29      	ldr	r2, [pc, #164]	@ (8001c74 <HAL_GPIO_Init+0x354>)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bd2:	4b28      	ldr	r3, [pc, #160]	@ (8001c74 <HAL_GPIO_Init+0x354>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bf6:	4a1f      	ldr	r2, [pc, #124]	@ (8001c74 <HAL_GPIO_Init+0x354>)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c74 <HAL_GPIO_Init+0x354>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c20:	4a14      	ldr	r2, [pc, #80]	@ (8001c74 <HAL_GPIO_Init+0x354>)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	61fb      	str	r3, [r7, #28]
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	2b0f      	cmp	r3, #15
 8001c30:	f67f ae86 	bls.w	8001940 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	3724      	adds	r7, #36	@ 0x24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40013800 	.word	0x40013800
 8001c4c:	40020000 	.word	0x40020000
 8001c50:	40020400 	.word	0x40020400
 8001c54:	40020800 	.word	0x40020800
 8001c58:	40020c00 	.word	0x40020c00
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40021400 	.word	0x40021400
 8001c64:	40021800 	.word	0x40021800
 8001c68:	40021c00 	.word	0x40021c00
 8001c6c:	40022000 	.word	0x40022000
 8001c70:	40022400 	.word	0x40022400
 8001c74:	40013c00 	.word	0x40013c00

08001c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	807b      	strh	r3, [r7, #2]
 8001c84:	4613      	mov	r3, r2
 8001c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c88:	787b      	ldrb	r3, [r7, #1]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c8e:	887a      	ldrh	r2, [r7, #2]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c94:	e003      	b.n	8001c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c96:	887b      	ldrh	r3, [r7, #2]
 8001c98:	041a      	lsls	r2, r3, #16
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	619a      	str	r2, [r3, #24]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b085      	sub	sp, #20
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cbc:	887a      	ldrh	r2, [r7, #2]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	041a      	lsls	r2, r3, #16
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	43d9      	mvns	r1, r3
 8001cc8:	887b      	ldrh	r3, [r7, #2]
 8001cca:	400b      	ands	r3, r1
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	619a      	str	r2, [r3, #24]
}
 8001cd2:	bf00      	nop
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e29b      	b.n	800222e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 8087 	beq.w	8001e12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d04:	4b96      	ldr	r3, [pc, #600]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 030c 	and.w	r3, r3, #12
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d00c      	beq.n	8001d2a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d10:	4b93      	ldr	r3, [pc, #588]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 030c 	and.w	r3, r3, #12
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d112      	bne.n	8001d42 <HAL_RCC_OscConfig+0x62>
 8001d1c:	4b90      	ldr	r3, [pc, #576]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d28:	d10b      	bne.n	8001d42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d2a:	4b8d      	ldr	r3, [pc, #564]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d06c      	beq.n	8001e10 <HAL_RCC_OscConfig+0x130>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d168      	bne.n	8001e10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e275      	b.n	800222e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d4a:	d106      	bne.n	8001d5a <HAL_RCC_OscConfig+0x7a>
 8001d4c:	4b84      	ldr	r3, [pc, #528]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a83      	ldr	r2, [pc, #524]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001d52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	e02e      	b.n	8001db8 <HAL_RCC_OscConfig+0xd8>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10c      	bne.n	8001d7c <HAL_RCC_OscConfig+0x9c>
 8001d62:	4b7f      	ldr	r3, [pc, #508]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a7e      	ldr	r2, [pc, #504]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001d68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	4b7c      	ldr	r3, [pc, #496]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a7b      	ldr	r2, [pc, #492]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001d74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	e01d      	b.n	8001db8 <HAL_RCC_OscConfig+0xd8>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d84:	d10c      	bne.n	8001da0 <HAL_RCC_OscConfig+0xc0>
 8001d86:	4b76      	ldr	r3, [pc, #472]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a75      	ldr	r2, [pc, #468]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	4b73      	ldr	r3, [pc, #460]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a72      	ldr	r2, [pc, #456]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	e00b      	b.n	8001db8 <HAL_RCC_OscConfig+0xd8>
 8001da0:	4b6f      	ldr	r3, [pc, #444]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a6e      	ldr	r2, [pc, #440]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	4b6c      	ldr	r3, [pc, #432]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a6b      	ldr	r2, [pc, #428]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001db2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d013      	beq.n	8001de8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f886 	bl	8000ed0 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc8:	f7ff f882 	bl	8000ed0 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	@ 0x64
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e229      	b.n	800222e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dda:	4b61      	ldr	r3, [pc, #388]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0xe8>
 8001de6:	e014      	b.n	8001e12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de8:	f7ff f872 	bl	8000ed0 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df0:	f7ff f86e 	bl	8000ed0 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b64      	cmp	r3, #100	@ 0x64
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e215      	b.n	800222e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e02:	4b57      	ldr	r3, [pc, #348]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x110>
 8001e0e:	e000      	b.n	8001e12 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d069      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e1e:	4b50      	ldr	r3, [pc, #320]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 030c 	and.w	r3, r3, #12
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00b      	beq.n	8001e42 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e2a:	4b4d      	ldr	r3, [pc, #308]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d11c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x190>
 8001e36:	4b4a      	ldr	r3, [pc, #296]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d116      	bne.n	8001e70 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e42:	4b47      	ldr	r3, [pc, #284]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <HAL_RCC_OscConfig+0x17a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d001      	beq.n	8001e5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e1e9      	b.n	800222e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5a:	4b41      	ldr	r3, [pc, #260]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	493d      	ldr	r1, [pc, #244]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6e:	e040      	b.n	8001ef2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d023      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e78:	4b39      	ldr	r3, [pc, #228]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a38      	ldr	r2, [pc, #224]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e84:	f7ff f824 	bl	8000ed0 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e8c:	f7ff f820 	bl	8000ed0 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e1c7      	b.n	800222e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9e:	4b30      	ldr	r3, [pc, #192]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eaa:	4b2d      	ldr	r3, [pc, #180]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4929      	ldr	r1, [pc, #164]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]
 8001ebe:	e018      	b.n	8001ef2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ec0:	4b27      	ldr	r3, [pc, #156]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a26      	ldr	r2, [pc, #152]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001ec6:	f023 0301 	bic.w	r3, r3, #1
 8001eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7ff f800 	bl	8000ed0 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed4:	f7fe fffc 	bl	8000ed0 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e1a3      	b.n	800222e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d038      	beq.n	8001f70 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d019      	beq.n	8001f3a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f06:	4b16      	ldr	r3, [pc, #88]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001f08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f0a:	4a15      	ldr	r2, [pc, #84]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f12:	f7fe ffdd 	bl	8000ed0 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f1a:	f7fe ffd9 	bl	8000ed0 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e180      	b.n	800222e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0f0      	beq.n	8001f1a <HAL_RCC_OscConfig+0x23a>
 8001f38:	e01a      	b.n	8001f70 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f3a:	4b09      	ldr	r3, [pc, #36]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001f3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f3e:	4a08      	ldr	r2, [pc, #32]	@ (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001f40:	f023 0301 	bic.w	r3, r3, #1
 8001f44:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f46:	f7fe ffc3 	bl	8000ed0 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f4c:	e00a      	b.n	8001f64 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f4e:	f7fe ffbf 	bl	8000ed0 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d903      	bls.n	8001f64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e166      	b.n	800222e <HAL_RCC_OscConfig+0x54e>
 8001f60:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f64:	4b92      	ldr	r3, [pc, #584]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 8001f66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1ee      	bne.n	8001f4e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 80a4 	beq.w	80020c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f7e:	4b8c      	ldr	r3, [pc, #560]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10d      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8a:	4b89      	ldr	r3, [pc, #548]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	4a88      	ldr	r2, [pc, #544]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 8001f90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f96:	4b86      	ldr	r3, [pc, #536]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa6:	4b83      	ldr	r3, [pc, #524]	@ (80021b4 <HAL_RCC_OscConfig+0x4d4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d118      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001fb2:	4b80      	ldr	r3, [pc, #512]	@ (80021b4 <HAL_RCC_OscConfig+0x4d4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a7f      	ldr	r2, [pc, #508]	@ (80021b4 <HAL_RCC_OscConfig+0x4d4>)
 8001fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fbe:	f7fe ff87 	bl	8000ed0 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc6:	f7fe ff83 	bl	8000ed0 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b64      	cmp	r3, #100	@ 0x64
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e12a      	b.n	800222e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fd8:	4b76      	ldr	r3, [pc, #472]	@ (80021b4 <HAL_RCC_OscConfig+0x4d4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d106      	bne.n	8001ffa <HAL_RCC_OscConfig+0x31a>
 8001fec:	4b70      	ldr	r3, [pc, #448]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 8001fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff0:	4a6f      	ldr	r2, [pc, #444]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ff8:	e02d      	b.n	8002056 <HAL_RCC_OscConfig+0x376>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10c      	bne.n	800201c <HAL_RCC_OscConfig+0x33c>
 8002002:	4b6b      	ldr	r3, [pc, #428]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 8002004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002006:	4a6a      	ldr	r2, [pc, #424]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 8002008:	f023 0301 	bic.w	r3, r3, #1
 800200c:	6713      	str	r3, [r2, #112]	@ 0x70
 800200e:	4b68      	ldr	r3, [pc, #416]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 8002010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002012:	4a67      	ldr	r2, [pc, #412]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 8002014:	f023 0304 	bic.w	r3, r3, #4
 8002018:	6713      	str	r3, [r2, #112]	@ 0x70
 800201a:	e01c      	b.n	8002056 <HAL_RCC_OscConfig+0x376>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2b05      	cmp	r3, #5
 8002022:	d10c      	bne.n	800203e <HAL_RCC_OscConfig+0x35e>
 8002024:	4b62      	ldr	r3, [pc, #392]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 8002026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002028:	4a61      	ldr	r2, [pc, #388]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 800202a:	f043 0304 	orr.w	r3, r3, #4
 800202e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002030:	4b5f      	ldr	r3, [pc, #380]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 8002032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002034:	4a5e      	ldr	r2, [pc, #376]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	6713      	str	r3, [r2, #112]	@ 0x70
 800203c:	e00b      	b.n	8002056 <HAL_RCC_OscConfig+0x376>
 800203e:	4b5c      	ldr	r3, [pc, #368]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002042:	4a5b      	ldr	r2, [pc, #364]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 8002044:	f023 0301 	bic.w	r3, r3, #1
 8002048:	6713      	str	r3, [r2, #112]	@ 0x70
 800204a:	4b59      	ldr	r3, [pc, #356]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800204e:	4a58      	ldr	r2, [pc, #352]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 8002050:	f023 0304 	bic.w	r3, r3, #4
 8002054:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d015      	beq.n	800208a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205e:	f7fe ff37 	bl	8000ed0 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002064:	e00a      	b.n	800207c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002066:	f7fe ff33 	bl	8000ed0 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002074:	4293      	cmp	r3, r2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e0d8      	b.n	800222e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800207c:	4b4c      	ldr	r3, [pc, #304]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 800207e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0ee      	beq.n	8002066 <HAL_RCC_OscConfig+0x386>
 8002088:	e014      	b.n	80020b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208a:	f7fe ff21 	bl	8000ed0 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002090:	e00a      	b.n	80020a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002092:	f7fe ff1d 	bl	8000ed0 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e0c2      	b.n	800222e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a8:	4b41      	ldr	r3, [pc, #260]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 80020aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1ee      	bne.n	8002092 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020b4:	7dfb      	ldrb	r3, [r7, #23]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d105      	bne.n	80020c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ba:	4b3d      	ldr	r3, [pc, #244]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020be:	4a3c      	ldr	r2, [pc, #240]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 80020c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020c4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 80ae 	beq.w	800222c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020d0:	4b37      	ldr	r3, [pc, #220]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 030c 	and.w	r3, r3, #12
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d06d      	beq.n	80021b8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d14b      	bne.n	800217c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e4:	4b32      	ldr	r3, [pc, #200]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a31      	ldr	r2, [pc, #196]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 80020ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f0:	f7fe feee 	bl	8000ed0 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f8:	f7fe feea 	bl	8000ed0 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e091      	b.n	800222e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800210a:	4b29      	ldr	r3, [pc, #164]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f0      	bne.n	80020f8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69da      	ldr	r2, [r3, #28]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002124:	019b      	lsls	r3, r3, #6
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212c:	085b      	lsrs	r3, r3, #1
 800212e:	3b01      	subs	r3, #1
 8002130:	041b      	lsls	r3, r3, #16
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002138:	061b      	lsls	r3, r3, #24
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002140:	071b      	lsls	r3, r3, #28
 8002142:	491b      	ldr	r1, [pc, #108]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 8002144:	4313      	orrs	r3, r2
 8002146:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002148:	4b19      	ldr	r3, [pc, #100]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a18      	ldr	r2, [pc, #96]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 800214e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002152:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002154:	f7fe febc 	bl	8000ed0 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215c:	f7fe feb8 	bl	8000ed0 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e05f      	b.n	800222e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216e:	4b10      	ldr	r3, [pc, #64]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0x47c>
 800217a:	e057      	b.n	800222c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217c:	4b0c      	ldr	r3, [pc, #48]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0b      	ldr	r2, [pc, #44]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 8002182:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7fe fea2 	bl	8000ed0 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002190:	f7fe fe9e 	bl	8000ed0 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e045      	b.n	800222e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a2:	4b03      	ldr	r3, [pc, #12]	@ (80021b0 <HAL_RCC_OscConfig+0x4d0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x4b0>
 80021ae:	e03d      	b.n	800222c <HAL_RCC_OscConfig+0x54c>
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80021b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002238 <HAL_RCC_OscConfig+0x558>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d030      	beq.n	8002228 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d129      	bne.n	8002228 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021de:	429a      	cmp	r2, r3
 80021e0:	d122      	bne.n	8002228 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021e8:	4013      	ands	r3, r2
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d119      	bne.n	8002228 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fe:	085b      	lsrs	r3, r3, #1
 8002200:	3b01      	subs	r3, #1
 8002202:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002204:	429a      	cmp	r2, r3
 8002206:	d10f      	bne.n	8002228 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002212:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002214:	429a      	cmp	r2, r3
 8002216:	d107      	bne.n	8002228 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40023800 	.word	0x40023800

0800223c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e0d0      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002254:	4b6a      	ldr	r3, [pc, #424]	@ (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d910      	bls.n	8002284 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002262:	4b67      	ldr	r3, [pc, #412]	@ (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 020f 	bic.w	r2, r3, #15
 800226a:	4965      	ldr	r1, [pc, #404]	@ (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	4313      	orrs	r3, r2
 8002270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	4b63      	ldr	r3, [pc, #396]	@ (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0b8      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d020      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800229c:	4b59      	ldr	r3, [pc, #356]	@ (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	4a58      	ldr	r2, [pc, #352]	@ (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 80022a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022b4:	4b53      	ldr	r3, [pc, #332]	@ (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4a52      	ldr	r2, [pc, #328]	@ (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 80022ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c0:	4b50      	ldr	r3, [pc, #320]	@ (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	494d      	ldr	r1, [pc, #308]	@ (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d040      	beq.n	8002360 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e6:	4b47      	ldr	r3, [pc, #284]	@ (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d115      	bne.n	800231e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e07f      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d107      	bne.n	800230e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fe:	4b41      	ldr	r3, [pc, #260]	@ (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d109      	bne.n	800231e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e073      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230e:	4b3d      	ldr	r3, [pc, #244]	@ (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e06b      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800231e:	4b39      	ldr	r3, [pc, #228]	@ (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f023 0203 	bic.w	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	4936      	ldr	r1, [pc, #216]	@ (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 800232c:	4313      	orrs	r3, r2
 800232e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002330:	f7fe fdce 	bl	8000ed0 <HAL_GetTick>
 8002334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002336:	e00a      	b.n	800234e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002338:	f7fe fdca 	bl	8000ed0 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002346:	4293      	cmp	r3, r2
 8002348:	d901      	bls.n	800234e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e053      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234e:	4b2d      	ldr	r3, [pc, #180]	@ (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 020c 	and.w	r2, r3, #12
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	429a      	cmp	r2, r3
 800235e:	d1eb      	bne.n	8002338 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002360:	4b27      	ldr	r3, [pc, #156]	@ (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d210      	bcs.n	8002390 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236e:	4b24      	ldr	r3, [pc, #144]	@ (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 020f 	bic.w	r2, r3, #15
 8002376:	4922      	ldr	r1, [pc, #136]	@ (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	4b20      	ldr	r3, [pc, #128]	@ (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e032      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800239c:	4b19      	ldr	r3, [pc, #100]	@ (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4916      	ldr	r1, [pc, #88]	@ (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d009      	beq.n	80023ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023ba:	4b12      	ldr	r3, [pc, #72]	@ (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	490e      	ldr	r1, [pc, #56]	@ (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023ce:	f000 f821 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 80023d2:	4602      	mov	r2, r0
 80023d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	490a      	ldr	r1, [pc, #40]	@ (8002408 <HAL_RCC_ClockConfig+0x1cc>)
 80023e0:	5ccb      	ldrb	r3, [r1, r3]
 80023e2:	fa22 f303 	lsr.w	r3, r2, r3
 80023e6:	4a09      	ldr	r2, [pc, #36]	@ (800240c <HAL_RCC_ClockConfig+0x1d0>)
 80023e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023ea:	4b09      	ldr	r3, [pc, #36]	@ (8002410 <HAL_RCC_ClockConfig+0x1d4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe fd2a 	bl	8000e48 <HAL_InitTick>

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40023c00 	.word	0x40023c00
 8002404:	40023800 	.word	0x40023800
 8002408:	0800532c 	.word	0x0800532c
 800240c:	20000004 	.word	0x20000004
 8002410:	20000008 	.word	0x20000008

08002414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002418:	b094      	sub	sp, #80	@ 0x50
 800241a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002420:	2300      	movs	r3, #0
 8002422:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002424:	2300      	movs	r3, #0
 8002426:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800242c:	4b79      	ldr	r3, [pc, #484]	@ (8002614 <HAL_RCC_GetSysClockFreq+0x200>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 030c 	and.w	r3, r3, #12
 8002434:	2b08      	cmp	r3, #8
 8002436:	d00d      	beq.n	8002454 <HAL_RCC_GetSysClockFreq+0x40>
 8002438:	2b08      	cmp	r3, #8
 800243a:	f200 80e1 	bhi.w	8002600 <HAL_RCC_GetSysClockFreq+0x1ec>
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_RCC_GetSysClockFreq+0x34>
 8002442:	2b04      	cmp	r3, #4
 8002444:	d003      	beq.n	800244e <HAL_RCC_GetSysClockFreq+0x3a>
 8002446:	e0db      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002448:	4b73      	ldr	r3, [pc, #460]	@ (8002618 <HAL_RCC_GetSysClockFreq+0x204>)
 800244a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800244c:	e0db      	b.n	8002606 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800244e:	4b72      	ldr	r3, [pc, #456]	@ (8002618 <HAL_RCC_GetSysClockFreq+0x204>)
 8002450:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002452:	e0d8      	b.n	8002606 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002454:	4b6f      	ldr	r3, [pc, #444]	@ (8002614 <HAL_RCC_GetSysClockFreq+0x200>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800245c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800245e:	4b6d      	ldr	r3, [pc, #436]	@ (8002614 <HAL_RCC_GetSysClockFreq+0x200>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d063      	beq.n	8002532 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800246a:	4b6a      	ldr	r3, [pc, #424]	@ (8002614 <HAL_RCC_GetSysClockFreq+0x200>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	099b      	lsrs	r3, r3, #6
 8002470:	2200      	movs	r2, #0
 8002472:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002474:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800247c:	633b      	str	r3, [r7, #48]	@ 0x30
 800247e:	2300      	movs	r3, #0
 8002480:	637b      	str	r3, [r7, #52]	@ 0x34
 8002482:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002486:	4622      	mov	r2, r4
 8002488:	462b      	mov	r3, r5
 800248a:	f04f 0000 	mov.w	r0, #0
 800248e:	f04f 0100 	mov.w	r1, #0
 8002492:	0159      	lsls	r1, r3, #5
 8002494:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002498:	0150      	lsls	r0, r2, #5
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4621      	mov	r1, r4
 80024a0:	1a51      	subs	r1, r2, r1
 80024a2:	6139      	str	r1, [r7, #16]
 80024a4:	4629      	mov	r1, r5
 80024a6:	eb63 0301 	sbc.w	r3, r3, r1
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	f04f 0300 	mov.w	r3, #0
 80024b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024b8:	4659      	mov	r1, fp
 80024ba:	018b      	lsls	r3, r1, #6
 80024bc:	4651      	mov	r1, sl
 80024be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024c2:	4651      	mov	r1, sl
 80024c4:	018a      	lsls	r2, r1, #6
 80024c6:	4651      	mov	r1, sl
 80024c8:	ebb2 0801 	subs.w	r8, r2, r1
 80024cc:	4659      	mov	r1, fp
 80024ce:	eb63 0901 	sbc.w	r9, r3, r1
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	f04f 0300 	mov.w	r3, #0
 80024da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024e6:	4690      	mov	r8, r2
 80024e8:	4699      	mov	r9, r3
 80024ea:	4623      	mov	r3, r4
 80024ec:	eb18 0303 	adds.w	r3, r8, r3
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	462b      	mov	r3, r5
 80024f4:	eb49 0303 	adc.w	r3, r9, r3
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002506:	4629      	mov	r1, r5
 8002508:	028b      	lsls	r3, r1, #10
 800250a:	4621      	mov	r1, r4
 800250c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002510:	4621      	mov	r1, r4
 8002512:	028a      	lsls	r2, r1, #10
 8002514:	4610      	mov	r0, r2
 8002516:	4619      	mov	r1, r3
 8002518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800251a:	2200      	movs	r2, #0
 800251c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800251e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002520:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002524:	f7fd fe88 	bl	8000238 <__aeabi_uldivmod>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4613      	mov	r3, r2
 800252e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002530:	e058      	b.n	80025e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002532:	4b38      	ldr	r3, [pc, #224]	@ (8002614 <HAL_RCC_GetSysClockFreq+0x200>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	099b      	lsrs	r3, r3, #6
 8002538:	2200      	movs	r2, #0
 800253a:	4618      	mov	r0, r3
 800253c:	4611      	mov	r1, r2
 800253e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002542:	623b      	str	r3, [r7, #32]
 8002544:	2300      	movs	r3, #0
 8002546:	627b      	str	r3, [r7, #36]	@ 0x24
 8002548:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800254c:	4642      	mov	r2, r8
 800254e:	464b      	mov	r3, r9
 8002550:	f04f 0000 	mov.w	r0, #0
 8002554:	f04f 0100 	mov.w	r1, #0
 8002558:	0159      	lsls	r1, r3, #5
 800255a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800255e:	0150      	lsls	r0, r2, #5
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4641      	mov	r1, r8
 8002566:	ebb2 0a01 	subs.w	sl, r2, r1
 800256a:	4649      	mov	r1, r9
 800256c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800257c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002580:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002584:	ebb2 040a 	subs.w	r4, r2, sl
 8002588:	eb63 050b 	sbc.w	r5, r3, fp
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	f04f 0300 	mov.w	r3, #0
 8002594:	00eb      	lsls	r3, r5, #3
 8002596:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800259a:	00e2      	lsls	r2, r4, #3
 800259c:	4614      	mov	r4, r2
 800259e:	461d      	mov	r5, r3
 80025a0:	4643      	mov	r3, r8
 80025a2:	18e3      	adds	r3, r4, r3
 80025a4:	603b      	str	r3, [r7, #0]
 80025a6:	464b      	mov	r3, r9
 80025a8:	eb45 0303 	adc.w	r3, r5, r3
 80025ac:	607b      	str	r3, [r7, #4]
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025ba:	4629      	mov	r1, r5
 80025bc:	028b      	lsls	r3, r1, #10
 80025be:	4621      	mov	r1, r4
 80025c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025c4:	4621      	mov	r1, r4
 80025c6:	028a      	lsls	r2, r1, #10
 80025c8:	4610      	mov	r0, r2
 80025ca:	4619      	mov	r1, r3
 80025cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025ce:	2200      	movs	r2, #0
 80025d0:	61bb      	str	r3, [r7, #24]
 80025d2:	61fa      	str	r2, [r7, #28]
 80025d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025d8:	f7fd fe2e 	bl	8000238 <__aeabi_uldivmod>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4613      	mov	r3, r2
 80025e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80025e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002614 <HAL_RCC_GetSysClockFreq+0x200>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	0c1b      	lsrs	r3, r3, #16
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	3301      	adds	r3, #1
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80025f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025fe:	e002      	b.n	8002606 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002600:	4b05      	ldr	r3, [pc, #20]	@ (8002618 <HAL_RCC_GetSysClockFreq+0x204>)
 8002602:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002604:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002606:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002608:	4618      	mov	r0, r3
 800260a:	3750      	adds	r7, #80	@ 0x50
 800260c:	46bd      	mov	sp, r7
 800260e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002612:	bf00      	nop
 8002614:	40023800 	.word	0x40023800
 8002618:	00f42400 	.word	0x00f42400

0800261c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002620:	4b03      	ldr	r3, [pc, #12]	@ (8002630 <HAL_RCC_GetHCLKFreq+0x14>)
 8002622:	681b      	ldr	r3, [r3, #0]
}
 8002624:	4618      	mov	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	20000004 	.word	0x20000004

08002634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002638:	f7ff fff0 	bl	800261c <HAL_RCC_GetHCLKFreq>
 800263c:	4602      	mov	r2, r0
 800263e:	4b05      	ldr	r3, [pc, #20]	@ (8002654 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	0a9b      	lsrs	r3, r3, #10
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	4903      	ldr	r1, [pc, #12]	@ (8002658 <HAL_RCC_GetPCLK1Freq+0x24>)
 800264a:	5ccb      	ldrb	r3, [r1, r3]
 800264c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002650:	4618      	mov	r0, r3
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40023800 	.word	0x40023800
 8002658:	0800533c 	.word	0x0800533c

0800265c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002660:	f7ff ffdc 	bl	800261c <HAL_RCC_GetHCLKFreq>
 8002664:	4602      	mov	r2, r0
 8002666:	4b05      	ldr	r3, [pc, #20]	@ (800267c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	0b5b      	lsrs	r3, r3, #13
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	4903      	ldr	r1, [pc, #12]	@ (8002680 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002672:	5ccb      	ldrb	r3, [r1, r3]
 8002674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002678:	4618      	mov	r0, r3
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40023800 	.word	0x40023800
 8002680:	0800533c 	.word	0x0800533c

08002684 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d012      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026ac:	4b69      	ldr	r3, [pc, #420]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	4a68      	ldr	r2, [pc, #416]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80026b6:	6093      	str	r3, [r2, #8]
 80026b8:	4b66      	ldr	r3, [pc, #408]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026c0:	4964      	ldr	r1, [pc, #400]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80026ce:	2301      	movs	r3, #1
 80026d0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d017      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026de:	4b5d      	ldr	r3, [pc, #372]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026e4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ec:	4959      	ldr	r1, [pc, #356]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026fc:	d101      	bne.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80026fe:	2301      	movs	r3, #1
 8002700:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800270a:	2301      	movs	r3, #1
 800270c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d017      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800271a:	4b4e      	ldr	r3, [pc, #312]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800271c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002720:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002728:	494a      	ldr	r1, [pc, #296]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800272a:	4313      	orrs	r3, r2
 800272c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002734:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002738:	d101      	bne.n	800273e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800273a:	2301      	movs	r3, #1
 800273c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002746:	2301      	movs	r3, #1
 8002748:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002756:	2301      	movs	r3, #1
 8002758:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0320 	and.w	r3, r3, #32
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 808b 	beq.w	800287e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002768:	4b3a      	ldr	r3, [pc, #232]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800276a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276c:	4a39      	ldr	r2, [pc, #228]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800276e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002772:	6413      	str	r3, [r2, #64]	@ 0x40
 8002774:	4b37      	ldr	r3, [pc, #220]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002780:	4b35      	ldr	r3, [pc, #212]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a34      	ldr	r2, [pc, #208]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002786:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800278a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800278c:	f7fe fba0 	bl	8000ed0 <HAL_GetTick>
 8002790:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002794:	f7fe fb9c 	bl	8000ed0 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b64      	cmp	r3, #100	@ 0x64
 80027a0:	d901      	bls.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e38f      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0f0      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027b2:	4b28      	ldr	r3, [pc, #160]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027ba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d035      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d02e      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027d0:	4b20      	ldr	r3, [pc, #128]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027d8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027da:	4b1e      	ldr	r3, [pc, #120]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027de:	4a1d      	ldr	r2, [pc, #116]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027e4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ea:	4a1a      	ldr	r2, [pc, #104]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027f0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80027f2:	4a18      	ldr	r2, [pc, #96]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027f8:	4b16      	ldr	r3, [pc, #88]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b01      	cmp	r3, #1
 8002802:	d114      	bne.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7fe fb64 	bl	8000ed0 <HAL_GetTick>
 8002808:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800280a:	e00a      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800280c:	f7fe fb60 	bl	8000ed0 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e351      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002822:	4b0c      	ldr	r3, [pc, #48]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0ee      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002832:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002836:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800283a:	d111      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800283c:	4b05      	ldr	r3, [pc, #20]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002848:	4b04      	ldr	r3, [pc, #16]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800284a:	400b      	ands	r3, r1
 800284c:	4901      	ldr	r1, [pc, #4]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]
 8002852:	e00b      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002854:	40023800 	.word	0x40023800
 8002858:	40007000 	.word	0x40007000
 800285c:	0ffffcff 	.word	0x0ffffcff
 8002860:	4bac      	ldr	r3, [pc, #688]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	4aab      	ldr	r2, [pc, #684]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002866:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800286a:	6093      	str	r3, [r2, #8]
 800286c:	4ba9      	ldr	r3, [pc, #676]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800286e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002878:	49a6      	ldr	r1, [pc, #664]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800287a:	4313      	orrs	r3, r2
 800287c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	2b00      	cmp	r3, #0
 8002888:	d010      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800288a:	4ba2      	ldr	r3, [pc, #648]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800288c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002890:	4aa0      	ldr	r2, [pc, #640]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002892:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002896:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800289a:	4b9e      	ldr	r3, [pc, #632]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800289c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a4:	499b      	ldr	r1, [pc, #620]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00a      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028b8:	4b96      	ldr	r3, [pc, #600]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028be:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028c6:	4993      	ldr	r1, [pc, #588]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00a      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028da:	4b8e      	ldr	r3, [pc, #568]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028e8:	498a      	ldr	r1, [pc, #552]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00a      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028fc:	4b85      	ldr	r3, [pc, #532]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002902:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800290a:	4982      	ldr	r1, [pc, #520]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800290c:	4313      	orrs	r3, r2
 800290e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00a      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800291e:	4b7d      	ldr	r3, [pc, #500]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002924:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292c:	4979      	ldr	r1, [pc, #484]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800292e:	4313      	orrs	r3, r2
 8002930:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00a      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002940:	4b74      	ldr	r3, [pc, #464]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002946:	f023 0203 	bic.w	r2, r3, #3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294e:	4971      	ldr	r1, [pc, #452]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00a      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002962:	4b6c      	ldr	r3, [pc, #432]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002968:	f023 020c 	bic.w	r2, r3, #12
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002970:	4968      	ldr	r1, [pc, #416]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00a      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002984:	4b63      	ldr	r3, [pc, #396]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800298a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002992:	4960      	ldr	r1, [pc, #384]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00a      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ac:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029b4:	4957      	ldr	r1, [pc, #348]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00a      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029c8:	4b52      	ldr	r3, [pc, #328]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d6:	494f      	ldr	r1, [pc, #316]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00a      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80029ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f8:	4946      	ldr	r1, [pc, #280]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00a      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002a0c:	4b41      	ldr	r3, [pc, #260]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a12:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1a:	493e      	ldr	r1, [pc, #248]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00a      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002a2e:	4b39      	ldr	r3, [pc, #228]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a34:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a3c:	4935      	ldr	r1, [pc, #212]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00a      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a50:	4b30      	ldr	r3, [pc, #192]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a56:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a5e:	492d      	ldr	r1, [pc, #180]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d011      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a72:	4b28      	ldr	r3, [pc, #160]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a78:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a80:	4924      	ldr	r1, [pc, #144]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a90:	d101      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002a92:	2301      	movs	r3, #1
 8002a94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00a      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ab2:	4b18      	ldr	r3, [pc, #96]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ac0:	4914      	ldr	r1, [pc, #80]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00b      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ada:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ae4:	490b      	ldr	r1, [pc, #44]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00f      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002af8:	4b06      	ldr	r3, [pc, #24]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002afe:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b08:	4902      	ldr	r1, [pc, #8]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002b10:	e002      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002b12:	bf00      	nop
 8002b14:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00b      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b24:	4b8a      	ldr	r3, [pc, #552]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b2a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b34:	4986      	ldr	r1, [pc, #536]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00b      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002b48:	4b81      	ldr	r3, [pc, #516]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b4e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b58:	497d      	ldr	r1, [pc, #500]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d006      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 80d6 	beq.w	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b74:	4b76      	ldr	r3, [pc, #472]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a75      	ldr	r2, [pc, #468]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b80:	f7fe f9a6 	bl	8000ed0 <HAL_GetTick>
 8002b84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b88:	f7fe f9a2 	bl	8000ed0 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b64      	cmp	r3, #100	@ 0x64
 8002b94:	d901      	bls.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e195      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b9a:	4b6d      	ldr	r3, [pc, #436]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d021      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d11d      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002bba:	4b65      	ldr	r3, [pc, #404]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bc0:	0c1b      	lsrs	r3, r3, #16
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002bc8:	4b61      	ldr	r3, [pc, #388]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bce:	0e1b      	lsrs	r3, r3, #24
 8002bd0:	f003 030f 	and.w	r3, r3, #15
 8002bd4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	019a      	lsls	r2, r3, #6
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	041b      	lsls	r3, r3, #16
 8002be0:	431a      	orrs	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	061b      	lsls	r3, r3, #24
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	071b      	lsls	r3, r3, #28
 8002bee:	4958      	ldr	r1, [pc, #352]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d004      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c0a:	d00a      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d02e      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c20:	d129      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c22:	4b4b      	ldr	r3, [pc, #300]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c28:	0c1b      	lsrs	r3, r3, #16
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c30:	4b47      	ldr	r3, [pc, #284]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c36:	0f1b      	lsrs	r3, r3, #28
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	019a      	lsls	r2, r3, #6
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	041b      	lsls	r3, r3, #16
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	061b      	lsls	r3, r3, #24
 8002c50:	431a      	orrs	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	071b      	lsls	r3, r3, #28
 8002c56:	493e      	ldr	r1, [pc, #248]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c5e:	4b3c      	ldr	r3, [pc, #240]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c64:	f023 021f 	bic.w	r2, r3, #31
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	4938      	ldr	r1, [pc, #224]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d01d      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c82:	4b33      	ldr	r3, [pc, #204]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c88:	0e1b      	lsrs	r3, r3, #24
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c90:	4b2f      	ldr	r3, [pc, #188]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c96:	0f1b      	lsrs	r3, r3, #28
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	019a      	lsls	r2, r3, #6
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	041b      	lsls	r3, r3, #16
 8002caa:	431a      	orrs	r2, r3
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	061b      	lsls	r3, r3, #24
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	071b      	lsls	r3, r3, #28
 8002cb6:	4926      	ldr	r1, [pc, #152]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d011      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	019a      	lsls	r2, r3, #6
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	061b      	lsls	r3, r3, #24
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	071b      	lsls	r3, r3, #28
 8002ce6:	491a      	ldr	r1, [pc, #104]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002cee:	4b18      	ldr	r3, [pc, #96]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a17      	ldr	r2, [pc, #92]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cf4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002cf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cfa:	f7fe f8e9 	bl	8000ed0 <HAL_GetTick>
 8002cfe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d00:	e008      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d02:	f7fe f8e5 	bl	8000ed0 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b64      	cmp	r3, #100	@ 0x64
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e0d8      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d14:	4b0e      	ldr	r3, [pc, #56]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	f040 80ce 	bne.w	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d28:	4b09      	ldr	r3, [pc, #36]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a08      	ldr	r2, [pc, #32]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d34:	f7fe f8cc 	bl	8000ed0 <HAL_GetTick>
 8002d38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d3a:	e00b      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d3c:	f7fe f8c8 	bl	8000ed0 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b64      	cmp	r3, #100	@ 0x64
 8002d48:	d904      	bls.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e0bb      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002d4e:	bf00      	nop
 8002d50:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d54:	4b5e      	ldr	r3, [pc, #376]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d60:	d0ec      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d009      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d02e      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d12a      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d8a:	4b51      	ldr	r3, [pc, #324]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d90:	0c1b      	lsrs	r3, r3, #16
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d98:	4b4d      	ldr	r3, [pc, #308]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d9e:	0f1b      	lsrs	r3, r3, #28
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	019a      	lsls	r2, r3, #6
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	041b      	lsls	r3, r3, #16
 8002db0:	431a      	orrs	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	061b      	lsls	r3, r3, #24
 8002db8:	431a      	orrs	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	071b      	lsls	r3, r3, #28
 8002dbe:	4944      	ldr	r1, [pc, #272]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002dc6:	4b42      	ldr	r3, [pc, #264]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dcc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	021b      	lsls	r3, r3, #8
 8002dd8:	493d      	ldr	r1, [pc, #244]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d022      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002df0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002df4:	d11d      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002df6:	4b36      	ldr	r3, [pc, #216]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfc:	0e1b      	lsrs	r3, r3, #24
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e04:	4b32      	ldr	r3, [pc, #200]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0a:	0f1b      	lsrs	r3, r3, #28
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	019a      	lsls	r2, r3, #6
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	041b      	lsls	r3, r3, #16
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	061b      	lsls	r3, r3, #24
 8002e24:	431a      	orrs	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	071b      	lsls	r3, r3, #28
 8002e2a:	4929      	ldr	r1, [pc, #164]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d028      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e3e:	4b24      	ldr	r3, [pc, #144]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e44:	0e1b      	lsrs	r3, r3, #24
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e4c:	4b20      	ldr	r3, [pc, #128]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e52:	0c1b      	lsrs	r3, r3, #16
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	019a      	lsls	r2, r3, #6
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	041b      	lsls	r3, r3, #16
 8002e64:	431a      	orrs	r2, r3
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	061b      	lsls	r3, r3, #24
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	071b      	lsls	r3, r3, #28
 8002e72:	4917      	ldr	r1, [pc, #92]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002e7a:	4b15      	ldr	r3, [pc, #84]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e88:	4911      	ldr	r1, [pc, #68]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e90:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a0e      	ldr	r2, [pc, #56]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e9c:	f7fe f818 	bl	8000ed0 <HAL_GetTick>
 8002ea0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ea4:	f7fe f814 	bl	8000ed0 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b64      	cmp	r3, #100	@ 0x64
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e007      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002eb6:	4b06      	ldr	r3, [pc, #24]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ebe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ec2:	d1ef      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3720      	adds	r7, #32
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800

08002ed4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e09d      	b.n	8003022 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d108      	bne.n	8002f00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ef6:	d009      	beq.n	8002f0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	61da      	str	r2, [r3, #28]
 8002efe:	e005      	b.n	8002f0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fd fd96 	bl	8000a58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f4c:	d902      	bls.n	8002f54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	e002      	b.n	8002f5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002f62:	d007      	beq.n	8002f74 <HAL_SPI_Init+0xa0>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f6c:	d002      	beq.n	8002f74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fb6:	ea42 0103 	orr.w	r1, r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fbe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	0c1b      	lsrs	r3, r3, #16
 8002fd0:	f003 0204 	and.w	r2, r3, #4
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002ff0:	ea42 0103 	orr.w	r1, r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	69da      	ldr	r2, [r3, #28]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003010:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	4613      	mov	r3, r2
 8003038:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_SPI_Transmit_DMA+0x20>
 8003048:	2302      	movs	r3, #2
 800304a:	e0d4      	b.n	80031f6 <HAL_SPI_Transmit_DMA+0x1ca>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b01      	cmp	r3, #1
 800305e:	d002      	beq.n	8003066 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003060:	2302      	movs	r3, #2
 8003062:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003064:	e0c2      	b.n	80031ec <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <HAL_SPI_Transmit_DMA+0x46>
 800306c:	88fb      	ldrh	r3, [r7, #6]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d102      	bne.n	8003078 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003076:	e0b9      	b.n	80031ec <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2203      	movs	r2, #3
 800307c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	88fa      	ldrh	r2, [r7, #6]
 8003090:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	88fa      	ldrh	r2, [r7, #6]
 8003096:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030c2:	d10f      	bne.n	80030e4 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e8:	4a45      	ldr	r2, [pc, #276]	@ (8003200 <HAL_SPI_Transmit_DMA+0x1d4>)
 80030ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f0:	4a44      	ldr	r2, [pc, #272]	@ (8003204 <HAL_SPI_Transmit_DMA+0x1d8>)
 80030f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f8:	4a43      	ldr	r2, [pc, #268]	@ (8003208 <HAL_SPI_Transmit_DMA+0x1dc>)
 80030fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003100:	2200      	movs	r2, #0
 8003102:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003112:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800311c:	d82d      	bhi.n	800317a <HAL_SPI_Transmit_DMA+0x14e>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003128:	d127      	bne.n	800317a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800312e:	b29b      	uxth	r3, r3
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10f      	bne.n	8003158 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003146:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800314c:	b29b      	uxth	r3, r3
 800314e:	085b      	lsrs	r3, r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003156:	e010      	b.n	800317a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003166:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800316c:	b29b      	uxth	r3, r3
 800316e:	085b      	lsrs	r3, r3, #1
 8003170:	b29b      	uxth	r3, r3
 8003172:	3301      	adds	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003182:	4619      	mov	r1, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	330c      	adds	r3, #12
 800318a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003190:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003192:	f7fe f869 	bl	8001268 <HAL_DMA_Start_IT>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031a0:	f043 0210 	orr.w	r2, r3, #16
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	75fb      	strb	r3, [r7, #23]

    goto error;
 80031ac:	e01e      	b.n	80031ec <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b8:	2b40      	cmp	r3, #64	@ 0x40
 80031ba:	d007      	beq.n	80031cc <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031ca:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0220 	orr.w	r2, r2, #32
 80031da:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0202 	orr.w	r2, r2, #2
 80031ea:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80031f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	08003b85 	.word	0x08003b85
 8003204:	080039a1 	.word	0x080039a1
 8003208:	08003bd9 	.word	0x08003bd9

0800320c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	4613      	mov	r3, r2
 8003218:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b01      	cmp	r3, #1
 8003228:	d002      	beq.n	8003230 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 800322a:	2302      	movs	r3, #2
 800322c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800322e:	e0fe      	b.n	800342e <HAL_SPI_Receive_DMA+0x222>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d110      	bne.n	800325a <HAL_SPI_Receive_DMA+0x4e>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003240:	d10b      	bne.n	800325a <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2204      	movs	r2, #4
 8003246:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800324a:	88fb      	ldrh	r3, [r7, #6]
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	68b9      	ldr	r1, [r7, #8]
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 f8fb 	bl	800344c <HAL_SPI_TransmitReceive_DMA>
 8003256:	4603      	mov	r3, r0
 8003258:	e0ee      	b.n	8003438 <HAL_SPI_Receive_DMA+0x22c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_SPI_Receive_DMA+0x5c>
 8003264:	2302      	movs	r3, #2
 8003266:	e0e7      	b.n	8003438 <HAL_SPI_Receive_DMA+0x22c>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if ((pData == NULL) || (Size == 0U))
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <HAL_SPI_Receive_DMA+0x70>
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d102      	bne.n	8003282 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003280:	e0d5      	b.n	800342e <HAL_SPI_Receive_DMA+0x222>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2204      	movs	r2, #4
 8003286:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	88fa      	ldrh	r2, [r7, #6]
 800329a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	88fa      	ldrh	r2, [r7, #6]
 80032a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032c6:	d10f      	bne.n	80032e8 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80032e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032f6:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003300:	d908      	bls.n	8003314 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003310:	605a      	str	r2, [r3, #4]
 8003312:	e042      	b.n	800339a <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003322:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800332e:	d134      	bne.n	800339a <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800333e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003346:	b29b      	uxth	r3, r3
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d111      	bne.n	8003374 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800335e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003366:	b29b      	uxth	r3, r3
 8003368:	085b      	lsrs	r3, r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003372:	e012      	b.n	800339a <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003382:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800338a:	b29b      	uxth	r3, r3
 800338c:	085b      	lsrs	r3, r3, #1
 800338e:	b29b      	uxth	r3, r3
 8003390:	3301      	adds	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339e:	4a28      	ldr	r2, [pc, #160]	@ (8003440 <HAL_SPI_Receive_DMA+0x234>)
 80033a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a6:	4a27      	ldr	r2, [pc, #156]	@ (8003444 <HAL_SPI_Receive_DMA+0x238>)
 80033a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ae:	4a26      	ldr	r2, [pc, #152]	@ (8003448 <HAL_SPI_Receive_DMA+0x23c>)
 80033b0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b6:	2200      	movs	r2, #0
 80033b8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	330c      	adds	r3, #12
 80033c4:	4619      	mov	r1, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ca:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033d2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80033d4:	f7fd ff48 	bl	8001268 <HAL_DMA_Start_IT>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d008      	beq.n	80033f0 <HAL_SPI_Receive_DMA+0x1e4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e2:	f043 0210 	orr.w	r2, r3, #16
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	75fb      	strb	r3, [r7, #23]

    goto error;
 80033ee:	e01e      	b.n	800342e <HAL_SPI_Receive_DMA+0x222>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033fa:	2b40      	cmp	r3, #64	@ 0x40
 80033fc:	d007      	beq.n	800340e <HAL_SPI_Receive_DMA+0x202>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800340c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 0220 	orr.w	r2, r2, #32
 800341c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f042 0201 	orr.w	r2, r2, #1
 800342c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003436:	7dfb      	ldrb	r3, [r7, #23]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	08003ba1 	.word	0x08003ba1
 8003444:	08003a49 	.word	0x08003a49
 8003448:	08003bd9 	.word	0x08003bd9

0800344c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
 8003458:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_SPI_TransmitReceive_DMA+0x20>
 8003468:	2302      	movs	r3, #2
 800346a:	e164      	b.n	8003736 <HAL_SPI_TransmitReceive_DMA+0x2ea>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800347a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003482:	7dbb      	ldrb	r3, [r7, #22]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d00d      	beq.n	80034a4 <HAL_SPI_TransmitReceive_DMA+0x58>
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800348e:	d106      	bne.n	800349e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d102      	bne.n	800349e <HAL_SPI_TransmitReceive_DMA+0x52>
 8003498:	7dbb      	ldrb	r3, [r7, #22]
 800349a:	2b04      	cmp	r3, #4
 800349c:	d002      	beq.n	80034a4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800349e:	2302      	movs	r3, #2
 80034a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034a2:	e143      	b.n	800372c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d005      	beq.n	80034b6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80034b0:	887b      	ldrh	r3, [r7, #2]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d102      	bne.n	80034bc <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034ba:	e137      	b.n	800372c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d003      	beq.n	80034d0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2205      	movs	r2, #5
 80034cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	887a      	ldrh	r2, [r7, #2]
 80034e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	887a      	ldrh	r2, [r7, #2]
 80034e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	887a      	ldrh	r2, [r7, #2]
 80034f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	887a      	ldrh	r2, [r7, #2]
 80034fa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8003518:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003522:	d908      	bls.n	8003536 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003532:	605a      	str	r2, [r3, #4]
 8003534:	e06f      	b.n	8003616 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003544:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003550:	d126      	bne.n	80035a0 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10f      	bne.n	800357e <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800356c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003572:	b29b      	uxth	r3, r3
 8003574:	085b      	lsrs	r3, r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800357c:	e010      	b.n	80035a0 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800358c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003592:	b29b      	uxth	r3, r3
 8003594:	085b      	lsrs	r3, r3, #1
 8003596:	b29b      	uxth	r3, r3
 8003598:	3301      	adds	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035aa:	d134      	bne.n	8003616 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035ba:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d111      	bne.n	80035f0 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035da:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	085b      	lsrs	r3, r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80035ee:	e012      	b.n	8003616 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035fe:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003606:	b29b      	uxth	r3, r3
 8003608:	085b      	lsrs	r3, r3, #1
 800360a:	b29b      	uxth	r3, r3
 800360c:	3301      	adds	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b04      	cmp	r3, #4
 8003620:	d108      	bne.n	8003634 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003626:	4a46      	ldr	r2, [pc, #280]	@ (8003740 <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 8003628:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362e:	4a45      	ldr	r2, [pc, #276]	@ (8003744 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8003630:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003632:	e007      	b.n	8003644 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003638:	4a43      	ldr	r2, [pc, #268]	@ (8003748 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 800363a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003640:	4a42      	ldr	r2, [pc, #264]	@ (800374c <HAL_SPI_TransmitReceive_DMA+0x300>)
 8003642:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003648:	4a41      	ldr	r2, [pc, #260]	@ (8003750 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800364a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003650:	2200      	movs	r2, #0
 8003652:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	330c      	adds	r3, #12
 800365e:	4619      	mov	r1, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003664:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800366c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800366e:	f7fd fdfb 	bl	8001268 <HAL_DMA_Start_IT>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d008      	beq.n	800368a <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800367c:	f043 0210 	orr.w	r2, r3, #16
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003688:	e050      	b.n	800372c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0201 	orr.w	r2, r2, #1
 8003698:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800369e:	2200      	movs	r2, #0
 80036a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a6:	2200      	movs	r2, #0
 80036a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ae:	2200      	movs	r2, #0
 80036b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b6:	2200      	movs	r2, #0
 80036b8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c2:	4619      	mov	r1, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	330c      	adds	r3, #12
 80036ca:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036d0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80036d2:	f7fd fdc9 	bl	8001268 <HAL_DMA_Start_IT>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e0:	f043 0210 	orr.w	r2, r3, #16
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	75fb      	strb	r3, [r7, #23]

    goto error;
 80036ec:	e01e      	b.n	800372c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f8:	2b40      	cmp	r3, #64	@ 0x40
 80036fa:	d007      	beq.n	800370c <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800370a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0220 	orr.w	r2, r2, #32
 800371a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0202 	orr.w	r2, r2, #2
 800372a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003734:	7dfb      	ldrb	r3, [r7, #23]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	08003ba1 	.word	0x08003ba1
 8003744:	08003a49 	.word	0x08003a49
 8003748:	08003bbd 	.word	0x08003bbd
 800374c:	08003af3 	.word	0x08003af3
 8003750:	08003bd9 	.word	0x08003bd9

08003754 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b088      	sub	sp, #32
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10e      	bne.n	8003794 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800377c:	2b00      	cmp	r3, #0
 800377e:	d009      	beq.n	8003794 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003786:	2b00      	cmp	r3, #0
 8003788:	d004      	beq.n	8003794 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	4798      	blx	r3
    return;
 8003792:	e0ce      	b.n	8003932 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d009      	beq.n	80037b2 <HAL_SPI_IRQHandler+0x5e>
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d004      	beq.n	80037b2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	4798      	blx	r3
    return;
 80037b0:	e0bf      	b.n	8003932 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10a      	bne.n	80037d2 <HAL_SPI_IRQHandler+0x7e>
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d105      	bne.n	80037d2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 80b0 	beq.w	8003932 <HAL_SPI_IRQHandler+0x1de>
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 80aa 	beq.w	8003932 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d023      	beq.n	8003830 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d011      	beq.n	8003818 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f8:	f043 0204 	orr.w	r2, r3, #4
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	e00b      	b.n	8003830 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003818:	2300      	movs	r3, #0
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	613b      	str	r3, [r7, #16]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	613b      	str	r3, [r7, #16]
 800382c:	693b      	ldr	r3, [r7, #16]
        return;
 800382e:	e080      	b.n	8003932 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	f003 0320 	and.w	r3, r3, #32
 8003836:	2b00      	cmp	r3, #0
 8003838:	d014      	beq.n	8003864 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800383e:	f043 0201 	orr.w	r2, r3, #1
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003846:	2300      	movs	r3, #0
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00c      	beq.n	8003888 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003872:	f043 0208 	orr.w	r2, r3, #8
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800387a:	2300      	movs	r3, #0
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800388c:	2b00      	cmp	r3, #0
 800388e:	d04f      	beq.n	8003930 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800389e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d104      	bne.n	80038bc <HAL_SPI_IRQHandler+0x168>
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d034      	beq.n	8003926 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0203 	bic.w	r2, r2, #3
 80038ca:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d011      	beq.n	80038f8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d8:	4a17      	ldr	r2, [pc, #92]	@ (8003938 <HAL_SPI_IRQHandler+0x1e4>)
 80038da:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fd fd91 	bl	8001408 <HAL_DMA_Abort_IT>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d016      	beq.n	800392e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003904:	4a0c      	ldr	r2, [pc, #48]	@ (8003938 <HAL_SPI_IRQHandler+0x1e4>)
 8003906:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800390c:	4618      	mov	r0, r3
 800390e:	f7fd fd7b 	bl	8001408 <HAL_DMA_Abort_IT>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00a      	beq.n	800392e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003924:	e003      	b.n	800392e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f830 	bl	800398c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800392c:	e000      	b.n	8003930 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800392e:	bf00      	nop
    return;
 8003930:	bf00      	nop
  }
}
 8003932:	3720      	adds	r7, #32
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	08003c19 	.word	0x08003c19

0800393c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039ae:	f7fd fa8f 	bl	8000ed0 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039c2:	d03b      	beq.n	8003a3c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0220 	bic.w	r2, r2, #32
 80039d2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0202 	bic.w	r2, r2, #2
 80039e2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	2164      	movs	r1, #100	@ 0x64
 80039e8:	6978      	ldr	r0, [r7, #20]
 80039ea:	f000 fac5 	bl	8003f78 <SPI_EndRxTxTransaction>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f8:	f043 0220 	orr.w	r2, r3, #32
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10a      	bne.n	8003a1e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2200      	movs	r2, #0
 8003a22:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003a34:	6978      	ldr	r0, [r7, #20]
 8003a36:	f7ff ffa9 	bl	800398c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003a3a:	e002      	b.n	8003a42 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003a3c:	6978      	ldr	r0, [r7, #20]
 8003a3e:	f7fc fd8f 	bl	8000560 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a54:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a56:	f7fd fa3b 	bl	8000ed0 <HAL_GetTick>
 8003a5a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a6a:	d03c      	beq.n	8003ae6 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0220 	bic.w	r2, r2, #32
 8003a7a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10d      	bne.n	8003aa0 <SPI_DMAReceiveCplt+0x58>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a8c:	d108      	bne.n	8003aa0 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0203 	bic.w	r2, r2, #3
 8003a9c:	605a      	str	r2, [r3, #4]
 8003a9e:	e007      	b.n	8003ab0 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0201 	bic.w	r2, r2, #1
 8003aae:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	2164      	movs	r1, #100	@ 0x64
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 f9e3 	bl	8003e80 <SPI_EndRxTransaction>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f7ff ff54 	bl	800398c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003ae4:	e002      	b.n	8003aec <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f7fc fd1e 	bl	8000528 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b084      	sub	sp, #16
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afe:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b00:	f7fd f9e6 	bl	8000ed0 <HAL_GetTick>
 8003b04:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b14:	d030      	beq.n	8003b78 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0220 	bic.w	r2, r2, #32
 8003b24:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	2164      	movs	r1, #100	@ 0x64
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f000 fa24 	bl	8003f78 <SPI_EndRxTxTransaction>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d005      	beq.n	8003b42 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b3a:	f043 0220 	orr.w	r2, r3, #32
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0203 	bic.w	r2, r2, #3
 8003b50:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f7ff ff0b 	bl	800398c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003b76:	e002      	b.n	8003b7e <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f7ff fedf 	bl	800393c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b90:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f7ff fedc 	bl	8003950 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b98:	bf00      	nop
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bac:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f7ff fed8 	bl	8003964 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003bb4:	bf00      	nop
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f7ff fed4 	bl	8003978 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003bd0:	bf00      	nop
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0203 	bic.w	r2, r2, #3
 8003bf4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bfa:	f043 0210 	orr.w	r2, r3, #16
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f7ff febe 	bl	800398c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c10:	bf00      	nop
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c24:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f7ff fea9 	bl	800398c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c3a:	bf00      	nop
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	603b      	str	r3, [r7, #0]
 8003c50:	4613      	mov	r3, r2
 8003c52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c54:	f7fd f93c 	bl	8000ed0 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5c:	1a9b      	subs	r3, r3, r2
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	4413      	add	r3, r2
 8003c62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c64:	f7fd f934 	bl	8000ed0 <HAL_GetTick>
 8003c68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c6a:	4b39      	ldr	r3, [pc, #228]	@ (8003d50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	015b      	lsls	r3, r3, #5
 8003c70:	0d1b      	lsrs	r3, r3, #20
 8003c72:	69fa      	ldr	r2, [r7, #28]
 8003c74:	fb02 f303 	mul.w	r3, r2, r3
 8003c78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c7a:	e054      	b.n	8003d26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c82:	d050      	beq.n	8003d26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c84:	f7fd f924 	bl	8000ed0 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	69fa      	ldr	r2, [r7, #28]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d902      	bls.n	8003c9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d13d      	bne.n	8003d16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003ca8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cb2:	d111      	bne.n	8003cd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cbc:	d004      	beq.n	8003cc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cc6:	d107      	bne.n	8003cd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ce0:	d10f      	bne.n	8003d02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e017      	b.n	8003d46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	bf0c      	ite	eq
 8003d36:	2301      	moveq	r3, #1
 8003d38:	2300      	movne	r3, #0
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d19b      	bne.n	8003c7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3720      	adds	r7, #32
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20000004 	.word	0x20000004

08003d54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08a      	sub	sp, #40	@ 0x28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d66:	f7fd f8b3 	bl	8000ed0 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	4413      	add	r3, r2
 8003d74:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003d76:	f7fd f8ab 	bl	8000ed0 <HAL_GetTick>
 8003d7a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	330c      	adds	r3, #12
 8003d82:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d84:	4b3d      	ldr	r3, [pc, #244]	@ (8003e7c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	00da      	lsls	r2, r3, #3
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	0d1b      	lsrs	r3, r3, #20
 8003d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d96:	fb02 f303 	mul.w	r3, r2, r3
 8003d9a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d9c:	e060      	b.n	8003e60 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003da4:	d107      	bne.n	8003db6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d104      	bne.n	8003db6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003db4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbc:	d050      	beq.n	8003e60 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dbe:	f7fd f887 	bl	8000ed0 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d902      	bls.n	8003dd4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d13d      	bne.n	8003e50 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003de2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dec:	d111      	bne.n	8003e12 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003df6:	d004      	beq.n	8003e02 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e00:	d107      	bne.n	8003e12 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e1a:	d10f      	bne.n	8003e3c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e010      	b.n	8003e72 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d196      	bne.n	8003d9e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3728      	adds	r7, #40	@ 0x28
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20000004 	.word	0x20000004

08003e80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af02      	add	r7, sp, #8
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e94:	d111      	bne.n	8003eba <SPI_EndRxTransaction+0x3a>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e9e:	d004      	beq.n	8003eaa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ea8:	d107      	bne.n	8003eba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003eb8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ec2:	d112      	bne.n	8003eea <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	2180      	movs	r1, #128	@ 0x80
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f7ff feb8 	bl	8003c44 <SPI_WaitFlagStateUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d021      	beq.n	8003f1e <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ede:	f043 0220 	orr.w	r2, r3, #32
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e03d      	b.n	8003f66 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003eea:	4b21      	ldr	r3, [pc, #132]	@ (8003f70 <SPI_EndRxTransaction+0xf0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a21      	ldr	r2, [pc, #132]	@ (8003f74 <SPI_EndRxTransaction+0xf4>)
 8003ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef4:	0d5b      	lsrs	r3, r3, #21
 8003ef6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003efa:	fb02 f303 	mul.w	r3, r2, r3
 8003efe:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f16:	2b80      	cmp	r3, #128	@ 0x80
 8003f18:	d0f2      	beq.n	8003f00 <SPI_EndRxTransaction+0x80>
 8003f1a:	e000      	b.n	8003f1e <SPI_EndRxTransaction+0x9e>
        break;
 8003f1c:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f26:	d11d      	bne.n	8003f64 <SPI_EndRxTransaction+0xe4>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f30:	d004      	beq.n	8003f3c <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f3a:	d113      	bne.n	8003f64 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f7ff ff03 	bl	8003d54 <SPI_WaitFifoStateUntilTimeout>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d007      	beq.n	8003f64 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f58:	f043 0220 	orr.w	r2, r3, #32
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e000      	b.n	8003f66 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3718      	adds	r7, #24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20000004 	.word	0x20000004
 8003f74:	165e9f81 	.word	0x165e9f81

08003f78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b088      	sub	sp, #32
 8003f7c:	af02      	add	r7, sp, #8
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f7ff fedf 	bl	8003d54 <SPI_WaitFifoStateUntilTimeout>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d007      	beq.n	8003fac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fa0:	f043 0220 	orr.w	r2, r3, #32
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e046      	b.n	800403a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003fac:	4b25      	ldr	r3, [pc, #148]	@ (8004044 <SPI_EndRxTxTransaction+0xcc>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a25      	ldr	r2, [pc, #148]	@ (8004048 <SPI_EndRxTxTransaction+0xd0>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	0d5b      	lsrs	r3, r3, #21
 8003fb8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003fbc:	fb02 f303 	mul.w	r3, r2, r3
 8003fc0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fca:	d112      	bne.n	8003ff2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	2180      	movs	r1, #128	@ 0x80
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f7ff fe34 	bl	8003c44 <SPI_WaitFlagStateUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d016      	beq.n	8004010 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fe6:	f043 0220 	orr.w	r2, r3, #32
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e023      	b.n	800403a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00a      	beq.n	800400e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004008:	2b80      	cmp	r3, #128	@ 0x80
 800400a:	d0f2      	beq.n	8003ff2 <SPI_EndRxTxTransaction+0x7a>
 800400c:	e000      	b.n	8004010 <SPI_EndRxTxTransaction+0x98>
        break;
 800400e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2200      	movs	r2, #0
 8004018:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f7ff fe99 	bl	8003d54 <SPI_WaitFifoStateUntilTimeout>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d007      	beq.n	8004038 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800402c:	f043 0220 	orr.w	r2, r3, #32
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e000      	b.n	800403a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20000004 	.word	0x20000004
 8004048:	165e9f81 	.word	0x165e9f81

0800404c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e040      	b.n	80040e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004062:	2b00      	cmp	r3, #0
 8004064:	d106      	bne.n	8004074 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fc fdc0 	bl	8000bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2224      	movs	r2, #36	@ 0x24
 8004078:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0201 	bic.w	r2, r2, #1
 8004088:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 fdfc 	bl	8004c90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 fb95 	bl	80047c8 <UART_SetConfig>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e01b      	b.n	80040e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0201 	orr.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 fe7b 	bl	8004dd4 <UART_CheckIdleState>
 80040de:	4603      	mov	r3, r0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b08b      	sub	sp, #44	@ 0x2c
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	4613      	mov	r3, r2
 80040f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040fa:	2b20      	cmp	r3, #32
 80040fc:	d147      	bne.n	800418e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <HAL_UART_Transmit_IT+0x22>
 8004104:	88fb      	ldrh	r3, [r7, #6]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e040      	b.n	8004190 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	88fa      	ldrh	r2, [r7, #6]
 8004118:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	88fa      	ldrh	r2, [r7, #6]
 8004120:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2221      	movs	r2, #33	@ 0x21
 8004136:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004140:	d107      	bne.n	8004152 <HAL_UART_Transmit_IT+0x6a>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d103      	bne.n	8004152 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4a13      	ldr	r2, [pc, #76]	@ (800419c <HAL_UART_Transmit_IT+0xb4>)
 800414e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004150:	e002      	b.n	8004158 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	4a12      	ldr	r2, [pc, #72]	@ (80041a0 <HAL_UART_Transmit_IT+0xb8>)
 8004156:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	e853 3f00 	ldrex	r3, [r3]
 8004164:	613b      	str	r3, [r7, #16]
   return(result);
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800416c:	627b      	str	r3, [r7, #36]	@ 0x24
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	461a      	mov	r2, r3
 8004174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004176:	623b      	str	r3, [r7, #32]
 8004178:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417a:	69f9      	ldr	r1, [r7, #28]
 800417c:	6a3a      	ldr	r2, [r7, #32]
 800417e:	e841 2300 	strex	r3, r2, [r1]
 8004182:	61bb      	str	r3, [r7, #24]
   return(result);
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1e6      	bne.n	8004158 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	e000      	b.n	8004190 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800418e:	2302      	movs	r3, #2
  }
}
 8004190:	4618      	mov	r0, r3
 8004192:	372c      	adds	r7, #44	@ 0x2c
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	080051a9 	.word	0x080051a9
 80041a0:	080050f3 	.word	0x080050f3

080041a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b0ba      	sub	sp, #232	@ 0xe8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80041ce:	f640 030f 	movw	r3, #2063	@ 0x80f
 80041d2:	4013      	ands	r3, r2
 80041d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80041d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d115      	bne.n	800420c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041e4:	f003 0320 	and.w	r3, r3, #32
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00f      	beq.n	800420c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d009      	beq.n	800420c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 82ac 	beq.w	800475a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	4798      	blx	r3
      }
      return;
 800420a:	e2a6      	b.n	800475a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800420c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 8117 	beq.w	8004444 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d106      	bne.n	8004230 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004222:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004226:	4b85      	ldr	r3, [pc, #532]	@ (800443c <HAL_UART_IRQHandler+0x298>)
 8004228:	4013      	ands	r3, r2
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 810a 	beq.w	8004444 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b00      	cmp	r3, #0
 800423a:	d011      	beq.n	8004260 <HAL_UART_IRQHandler+0xbc>
 800423c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00b      	beq.n	8004260 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2201      	movs	r2, #1
 800424e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004256:	f043 0201 	orr.w	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d011      	beq.n	8004290 <HAL_UART_IRQHandler+0xec>
 800426c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00b      	beq.n	8004290 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2202      	movs	r2, #2
 800427e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004286:	f043 0204 	orr.w	r2, r3, #4
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	d011      	beq.n	80042c0 <HAL_UART_IRQHandler+0x11c>
 800429c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00b      	beq.n	80042c0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2204      	movs	r2, #4
 80042ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042b6:	f043 0202 	orr.w	r2, r3, #2
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042c4:	f003 0308 	and.w	r3, r3, #8
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d017      	beq.n	80042fc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042d0:	f003 0320 	and.w	r3, r3, #32
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d105      	bne.n	80042e4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80042d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00b      	beq.n	80042fc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2208      	movs	r2, #8
 80042ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042f2:	f043 0208 	orr.w	r2, r3, #8
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80042fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004300:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004304:	2b00      	cmp	r3, #0
 8004306:	d012      	beq.n	800432e <HAL_UART_IRQHandler+0x18a>
 8004308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800430c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00c      	beq.n	800432e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800431c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004324:	f043 0220 	orr.w	r2, r3, #32
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 8212 	beq.w	800475e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800433a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00d      	beq.n	8004362 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b00      	cmp	r3, #0
 8004350:	d007      	beq.n	8004362 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004368:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004376:	2b40      	cmp	r3, #64	@ 0x40
 8004378:	d005      	beq.n	8004386 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800437a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800437e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004382:	2b00      	cmp	r3, #0
 8004384:	d04f      	beq.n	8004426 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fe39 	bl	8004ffe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004396:	2b40      	cmp	r3, #64	@ 0x40
 8004398:	d141      	bne.n	800441e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3308      	adds	r3, #8
 80043a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043a8:	e853 3f00 	ldrex	r3, [r3]
 80043ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80043b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3308      	adds	r3, #8
 80043c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80043c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80043ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80043d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80043d6:	e841 2300 	strex	r3, r2, [r1]
 80043da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80043de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1d9      	bne.n	800439a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d013      	beq.n	8004416 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043f2:	4a13      	ldr	r2, [pc, #76]	@ (8004440 <HAL_UART_IRQHandler+0x29c>)
 80043f4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fd f804 	bl	8001408 <HAL_DMA_Abort_IT>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d017      	beq.n	8004436 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800440a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004410:	4610      	mov	r0, r2
 8004412:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004414:	e00f      	b.n	8004436 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f9b6 	bl	8004788 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800441c:	e00b      	b.n	8004436 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f9b2 	bl	8004788 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004424:	e007      	b.n	8004436 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f9ae 	bl	8004788 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004434:	e193      	b.n	800475e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004436:	bf00      	nop
    return;
 8004438:	e191      	b.n	800475e <HAL_UART_IRQHandler+0x5ba>
 800443a:	bf00      	nop
 800443c:	04000120 	.word	0x04000120
 8004440:	080050c7 	.word	0x080050c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004448:	2b01      	cmp	r3, #1
 800444a:	f040 814c 	bne.w	80046e6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800444e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004452:	f003 0310 	and.w	r3, r3, #16
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 8145 	beq.w	80046e6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800445c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004460:	f003 0310 	and.w	r3, r3, #16
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 813e 	beq.w	80046e6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2210      	movs	r2, #16
 8004470:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800447c:	2b40      	cmp	r3, #64	@ 0x40
 800447e:	f040 80b6 	bne.w	80045ee <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800448e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 8165 	beq.w	8004762 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800449e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044a2:	429a      	cmp	r2, r3
 80044a4:	f080 815d 	bcs.w	8004762 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044bc:	f000 8086 	beq.w	80045cc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044cc:	e853 3f00 	ldrex	r3, [r3]
 80044d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80044d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	461a      	mov	r2, r3
 80044e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80044ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80044ee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80044f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80044fa:	e841 2300 	strex	r3, r2, [r1]
 80044fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004502:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1da      	bne.n	80044c0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3308      	adds	r3, #8
 8004510:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004512:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004514:	e853 3f00 	ldrex	r3, [r3]
 8004518:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800451a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800451c:	f023 0301 	bic.w	r3, r3, #1
 8004520:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3308      	adds	r3, #8
 800452a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800452e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004532:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004534:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004536:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800453a:	e841 2300 	strex	r3, r2, [r1]
 800453e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004540:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1e1      	bne.n	800450a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3308      	adds	r3, #8
 800454c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004550:	e853 3f00 	ldrex	r3, [r3]
 8004554:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004556:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004558:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800455c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3308      	adds	r3, #8
 8004566:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800456a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800456c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004570:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004572:	e841 2300 	strex	r3, r2, [r1]
 8004576:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004578:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1e3      	bne.n	8004546 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2220      	movs	r2, #32
 8004582:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800459a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800459c:	f023 0310 	bic.w	r3, r3, #16
 80045a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	461a      	mov	r2, r3
 80045aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80045ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045b6:	e841 2300 	strex	r3, r2, [r1]
 80045ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1e4      	bne.n	800458c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fc feae 	bl	8001328 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80045de:	b29b      	uxth	r3, r3
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	4619      	mov	r1, r3
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f8d8 	bl	800479c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045ec:	e0b9      	b.n	8004762 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 80ab 	beq.w	8004766 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004610:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 80a6 	beq.w	8004766 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004622:	e853 3f00 	ldrex	r3, [r3]
 8004626:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800462a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800462e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800463c:	647b      	str	r3, [r7, #68]	@ 0x44
 800463e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004640:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004642:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004644:	e841 2300 	strex	r3, r2, [r1]
 8004648:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800464a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1e4      	bne.n	800461a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3308      	adds	r3, #8
 8004656:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465a:	e853 3f00 	ldrex	r3, [r3]
 800465e:	623b      	str	r3, [r7, #32]
   return(result);
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	f023 0301 	bic.w	r3, r3, #1
 8004666:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3308      	adds	r3, #8
 8004670:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004674:	633a      	str	r2, [r7, #48]	@ 0x30
 8004676:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004678:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800467a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800467c:	e841 2300 	strex	r3, r2, [r1]
 8004680:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1e3      	bne.n	8004650 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2220      	movs	r2, #32
 800468c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	e853 3f00 	ldrex	r3, [r3]
 80046a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f023 0310 	bic.w	r3, r3, #16
 80046b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	461a      	mov	r2, r3
 80046ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80046be:	61fb      	str	r3, [r7, #28]
 80046c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c2:	69b9      	ldr	r1, [r7, #24]
 80046c4:	69fa      	ldr	r2, [r7, #28]
 80046c6:	e841 2300 	strex	r3, r2, [r1]
 80046ca:	617b      	str	r3, [r7, #20]
   return(result);
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1e4      	bne.n	800469c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2202      	movs	r2, #2
 80046d6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046dc:	4619      	mov	r1, r3
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f85c 	bl	800479c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046e4:	e03f      	b.n	8004766 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00e      	beq.n	8004710 <HAL_UART_IRQHandler+0x56c>
 80046f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d008      	beq.n	8004710 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004706:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f853 	bl	80047b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800470e:	e02d      	b.n	800476c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00e      	beq.n	800473a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800471c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004720:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004724:	2b00      	cmp	r3, #0
 8004726:	d008      	beq.n	800473a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800472c:	2b00      	cmp	r3, #0
 800472e:	d01c      	beq.n	800476a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	4798      	blx	r3
    }
    return;
 8004738:	e017      	b.n	800476a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800473a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800473e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004742:	2b00      	cmp	r3, #0
 8004744:	d012      	beq.n	800476c <HAL_UART_IRQHandler+0x5c8>
 8004746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800474a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00c      	beq.n	800476c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fd88 	bl	8005268 <UART_EndTransmit_IT>
    return;
 8004758:	e008      	b.n	800476c <HAL_UART_IRQHandler+0x5c8>
      return;
 800475a:	bf00      	nop
 800475c:	e006      	b.n	800476c <HAL_UART_IRQHandler+0x5c8>
    return;
 800475e:	bf00      	nop
 8004760:	e004      	b.n	800476c <HAL_UART_IRQHandler+0x5c8>
      return;
 8004762:	bf00      	nop
 8004764:	e002      	b.n	800476c <HAL_UART_IRQHandler+0x5c8>
      return;
 8004766:	bf00      	nop
 8004768:	e000      	b.n	800476c <HAL_UART_IRQHandler+0x5c8>
    return;
 800476a:	bf00      	nop
  }

}
 800476c:	37e8      	adds	r7, #232	@ 0xe8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop

08004774 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	460b      	mov	r3, r1
 80047a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b088      	sub	sp, #32
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047d0:	2300      	movs	r3, #0
 80047d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689a      	ldr	r2, [r3, #8]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	431a      	orrs	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	4ba6      	ldr	r3, [pc, #664]	@ (8004a8c <UART_SetConfig+0x2c4>)
 80047f4:	4013      	ands	r3, r2
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	6812      	ldr	r2, [r2, #0]
 80047fa:	6979      	ldr	r1, [r7, #20]
 80047fc:	430b      	orrs	r3, r1
 80047fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	4313      	orrs	r3, r2
 8004824:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	430a      	orrs	r2, r1
 8004838:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a94      	ldr	r2, [pc, #592]	@ (8004a90 <UART_SetConfig+0x2c8>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d120      	bne.n	8004886 <UART_SetConfig+0xbe>
 8004844:	4b93      	ldr	r3, [pc, #588]	@ (8004a94 <UART_SetConfig+0x2cc>)
 8004846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	2b03      	cmp	r3, #3
 8004850:	d816      	bhi.n	8004880 <UART_SetConfig+0xb8>
 8004852:	a201      	add	r2, pc, #4	@ (adr r2, 8004858 <UART_SetConfig+0x90>)
 8004854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004858:	08004869 	.word	0x08004869
 800485c:	08004875 	.word	0x08004875
 8004860:	0800486f 	.word	0x0800486f
 8004864:	0800487b 	.word	0x0800487b
 8004868:	2301      	movs	r3, #1
 800486a:	77fb      	strb	r3, [r7, #31]
 800486c:	e150      	b.n	8004b10 <UART_SetConfig+0x348>
 800486e:	2302      	movs	r3, #2
 8004870:	77fb      	strb	r3, [r7, #31]
 8004872:	e14d      	b.n	8004b10 <UART_SetConfig+0x348>
 8004874:	2304      	movs	r3, #4
 8004876:	77fb      	strb	r3, [r7, #31]
 8004878:	e14a      	b.n	8004b10 <UART_SetConfig+0x348>
 800487a:	2308      	movs	r3, #8
 800487c:	77fb      	strb	r3, [r7, #31]
 800487e:	e147      	b.n	8004b10 <UART_SetConfig+0x348>
 8004880:	2310      	movs	r3, #16
 8004882:	77fb      	strb	r3, [r7, #31]
 8004884:	e144      	b.n	8004b10 <UART_SetConfig+0x348>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a83      	ldr	r2, [pc, #524]	@ (8004a98 <UART_SetConfig+0x2d0>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d132      	bne.n	80048f6 <UART_SetConfig+0x12e>
 8004890:	4b80      	ldr	r3, [pc, #512]	@ (8004a94 <UART_SetConfig+0x2cc>)
 8004892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004896:	f003 030c 	and.w	r3, r3, #12
 800489a:	2b0c      	cmp	r3, #12
 800489c:	d828      	bhi.n	80048f0 <UART_SetConfig+0x128>
 800489e:	a201      	add	r2, pc, #4	@ (adr r2, 80048a4 <UART_SetConfig+0xdc>)
 80048a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a4:	080048d9 	.word	0x080048d9
 80048a8:	080048f1 	.word	0x080048f1
 80048ac:	080048f1 	.word	0x080048f1
 80048b0:	080048f1 	.word	0x080048f1
 80048b4:	080048e5 	.word	0x080048e5
 80048b8:	080048f1 	.word	0x080048f1
 80048bc:	080048f1 	.word	0x080048f1
 80048c0:	080048f1 	.word	0x080048f1
 80048c4:	080048df 	.word	0x080048df
 80048c8:	080048f1 	.word	0x080048f1
 80048cc:	080048f1 	.word	0x080048f1
 80048d0:	080048f1 	.word	0x080048f1
 80048d4:	080048eb 	.word	0x080048eb
 80048d8:	2300      	movs	r3, #0
 80048da:	77fb      	strb	r3, [r7, #31]
 80048dc:	e118      	b.n	8004b10 <UART_SetConfig+0x348>
 80048de:	2302      	movs	r3, #2
 80048e0:	77fb      	strb	r3, [r7, #31]
 80048e2:	e115      	b.n	8004b10 <UART_SetConfig+0x348>
 80048e4:	2304      	movs	r3, #4
 80048e6:	77fb      	strb	r3, [r7, #31]
 80048e8:	e112      	b.n	8004b10 <UART_SetConfig+0x348>
 80048ea:	2308      	movs	r3, #8
 80048ec:	77fb      	strb	r3, [r7, #31]
 80048ee:	e10f      	b.n	8004b10 <UART_SetConfig+0x348>
 80048f0:	2310      	movs	r3, #16
 80048f2:	77fb      	strb	r3, [r7, #31]
 80048f4:	e10c      	b.n	8004b10 <UART_SetConfig+0x348>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a68      	ldr	r2, [pc, #416]	@ (8004a9c <UART_SetConfig+0x2d4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d120      	bne.n	8004942 <UART_SetConfig+0x17a>
 8004900:	4b64      	ldr	r3, [pc, #400]	@ (8004a94 <UART_SetConfig+0x2cc>)
 8004902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004906:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800490a:	2b30      	cmp	r3, #48	@ 0x30
 800490c:	d013      	beq.n	8004936 <UART_SetConfig+0x16e>
 800490e:	2b30      	cmp	r3, #48	@ 0x30
 8004910:	d814      	bhi.n	800493c <UART_SetConfig+0x174>
 8004912:	2b20      	cmp	r3, #32
 8004914:	d009      	beq.n	800492a <UART_SetConfig+0x162>
 8004916:	2b20      	cmp	r3, #32
 8004918:	d810      	bhi.n	800493c <UART_SetConfig+0x174>
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <UART_SetConfig+0x15c>
 800491e:	2b10      	cmp	r3, #16
 8004920:	d006      	beq.n	8004930 <UART_SetConfig+0x168>
 8004922:	e00b      	b.n	800493c <UART_SetConfig+0x174>
 8004924:	2300      	movs	r3, #0
 8004926:	77fb      	strb	r3, [r7, #31]
 8004928:	e0f2      	b.n	8004b10 <UART_SetConfig+0x348>
 800492a:	2302      	movs	r3, #2
 800492c:	77fb      	strb	r3, [r7, #31]
 800492e:	e0ef      	b.n	8004b10 <UART_SetConfig+0x348>
 8004930:	2304      	movs	r3, #4
 8004932:	77fb      	strb	r3, [r7, #31]
 8004934:	e0ec      	b.n	8004b10 <UART_SetConfig+0x348>
 8004936:	2308      	movs	r3, #8
 8004938:	77fb      	strb	r3, [r7, #31]
 800493a:	e0e9      	b.n	8004b10 <UART_SetConfig+0x348>
 800493c:	2310      	movs	r3, #16
 800493e:	77fb      	strb	r3, [r7, #31]
 8004940:	e0e6      	b.n	8004b10 <UART_SetConfig+0x348>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a56      	ldr	r2, [pc, #344]	@ (8004aa0 <UART_SetConfig+0x2d8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d120      	bne.n	800498e <UART_SetConfig+0x1c6>
 800494c:	4b51      	ldr	r3, [pc, #324]	@ (8004a94 <UART_SetConfig+0x2cc>)
 800494e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004952:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004956:	2bc0      	cmp	r3, #192	@ 0xc0
 8004958:	d013      	beq.n	8004982 <UART_SetConfig+0x1ba>
 800495a:	2bc0      	cmp	r3, #192	@ 0xc0
 800495c:	d814      	bhi.n	8004988 <UART_SetConfig+0x1c0>
 800495e:	2b80      	cmp	r3, #128	@ 0x80
 8004960:	d009      	beq.n	8004976 <UART_SetConfig+0x1ae>
 8004962:	2b80      	cmp	r3, #128	@ 0x80
 8004964:	d810      	bhi.n	8004988 <UART_SetConfig+0x1c0>
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <UART_SetConfig+0x1a8>
 800496a:	2b40      	cmp	r3, #64	@ 0x40
 800496c:	d006      	beq.n	800497c <UART_SetConfig+0x1b4>
 800496e:	e00b      	b.n	8004988 <UART_SetConfig+0x1c0>
 8004970:	2300      	movs	r3, #0
 8004972:	77fb      	strb	r3, [r7, #31]
 8004974:	e0cc      	b.n	8004b10 <UART_SetConfig+0x348>
 8004976:	2302      	movs	r3, #2
 8004978:	77fb      	strb	r3, [r7, #31]
 800497a:	e0c9      	b.n	8004b10 <UART_SetConfig+0x348>
 800497c:	2304      	movs	r3, #4
 800497e:	77fb      	strb	r3, [r7, #31]
 8004980:	e0c6      	b.n	8004b10 <UART_SetConfig+0x348>
 8004982:	2308      	movs	r3, #8
 8004984:	77fb      	strb	r3, [r7, #31]
 8004986:	e0c3      	b.n	8004b10 <UART_SetConfig+0x348>
 8004988:	2310      	movs	r3, #16
 800498a:	77fb      	strb	r3, [r7, #31]
 800498c:	e0c0      	b.n	8004b10 <UART_SetConfig+0x348>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a44      	ldr	r2, [pc, #272]	@ (8004aa4 <UART_SetConfig+0x2dc>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d125      	bne.n	80049e4 <UART_SetConfig+0x21c>
 8004998:	4b3e      	ldr	r3, [pc, #248]	@ (8004a94 <UART_SetConfig+0x2cc>)
 800499a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800499e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049a6:	d017      	beq.n	80049d8 <UART_SetConfig+0x210>
 80049a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049ac:	d817      	bhi.n	80049de <UART_SetConfig+0x216>
 80049ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049b2:	d00b      	beq.n	80049cc <UART_SetConfig+0x204>
 80049b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049b8:	d811      	bhi.n	80049de <UART_SetConfig+0x216>
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <UART_SetConfig+0x1fe>
 80049be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049c2:	d006      	beq.n	80049d2 <UART_SetConfig+0x20a>
 80049c4:	e00b      	b.n	80049de <UART_SetConfig+0x216>
 80049c6:	2300      	movs	r3, #0
 80049c8:	77fb      	strb	r3, [r7, #31]
 80049ca:	e0a1      	b.n	8004b10 <UART_SetConfig+0x348>
 80049cc:	2302      	movs	r3, #2
 80049ce:	77fb      	strb	r3, [r7, #31]
 80049d0:	e09e      	b.n	8004b10 <UART_SetConfig+0x348>
 80049d2:	2304      	movs	r3, #4
 80049d4:	77fb      	strb	r3, [r7, #31]
 80049d6:	e09b      	b.n	8004b10 <UART_SetConfig+0x348>
 80049d8:	2308      	movs	r3, #8
 80049da:	77fb      	strb	r3, [r7, #31]
 80049dc:	e098      	b.n	8004b10 <UART_SetConfig+0x348>
 80049de:	2310      	movs	r3, #16
 80049e0:	77fb      	strb	r3, [r7, #31]
 80049e2:	e095      	b.n	8004b10 <UART_SetConfig+0x348>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a2f      	ldr	r2, [pc, #188]	@ (8004aa8 <UART_SetConfig+0x2e0>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d125      	bne.n	8004a3a <UART_SetConfig+0x272>
 80049ee:	4b29      	ldr	r3, [pc, #164]	@ (8004a94 <UART_SetConfig+0x2cc>)
 80049f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80049f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049fc:	d017      	beq.n	8004a2e <UART_SetConfig+0x266>
 80049fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a02:	d817      	bhi.n	8004a34 <UART_SetConfig+0x26c>
 8004a04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a08:	d00b      	beq.n	8004a22 <UART_SetConfig+0x25a>
 8004a0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a0e:	d811      	bhi.n	8004a34 <UART_SetConfig+0x26c>
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d003      	beq.n	8004a1c <UART_SetConfig+0x254>
 8004a14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a18:	d006      	beq.n	8004a28 <UART_SetConfig+0x260>
 8004a1a:	e00b      	b.n	8004a34 <UART_SetConfig+0x26c>
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	77fb      	strb	r3, [r7, #31]
 8004a20:	e076      	b.n	8004b10 <UART_SetConfig+0x348>
 8004a22:	2302      	movs	r3, #2
 8004a24:	77fb      	strb	r3, [r7, #31]
 8004a26:	e073      	b.n	8004b10 <UART_SetConfig+0x348>
 8004a28:	2304      	movs	r3, #4
 8004a2a:	77fb      	strb	r3, [r7, #31]
 8004a2c:	e070      	b.n	8004b10 <UART_SetConfig+0x348>
 8004a2e:	2308      	movs	r3, #8
 8004a30:	77fb      	strb	r3, [r7, #31]
 8004a32:	e06d      	b.n	8004b10 <UART_SetConfig+0x348>
 8004a34:	2310      	movs	r3, #16
 8004a36:	77fb      	strb	r3, [r7, #31]
 8004a38:	e06a      	b.n	8004b10 <UART_SetConfig+0x348>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a1b      	ldr	r2, [pc, #108]	@ (8004aac <UART_SetConfig+0x2e4>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d138      	bne.n	8004ab6 <UART_SetConfig+0x2ee>
 8004a44:	4b13      	ldr	r3, [pc, #76]	@ (8004a94 <UART_SetConfig+0x2cc>)
 8004a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a4a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004a4e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a52:	d017      	beq.n	8004a84 <UART_SetConfig+0x2bc>
 8004a54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a58:	d82a      	bhi.n	8004ab0 <UART_SetConfig+0x2e8>
 8004a5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a5e:	d00b      	beq.n	8004a78 <UART_SetConfig+0x2b0>
 8004a60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a64:	d824      	bhi.n	8004ab0 <UART_SetConfig+0x2e8>
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <UART_SetConfig+0x2aa>
 8004a6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a6e:	d006      	beq.n	8004a7e <UART_SetConfig+0x2b6>
 8004a70:	e01e      	b.n	8004ab0 <UART_SetConfig+0x2e8>
 8004a72:	2300      	movs	r3, #0
 8004a74:	77fb      	strb	r3, [r7, #31]
 8004a76:	e04b      	b.n	8004b10 <UART_SetConfig+0x348>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	77fb      	strb	r3, [r7, #31]
 8004a7c:	e048      	b.n	8004b10 <UART_SetConfig+0x348>
 8004a7e:	2304      	movs	r3, #4
 8004a80:	77fb      	strb	r3, [r7, #31]
 8004a82:	e045      	b.n	8004b10 <UART_SetConfig+0x348>
 8004a84:	2308      	movs	r3, #8
 8004a86:	77fb      	strb	r3, [r7, #31]
 8004a88:	e042      	b.n	8004b10 <UART_SetConfig+0x348>
 8004a8a:	bf00      	nop
 8004a8c:	efff69f3 	.word	0xefff69f3
 8004a90:	40011000 	.word	0x40011000
 8004a94:	40023800 	.word	0x40023800
 8004a98:	40004400 	.word	0x40004400
 8004a9c:	40004800 	.word	0x40004800
 8004aa0:	40004c00 	.word	0x40004c00
 8004aa4:	40005000 	.word	0x40005000
 8004aa8:	40011400 	.word	0x40011400
 8004aac:	40007800 	.word	0x40007800
 8004ab0:	2310      	movs	r3, #16
 8004ab2:	77fb      	strb	r3, [r7, #31]
 8004ab4:	e02c      	b.n	8004b10 <UART_SetConfig+0x348>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a72      	ldr	r2, [pc, #456]	@ (8004c84 <UART_SetConfig+0x4bc>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d125      	bne.n	8004b0c <UART_SetConfig+0x344>
 8004ac0:	4b71      	ldr	r3, [pc, #452]	@ (8004c88 <UART_SetConfig+0x4c0>)
 8004ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ac6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004aca:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004ace:	d017      	beq.n	8004b00 <UART_SetConfig+0x338>
 8004ad0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004ad4:	d817      	bhi.n	8004b06 <UART_SetConfig+0x33e>
 8004ad6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ada:	d00b      	beq.n	8004af4 <UART_SetConfig+0x32c>
 8004adc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ae0:	d811      	bhi.n	8004b06 <UART_SetConfig+0x33e>
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <UART_SetConfig+0x326>
 8004ae6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004aea:	d006      	beq.n	8004afa <UART_SetConfig+0x332>
 8004aec:	e00b      	b.n	8004b06 <UART_SetConfig+0x33e>
 8004aee:	2300      	movs	r3, #0
 8004af0:	77fb      	strb	r3, [r7, #31]
 8004af2:	e00d      	b.n	8004b10 <UART_SetConfig+0x348>
 8004af4:	2302      	movs	r3, #2
 8004af6:	77fb      	strb	r3, [r7, #31]
 8004af8:	e00a      	b.n	8004b10 <UART_SetConfig+0x348>
 8004afa:	2304      	movs	r3, #4
 8004afc:	77fb      	strb	r3, [r7, #31]
 8004afe:	e007      	b.n	8004b10 <UART_SetConfig+0x348>
 8004b00:	2308      	movs	r3, #8
 8004b02:	77fb      	strb	r3, [r7, #31]
 8004b04:	e004      	b.n	8004b10 <UART_SetConfig+0x348>
 8004b06:	2310      	movs	r3, #16
 8004b08:	77fb      	strb	r3, [r7, #31]
 8004b0a:	e001      	b.n	8004b10 <UART_SetConfig+0x348>
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b18:	d15b      	bne.n	8004bd2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004b1a:	7ffb      	ldrb	r3, [r7, #31]
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d828      	bhi.n	8004b72 <UART_SetConfig+0x3aa>
 8004b20:	a201      	add	r2, pc, #4	@ (adr r2, 8004b28 <UART_SetConfig+0x360>)
 8004b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b26:	bf00      	nop
 8004b28:	08004b4d 	.word	0x08004b4d
 8004b2c:	08004b55 	.word	0x08004b55
 8004b30:	08004b5d 	.word	0x08004b5d
 8004b34:	08004b73 	.word	0x08004b73
 8004b38:	08004b63 	.word	0x08004b63
 8004b3c:	08004b73 	.word	0x08004b73
 8004b40:	08004b73 	.word	0x08004b73
 8004b44:	08004b73 	.word	0x08004b73
 8004b48:	08004b6b 	.word	0x08004b6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b4c:	f7fd fd72 	bl	8002634 <HAL_RCC_GetPCLK1Freq>
 8004b50:	61b8      	str	r0, [r7, #24]
        break;
 8004b52:	e013      	b.n	8004b7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b54:	f7fd fd82 	bl	800265c <HAL_RCC_GetPCLK2Freq>
 8004b58:	61b8      	str	r0, [r7, #24]
        break;
 8004b5a:	e00f      	b.n	8004b7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b5c:	4b4b      	ldr	r3, [pc, #300]	@ (8004c8c <UART_SetConfig+0x4c4>)
 8004b5e:	61bb      	str	r3, [r7, #24]
        break;
 8004b60:	e00c      	b.n	8004b7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b62:	f7fd fc57 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 8004b66:	61b8      	str	r0, [r7, #24]
        break;
 8004b68:	e008      	b.n	8004b7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b6e:	61bb      	str	r3, [r7, #24]
        break;
 8004b70:	e004      	b.n	8004b7c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	77bb      	strb	r3, [r7, #30]
        break;
 8004b7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d074      	beq.n	8004c6c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	005a      	lsls	r2, r3, #1
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	085b      	lsrs	r3, r3, #1
 8004b8c:	441a      	add	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	2b0f      	cmp	r3, #15
 8004b9c:	d916      	bls.n	8004bcc <UART_SetConfig+0x404>
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ba4:	d212      	bcs.n	8004bcc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	f023 030f 	bic.w	r3, r3, #15
 8004bae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	085b      	lsrs	r3, r3, #1
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	89fb      	ldrh	r3, [r7, #14]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	89fa      	ldrh	r2, [r7, #14]
 8004bc8:	60da      	str	r2, [r3, #12]
 8004bca:	e04f      	b.n	8004c6c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	77bb      	strb	r3, [r7, #30]
 8004bd0:	e04c      	b.n	8004c6c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bd2:	7ffb      	ldrb	r3, [r7, #31]
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d828      	bhi.n	8004c2a <UART_SetConfig+0x462>
 8004bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8004be0 <UART_SetConfig+0x418>)
 8004bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bde:	bf00      	nop
 8004be0:	08004c05 	.word	0x08004c05
 8004be4:	08004c0d 	.word	0x08004c0d
 8004be8:	08004c15 	.word	0x08004c15
 8004bec:	08004c2b 	.word	0x08004c2b
 8004bf0:	08004c1b 	.word	0x08004c1b
 8004bf4:	08004c2b 	.word	0x08004c2b
 8004bf8:	08004c2b 	.word	0x08004c2b
 8004bfc:	08004c2b 	.word	0x08004c2b
 8004c00:	08004c23 	.word	0x08004c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c04:	f7fd fd16 	bl	8002634 <HAL_RCC_GetPCLK1Freq>
 8004c08:	61b8      	str	r0, [r7, #24]
        break;
 8004c0a:	e013      	b.n	8004c34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c0c:	f7fd fd26 	bl	800265c <HAL_RCC_GetPCLK2Freq>
 8004c10:	61b8      	str	r0, [r7, #24]
        break;
 8004c12:	e00f      	b.n	8004c34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c14:	4b1d      	ldr	r3, [pc, #116]	@ (8004c8c <UART_SetConfig+0x4c4>)
 8004c16:	61bb      	str	r3, [r7, #24]
        break;
 8004c18:	e00c      	b.n	8004c34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c1a:	f7fd fbfb 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 8004c1e:	61b8      	str	r0, [r7, #24]
        break;
 8004c20:	e008      	b.n	8004c34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c26:	61bb      	str	r3, [r7, #24]
        break;
 8004c28:	e004      	b.n	8004c34 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	77bb      	strb	r3, [r7, #30]
        break;
 8004c32:	bf00      	nop
    }

    if (pclk != 0U)
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d018      	beq.n	8004c6c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	085a      	lsrs	r2, r3, #1
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	441a      	add	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	2b0f      	cmp	r3, #15
 8004c52:	d909      	bls.n	8004c68 <UART_SetConfig+0x4a0>
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c5a:	d205      	bcs.n	8004c68 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	60da      	str	r2, [r3, #12]
 8004c66:	e001      	b.n	8004c6c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004c78:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3720      	adds	r7, #32
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	40007c00 	.word	0x40007c00
 8004c88:	40023800 	.word	0x40023800
 8004c8c:	00f42400 	.word	0x00f42400

08004c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9c:	f003 0308 	and.w	r3, r3, #8
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d02:	f003 0304 	and.w	r3, r3, #4
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01a      	beq.n	8004da6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d8e:	d10a      	bne.n	8004da6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	605a      	str	r2, [r3, #4]
  }
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b098      	sub	sp, #96	@ 0x60
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004de4:	f7fc f874 	bl	8000ed0 <HAL_GetTick>
 8004de8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0308 	and.w	r3, r3, #8
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d12e      	bne.n	8004e56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004df8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e00:	2200      	movs	r2, #0
 8004e02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f88c 	bl	8004f24 <UART_WaitOnFlagUntilTimeout>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d021      	beq.n	8004e56 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e1a:	e853 3f00 	ldrex	r3, [r3]
 8004e1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e26:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e30:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e32:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e38:	e841 2300 	strex	r3, r2, [r1]
 8004e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1e6      	bne.n	8004e12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2220      	movs	r2, #32
 8004e48:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e062      	b.n	8004f1c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d149      	bne.n	8004ef8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f856 	bl	8004f24 <UART_WaitOnFlagUntilTimeout>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d03c      	beq.n	8004ef8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e86:	e853 3f00 	ldrex	r3, [r3]
 8004e8a:	623b      	str	r3, [r7, #32]
   return(result);
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ea2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ea4:	e841 2300 	strex	r3, r2, [r1]
 8004ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1e6      	bne.n	8004e7e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3308      	adds	r3, #8
 8004eb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	e853 3f00 	ldrex	r3, [r3]
 8004ebe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 0301 	bic.w	r3, r3, #1
 8004ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3308      	adds	r3, #8
 8004ece:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ed0:	61fa      	str	r2, [r7, #28]
 8004ed2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed4:	69b9      	ldr	r1, [r7, #24]
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	e841 2300 	strex	r3, r2, [r1]
 8004edc:	617b      	str	r3, [r7, #20]
   return(result);
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1e5      	bne.n	8004eb0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e011      	b.n	8004f1c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2220      	movs	r2, #32
 8004efc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3758      	adds	r7, #88	@ 0x58
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	603b      	str	r3, [r7, #0]
 8004f30:	4613      	mov	r3, r2
 8004f32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f34:	e04f      	b.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3c:	d04b      	beq.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f3e:	f7fb ffc7 	bl	8000ed0 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d302      	bcc.n	8004f54 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d101      	bne.n	8004f58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e04e      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0304 	and.w	r3, r3, #4
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d037      	beq.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	2b80      	cmp	r3, #128	@ 0x80
 8004f6a:	d034      	beq.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b40      	cmp	r3, #64	@ 0x40
 8004f70:	d031      	beq.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	f003 0308 	and.w	r3, r3, #8
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d110      	bne.n	8004fa2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2208      	movs	r2, #8
 8004f86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 f838 	bl	8004ffe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2208      	movs	r2, #8
 8004f92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e029      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fb0:	d111      	bne.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004fba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 f81e 	bl	8004ffe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e00f      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69da      	ldr	r2, [r3, #28]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	bf0c      	ite	eq
 8004fe6:	2301      	moveq	r3, #1
 8004fe8:	2300      	movne	r3, #0
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	461a      	mov	r2, r3
 8004fee:	79fb      	ldrb	r3, [r7, #7]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d0a0      	beq.n	8004f36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b095      	sub	sp, #84	@ 0x54
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800500e:	e853 3f00 	ldrex	r3, [r3]
 8005012:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005016:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800501a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005024:	643b      	str	r3, [r7, #64]	@ 0x40
 8005026:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005028:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800502a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800502c:	e841 2300 	strex	r3, r2, [r1]
 8005030:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1e6      	bne.n	8005006 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3308      	adds	r3, #8
 800503e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005040:	6a3b      	ldr	r3, [r7, #32]
 8005042:	e853 3f00 	ldrex	r3, [r3]
 8005046:	61fb      	str	r3, [r7, #28]
   return(result);
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	f023 0301 	bic.w	r3, r3, #1
 800504e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3308      	adds	r3, #8
 8005056:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005058:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800505a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800505e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005060:	e841 2300 	strex	r3, r2, [r1]
 8005064:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1e5      	bne.n	8005038 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005070:	2b01      	cmp	r3, #1
 8005072:	d118      	bne.n	80050a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	e853 3f00 	ldrex	r3, [r3]
 8005080:	60bb      	str	r3, [r7, #8]
   return(result);
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	f023 0310 	bic.w	r3, r3, #16
 8005088:	647b      	str	r3, [r7, #68]	@ 0x44
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005092:	61bb      	str	r3, [r7, #24]
 8005094:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005096:	6979      	ldr	r1, [r7, #20]
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	e841 2300 	strex	r3, r2, [r1]
 800509e:	613b      	str	r3, [r7, #16]
   return(result);
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1e6      	bne.n	8005074 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2220      	movs	r2, #32
 80050aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80050ba:	bf00      	nop
 80050bc:	3754      	adds	r7, #84	@ 0x54
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b084      	sub	sp, #16
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f7ff fb4f 	bl	8004788 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050ea:	bf00      	nop
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b08f      	sub	sp, #60	@ 0x3c
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050fe:	2b21      	cmp	r3, #33	@ 0x21
 8005100:	d14c      	bne.n	800519c <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005108:	b29b      	uxth	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d132      	bne.n	8005174 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	e853 3f00 	ldrex	r3, [r3]
 800511a:	61fb      	str	r3, [r7, #28]
   return(result);
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005122:	637b      	str	r3, [r7, #52]	@ 0x34
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	461a      	mov	r2, r3
 800512a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800512c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800512e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005130:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005134:	e841 2300 	strex	r3, r2, [r1]
 8005138:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1e6      	bne.n	800510e <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	e853 3f00 	ldrex	r3, [r3]
 800514c:	60bb      	str	r3, [r7, #8]
   return(result);
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005154:	633b      	str	r3, [r7, #48]	@ 0x30
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	461a      	mov	r2, r3
 800515c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515e:	61bb      	str	r3, [r7, #24]
 8005160:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005162:	6979      	ldr	r1, [r7, #20]
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	e841 2300 	strex	r3, r2, [r1]
 800516a:	613b      	str	r3, [r7, #16]
   return(result);
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1e6      	bne.n	8005140 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005172:	e013      	b.n	800519c <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005178:	781a      	ldrb	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800519c:	bf00      	nop
 800519e:	373c      	adds	r7, #60	@ 0x3c
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b091      	sub	sp, #68	@ 0x44
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051b4:	2b21      	cmp	r3, #33	@ 0x21
 80051b6:	d151      	bne.n	800525c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80051be:	b29b      	uxth	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d132      	bne.n	800522a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051cc:	e853 3f00 	ldrex	r3, [r3]
 80051d0:	623b      	str	r3, [r7, #32]
   return(result);
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	461a      	mov	r2, r3
 80051e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80051e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051ea:	e841 2300 	strex	r3, r2, [r1]
 80051ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1e6      	bne.n	80051c4 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	e853 3f00 	ldrex	r3, [r3]
 8005202:	60fb      	str	r3, [r7, #12]
   return(result);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800520a:	637b      	str	r3, [r7, #52]	@ 0x34
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	461a      	mov	r2, r3
 8005212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005214:	61fb      	str	r3, [r7, #28]
 8005216:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005218:	69b9      	ldr	r1, [r7, #24]
 800521a:	69fa      	ldr	r2, [r7, #28]
 800521c:	e841 2300 	strex	r3, r2, [r1]
 8005220:	617b      	str	r3, [r7, #20]
   return(result);
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1e6      	bne.n	80051f6 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005228:	e018      	b.n	800525c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800522e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	461a      	mov	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800523e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005244:	1c9a      	adds	r2, r3, #2
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005250:	b29b      	uxth	r3, r3
 8005252:	3b01      	subs	r3, #1
 8005254:	b29a      	uxth	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800525c:	bf00      	nop
 800525e:	3744      	adds	r7, #68	@ 0x44
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	e853 3f00 	ldrex	r3, [r3]
 800527c:	60bb      	str	r3, [r7, #8]
   return(result);
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005284:	61fb      	str	r3, [r7, #28]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	461a      	mov	r2, r3
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	61bb      	str	r3, [r7, #24]
 8005290:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005292:	6979      	ldr	r1, [r7, #20]
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	e841 2300 	strex	r3, r2, [r1]
 800529a:	613b      	str	r3, [r7, #16]
   return(result);
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1e6      	bne.n	8005270 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2220      	movs	r2, #32
 80052a6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7ff fa60 	bl	8004774 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052b4:	bf00      	nop
 80052b6:	3720      	adds	r7, #32
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <memset>:
 80052bc:	4402      	add	r2, r0
 80052be:	4603      	mov	r3, r0
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d100      	bne.n	80052c6 <memset+0xa>
 80052c4:	4770      	bx	lr
 80052c6:	f803 1b01 	strb.w	r1, [r3], #1
 80052ca:	e7f9      	b.n	80052c0 <memset+0x4>

080052cc <__libc_init_array>:
 80052cc:	b570      	push	{r4, r5, r6, lr}
 80052ce:	4d0d      	ldr	r5, [pc, #52]	@ (8005304 <__libc_init_array+0x38>)
 80052d0:	4c0d      	ldr	r4, [pc, #52]	@ (8005308 <__libc_init_array+0x3c>)
 80052d2:	1b64      	subs	r4, r4, r5
 80052d4:	10a4      	asrs	r4, r4, #2
 80052d6:	2600      	movs	r6, #0
 80052d8:	42a6      	cmp	r6, r4
 80052da:	d109      	bne.n	80052f0 <__libc_init_array+0x24>
 80052dc:	4d0b      	ldr	r5, [pc, #44]	@ (800530c <__libc_init_array+0x40>)
 80052de:	4c0c      	ldr	r4, [pc, #48]	@ (8005310 <__libc_init_array+0x44>)
 80052e0:	f000 f818 	bl	8005314 <_init>
 80052e4:	1b64      	subs	r4, r4, r5
 80052e6:	10a4      	asrs	r4, r4, #2
 80052e8:	2600      	movs	r6, #0
 80052ea:	42a6      	cmp	r6, r4
 80052ec:	d105      	bne.n	80052fa <__libc_init_array+0x2e>
 80052ee:	bd70      	pop	{r4, r5, r6, pc}
 80052f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052f4:	4798      	blx	r3
 80052f6:	3601      	adds	r6, #1
 80052f8:	e7ee      	b.n	80052d8 <__libc_init_array+0xc>
 80052fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80052fe:	4798      	blx	r3
 8005300:	3601      	adds	r6, #1
 8005302:	e7f2      	b.n	80052ea <__libc_init_array+0x1e>
 8005304:	08005354 	.word	0x08005354
 8005308:	08005354 	.word	0x08005354
 800530c:	08005354 	.word	0x08005354
 8005310:	08005358 	.word	0x08005358

08005314 <_init>:
 8005314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005316:	bf00      	nop
 8005318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800531a:	bc08      	pop	{r3}
 800531c:	469e      	mov	lr, r3
 800531e:	4770      	bx	lr

08005320 <_fini>:
 8005320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005322:	bf00      	nop
 8005324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005326:	bc08      	pop	{r3}
 8005328:	469e      	mov	lr, r3
 800532a:	4770      	bx	lr
