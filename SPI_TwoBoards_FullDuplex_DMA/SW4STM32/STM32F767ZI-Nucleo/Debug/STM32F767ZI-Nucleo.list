
STM32F767ZI-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000738  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000930  08000930  0000209c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000930  08000930  00001930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000934  08000934  00001934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000009c  20000000  08000938  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b4  2000009c  080009d4  0000209c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000150  080009d4  00002150  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000209c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00004012  00000000  00000000  000020ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000ac1  00000000  00000000  000060dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loclists 00000eee  00000000  00000000  00006b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000001d0  00000000  00000000  00007a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000002e1  00000000  00000000  00007c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0001eecf  00000000  00000000  00007f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00002cf0  00000000  00000000  00026e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000b4009  00000000  00000000  00029b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  000ddb09  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000003d0  00000000  00000000  000ddb4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 000000c1  00000000  00000000  000ddf1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000009c 	.word	0x2000009c
 8000214:	00000000 	.word	0x00000000
 8000218:	08000918 	.word	0x08000918

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200000a0 	.word	0x200000a0
 8000234:	08000918 	.word	0x08000918

08000238 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000238:	490f      	ldr	r1, [pc, #60]	@ (8000278 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800023a:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800023c:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8000240:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000244:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8000248:	4b0c      	ldr	r3, [pc, #48]	@ (800027c <SystemInit+0x44>)
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	f042 0201 	orr.w	r2, r2, #1
 8000250:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000252:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 800025a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800025e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000260:	4a07      	ldr	r2, [pc, #28]	@ (8000280 <SystemInit+0x48>)
 8000262:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800026a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800026c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800026e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000272:	608b      	str	r3, [r1, #8]
#endif
}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	e000ed00 	.word	0xe000ed00
 800027c:	40023800 	.word	0x40023800
 8000280:	24003010 	.word	0x24003010

08000284 <LL_mDelay>:
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000284:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8000288:	b082      	sub	sp, #8
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 800028a:	1c41      	adds	r1, r0, #1
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800028c:	691b      	ldr	r3, [r3, #16]
  {
    Delay++;
 800028e:	bf18      	it	ne
 8000290:	3001      	addne	r0, #1
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000292:	9301      	str	r3, [sp, #4]
  ((void)tmp);
 8000294:	9b01      	ldr	r3, [sp, #4]
  }

  while (Delay)
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000296:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
  while (Delay)
 800029a:	b908      	cbnz	r0, 80002a0 <LL_mDelay+0x1c>
    {
      Delay--;
    }
  }
}
 800029c:	b002      	add	sp, #8
 800029e:	4770      	bx	lr
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80002a0:	691a      	ldr	r2, [r3, #16]
 80002a2:	03d2      	lsls	r2, r2, #15
 80002a4:	d5fc      	bpl.n	80002a0 <LL_mDelay+0x1c>
      Delay--;
 80002a6:	3801      	subs	r0, #1
 80002a8:	e7f7      	b.n	800029a <LL_mDelay+0x16>
	...

080002ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80002e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002b2:	e003      	b.n	80002bc <LoopCopyDataInit>

080002b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002b4:	4b0c      	ldr	r3, [pc, #48]	@ (80002e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002ba:	3104      	adds	r1, #4

080002bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002bc:	480b      	ldr	r0, [pc, #44]	@ (80002ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002be:	4b0c      	ldr	r3, [pc, #48]	@ (80002f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002c4:	d3f6      	bcc.n	80002b4 <CopyDataInit>
  ldr  r2, =_sbss
 80002c6:	4a0b      	ldr	r2, [pc, #44]	@ (80002f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002c8:	e002      	b.n	80002d0 <LoopFillZerobss>

080002ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002cc:	f842 3b04 	str.w	r3, [r2], #4

080002d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002d0:	4b09      	ldr	r3, [pc, #36]	@ (80002f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80002d4:	d3f9      	bcc.n	80002ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80002d6:	f7ff ffaf 	bl	8000238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002da:	f000 faf9 	bl	80008d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002de:	f000 fa4d 	bl	800077c <main>
  bx  lr    
 80002e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80002e4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80002e8:	08000938 	.word	0x08000938
  ldr  r0, =_sdata
 80002ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80002f0:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
 80002f4:	2000009c 	.word	0x2000009c
  ldr  r3, = _ebss
 80002f8:	20000150 	.word	0x20000150

080002fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002fc:	e7fe      	b.n	80002fc <ADC_IRQHandler>
	...

08000300 <LL_AHB1_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000300:	4b05      	ldr	r3, [pc, #20]	@ (8000318 <LL_AHB1_GRP1_EnableClock+0x18>)
{
 8000302:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000304:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000306:	4302      	orrs	r2, r0
 8000308:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800030a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800030c:	4003      	ands	r3, r0
 800030e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000310:	9b01      	ldr	r3, [sp, #4]
}
 8000312:	b002      	add	sp, #8
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40023800 	.word	0x40023800

0800031c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800031c:	6803      	ldr	r3, [r0, #0]
{
 800031e:	b530      	push	{r4, r5, lr}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000320:	fa91 f4a1 	rbit	r4, r1
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000324:	fab4 f484 	clz	r4, r4
 8000328:	fa91 f1a1 	rbit	r1, r1
 800032c:	2503      	movs	r5, #3
 800032e:	fab1 f181 	clz	r1, r1
 8000332:	0064      	lsls	r4, r4, #1
 8000334:	0049      	lsls	r1, r1, #1
 8000336:	fa05 f404 	lsl.w	r4, r5, r4
 800033a:	408a      	lsls	r2, r1
 800033c:	ea23 0304 	bic.w	r3, r3, r4
 8000340:	4313      	orrs	r3, r2
 8000342:	6003      	str	r3, [r0, #0]
}
 8000344:	bd30      	pop	{r4, r5, pc}
	...

08000348 <LL_GPIO_SetAFPin_0_7.constprop.0>:
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000348:	490b      	ldr	r1, [pc, #44]	@ (8000378 <LL_GPIO_SetAFPin_0_7.constprop.0+0x30>)
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
 800034a:	b510      	push	{r4, lr}
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800034c:	6a0b      	ldr	r3, [r1, #32]
 800034e:	fa90 f2a0 	rbit	r2, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	fa90 f0a0 	rbit	r0, r0
 800035a:	240f      	movs	r4, #15
 800035c:	0092      	lsls	r2, r2, #2
 800035e:	fab0 f080 	clz	r0, r0
 8000362:	fa04 f202 	lsl.w	r2, r4, r2
 8000366:	0080      	lsls	r0, r0, #2
 8000368:	ea23 0302 	bic.w	r3, r3, r2
 800036c:	2205      	movs	r2, #5
 800036e:	4082      	lsls	r2, r0
 8000370:	4313      	orrs	r3, r2
 8000372:	620b      	str	r3, [r1, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000374:	bd10      	pop	{r4, pc}
 8000376:	bf00      	nop
 8000378:	40020000 	.word	0x40020000

0800037c <LL_GPIO_SetPinPull.constprop.0>:
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800037c:	490b      	ldr	r1, [pc, #44]	@ (80003ac <LL_GPIO_SetPinPull.constprop.0+0x30>)
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
 800037e:	b510      	push	{r4, lr}
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000380:	68cb      	ldr	r3, [r1, #12]
 8000382:	fa90 f2a0 	rbit	r2, r0
 8000386:	fab2 f282 	clz	r2, r2
 800038a:	fa90 f0a0 	rbit	r0, r0
 800038e:	2403      	movs	r4, #3
 8000390:	0052      	lsls	r2, r2, #1
 8000392:	fab0 f080 	clz	r0, r0
 8000396:	fa04 f202 	lsl.w	r2, r4, r2
 800039a:	0040      	lsls	r0, r0, #1
 800039c:	ea23 0302 	bic.w	r3, r3, r2
 80003a0:	2202      	movs	r2, #2
 80003a2:	4082      	lsls	r2, r0
 80003a4:	4313      	orrs	r3, r2
 80003a6:	60cb      	str	r3, [r1, #12]
}
 80003a8:	bd10      	pop	{r4, pc}
 80003aa:	bf00      	nop
 80003ac:	40020000 	.word	0x40020000

080003b0 <LL_GPIO_SetPinSpeed.constprop.0>:
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80003b0:	490b      	ldr	r1, [pc, #44]	@ (80003e0 <LL_GPIO_SetPinSpeed.constprop.0+0x30>)
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
 80003b2:	b510      	push	{r4, lr}
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80003b4:	688b      	ldr	r3, [r1, #8]
 80003b6:	fa90 f2a0 	rbit	r2, r0
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	fa90 f0a0 	rbit	r0, r0
 80003c2:	2403      	movs	r4, #3
 80003c4:	0052      	lsls	r2, r2, #1
 80003c6:	fab0 f080 	clz	r0, r0
 80003ca:	fa04 f202 	lsl.w	r2, r4, r2
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	ea23 0302 	bic.w	r3, r3, r2
 80003d4:	2202      	movs	r2, #2
 80003d6:	4082      	lsls	r2, r0
 80003d8:	4313      	orrs	r3, r2
 80003da:	608b      	str	r3, [r1, #8]
}
 80003dc:	bd10      	pop	{r4, pc}
 80003de:	bf00      	nop
 80003e0:	40020000 	.word	0x40020000

080003e4 <Configure_DMA>:
{
  /* DMA2 used for SPI1 Transmission
   * DMA2 used for SPI1 Reception
   */
  /* (1) Enable the clock of DMA2 and DMA2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 80003e4:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003e8:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
{
 80003ec:	b570      	push	{r4, r5, r6, lr}
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 80003ee:	f7ff ff87 	bl	8000300 <LL_AHB1_GRP1_EnableClock>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003f2:	4b30      	ldr	r3, [pc, #192]	@ (80004b4 <Configure_DMA+0xd0>)
 80003f4:	2200      	movs	r2, #0
  LL_DMA_ConfigTransfer(DMA2,
                        LL_DMA_STREAM_2,
                        LL_DMA_DIRECTION_PERIPH_TO_MEMORY | LL_DMA_PRIORITY_HIGH | LL_DMA_MODE_NORMAL |
                        LL_DMA_PERIPH_NOINCREMENT | LL_DMA_MEMORY_INCREMENT |
                        LL_DMA_PDATAALIGN_BYTE | LL_DMA_MDATAALIGN_BYTE);
  LL_DMA_ConfigAddresses(DMA2,
 80003f6:	4830      	ldr	r0, [pc, #192]	@ (80004b8 <Configure_DMA+0xd4>)
 80003f8:	f883 233a 	strb.w	r2, [r3, #826]	@ 0x33a
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003fc:	6059      	str	r1, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003fe:	f883 233b 	strb.w	r2, [r3, #827]	@ 0x33b
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000402:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000406:	492d      	ldr	r1, [pc, #180]	@ (80004bc <Configure_DMA+0xd8>)
 8000408:	605a      	str	r2, [r3, #4]
  *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HIGH or @ref LL_DMA_PRIORITY_VERYHIGH
  *@retval None
  */
__STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Configuration)
{
  MODIFY_REG(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR,
 800040a:	4b2d      	ldr	r3, [pc, #180]	@ (80004c0 <Configure_DMA+0xdc>)
 800040c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800040e:	f422 325f 	bic.w	r2, r2, #228352	@ 0x37c00
 8000412:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 8000416:	f442 3201 	orr.w	r2, r2, #132096	@ 0x20400
 800041a:	641a      	str	r2, [r3, #64]	@ 0x40
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream)
{
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR));
 800041c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800041e:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t SrcAddress, uint32_t DstAddress, uint32_t Direction)
{
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8000422:	2a40      	cmp	r2, #64	@ 0x40
 8000424:	d13f      	bne.n	80004a6 <Configure_DMA+0xc2>
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, SrcAddress);
 8000426:	64d9      	str	r1, [r3, #76]	@ 0x4c
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
 8000428:	6498      	str	r0, [r3, #72]	@ 0x48
                         LL_DMA_STREAM_2,
                         LL_SPI_DMA_GetRegAddr(SPI1), (uint32_t)aRxBuffer,
                         LL_DMA_GetDataTransferDirection(DMA2, LL_DMA_STREAM_2));
  LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_2, ubNbDataToReceive);
 800042a:	4d26      	ldr	r5, [pc, #152]	@ (80004c4 <Configure_DMA+0xe0>)
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 800042c:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
 800042e:	4628      	mov	r0, r5
 8000430:	4c25      	ldr	r4, [pc, #148]	@ (80004c8 <Configure_DMA+0xe4>)
 8000432:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000436:	4026      	ands	r6, r4
 8000438:	4332      	orrs	r2, r6
 800043a:	645a      	str	r2, [r3, #68]	@ 0x44
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 800043c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800043e:	f022 52f0 	bic.w	r2, r2, #503316480	@ 0x1e000000
 8000442:	f042 62c0 	orr.w	r2, r2, #100663296	@ 0x6000000
 8000446:	641a      	str	r2, [r3, #64]	@ 0x40
  MODIFY_REG(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR,
 8000448:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800044a:	f422 325f 	bic.w	r2, r2, #228352	@ 0x37c00
 800044e:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 8000452:	f442 3201 	orr.w	r2, r2, #132096	@ 0x20400
 8000456:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800045a:	659a      	str	r2, [r3, #88]	@ 0x58
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR));
 800045c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800045e:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8000462:	2a40      	cmp	r2, #64	@ 0x40
 8000464:	d122      	bne.n	80004ac <Configure_DMA+0xc8>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, SrcAddress);
 8000466:	6658      	str	r0, [r3, #100]	@ 0x64
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
 8000468:	6619      	str	r1, [r3, #96]	@ 0x60
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 800046a:	4b15      	ldr	r3, [pc, #84]	@ (80004c0 <Configure_DMA+0xdc>)
                        LL_DMA_DIRECTION_MEMORY_TO_PERIPH | LL_DMA_PRIORITY_HIGH | LL_DMA_MODE_NORMAL |
                        LL_DMA_PERIPH_NOINCREMENT | LL_DMA_MEMORY_INCREMENT |
                        LL_DMA_PDATAALIGN_BYTE | LL_DMA_MDATAALIGN_BYTE);
  LL_DMA_ConfigAddresses(DMA2, LL_DMA_STREAM_3, (uint32_t)aTxBuffer, LL_SPI_DMA_GetRegAddr(SPI1),
                         LL_DMA_GetDataTransferDirection(DMA2, LL_DMA_STREAM_3));
  LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_3, ubNbDataToTransmit);
 800046c:	f895 2096 	ldrb.w	r2, [r5, #150]	@ 0x96
 8000470:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8000472:	4021      	ands	r1, r4
 8000474:	430a      	orrs	r2, r1
 8000476:	65da      	str	r2, [r3, #92]	@ 0x5c
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8000478:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800047a:	f022 52f0 	bic.w	r2, r2, #503316480	@ 0x1e000000
 800047e:	f042 62c0 	orr.w	r2, r2, #100663296	@ 0x6000000
 8000482:	659a      	str	r2, [r3, #88]	@ 0x58
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8000484:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000486:	f042 0210 	orr.w	r2, r2, #16
 800048a:	641a      	str	r2, [r3, #64]	@ 0x40
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TEIE);
 800048c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800048e:	f042 0204 	orr.w	r2, r2, #4
 8000492:	641a      	str	r2, [r3, #64]	@ 0x40
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8000494:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000496:	f042 0210 	orr.w	r2, r2, #16
 800049a:	659a      	str	r2, [r3, #88]	@ 0x58
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TEIE);
 800049c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800049e:	f042 0204 	orr.w	r2, r2, #4
 80004a2:	659a      	str	r2, [r3, #88]	@ 0x58
  /* (5) Enable DMA interrupts complete/error */
  LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_2);
  LL_DMA_EnableIT_TE(DMA2, LL_DMA_STREAM_2);
  LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_3);
  LL_DMA_EnableIT_TE(DMA2, LL_DMA_STREAM_3);
}
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 80004a6:	6499      	str	r1, [r3, #72]	@ 0x48
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 80004a8:	64d8      	str	r0, [r3, #76]	@ 0x4c
 80004aa:	e7be      	b.n	800042a <Configure_DMA+0x46>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 80004ac:	6618      	str	r0, [r3, #96]	@ 0x60
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 80004ae:	6659      	str	r1, [r3, #100]	@ 0x64
 80004b0:	e7db      	b.n	800046a <Configure_DMA+0x86>
 80004b2:	bf00      	nop
 80004b4:	e000e100 	.word	0xe000e100
 80004b8:	200000b8 	.word	0x200000b8
 80004bc:	4001300c 	.word	0x4001300c
 80004c0:	40026400 	.word	0x40026400
 80004c4:	20000004 	.word	0x20000004
 80004c8:	ffff0000 	.word	0xffff0000

080004cc <Configure_SPI>:
  *         commented examples - setting is default configuration from reset.
  * @param  None
  * @retval None
  */
void Configure_SPI(void)
{
 80004cc:	b513      	push	{r0, r1, r4, lr}
  /* (1) Enables GPIO clock and configures the SPI1 pins ********************/
  /* Enable the peripheral clock of GPIOA */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);

  /* Configure SCK Pin connected to pin 10 of CN7 connector */
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_5, LL_GPIO_MODE_ALTERNATE);
 80004ce:	4c33      	ldr	r4, [pc, #204]	@ (800059c <Configure_SPI+0xd0>)
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80004d0:	2001      	movs	r0, #1
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_5, LL_GPIO_MODE_ALTERNATE);
 80004d2:	2120      	movs	r1, #32
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80004d4:	f7ff ff14 	bl	8000300 <LL_AHB1_GRP1_EnableClock>
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_5, LL_GPIO_MODE_ALTERNATE);
 80004d8:	2202      	movs	r2, #2
 80004da:	4620      	mov	r0, r4
 80004dc:	f7ff ff1e 	bl	800031c <LL_GPIO_SetPinMode>
  LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_5, LL_GPIO_AF_5);
 80004e0:	2020      	movs	r0, #32
 80004e2:	f7ff ff31 	bl	8000348 <LL_GPIO_SetAFPin_0_7.constprop.0>
  LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_5, LL_GPIO_SPEED_FREQ_HIGH);
 80004e6:	2020      	movs	r0, #32
 80004e8:	f7ff ff62 	bl	80003b0 <LL_GPIO_SetPinSpeed.constprop.0>
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_5, LL_GPIO_PULL_DOWN);
 80004ec:	2020      	movs	r0, #32
 80004ee:	f7ff ff45 	bl	800037c <LL_GPIO_SetPinPull.constprop.0>

  /* Configure MISO Pin connected to pin 12 of CN7 connector */
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_6, LL_GPIO_MODE_ALTERNATE);
 80004f2:	2202      	movs	r2, #2
 80004f4:	2140      	movs	r1, #64	@ 0x40
 80004f6:	4620      	mov	r0, r4
 80004f8:	f7ff ff10 	bl	800031c <LL_GPIO_SetPinMode>
  LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_6, LL_GPIO_AF_5);
 80004fc:	2040      	movs	r0, #64	@ 0x40
 80004fe:	f7ff ff23 	bl	8000348 <LL_GPIO_SetAFPin_0_7.constprop.0>
  LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_6, LL_GPIO_SPEED_FREQ_HIGH);
 8000502:	2040      	movs	r0, #64	@ 0x40
 8000504:	f7ff ff54 	bl	80003b0 <LL_GPIO_SetPinSpeed.constprop.0>
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_6, LL_GPIO_PULL_DOWN);
 8000508:	2040      	movs	r0, #64	@ 0x40
 800050a:	f7ff ff37 	bl	800037c <LL_GPIO_SetPinPull.constprop.0>

  /* Configure MOSI Pin connected to pin 14 of CN7 connector */
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_7, LL_GPIO_MODE_ALTERNATE);
 800050e:	2202      	movs	r2, #2
 8000510:	2180      	movs	r1, #128	@ 0x80
 8000512:	4620      	mov	r0, r4
 8000514:	f7ff ff02 	bl	800031c <LL_GPIO_SetPinMode>
  LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_7, LL_GPIO_AF_5);
 8000518:	2080      	movs	r0, #128	@ 0x80
 800051a:	f7ff ff15 	bl	8000348 <LL_GPIO_SetAFPin_0_7.constprop.0>
  LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_7, LL_GPIO_SPEED_FREQ_HIGH);
 800051e:	2080      	movs	r0, #128	@ 0x80
 8000520:	f7ff ff46 	bl	80003b0 <LL_GPIO_SetPinSpeed.constprop.0>
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_7, LL_GPIO_PULL_DOWN);
 8000524:	2080      	movs	r0, #128	@ 0x80
 8000526:	f7ff ff29 	bl	800037c <LL_GPIO_SetPinPull.constprop.0>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800052a:	4b1d      	ldr	r3, [pc, #116]	@ (80005a0 <Configure_SPI+0xd4>)
 800052c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800052e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000532:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000536:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800053a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800053c:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 800053e:	4b19      	ldr	r3, [pc, #100]	@ (80005a4 <Configure_SPI+0xd8>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8000546:	f042 0220 	orr.w	r2, r2, #32
 800054a:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 8000552:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	f042 0201 	orr.w	r2, r2, #1
 800055a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	f042 0202 	orr.w	r2, r2, #2
 8000562:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_SPI_DATAWIDTH_16BIT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetDataWidth(SPI_TypeDef *SPIx, uint32_t DataWidth)
{
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8000564:	685a      	ldr	r2, [r3, #4]
 8000566:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800056a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800056e:	605a      	str	r2, [r3, #4]
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000576:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8000578:	685a      	ldr	r2, [r3, #4]
 800057a:	f022 0204 	bic.w	r2, r2, #4
 800057e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8000580:	685a      	ldr	r2, [r3, #4]
 8000582:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000586:	605a      	str	r2, [r3, #4]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_RX(SPI_TypeDef *SPIx)
{
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8000588:	685a      	ldr	r2, [r3, #4]
 800058a:	f042 0201 	orr.w	r2, r2, #1
 800058e:	605a      	str	r2, [r3, #4]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_TX(SPI_TypeDef *SPIx)
{
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8000590:	685a      	ldr	r2, [r3, #4]
 8000592:	f042 0202 	orr.w	r2, r2, #2
 8000596:	605a      	str	r2, [r3, #4]
  /* Configure SPI1 DMA transfer interrupts */
  /* Enable DMA RX Interrupt */
  LL_SPI_EnableDMAReq_RX(SPI1);
  /* Enable DMA TX Interrupt */
  LL_SPI_EnableDMAReq_TX(SPI1);
}
 8000598:	b002      	add	sp, #8
 800059a:	bd10      	pop	{r4, pc}
 800059c:	40020000 	.word	0x40020000
 80005a0:	40023800 	.word	0x40023800
 80005a4:	40013000 	.word	0x40013000

080005a8 <Activate_SPI>:
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80005a8:	4a07      	ldr	r2, [pc, #28]	@ (80005c8 <Activate_SPI+0x20>)
 80005aa:	6813      	ldr	r3, [r2, #0]
 80005ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005b0:	6013      	str	r3, [r2, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80005b2:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <Activate_SPI+0x24>)
 80005b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005b6:	f042 0201 	orr.w	r2, r2, #1
 80005ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80005bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80005be:	f042 0201 	orr.w	r2, r2, #1
 80005c2:	659a      	str	r2, [r3, #88]	@ 0x58
  LL_SPI_Enable(SPI1);

  /* Enable DMA Channels */
  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_3);
}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	40013000 	.word	0x40013000
 80005cc:	40026400 	.word	0x40026400

080005d0 <LED_Init>:
  * @retval None
  */
void LED_Init(void)
{
  /* Enable the LED1 Clock */
  LED1_GPIO_CLK_ENABLE();
 80005d0:	2002      	movs	r0, #2
{
 80005d2:	b508      	push	{r3, lr}
  LED1_GPIO_CLK_ENABLE();
 80005d4:	f7ff fe94 	bl	8000300 <LL_AHB1_GRP1_EnableClock>

  /* Configure IO in output push-pull mode to drive external LED1 */
  LL_GPIO_SetPinMode(LED1_GPIO_PORT, LED1_PIN, LL_GPIO_MODE_OUTPUT);
 80005d8:	2201      	movs	r2, #1
 80005da:	4803      	ldr	r0, [pc, #12]	@ (80005e8 <LED_Init+0x18>)
 80005dc:	4611      	mov	r1, r2
  //LL_GPIO_SetPinOutputType(LED1_GPIO_PORT, LED1_PIN, LL_GPIO_OUTPUT_PUSHPULL);
  /* Reset value is LL_GPIO_SPEED_FREQ_LOW */
  //LL_GPIO_SetPinSpeed(LED1_GPIO_PORT, LED1_PIN, LL_GPIO_SPEED_FREQ_LOW);
  /* Reset value is LL_GPIO_PULL_NO */
  //LL_GPIO_SetPinPull(LED1_GPIO_PORT, LED1_PIN, LL_GPIO_PULL_NO);
}
 80005de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LL_GPIO_SetPinMode(LED1_GPIO_PORT, LED1_PIN, LL_GPIO_MODE_OUTPUT);
 80005e2:	f7ff be9b 	b.w	800031c <LL_GPIO_SetPinMode>
 80005e6:	bf00      	nop
 80005e8:	40020400 	.word	0x40020400

080005ec <LED_Blinking>:
  *     @arg LED_BLINK_SLOW : Slow Blinking
  *     @arg LED_BLINK_ERROR : Error specific Blinking
  * @retval None
  */
void LED_Blinking(uint32_t Period)
{
 80005ec:	4604      	mov	r4, r0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  uint32_t odr = READ_REG(GPIOx->ODR);
 80005ee:	4d07      	ldr	r5, [pc, #28]	@ (800060c <LED_Blinking+0x20>)
 80005f0:	b508      	push	{r3, lr}
 80005f2:	696b      	ldr	r3, [r5, #20]
  /* Toggle LED1 in an infinite loop */
  while (1)
  {
    LL_GPIO_TogglePin(LED1_GPIO_PORT, LED1_PIN);
    LL_mDelay(Period);
 80005f4:	4620      	mov	r0, r4
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80005f6:	041a      	lsls	r2, r3, #16
 80005f8:	43db      	mvns	r3, r3
 80005fa:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	4313      	orrs	r3, r2
 8000604:	61ab      	str	r3, [r5, #24]
 8000606:	f7ff fe3d 	bl	8000284 <LL_mDelay>
  while (1)
 800060a:	e7f2      	b.n	80005f2 <LED_Blinking+0x6>
 800060c:	40020400 	.word	0x40020400

08000610 <Buffercmp8>:
* @retval   0: Comparison is OK (the two Buffers are identical)
*           Value different from 0: Comparison is NOK (Buffers are different)
*/
uint8_t Buffercmp8(uint8_t* pBuffer1, uint8_t* pBuffer2, uint8_t BufferLength)
{
  while (BufferLength--)
 8000610:	1e43      	subs	r3, r0, #1
 8000612:	3901      	subs	r1, #1
 8000614:	4610      	mov	r0, r2
{
 8000616:	b510      	push	{r4, lr}
  while (BufferLength--)
 8000618:	b900      	cbnz	r0, 800061c <Buffercmp8+0xc>
    pBuffer1++;
    pBuffer2++;
  }

  return 0;
}
 800061a:	bd10      	pop	{r4, pc}
    if (*pBuffer1 != *pBuffer2)
 800061c:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8000620:	3801      	subs	r0, #1
 8000622:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8000626:	b2c0      	uxtb	r0, r0
 8000628:	4294      	cmp	r4, r2
 800062a:	d0f5      	beq.n	8000618 <Buffercmp8+0x8>
      return 1;
 800062c:	2001      	movs	r0, #1
 800062e:	e7f4      	b.n	800061a <Buffercmp8+0xa>

08000630 <WaitAndCheckEndOfTransfer>:
  while (ubTransmissionComplete != 1)
 8000630:	4911      	ldr	r1, [pc, #68]	@ (8000678 <WaitAndCheckEndOfTransfer+0x48>)
{
 8000632:	b510      	push	{r4, lr}
  while (ubTransmissionComplete != 1)
 8000634:	f891 3095 	ldrb.w	r3, [r1, #149]	@ 0x95
 8000638:	2b01      	cmp	r3, #1
 800063a:	d1fb      	bne.n	8000634 <WaitAndCheckEndOfTransfer+0x4>
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800063c:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <WaitAndCheckEndOfTransfer+0x4c>)
 800063e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000640:	f022 0201 	bic.w	r2, r2, #1
 8000644:	659a      	str	r2, [r3, #88]	@ 0x58
  while (ubReceptionComplete != 1)
 8000646:	f891 2096 	ldrb.w	r2, [r1, #150]	@ 0x96
 800064a:	2a01      	cmp	r2, #1
 800064c:	b2d4      	uxtb	r4, r2
 800064e:	d1fa      	bne.n	8000646 <WaitAndCheckEndOfTransfer+0x16>
 8000650:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  if(Buffercmp8((uint8_t*)aTxBuffer, (uint8_t*)aRxBuffer, ubNbDataToTransmit))
 8000652:	480b      	ldr	r0, [pc, #44]	@ (8000680 <WaitAndCheckEndOfTransfer+0x50>)
 8000654:	f022 0201 	bic.w	r2, r2, #1
 8000658:	4907      	ldr	r1, [pc, #28]	@ (8000678 <WaitAndCheckEndOfTransfer+0x48>)
 800065a:	3001      	adds	r0, #1
 800065c:	641a      	str	r2, [r3, #64]	@ 0x40
 800065e:	f890 2095 	ldrb.w	r2, [r0, #149]	@ 0x95
 8000662:	f7ff ffd5 	bl	8000610 <Buffercmp8>
 8000666:	b118      	cbz	r0, 8000670 <WaitAndCheckEndOfTransfer+0x40>
    LED_Blinking(LED_BLINK_ERROR);
 8000668:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800066c:	f7ff ffbe 	bl	80005ec <LED_Blinking>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000670:	4b04      	ldr	r3, [pc, #16]	@ (8000684 <WaitAndCheckEndOfTransfer+0x54>)
 8000672:	619c      	str	r4, [r3, #24]
}
 8000674:	bd10      	pop	{r4, pc}
 8000676:	bf00      	nop
 8000678:	200000b8 	.word	0x200000b8
 800067c:	40026400 	.word	0x40026400
 8000680:	20000004 	.word	0x20000004
 8000684:	40020400 	.word	0x40020400

08000688 <SystemClock_Config>:
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000688:	4b33      	ldr	r3, [pc, #204]	@ (8000758 <SystemClock_Config+0xd0>)
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 800068a:	b082      	sub	sp, #8
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000692:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800069a:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800069c:	681a      	ldr	r2, [r3, #0]
  /* Enable HSE clock */
  LL_RCC_HSE_EnableBypass();
  LL_RCC_HSE_Enable();
  while(LL_RCC_HSE_IsReady() != 1)
 800069e:	0392      	lsls	r2, r2, #14
 80006a0:	d5fc      	bpl.n	800069c <SystemClock_Config+0x14>
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80006a2:	492e      	ldr	r1, [pc, #184]	@ (800075c <SystemClock_Config+0xd4>)
 80006a4:	680a      	ldr	r2, [r1, #0]
 80006a6:	f022 020f 	bic.w	r2, r2, #15
 80006aa:	f042 0207 	orr.w	r2, r2, #7
 80006ae:	600a      	str	r2, [r1, #0]
  SET_BIT(RCC->APB1ENR, Periphs);
 80006b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006b2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80006b6:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80006b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006be:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80006c0:	9b01      	ldr	r3, [sp, #4]
  * @rmtoll CR1    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_ODEN);
 80006c2:	4b27      	ldr	r3, [pc, #156]	@ (8000760 <SystemClock_Config+0xd8>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80006ca:	601a      	str	r2, [r3, #0]
  * @rmtoll CSR1   ODRDY       LL_PWR_IsActiveFlag_OD
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_OD(void)
{
  return (READ_BIT(PWR->CSR1, PWR_CSR1_ODRDY) == (PWR_CSR1_ODRDY));
 80006cc:	685a      	ldr	r2, [r3, #4]
  /* Enable PWR clock */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);

  /* Activation OverDrive Mode */
  LL_PWR_EnableOverDriveMode();
  while(LL_PWR_IsActiveFlag_OD() != 1)
 80006ce:	03d0      	lsls	r0, r2, #15
 80006d0:	d5fc      	bpl.n	80006cc <SystemClock_Config+0x44>
  SET_BIT(PWR->CR1, PWR_CR1_ODSWEN);
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80006d8:	601a      	str	r2, [r3, #0]
  * @rmtoll CSR1   ODSWRDY       LL_PWR_IsActiveFlag_ODSW
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_ODSW(void)
{
  return (READ_BIT(PWR->CSR1, PWR_CSR1_ODSWRDY) == (PWR_CSR1_ODSWRDY));
 80006da:	4a21      	ldr	r2, [pc, #132]	@ (8000760 <SystemClock_Config+0xd8>)
 80006dc:	6853      	ldr	r3, [r2, #4]
  {
  };

  /* Activation OverDrive Switching */
  LL_PWR_EnableOverDriveSwitching();
  while(LL_PWR_IsActiveFlag_ODSW() != 1)
 80006de:	0399      	lsls	r1, r3, #14
 80006e0:	d5fc      	bpl.n	80006dc <SystemClock_Config+0x54>
  *         @arg @ref LL_RCC_PLLP_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP,
 80006e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000758 <SystemClock_Config+0xd0>)
 80006e4:	491f      	ldr	r1, [pc, #124]	@ (8000764 <SystemClock_Config+0xdc>)
 80006e6:	685a      	ldr	r2, [r3, #4]
 80006e8:	4011      	ands	r1, r2
 80006ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000768 <SystemClock_Config+0xe0>)
 80006ec:	430a      	orrs	r2, r1
 80006ee:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80006f6:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80006f8:	681a      	ldr	r2, [r3, #0]
  };

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_8, 432, LL_RCC_PLLP_DIV_2);
  LL_RCC_PLL_Enable();
  while(LL_RCC_PLL_IsReady() != 1)
 80006fa:	0192      	lsls	r2, r2, #6
 80006fc:	d5fc      	bpl.n	80006f8 <SystemClock_Config+0x70>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80006fe:	689a      	ldr	r2, [r3, #8]
 8000700:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8000704:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000706:	689a      	ldr	r2, [r3, #8]
 8000708:	f022 0203 	bic.w	r2, r2, #3
 800070c:	f042 0202 	orr.w	r2, r2, #2
 8000710:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000712:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <SystemClock_Config+0xd0>)
 8000714:	689a      	ldr	r2, [r3, #8]
 8000716:	f002 020c 	and.w	r2, r2, #12
  };

  /* Sysclk activation on the main PLL */
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800071a:	2a08      	cmp	r2, #8
 800071c:	d1fa      	bne.n	8000714 <SystemClock_Config+0x8c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800071e:	689a      	ldr	r2, [r3, #8]
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000720:	21f0      	movs	r1, #240	@ 0xf0
 8000722:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8000726:	f442 52a0 	orr.w	r2, r2, #5120	@ 0x1400
 800072a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800072c:	689a      	ldr	r2, [r3, #8]
 800072e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8000732:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000736:	609a      	str	r2, [r3, #8]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000738:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800073c:	4a0b      	ldr	r2, [pc, #44]	@ (800076c <SystemClock_Config+0xe4>)
 800073e:	615a      	str	r2, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000740:	4a0b      	ldr	r2, [pc, #44]	@ (8000770 <SystemClock_Config+0xe8>)
 8000742:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800074a:	2207      	movs	r2, #7
 800074c:	611a      	str	r2, [r3, #16]

  /* Set systick to 1ms */
  SysTick_Config(216000000 / 1000);

  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  SystemCoreClock = 216000000;
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <SystemClock_Config+0xec>)
 8000750:	4a09      	ldr	r2, [pc, #36]	@ (8000778 <SystemClock_Config+0xf0>)
 8000752:	601a      	str	r2, [r3, #0]
}
 8000754:	b002      	add	sp, #8
 8000756:	4770      	bx	lr
 8000758:	40023800 	.word	0x40023800
 800075c:	40023c00 	.word	0x40023c00
 8000760:	40007000 	.word	0x40007000
 8000764:	ffbc8000 	.word	0xffbc8000
 8000768:	00406c08 	.word	0x00406c08
 800076c:	00034bbf 	.word	0x00034bbf
 8000770:	e000ed00 	.word	0xe000ed00
 8000774:	20000000 	.word	0x20000000
 8000778:	0cdfe600 	.word	0x0cdfe600

0800077c <main>:
{
 800077c:	b508      	push	{r3, lr}
  __ASM volatile ("dsb 0xF":::"memory");
 800077e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000782:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000786:	4a20      	ldr	r2, [pc, #128]	@ (8000808 <main+0x8c>)
 8000788:	2100      	movs	r1, #0
 800078a:	f8c2 1250 	str.w	r1, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800078e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000792:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000796:	6953      	ldr	r3, [r2, #20]
 8000798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800079c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800079e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007a2:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80007a6:	f8c2 1084 	str.w	r1, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80007aa:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80007ae:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007b2:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80007b6:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80007ba:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80007be:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007c0:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80007c4:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007c6:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 80007ca:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007cc:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 80007d0:	d2f9      	bcs.n	80007c6 <main+0x4a>
    } while(sets-- != 0U);
 80007d2:	3b20      	subs	r3, #32
 80007d4:	f113 0f20 	cmn.w	r3, #32
 80007d8:	d1f2      	bne.n	80007c0 <main+0x44>
 80007da:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80007de:	6953      	ldr	r3, [r2, #20]
 80007e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80007e4:	6153      	str	r3, [r2, #20]
 80007e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007ea:	f3bf 8f6f 	isb	sy
  SystemClock_Config();
 80007ee:	f7ff ff4b 	bl	8000688 <SystemClock_Config>
  LED_Init();
 80007f2:	f7ff feed 	bl	80005d0 <LED_Init>
  Configure_SPI();
 80007f6:	f7ff fe69 	bl	80004cc <Configure_SPI>
  Configure_DMA();
 80007fa:	f7ff fdf3 	bl	80003e4 <Configure_DMA>
  Activate_SPI();
 80007fe:	f7ff fed3 	bl	80005a8 <Activate_SPI>
  WaitAndCheckEndOfTransfer();
 8000802:	f7ff ff15 	bl	8000630 <WaitAndCheckEndOfTransfer>
  while (1)
 8000806:	e7fe      	b.n	8000806 <main+0x8a>
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <UserButton_Callback>:
  * @retval None
  */
void UserButton_Callback(void)
{
  /* Update User push-button variable : to be checked in waiting loop in main program */
  ubButtonPress = 1;
 800080c:	4b02      	ldr	r3, [pc, #8]	@ (8000818 <UserButton_Callback+0xc>)
 800080e:	2201      	movs	r2, #1
 8000810:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	200000b8 	.word	0x200000b8

0800081c <DMA2_ReceiveComplete_Callback>:
  * @retval None
  */
void DMA2_ReceiveComplete_Callback(void)
{
  /* DMA Rx transfer completed */
  ubReceptionComplete = 1;
 800081c:	4b02      	ldr	r3, [pc, #8]	@ (8000828 <DMA2_ReceiveComplete_Callback+0xc>)
 800081e:	2201      	movs	r2, #1
 8000820:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	200000b8 	.word	0x200000b8

0800082c <DMA2_TransmitComplete_Callback>:
  * @retval None
  */
void DMA2_TransmitComplete_Callback(void)
{
  /* DMA Tx transfer completed */
  ubTransmissionComplete = 1;
 800082c:	4b02      	ldr	r3, [pc, #8]	@ (8000838 <DMA2_TransmitComplete_Callback+0xc>)
 800082e:	2201      	movs	r2, #1
 8000830:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	200000b8 	.word	0x200000b8

0800083c <SPI1_TransferError_Callback>:
  * @brief  Function called in case of error detected in SPI IT Handler
  * @param  None
  * @retval None
  */
void SPI1_TransferError_Callback(void)
{
 800083c:	b508      	push	{r3, lr}
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <SPI1_TransferError_Callback+0x1c>)
  LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_2);

  /* Disable DMA2 Tx Channel */
  LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_3);
  /* Set LED1 to Blinking mode to indicate error occurs */
  LED_Blinking(LED_BLINK_ERROR);
 8000840:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000844:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000846:	f022 0201 	bic.w	r2, r2, #1
 800084a:	641a      	str	r2, [r3, #64]	@ 0x40
 800084c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800084e:	f022 0201 	bic.w	r2, r2, #1
 8000852:	659a      	str	r2, [r3, #88]	@ 0x58
 8000854:	f7ff feca 	bl	80005ec <LED_Blinking>
 8000858:	40026400 	.word	0x40026400

0800085c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800085c:	4770      	bx	lr

0800085e <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800085e:	e7fe      	b.n	800085e <HardFault_Handler>

08000860 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000860:	e7fe      	b.n	8000860 <MemManage_Handler>

08000862 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000862:	e7fe      	b.n	8000862 <BusFault_Handler>

08000864 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000864:	e7fe      	b.n	8000864 <UsageFault_Handler>

08000866 <SVC_Handler>:
/**
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
 8000866:	4770      	bx	lr

08000868 <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
 8000868:	4770      	bx	lr

0800086a <PendSV_Handler>:
/**
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
 800086a:	4770      	bx	lr

0800086c <SysTick_Handler>:
/**
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
 800086c:	4770      	bx	lr
	...

08000870 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000870:	4b04      	ldr	r3, [pc, #16]	@ (8000884 <EXTI15_10_IRQHandler+0x14>)
 8000872:	695a      	ldr	r2, [r3, #20]
  * @retval None
  */
void USER_BUTTON_IRQHANDLER(void)
{
  /* Manage Flags */
  if(LL_EXTI_IsActiveFlag_0_31(USER_BUTTON_EXTI_LINE) != RESET)
 8000874:	0492      	lsls	r2, r2, #18
 8000876:	d504      	bpl.n	8000882 <EXTI15_10_IRQHandler+0x12>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8000878:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800087c:	615a      	str	r2, [r3, #20]
  {
    LL_EXTI_ClearFlag_0_31(USER_BUTTON_EXTI_LINE);

    /* Manage code in main.c */
    UserButton_Callback(); 
 800087e:	f7ff bfc5 	b.w	800080c <UserButton_Callback>
  }
}
 8000882:	4770      	bx	lr
 8000884:	40013c00 	.word	0x40013c00

08000888 <DMA2_Stream2_IRQHandler>:
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF2)==(DMA_LISR_TCIF2));
 8000888:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <DMA2_Stream2_IRQHandler+0x20>)
 800088a:	681a      	ldr	r2, [r3, #0]
  * @retval None
  */
void DMA2_Stream2_IRQHandler(void)
{

  if(LL_DMA_IsActiveFlag_TC2(DMA2))
 800088c:	0292      	lsls	r2, r2, #10
 800088e:	d504      	bpl.n	800089a <DMA2_Stream2_IRQHandler+0x12>
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF2);
 8000890:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000894:	609a      	str	r2, [r3, #8]
  {
    LL_DMA_ClearFlag_TC2(DMA2);
    /* Call function Reception complete Callback */
    DMA2_ReceiveComplete_Callback();
 8000896:	f7ff bfc1 	b.w	800081c <DMA2_ReceiveComplete_Callback>
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TEIF2)==(DMA_LISR_TEIF2));
 800089a:	681b      	ldr	r3, [r3, #0]
  }
  else if(LL_DMA_IsActiveFlag_TE2(DMA2))
 800089c:	031b      	lsls	r3, r3, #12
 800089e:	d501      	bpl.n	80008a4 <DMA2_Stream2_IRQHandler+0x1c>
  {
    /* Call Error function */
    SPI1_TransferError_Callback();
 80008a0:	f7ff bfcc 	b.w	800083c <SPI1_TransferError_Callback>
  }

}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40026400 	.word	0x40026400

080008ac <DMA2_Stream3_IRQHandler>:
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF3)==(DMA_LISR_TCIF3));
 80008ac:	4b07      	ldr	r3, [pc, #28]	@ (80008cc <DMA2_Stream3_IRQHandler+0x20>)
 80008ae:	681a      	ldr	r2, [r3, #0]
  * @param  None
  * @retval None
  */
void DMA2_Stream3_IRQHandler(void)
{
  if(LL_DMA_IsActiveFlag_TC3(DMA2))
 80008b0:	0112      	lsls	r2, r2, #4
 80008b2:	d504      	bpl.n	80008be <DMA2_Stream3_IRQHandler+0x12>
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF3);
 80008b4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80008b8:	609a      	str	r2, [r3, #8]
  {
    LL_DMA_ClearFlag_TC3(DMA2);
    /* Call function Transmission complete Callback */
    DMA2_TransmitComplete_Callback();
 80008ba:	f7ff bfb7 	b.w	800082c <DMA2_TransmitComplete_Callback>
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TEIF3)==(DMA_LISR_TEIF3));
 80008be:	681b      	ldr	r3, [r3, #0]
  }
  else if(LL_DMA_IsActiveFlag_TE3(DMA2))
 80008c0:	019b      	lsls	r3, r3, #6
 80008c2:	d501      	bpl.n	80008c8 <DMA2_Stream3_IRQHandler+0x1c>
  {
    /* Call Error function */
    SPI1_TransferError_Callback();
 80008c4:	f7ff bfba 	b.w	800083c <SPI1_TransferError_Callback>
  }
}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	40026400 	.word	0x40026400

080008d0 <__libc_init_array>:
 80008d0:	b570      	push	{r4, r5, r6, lr}
 80008d2:	4d0d      	ldr	r5, [pc, #52]	@ (8000908 <__libc_init_array+0x38>)
 80008d4:	4c0d      	ldr	r4, [pc, #52]	@ (800090c <__libc_init_array+0x3c>)
 80008d6:	1b64      	subs	r4, r4, r5
 80008d8:	10a4      	asrs	r4, r4, #2
 80008da:	2600      	movs	r6, #0
 80008dc:	42a6      	cmp	r6, r4
 80008de:	d109      	bne.n	80008f4 <__libc_init_array+0x24>
 80008e0:	4d0b      	ldr	r5, [pc, #44]	@ (8000910 <__libc_init_array+0x40>)
 80008e2:	4c0c      	ldr	r4, [pc, #48]	@ (8000914 <__libc_init_array+0x44>)
 80008e4:	f000 f818 	bl	8000918 <_init>
 80008e8:	1b64      	subs	r4, r4, r5
 80008ea:	10a4      	asrs	r4, r4, #2
 80008ec:	2600      	movs	r6, #0
 80008ee:	42a6      	cmp	r6, r4
 80008f0:	d105      	bne.n	80008fe <__libc_init_array+0x2e>
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80008f8:	4798      	blx	r3
 80008fa:	3601      	adds	r6, #1
 80008fc:	e7ee      	b.n	80008dc <__libc_init_array+0xc>
 80008fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000902:	4798      	blx	r3
 8000904:	3601      	adds	r6, #1
 8000906:	e7f2      	b.n	80008ee <__libc_init_array+0x1e>
 8000908:	08000930 	.word	0x08000930
 800090c:	08000930 	.word	0x08000930
 8000910:	08000930 	.word	0x08000930
 8000914:	08000934 	.word	0x08000934

08000918 <_init>:
 8000918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800091a:	bf00      	nop
 800091c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800091e:	bc08      	pop	{r3}
 8000920:	469e      	mov	lr, r3
 8000922:	4770      	bx	lr

08000924 <_fini>:
 8000924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000926:	bf00      	nop
 8000928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800092a:	bc08      	pop	{r3}
 800092c:	469e      	mov	lr, r3
 800092e:	4770      	bx	lr
