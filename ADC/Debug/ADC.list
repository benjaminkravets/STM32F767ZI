
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087e8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080089e8  080089e8  000189e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ad4  08008ad4  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  08008ad4  08008ad4  00018ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008adc  08008adc  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008adc  08008adc  00018adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ae0  08008ae0  00018ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000010  08008af4  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b0  08008b94  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005aac  20000150  08008c34  00020150  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20005bfc  08008c34  00025bfc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002017e  2**0
                  CONTENTS, READONLY
 15 .debug_info   000219de  00000000  00000000  000201c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00004327  00000000  00000000  00041b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001a20  00000000  00000000  00045ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000142a  00000000  00000000  000478e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00007386  00000000  00000000  00048d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001db6c  00000000  00000000  00050098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010f828  00000000  00000000  0006dc04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006e1c  00000000  00000000  0017d42c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000070  00000000  00000000  00184248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000150 	.word	0x20000150
 800021c:	00000000 	.word	0x00000000
 8000220:	080089d0 	.word	0x080089d0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000154 	.word	0x20000154
 800023c:	080089d0 	.word	0x080089d0

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	2000016c 	.word	0x2000016c

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b970 	b.w	80005cc <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9e08      	ldr	r6, [sp, #32]
 800030a:	460d      	mov	r5, r1
 800030c:	4604      	mov	r4, r0
 800030e:	460f      	mov	r7, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14a      	bne.n	80003aa <__udivmoddi4+0xa6>
 8000314:	428a      	cmp	r2, r1
 8000316:	4694      	mov	ip, r2
 8000318:	d965      	bls.n	80003e6 <__udivmoddi4+0xe2>
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	b143      	cbz	r3, 8000332 <__udivmoddi4+0x2e>
 8000320:	fa02 fc03 	lsl.w	ip, r2, r3
 8000324:	f1c3 0220 	rsb	r2, r3, #32
 8000328:	409f      	lsls	r7, r3
 800032a:	fa20 f202 	lsr.w	r2, r0, r2
 800032e:	4317      	orrs	r7, r2
 8000330:	409c      	lsls	r4, r3
 8000332:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000336:	fa1f f58c 	uxth.w	r5, ip
 800033a:	fbb7 f1fe 	udiv	r1, r7, lr
 800033e:	0c22      	lsrs	r2, r4, #16
 8000340:	fb0e 7711 	mls	r7, lr, r1, r7
 8000344:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000348:	fb01 f005 	mul.w	r0, r1, r5
 800034c:	4290      	cmp	r0, r2
 800034e:	d90a      	bls.n	8000366 <__udivmoddi4+0x62>
 8000350:	eb1c 0202 	adds.w	r2, ip, r2
 8000354:	f101 37ff 	add.w	r7, r1, #4294967295
 8000358:	f080 811c 	bcs.w	8000594 <__udivmoddi4+0x290>
 800035c:	4290      	cmp	r0, r2
 800035e:	f240 8119 	bls.w	8000594 <__udivmoddi4+0x290>
 8000362:	3902      	subs	r1, #2
 8000364:	4462      	add	r2, ip
 8000366:	1a12      	subs	r2, r2, r0
 8000368:	b2a4      	uxth	r4, r4
 800036a:	fbb2 f0fe 	udiv	r0, r2, lr
 800036e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000372:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000376:	fb00 f505 	mul.w	r5, r0, r5
 800037a:	42a5      	cmp	r5, r4
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x90>
 800037e:	eb1c 0404 	adds.w	r4, ip, r4
 8000382:	f100 32ff 	add.w	r2, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x294>
 800038a:	42a5      	cmp	r5, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x294>
 8000390:	4464      	add	r4, ip
 8000392:	3802      	subs	r0, #2
 8000394:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000398:	1b64      	subs	r4, r4, r5
 800039a:	2100      	movs	r1, #0
 800039c:	b11e      	cbz	r6, 80003a6 <__udivmoddi4+0xa2>
 800039e:	40dc      	lsrs	r4, r3
 80003a0:	2300      	movs	r3, #0
 80003a2:	e9c6 4300 	strd	r4, r3, [r6]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0xbc>
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	f000 80ed 	beq.w	800058e <__udivmoddi4+0x28a>
 80003b4:	2100      	movs	r1, #0
 80003b6:	e9c6 0500 	strd	r0, r5, [r6]
 80003ba:	4608      	mov	r0, r1
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	fab3 f183 	clz	r1, r3
 80003c4:	2900      	cmp	r1, #0
 80003c6:	d149      	bne.n	800045c <__udivmoddi4+0x158>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d302      	bcc.n	80003d2 <__udivmoddi4+0xce>
 80003cc:	4282      	cmp	r2, r0
 80003ce:	f200 80f8 	bhi.w	80005c2 <__udivmoddi4+0x2be>
 80003d2:	1a84      	subs	r4, r0, r2
 80003d4:	eb65 0203 	sbc.w	r2, r5, r3
 80003d8:	2001      	movs	r0, #1
 80003da:	4617      	mov	r7, r2
 80003dc:	2e00      	cmp	r6, #0
 80003de:	d0e2      	beq.n	80003a6 <__udivmoddi4+0xa2>
 80003e0:	e9c6 4700 	strd	r4, r7, [r6]
 80003e4:	e7df      	b.n	80003a6 <__udivmoddi4+0xa2>
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xe6>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f382 	clz	r3, r2
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x210>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fa:	fa1f fe8c 	uxth.w	lr, ip
 80003fe:	2101      	movs	r1, #1
 8000400:	fbb2 f5f7 	udiv	r5, r2, r7
 8000404:	fb07 2015 	mls	r0, r7, r5, r2
 8000408:	0c22      	lsrs	r2, r4, #16
 800040a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040e:	fb0e f005 	mul.w	r0, lr, r5
 8000412:	4290      	cmp	r0, r2
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x124>
 8000416:	eb1c 0202 	adds.w	r2, ip, r2
 800041a:	f105 38ff 	add.w	r8, r5, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x122>
 8000420:	4290      	cmp	r0, r2
 8000422:	f200 80cb 	bhi.w	80005bc <__udivmoddi4+0x2b8>
 8000426:	4645      	mov	r5, r8
 8000428:	1a12      	subs	r2, r2, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000430:	fb07 2210 	mls	r2, r7, r0, r2
 8000434:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000438:	fb0e fe00 	mul.w	lr, lr, r0
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x14e>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f100 32ff 	add.w	r2, r0, #4294967295
 8000448:	d202      	bcs.n	8000450 <__udivmoddi4+0x14c>
 800044a:	45a6      	cmp	lr, r4
 800044c:	f200 80bb 	bhi.w	80005c6 <__udivmoddi4+0x2c2>
 8000450:	4610      	mov	r0, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045a:	e79f      	b.n	800039c <__udivmoddi4+0x98>
 800045c:	f1c1 0720 	rsb	r7, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 fc07 	lsr.w	ip, r2, r7
 8000466:	ea4c 0c03 	orr.w	ip, ip, r3
 800046a:	fa05 f401 	lsl.w	r4, r5, r1
 800046e:	fa20 f307 	lsr.w	r3, r0, r7
 8000472:	40fd      	lsrs	r5, r7
 8000474:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fbb5 f8f9 	udiv	r8, r5, r9
 800047e:	fa1f fe8c 	uxth.w	lr, ip
 8000482:	fb09 5518 	mls	r5, r9, r8, r5
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800048c:	fb08 f50e 	mul.w	r5, r8, lr
 8000490:	42a5      	cmp	r5, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	fa00 f001 	lsl.w	r0, r0, r1
 800049a:	d90b      	bls.n	80004b4 <__udivmoddi4+0x1b0>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a4:	f080 8088 	bcs.w	80005b8 <__udivmoddi4+0x2b4>
 80004a8:	42a5      	cmp	r5, r4
 80004aa:	f240 8085 	bls.w	80005b8 <__udivmoddi4+0x2b4>
 80004ae:	f1a8 0802 	sub.w	r8, r8, #2
 80004b2:	4464      	add	r4, ip
 80004b4:	1b64      	subs	r4, r4, r5
 80004b6:	b29d      	uxth	r5, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c8:	45a6      	cmp	lr, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1da>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d4:	d26c      	bcs.n	80005b0 <__udivmoddi4+0x2ac>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	d96a      	bls.n	80005b0 <__udivmoddi4+0x2ac>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4464      	add	r4, ip
 80004de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e2:	fba3 9502 	umull	r9, r5, r3, r2
 80004e6:	eba4 040e 	sub.w	r4, r4, lr
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	46c8      	mov	r8, r9
 80004ee:	46ae      	mov	lr, r5
 80004f0:	d356      	bcc.n	80005a0 <__udivmoddi4+0x29c>
 80004f2:	d053      	beq.n	800059c <__udivmoddi4+0x298>
 80004f4:	b156      	cbz	r6, 800050c <__udivmoddi4+0x208>
 80004f6:	ebb0 0208 	subs.w	r2, r0, r8
 80004fa:	eb64 040e 	sbc.w	r4, r4, lr
 80004fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000502:	40ca      	lsrs	r2, r1
 8000504:	40cc      	lsrs	r4, r1
 8000506:	4317      	orrs	r7, r2
 8000508:	e9c6 7400 	strd	r7, r4, [r6]
 800050c:	4618      	mov	r0, r3
 800050e:	2100      	movs	r1, #0
 8000510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000514:	f1c3 0120 	rsb	r1, r3, #32
 8000518:	fa02 fc03 	lsl.w	ip, r2, r3
 800051c:	fa20 f201 	lsr.w	r2, r0, r1
 8000520:	fa25 f101 	lsr.w	r1, r5, r1
 8000524:	409d      	lsls	r5, r3
 8000526:	432a      	orrs	r2, r5
 8000528:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800052c:	fa1f fe8c 	uxth.w	lr, ip
 8000530:	fbb1 f0f7 	udiv	r0, r1, r7
 8000534:	fb07 1510 	mls	r5, r7, r0, r1
 8000538:	0c11      	lsrs	r1, r2, #16
 800053a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053e:	fb00 f50e 	mul.w	r5, r0, lr
 8000542:	428d      	cmp	r5, r1
 8000544:	fa04 f403 	lsl.w	r4, r4, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x258>
 800054a:	eb1c 0101 	adds.w	r1, ip, r1
 800054e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000552:	d22f      	bcs.n	80005b4 <__udivmoddi4+0x2b0>
 8000554:	428d      	cmp	r5, r1
 8000556:	d92d      	bls.n	80005b4 <__udivmoddi4+0x2b0>
 8000558:	3802      	subs	r0, #2
 800055a:	4461      	add	r1, ip
 800055c:	1b49      	subs	r1, r1, r5
 800055e:	b292      	uxth	r2, r2
 8000560:	fbb1 f5f7 	udiv	r5, r1, r7
 8000564:	fb07 1115 	mls	r1, r7, r5, r1
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	fb05 f10e 	mul.w	r1, r5, lr
 8000570:	4291      	cmp	r1, r2
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x282>
 8000574:	eb1c 0202 	adds.w	r2, ip, r2
 8000578:	f105 38ff 	add.w	r8, r5, #4294967295
 800057c:	d216      	bcs.n	80005ac <__udivmoddi4+0x2a8>
 800057e:	4291      	cmp	r1, r2
 8000580:	d914      	bls.n	80005ac <__udivmoddi4+0x2a8>
 8000582:	3d02      	subs	r5, #2
 8000584:	4462      	add	r2, ip
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800058c:	e738      	b.n	8000400 <__udivmoddi4+0xfc>
 800058e:	4631      	mov	r1, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xa2>
 8000594:	4639      	mov	r1, r7
 8000596:	e6e6      	b.n	8000366 <__udivmoddi4+0x62>
 8000598:	4610      	mov	r0, r2
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x90>
 800059c:	4548      	cmp	r0, r9
 800059e:	d2a9      	bcs.n	80004f4 <__udivmoddi4+0x1f0>
 80005a0:	ebb9 0802 	subs.w	r8, r9, r2
 80005a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a8:	3b01      	subs	r3, #1
 80005aa:	e7a3      	b.n	80004f4 <__udivmoddi4+0x1f0>
 80005ac:	4645      	mov	r5, r8
 80005ae:	e7ea      	b.n	8000586 <__udivmoddi4+0x282>
 80005b0:	462b      	mov	r3, r5
 80005b2:	e794      	b.n	80004de <__udivmoddi4+0x1da>
 80005b4:	4640      	mov	r0, r8
 80005b6:	e7d1      	b.n	800055c <__udivmoddi4+0x258>
 80005b8:	46d0      	mov	r8, sl
 80005ba:	e77b      	b.n	80004b4 <__udivmoddi4+0x1b0>
 80005bc:	3d02      	subs	r5, #2
 80005be:	4462      	add	r2, ip
 80005c0:	e732      	b.n	8000428 <__udivmoddi4+0x124>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e70a      	b.n	80003dc <__udivmoddi4+0xd8>
 80005c6:	4464      	add	r4, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e742      	b.n	8000452 <__udivmoddi4+0x14e>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80005d6:	4b26      	ldr	r3, [pc, #152]	; (8000670 <_DoInit+0xa0>)
 80005d8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80005da:	22a8      	movs	r2, #168	; 0xa8
 80005dc:	2100      	movs	r1, #0
 80005de:	6838      	ldr	r0, [r7, #0]
 80005e0:	f008 f9bc 	bl	800895c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	2203      	movs	r2, #3
 80005e8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	2203      	movs	r2, #3
 80005ee:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	4a20      	ldr	r2, [pc, #128]	; (8000674 <_DoInit+0xa4>)
 80005f4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	4a1f      	ldr	r2, [pc, #124]	; (8000678 <_DoInit+0xa8>)
 80005fa:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000602:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	2200      	movs	r2, #0
 8000608:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	2200      	movs	r2, #0
 800060e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	2200      	movs	r2, #0
 8000614:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	4a16      	ldr	r2, [pc, #88]	; (8000674 <_DoInit+0xa4>)
 800061a:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	4a17      	ldr	r2, [pc, #92]	; (800067c <_DoInit+0xac>)
 8000620:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	2210      	movs	r2, #16
 8000626:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	2200      	movs	r2, #0
 800062c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	2200      	movs	r2, #0
 8000632:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	2200      	movs	r2, #0
 8000638:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800063a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	e00c      	b.n	800065e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f1c3 030f 	rsb	r3, r3, #15
 800064a:	4a0d      	ldr	r2, [pc, #52]	; (8000680 <_DoInit+0xb0>)
 800064c:	5cd1      	ldrb	r1, [r2, r3]
 800064e:	683a      	ldr	r2, [r7, #0]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4413      	add	r3, r2
 8000654:	460a      	mov	r2, r1
 8000656:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3301      	adds	r3, #1
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b0f      	cmp	r3, #15
 8000662:	d9ef      	bls.n	8000644 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000664:	f3bf 8f5f 	dmb	sy
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000016c 	.word	0x2000016c
 8000674:	080089e8 	.word	0x080089e8
 8000678:	20000214 	.word	0x20000214
 800067c:	20000614 	.word	0x20000614
 8000680:	08008a70 	.word	0x08008a70

08000684 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b08c      	sub	sp, #48	; 0x30
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8000690:	4b3e      	ldr	r3, [pc, #248]	; (800078c <SEGGER_RTT_ReadNoLock+0x108>)
 8000692:	623b      	str	r3, [r7, #32]
 8000694:	6a3b      	ldr	r3, [r7, #32]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2b00      	cmp	r3, #0
 800069c:	d101      	bne.n	80006a2 <SEGGER_RTT_ReadNoLock+0x1e>
 800069e:	f7ff ff97 	bl	80005d0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80006a2:	68fa      	ldr	r2, [r7, #12]
 80006a4:	4613      	mov	r3, r2
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	4413      	add	r3, r2
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	3360      	adds	r3, #96	; 0x60
 80006ae:	4a37      	ldr	r2, [pc, #220]	; (800078c <SEGGER_RTT_ReadNoLock+0x108>)
 80006b0:	4413      	add	r3, r2
 80006b2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	691b      	ldr	r3, [r3, #16]
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80006c4:	2300      	movs	r3, #0
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80006c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006ca:	69bb      	ldr	r3, [r7, #24]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d92b      	bls.n	8000728 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	689a      	ldr	r2, [r3, #8]
 80006d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006d6:	1ad3      	subs	r3, r2, r3
 80006d8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80006da:	697a      	ldr	r2, [r7, #20]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4293      	cmp	r3, r2
 80006e0:	bf28      	it	cs
 80006e2:	4613      	movcs	r3, r2
 80006e4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	685a      	ldr	r2, [r3, #4]
 80006ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ec:	4413      	add	r3, r2
 80006ee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80006f0:	697a      	ldr	r2, [r7, #20]
 80006f2:	6939      	ldr	r1, [r7, #16]
 80006f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006f6:	f008 f95d 	bl	80089b4 <memcpy>
    NumBytesRead += NumBytesRem;
 80006fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	4413      	add	r3, r2
 8000700:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8000702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	4413      	add	r3, r2
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	1ad3      	subs	r3, r2, r3
 8000710:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	4413      	add	r3, r2
 8000718:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000720:	429a      	cmp	r2, r3
 8000722:	d101      	bne.n	8000728 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8000724:	2300      	movs	r3, #0
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8000728:	69ba      	ldr	r2, [r7, #24]
 800072a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000730:	697a      	ldr	r2, [r7, #20]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4293      	cmp	r3, r2
 8000736:	bf28      	it	cs
 8000738:	4613      	movcs	r3, r2
 800073a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d019      	beq.n	8000776 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	685a      	ldr	r2, [r3, #4]
 8000746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000748:	4413      	add	r3, r2
 800074a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800074c:	697a      	ldr	r2, [r7, #20]
 800074e:	6939      	ldr	r1, [r7, #16]
 8000750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000752:	f008 f92f 	bl	80089b4 <memcpy>
    NumBytesRead += NumBytesRem;
 8000756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	4413      	add	r3, r2
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800075e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	4413      	add	r3, r2
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	1ad3      	subs	r3, r2, r3
 800076c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800076e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	4413      	add	r3, r2
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8000776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000778:	2b00      	cmp	r3, #0
 800077a:	d002      	beq.n	8000782 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000780:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8000782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000784:	4618      	mov	r0, r3
 8000786:	3730      	adds	r7, #48	; 0x30
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2000016c 	.word	0x2000016c

08000790 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
 800079c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800079e:	4b3d      	ldr	r3, [pc, #244]	; (8000894 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007a0:	61bb      	str	r3, [r7, #24]
 80007a2:	69bb      	ldr	r3, [r7, #24]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80007ac:	f7ff ff10 	bl	80005d0 <_DoInit>
  SEGGER_RTT_LOCK();
 80007b0:	f3ef 8311 	mrs	r3, BASEPRI
 80007b4:	f04f 0120 	mov.w	r1, #32
 80007b8:	f381 8811 	msr	BASEPRI, r1
 80007bc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80007be:	4b35      	ldr	r3, [pc, #212]	; (8000894 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007c0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80007c6:	6939      	ldr	r1, [r7, #16]
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	4613      	mov	r3, r2
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	4413      	add	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	440b      	add	r3, r1
 80007d6:	3304      	adds	r3, #4
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d008      	beq.n	80007f0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3301      	adds	r3, #1
 80007e2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	691b      	ldr	r3, [r3, #16]
 80007e8:	69fa      	ldr	r2, [r7, #28]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	dbeb      	blt.n	80007c6 <SEGGER_RTT_AllocUpBuffer+0x36>
 80007ee:	e000      	b.n	80007f2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80007f0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80007f2:	693b      	ldr	r3, [r7, #16]
 80007f4:	691b      	ldr	r3, [r3, #16]
 80007f6:	69fa      	ldr	r2, [r7, #28]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	da3f      	bge.n	800087c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80007fc:	6939      	ldr	r1, [r7, #16]
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	4613      	mov	r3, r2
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	4413      	add	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	440b      	add	r3, r1
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8000810:	6939      	ldr	r1, [r7, #16]
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	1c5a      	adds	r2, r3, #1
 8000816:	4613      	mov	r3, r2
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	4413      	add	r3, r2
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	440b      	add	r3, r1
 8000820:	3304      	adds	r3, #4
 8000822:	68ba      	ldr	r2, [r7, #8]
 8000824:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8000826:	6939      	ldr	r1, [r7, #16]
 8000828:	69fa      	ldr	r2, [r7, #28]
 800082a:	4613      	mov	r3, r2
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	4413      	add	r3, r2
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	440b      	add	r3, r1
 8000834:	3320      	adds	r3, #32
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800083a:	6939      	ldr	r1, [r7, #16]
 800083c:	69fa      	ldr	r2, [r7, #28]
 800083e:	4613      	mov	r3, r2
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	4413      	add	r3, r2
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	440b      	add	r3, r1
 8000848:	3328      	adds	r3, #40	; 0x28
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800084e:	6939      	ldr	r1, [r7, #16]
 8000850:	69fa      	ldr	r2, [r7, #28]
 8000852:	4613      	mov	r3, r2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4413      	add	r3, r2
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	440b      	add	r3, r1
 800085c:	3324      	adds	r3, #36	; 0x24
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8000862:	6939      	ldr	r1, [r7, #16]
 8000864:	69fa      	ldr	r2, [r7, #28]
 8000866:	4613      	mov	r3, r2
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	4413      	add	r3, r2
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	440b      	add	r3, r1
 8000870:	332c      	adds	r3, #44	; 0x2c
 8000872:	683a      	ldr	r2, [r7, #0]
 8000874:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000876:	f3bf 8f5f 	dmb	sy
 800087a:	e002      	b.n	8000882 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800087c:	f04f 33ff 	mov.w	r3, #4294967295
 8000880:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8000888:	69fb      	ldr	r3, [r7, #28]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3720      	adds	r7, #32
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2000016c 	.word	0x2000016c

08000898 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80008a6:	4b21      	ldr	r3, [pc, #132]	; (800092c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008a8:	623b      	str	r3, [r7, #32]
 80008aa:	6a3b      	ldr	r3, [r7, #32]
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d101      	bne.n	80008b8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80008b4:	f7ff fe8c 	bl	80005d0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008ba:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d82c      	bhi.n	800091c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80008c2:	f3ef 8311 	mrs	r3, BASEPRI
 80008c6:	f04f 0120 	mov.w	r1, #32
 80008ca:	f381 8811 	msr	BASEPRI, r1
 80008ce:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80008d0:	68fa      	ldr	r2, [r7, #12]
 80008d2:	4613      	mov	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4413      	add	r3, r2
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	3360      	adds	r3, #96	; 0x60
 80008dc:	69fa      	ldr	r2, [r7, #28]
 80008de:	4413      	add	r3, r2
 80008e0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d00e      	beq.n	8000906 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	683a      	ldr	r2, [r7, #0]
 80008f8:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800090a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800090c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
 800091a:	e002      	b.n	8000922 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800091c:	f04f 33ff 	mov.w	r3, #4294967295
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8000922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000924:	4618      	mov	r0, r3
 8000926:	3728      	adds	r7, #40	; 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	2000016c 	.word	0x2000016c

08000930 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8000930:	b480      	push	{r7}
 8000932:	b087      	sub	sp, #28
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	1c5a      	adds	r2, r3, #1
 8000944:	60fa      	str	r2, [r7, #12]
 8000946:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2b80      	cmp	r3, #128	; 0x80
 800094c:	d90a      	bls.n	8000964 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800094e:	2380      	movs	r3, #128	; 0x80
 8000950:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8000952:	e007      	b.n	8000964 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8000954:	68ba      	ldr	r2, [r7, #8]
 8000956:	1c53      	adds	r3, r2, #1
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	1c59      	adds	r1, r3, #1
 800095e:	60f9      	str	r1, [r7, #12]
 8000960:	7812      	ldrb	r2, [r2, #0]
 8000962:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	1e5a      	subs	r2, r3, #1
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d003      	beq.n	8000976 <_EncodeStr+0x46>
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1ee      	bne.n	8000954 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	1ad3      	subs	r3, r2, r3
 800097c:	b2da      	uxtb	r2, r3
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8000982:	68fb      	ldr	r3, [r7, #12]
}
 8000984:	4618      	mov	r0, r3
 8000986:	371c      	adds	r7, #28
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3307      	adds	r3, #7
}
 800099c:	4618      	mov	r0, r3
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80009ae:	4b34      	ldr	r3, [pc, #208]	; (8000a80 <_HandleIncomingPacket+0xd8>)
 80009b0:	7e1b      	ldrb	r3, [r3, #24]
 80009b2:	4618      	mov	r0, r3
 80009b4:	1cfb      	adds	r3, r7, #3
 80009b6:	2201      	movs	r2, #1
 80009b8:	4619      	mov	r1, r3
 80009ba:	f7ff fe63 	bl	8000684 <SEGGER_RTT_ReadNoLock>
 80009be:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d057      	beq.n	8000a76 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80009c6:	78fb      	ldrb	r3, [r7, #3]
 80009c8:	2b80      	cmp	r3, #128	; 0x80
 80009ca:	d031      	beq.n	8000a30 <_HandleIncomingPacket+0x88>
 80009cc:	2b80      	cmp	r3, #128	; 0x80
 80009ce:	dc40      	bgt.n	8000a52 <_HandleIncomingPacket+0xaa>
 80009d0:	2b07      	cmp	r3, #7
 80009d2:	dc15      	bgt.n	8000a00 <_HandleIncomingPacket+0x58>
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	dd3c      	ble.n	8000a52 <_HandleIncomingPacket+0xaa>
 80009d8:	3b01      	subs	r3, #1
 80009da:	2b06      	cmp	r3, #6
 80009dc:	d839      	bhi.n	8000a52 <_HandleIncomingPacket+0xaa>
 80009de:	a201      	add	r2, pc, #4	; (adr r2, 80009e4 <_HandleIncomingPacket+0x3c>)
 80009e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e4:	08000a07 	.word	0x08000a07
 80009e8:	08000a0d 	.word	0x08000a0d
 80009ec:	08000a13 	.word	0x08000a13
 80009f0:	08000a19 	.word	0x08000a19
 80009f4:	08000a1f 	.word	0x08000a1f
 80009f8:	08000a25 	.word	0x08000a25
 80009fc:	08000a2b 	.word	0x08000a2b
 8000a00:	2b7f      	cmp	r3, #127	; 0x7f
 8000a02:	d033      	beq.n	8000a6c <_HandleIncomingPacket+0xc4>
 8000a04:	e025      	b.n	8000a52 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8000a06:	f000 fbe3 	bl	80011d0 <SEGGER_SYSVIEW_Start>
      break;
 8000a0a:	e034      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8000a0c:	f000 fc9a 	bl	8001344 <SEGGER_SYSVIEW_Stop>
      break;
 8000a10:	e031      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8000a12:	f000 fe73 	bl	80016fc <SEGGER_SYSVIEW_RecordSystime>
      break;
 8000a16:	e02e      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8000a18:	f000 fe38 	bl	800168c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8000a1c:	e02b      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8000a1e:	f000 fcb7 	bl	8001390 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8000a22:	e028      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8000a24:	f000 ff44 	bl	80018b0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8000a28:	e025      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8000a2a:	f000 ff23 	bl	8001874 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8000a2e:	e022      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <_HandleIncomingPacket+0xd8>)
 8000a32:	7e1b      	ldrb	r3, [r3, #24]
 8000a34:	4618      	mov	r0, r3
 8000a36:	1cfb      	adds	r3, r7, #3
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f7ff fe22 	bl	8000684 <SEGGER_RTT_ReadNoLock>
 8000a40:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d013      	beq.n	8000a70 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8000a48:	78fb      	ldrb	r3, [r7, #3]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 fe88 	bl	8001760 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8000a50:	e00e      	b.n	8000a70 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8000a52:	78fb      	ldrb	r3, [r7, #3]
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	da0c      	bge.n	8000a74 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <_HandleIncomingPacket+0xd8>)
 8000a5c:	7e1b      	ldrb	r3, [r3, #24]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	1cfb      	adds	r3, r7, #3
 8000a62:	2201      	movs	r2, #1
 8000a64:	4619      	mov	r1, r3
 8000a66:	f7ff fe0d 	bl	8000684 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8000a6a:	e003      	b.n	8000a74 <_HandleIncomingPacket+0xcc>
      break;
 8000a6c:	bf00      	nop
 8000a6e:	e002      	b.n	8000a76 <_HandleIncomingPacket+0xce>
      break;
 8000a70:	bf00      	nop
 8000a72:	e000      	b.n	8000a76 <_HandleIncomingPacket+0xce>
      break;
 8000a74:	bf00      	nop
    }
  }
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000a2c 	.word	0x20000a2c

08000a84 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	; 0x30
 8000a88:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	3301      	adds	r3, #1
 8000a92:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a98:	4b31      	ldr	r3, [pc, #196]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000a9a:	695b      	ldr	r3, [r3, #20]
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a9e:	e00b      	b.n	8000ab8 <_TrySendOverflowPacket+0x34>
 8000aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa6:	1c59      	adds	r1, r3, #1
 8000aa8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000aaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000aae:	b2d2      	uxtb	r2, r2
 8000ab0:	701a      	strb	r2, [r3, #0]
 8000ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab4:	09db      	lsrs	r3, r3, #7
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aba:	2b7f      	cmp	r3, #127	; 0x7f
 8000abc:	d8f0      	bhi.n	8000aa0 <_TrySendOverflowPacket+0x1c>
 8000abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ac0:	1c5a      	adds	r2, r3, #1
 8000ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ac6:	b2d2      	uxtb	r2, r2
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000acc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000ace:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <_TrySendOverflowPacket+0xe0>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000ad4:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	623b      	str	r3, [r7, #32]
 8000ae6:	e00b      	b.n	8000b00 <_TrySendOverflowPacket+0x7c>
 8000ae8:	6a3b      	ldr	r3, [r7, #32]
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aee:	1c59      	adds	r1, r3, #1
 8000af0:	6279      	str	r1, [r7, #36]	; 0x24
 8000af2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	701a      	strb	r2, [r3, #0]
 8000afa:	6a3b      	ldr	r3, [r7, #32]
 8000afc:	09db      	lsrs	r3, r3, #7
 8000afe:	623b      	str	r3, [r7, #32]
 8000b00:	6a3b      	ldr	r3, [r7, #32]
 8000b02:	2b7f      	cmp	r3, #127	; 0x7f
 8000b04:	d8f0      	bhi.n	8000ae8 <_TrySendOverflowPacket+0x64>
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	1c5a      	adds	r2, r3, #1
 8000b0a:	627a      	str	r2, [r7, #36]	; 0x24
 8000b0c:	6a3a      	ldr	r2, [r7, #32]
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b18:	785b      	ldrb	r3, [r3, #1]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	69fa      	ldr	r2, [r7, #28]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	461a      	mov	r2, r3
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	4619      	mov	r1, r3
 8000b28:	f7ff fb8a 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d009      	beq.n	8000b4a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	3b01      	subs	r3, #1
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b46:	701a      	strb	r2, [r3, #0]
 8000b48:	e004      	b.n	8000b54 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	4a03      	ldr	r2, [pc, #12]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b52:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8000b54:	693b      	ldr	r3, [r7, #16]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3730      	adds	r7, #48	; 0x30
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000a2c 	.word	0x20000a2c
 8000b64:	e0001004 	.word	0xe0001004

08000b68 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8000b74:	4b98      	ldr	r3, [pc, #608]	; (8000dd8 <_SendPacket+0x270>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d010      	beq.n	8000b9e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8000b7c:	4b96      	ldr	r3, [pc, #600]	; (8000dd8 <_SendPacket+0x270>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	f000 812d 	beq.w	8000de0 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8000b86:	4b94      	ldr	r3, [pc, #592]	; (8000dd8 <_SendPacket+0x270>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d109      	bne.n	8000ba2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8000b8e:	f7ff ff79 	bl	8000a84 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8000b92:	4b91      	ldr	r3, [pc, #580]	; (8000dd8 <_SendPacket+0x270>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	f040 8124 	bne.w	8000de4 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8000b9c:	e001      	b.n	8000ba2 <_SendPacket+0x3a>
    goto Send;
 8000b9e:	bf00      	nop
 8000ba0:	e000      	b.n	8000ba4 <_SendPacket+0x3c>
Send:
 8000ba2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b1f      	cmp	r3, #31
 8000ba8:	d809      	bhi.n	8000bbe <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8000baa:	4b8b      	ldr	r3, [pc, #556]	; (8000dd8 <_SendPacket+0x270>)
 8000bac:	69da      	ldr	r2, [r3, #28]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	f040 8115 	bne.w	8000de8 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b17      	cmp	r3, #23
 8000bc2:	d807      	bhi.n	8000bd4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	701a      	strb	r2, [r3, #0]
 8000bd2:	e0c4      	b.n	8000d5e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	2b7f      	cmp	r3, #127	; 0x7f
 8000be0:	d912      	bls.n	8000c08 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	09da      	lsrs	r2, r3, #7
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	3b01      	subs	r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	3a01      	subs	r2, #1
 8000bfa:	60fa      	str	r2, [r7, #12]
 8000bfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	e006      	b.n	8000c16 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b7e      	cmp	r3, #126	; 0x7e
 8000c1a:	d807      	bhi.n	8000c2c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	701a      	strb	r2, [r3, #0]
 8000c2a:	e098      	b.n	8000d5e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c32:	d212      	bcs.n	8000c5a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	09da      	lsrs	r2, r3, #7
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	3a01      	subs	r2, #1
 8000c4c:	60fa      	str	r2, [r7, #12]
 8000c4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	701a      	strb	r2, [r3, #0]
 8000c58:	e081      	b.n	8000d5e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000c60:	d21d      	bcs.n	8000c9e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	0b9a      	lsrs	r2, r3, #14
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	09db      	lsrs	r3, r3, #7
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	68fa      	ldr	r2, [r7, #12]
 8000c7a:	3a01      	subs	r2, #1
 8000c7c:	60fa      	str	r2, [r7, #12]
 8000c7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	3a01      	subs	r2, #1
 8000c90:	60fa      	str	r2, [r7, #12]
 8000c92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	701a      	strb	r2, [r3, #0]
 8000c9c:	e05f      	b.n	8000d5e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000ca4:	d228      	bcs.n	8000cf8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	0d5a      	lsrs	r2, r3, #21
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	3b01      	subs	r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	0b9b      	lsrs	r3, r3, #14
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	3a01      	subs	r2, #1
 8000cc0:	60fa      	str	r2, [r7, #12]
 8000cc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	09db      	lsrs	r3, r3, #7
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	3a01      	subs	r2, #1
 8000cd6:	60fa      	str	r2, [r7, #12]
 8000cd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	3a01      	subs	r2, #1
 8000cea:	60fa      	str	r2, [r7, #12]
 8000cec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	701a      	strb	r2, [r3, #0]
 8000cf6:	e032      	b.n	8000d5e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	0f1a      	lsrs	r2, r3, #28
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	0d5b      	lsrs	r3, r3, #21
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	3a01      	subs	r2, #1
 8000d12:	60fa      	str	r2, [r7, #12]
 8000d14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	0b9b      	lsrs	r3, r3, #14
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	3a01      	subs	r2, #1
 8000d28:	60fa      	str	r2, [r7, #12]
 8000d2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	09db      	lsrs	r3, r3, #7
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	3a01      	subs	r2, #1
 8000d3e:	60fa      	str	r2, [r7, #12]
 8000d40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	3a01      	subs	r2, #1
 8000d52:	60fa      	str	r2, [r7, #12]
 8000d54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000d5e:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <_SendPacket+0x274>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <_SendPacket+0x270>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	623b      	str	r3, [r7, #32]
 8000d76:	e00b      	b.n	8000d90 <_SendPacket+0x228>
 8000d78:	6a3b      	ldr	r3, [r7, #32]
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7e:	1c59      	adds	r1, r3, #1
 8000d80:	6279      	str	r1, [r7, #36]	; 0x24
 8000d82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	701a      	strb	r2, [r3, #0]
 8000d8a:	6a3b      	ldr	r3, [r7, #32]
 8000d8c:	09db      	lsrs	r3, r3, #7
 8000d8e:	623b      	str	r3, [r7, #32]
 8000d90:	6a3b      	ldr	r3, [r7, #32]
 8000d92:	2b7f      	cmp	r3, #127	; 0x7f
 8000d94:	d8f0      	bhi.n	8000d78 <_SendPacket+0x210>
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	1c5a      	adds	r2, r3, #1
 8000d9a:	627a      	str	r2, [r7, #36]	; 0x24
 8000d9c:	6a3a      	ldr	r2, [r7, #32]
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	701a      	strb	r2, [r3, #0]
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <_SendPacket+0x270>)
 8000da8:	785b      	ldrb	r3, [r3, #1]
 8000daa:	4618      	mov	r0, r3
 8000dac:	68ba      	ldr	r2, [r7, #8]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	461a      	mov	r2, r3
 8000db4:	68f9      	ldr	r1, [r7, #12]
 8000db6:	f7ff fa43 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000dba:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <_SendPacket+0x270>)
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	60d3      	str	r3, [r2, #12]
 8000dc8:	e00f      	b.n	8000dea <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8000dca:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <_SendPacket+0x270>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b01      	ldr	r3, [pc, #4]	; (8000dd8 <_SendPacket+0x270>)
 8000dd4:	701a      	strb	r2, [r3, #0]
 8000dd6:	e008      	b.n	8000dea <_SendPacket+0x282>
 8000dd8:	20000a2c 	.word	0x20000a2c
 8000ddc:	e0001004 	.word	0xe0001004
    goto SendDone;
 8000de0:	bf00      	nop
 8000de2:	e002      	b.n	8000dea <_SendPacket+0x282>
      goto SendDone;
 8000de4:	bf00      	nop
 8000de6:	e000      	b.n	8000dea <_SendPacket+0x282>
      goto SendDone;
 8000de8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <_SendPacket+0x2d4>)
 8000dec:	7e1b      	ldrb	r3, [r3, #24]
 8000dee:	4619      	mov	r1, r3
 8000df0:	4a13      	ldr	r2, [pc, #76]	; (8000e40 <_SendPacket+0x2d8>)
 8000df2:	460b      	mov	r3, r1
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	440b      	add	r3, r1
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	4413      	add	r3, r2
 8000dfc:	336c      	adds	r3, #108	; 0x6c
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <_SendPacket+0x2d4>)
 8000e02:	7e1b      	ldrb	r3, [r3, #24]
 8000e04:	4618      	mov	r0, r3
 8000e06:	490e      	ldr	r1, [pc, #56]	; (8000e40 <_SendPacket+0x2d8>)
 8000e08:	4603      	mov	r3, r0
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4403      	add	r3, r0
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	440b      	add	r3, r1
 8000e12:	3370      	adds	r3, #112	; 0x70
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d00b      	beq.n	8000e32 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <_SendPacket+0x2d4>)
 8000e1c:	789b      	ldrb	r3, [r3, #2]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d107      	bne.n	8000e32 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <_SendPacket+0x2d4>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8000e28:	f7ff fdbe 	bl	80009a8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <_SendPacket+0x2d4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8000e32:	bf00      	nop
 8000e34:	3728      	adds	r7, #40	; 0x28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000a2c 	.word	0x20000a2c
 8000e40:	2000016c 	.word	0x2000016c

08000e44 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b0a2      	sub	sp, #136	; 0x88
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8000e5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e5c:	1c5a      	adds	r2, r3, #1
 8000e5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8000e66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d01d      	beq.n	8000eaa <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8000e6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e72:	2b25      	cmp	r3, #37	; 0x25
 8000e74:	d1f1      	bne.n	8000e5a <_VPrintHost+0x16>
      c = *p;
 8000e76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	1d19      	adds	r1, r3, #4
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	6011      	str	r1, [r2, #0]
 8000e88:	6819      	ldr	r1, [r3, #0]
 8000e8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000e94:	460a      	mov	r2, r1
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	3388      	adds	r3, #136	; 0x88
 8000e9a:	443b      	add	r3, r7
 8000e9c:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8000ea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ea4:	2b10      	cmp	r3, #16
 8000ea6:	d002      	beq.n	8000eae <_VPrintHost+0x6a>
    c = *p++;
 8000ea8:	e7d7      	b.n	8000e5a <_VPrintHost+0x16>
      break;
 8000eaa:	bf00      	nop
 8000eac:	e000      	b.n	8000eb0 <_VPrintHost+0x6c>
        break;
 8000eae:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8000eb0:	f3ef 8311 	mrs	r3, BASEPRI
 8000eb4:	f04f 0120 	mov.w	r1, #32
 8000eb8:	f381 8811 	msr	BASEPRI, r1
 8000ebc:	65bb      	str	r3, [r7, #88]	; 0x58
 8000ebe:	483f      	ldr	r0, [pc, #252]	; (8000fbc <_VPrintHost+0x178>)
 8000ec0:	f7ff fd66 	bl	8000990 <_PreparePacket>
 8000ec4:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8000ec6:	2280      	movs	r2, #128	; 0x80
 8000ec8:	68f9      	ldr	r1, [r7, #12]
 8000eca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000ecc:	f7ff fd30 	bl	8000930 <_EncodeStr>
 8000ed0:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8000ed2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ed4:	677b      	str	r3, [r7, #116]	; 0x74
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	673b      	str	r3, [r7, #112]	; 0x70
 8000eda:	e00b      	b.n	8000ef4 <_VPrintHost+0xb0>
 8000edc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ee2:	1c59      	adds	r1, r3, #1
 8000ee4:	6779      	str	r1, [r7, #116]	; 0x74
 8000ee6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ef0:	09db      	lsrs	r3, r3, #7
 8000ef2:	673b      	str	r3, [r7, #112]	; 0x70
 8000ef4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ef6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ef8:	d8f0      	bhi.n	8000edc <_VPrintHost+0x98>
 8000efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	677a      	str	r2, [r7, #116]	; 0x74
 8000f00:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f08:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8000f0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f12:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f14:	e00b      	b.n	8000f2e <_VPrintHost+0xea>
 8000f16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f1c:	1c59      	adds	r1, r3, #1
 8000f1e:	66f9      	str	r1, [r7, #108]	; 0x6c
 8000f20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	701a      	strb	r2, [r3, #0]
 8000f28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f2a:	09db      	lsrs	r3, r3, #7
 8000f2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f30:	2b7f      	cmp	r3, #127	; 0x7f
 8000f32:	d8f0      	bhi.n	8000f16 <_VPrintHost+0xd2>
 8000f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f36:	1c5a      	adds	r2, r3, #1
 8000f38:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000f3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	701a      	strb	r2, [r3, #0]
 8000f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f42:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000f4c:	e022      	b.n	8000f94 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8000f4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f50:	667b      	str	r3, [r7, #100]	; 0x64
 8000f52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	663b      	str	r3, [r7, #96]	; 0x60
 8000f5a:	e00b      	b.n	8000f74 <_VPrintHost+0x130>
 8000f5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f62:	1c59      	adds	r1, r3, #1
 8000f64:	6679      	str	r1, [r7, #100]	; 0x64
 8000f66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	701a      	strb	r2, [r3, #0]
 8000f6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f70:	09db      	lsrs	r3, r3, #7
 8000f72:	663b      	str	r3, [r7, #96]	; 0x60
 8000f74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f76:	2b7f      	cmp	r3, #127	; 0x7f
 8000f78:	d8f0      	bhi.n	8000f5c <_VPrintHost+0x118>
 8000f7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	667a      	str	r2, [r7, #100]	; 0x64
 8000f80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f88:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8000f8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f8e:	3304      	adds	r3, #4
 8000f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000f94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f98:	1e5a      	subs	r2, r3, #1
 8000f9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1d5      	bne.n	8000f4e <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8000fa2:	221a      	movs	r2, #26
 8000fa4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000fa6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000fa8:	f7ff fdde 	bl	8000b68 <_SendPacket>
    RECORD_END();
 8000fac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fae:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3788      	adds	r7, #136	; 0x88
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000a5c 	.word	0x20000a5c

08000fc0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af02      	add	r7, sp, #8
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fd4:	4917      	ldr	r1, [pc, #92]	; (8001034 <SEGGER_SYSVIEW_Init+0x74>)
 8000fd6:	4818      	ldr	r0, [pc, #96]	; (8001038 <SEGGER_SYSVIEW_Init+0x78>)
 8000fd8:	f7ff fbda 	bl	8000790 <SEGGER_RTT_AllocUpBuffer>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8000fe2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8000fe6:	785a      	ldrb	r2, [r3, #1]
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8000fea:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8000fee:	7e1b      	ldrb	r3, [r3, #24]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2308      	movs	r3, #8
 8000ff8:	4a11      	ldr	r2, [pc, #68]	; (8001040 <SEGGER_SYSVIEW_Init+0x80>)
 8000ffa:	490f      	ldr	r1, [pc, #60]	; (8001038 <SEGGER_SYSVIEW_Init+0x78>)
 8000ffc:	f7ff fc4c 	bl	8000898 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <SEGGER_SYSVIEW_Init+0x84>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a0c      	ldr	r2, [pc, #48]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 800100c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800100e:	4a0b      	ldr	r2, [pc, #44]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8001014:	4a09      	ldr	r2, [pc, #36]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800101a:	4a08      	ldr	r2, [pc, #32]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000624 	.word	0x20000624
 8001038:	080089fc 	.word	0x080089fc
 800103c:	20000a2c 	.word	0x20000a2c
 8001040:	20000a24 	.word	0x20000a24
 8001044:	e0001004 	.word	0xe0001004

08001048 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6113      	str	r3, [r2, #16]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000a2c 	.word	0x20000a2c

08001068 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001070:	f3ef 8311 	mrs	r3, BASEPRI
 8001074:	f04f 0120 	mov.w	r1, #32
 8001078:	f381 8811 	msr	BASEPRI, r1
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4808      	ldr	r0, [pc, #32]	; (80010a0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8001080:	f7ff fc86 	bl	8000990 <_PreparePacket>
 8001084:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	68b8      	ldr	r0, [r7, #8]
 800108c:	f7ff fd6c 	bl	8000b68 <_SendPacket>
  RECORD_END();
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f383 8811 	msr	BASEPRI, r3
}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000a5c 	.word	0x20000a5c

080010a4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80010ae:	f3ef 8311 	mrs	r3, BASEPRI
 80010b2:	f04f 0120 	mov.w	r1, #32
 80010b6:	f381 8811 	msr	BASEPRI, r1
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	4816      	ldr	r0, [pc, #88]	; (8001118 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80010be:	f7ff fc67 	bl	8000990 <_PreparePacket>
 80010c2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	61fb      	str	r3, [r7, #28]
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	61bb      	str	r3, [r7, #24]
 80010d0:	e00b      	b.n	80010ea <SEGGER_SYSVIEW_RecordU32+0x46>
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	1c59      	adds	r1, r3, #1
 80010da:	61f9      	str	r1, [r7, #28]
 80010dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	09db      	lsrs	r3, r3, #7
 80010e8:	61bb      	str	r3, [r7, #24]
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	2b7f      	cmp	r3, #127	; 0x7f
 80010ee:	d8f0      	bhi.n	80010d2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	1c5a      	adds	r2, r3, #1
 80010f4:	61fa      	str	r2, [r7, #28]
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	701a      	strb	r2, [r3, #0]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	68f9      	ldr	r1, [r7, #12]
 8001104:	6938      	ldr	r0, [r7, #16]
 8001106:	f7ff fd2f 	bl	8000b68 <_SendPacket>
  RECORD_END();
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	f383 8811 	msr	BASEPRI, r3
}
 8001110:	bf00      	nop
 8001112:	3720      	adds	r7, #32
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000a5c 	.word	0x20000a5c

0800111c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	; 0x30
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8001128:	f3ef 8311 	mrs	r3, BASEPRI
 800112c:	f04f 0120 	mov.w	r1, #32
 8001130:	f381 8811 	msr	BASEPRI, r1
 8001134:	61fb      	str	r3, [r7, #28]
 8001136:	4825      	ldr	r0, [pc, #148]	; (80011cc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8001138:	f7ff fc2a 	bl	8000990 <_PreparePacket>
 800113c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
 800114a:	e00b      	b.n	8001164 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114e:	b2da      	uxtb	r2, r3
 8001150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001152:	1c59      	adds	r1, r3, #1
 8001154:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001156:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001160:	09db      	lsrs	r3, r3, #7
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
 8001164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001166:	2b7f      	cmp	r3, #127	; 0x7f
 8001168:	d8f0      	bhi.n	800114c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800116a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116c:	1c5a      	adds	r2, r3, #1
 800116e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	701a      	strb	r2, [r3, #0]
 8001176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001178:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	623b      	str	r3, [r7, #32]
 8001182:	e00b      	b.n	800119c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001184:	6a3b      	ldr	r3, [r7, #32]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	1c59      	adds	r1, r3, #1
 800118c:	6279      	str	r1, [r7, #36]	; 0x24
 800118e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	09db      	lsrs	r3, r3, #7
 800119a:	623b      	str	r3, [r7, #32]
 800119c:	6a3b      	ldr	r3, [r7, #32]
 800119e:	2b7f      	cmp	r3, #127	; 0x7f
 80011a0:	d8f0      	bhi.n	8001184 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	627a      	str	r2, [r7, #36]	; 0x24
 80011a8:	6a3a      	ldr	r2, [r7, #32]
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	701a      	strb	r2, [r3, #0]
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	6979      	ldr	r1, [r7, #20]
 80011b6:	69b8      	ldr	r0, [r7, #24]
 80011b8:	f7ff fcd6 	bl	8000b68 <_SendPacket>
  RECORD_END();
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f383 8811 	msr	BASEPRI, r3
}
 80011c2:	bf00      	nop
 80011c4:	3730      	adds	r7, #48	; 0x30
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000a5c 	.word	0x20000a5c

080011d0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08c      	sub	sp, #48	; 0x30
 80011d4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80011d6:	4b58      	ldr	r3, [pc, #352]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 80011d8:	2201      	movs	r2, #1
 80011da:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80011dc:	f3ef 8311 	mrs	r3, BASEPRI
 80011e0:	f04f 0120 	mov.w	r1, #32
 80011e4:	f381 8811 	msr	BASEPRI, r1
 80011e8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80011ea:	4b53      	ldr	r3, [pc, #332]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 80011ec:	785b      	ldrb	r3, [r3, #1]
 80011ee:	220a      	movs	r2, #10
 80011f0:	4952      	ldr	r1, [pc, #328]	; (800133c <SEGGER_SYSVIEW_Start+0x16c>)
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f824 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80011fe:	200a      	movs	r0, #10
 8001200:	f7ff ff32 	bl	8001068 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001204:	f3ef 8311 	mrs	r3, BASEPRI
 8001208:	f04f 0120 	mov.w	r1, #32
 800120c:	f381 8811 	msr	BASEPRI, r1
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	484b      	ldr	r0, [pc, #300]	; (8001340 <SEGGER_SYSVIEW_Start+0x170>)
 8001214:	f7ff fbbc 	bl	8000990 <_PreparePacket>
 8001218:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001222:	4b45      	ldr	r3, [pc, #276]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
 8001228:	e00b      	b.n	8001242 <SEGGER_SYSVIEW_Start+0x72>
 800122a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122c:	b2da      	uxtb	r2, r3
 800122e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001230:	1c59      	adds	r1, r3, #1
 8001232:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001234:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	701a      	strb	r2, [r3, #0]
 800123c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123e:	09db      	lsrs	r3, r3, #7
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
 8001242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001244:	2b7f      	cmp	r3, #127	; 0x7f
 8001246:	d8f0      	bhi.n	800122a <SEGGER_SYSVIEW_Start+0x5a>
 8001248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124a:	1c5a      	adds	r2, r3, #1
 800124c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800124e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	701a      	strb	r2, [r3, #0]
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
 800125c:	4b36      	ldr	r3, [pc, #216]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	623b      	str	r3, [r7, #32]
 8001262:	e00b      	b.n	800127c <SEGGER_SYSVIEW_Start+0xac>
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	1c59      	adds	r1, r3, #1
 800126c:	6279      	str	r1, [r7, #36]	; 0x24
 800126e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	09db      	lsrs	r3, r3, #7
 800127a:	623b      	str	r3, [r7, #32]
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	2b7f      	cmp	r3, #127	; 0x7f
 8001280:	d8f0      	bhi.n	8001264 <SEGGER_SYSVIEW_Start+0x94>
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	627a      	str	r2, [r7, #36]	; 0x24
 8001288:	6a3a      	ldr	r2, [r7, #32]
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	701a      	strb	r2, [r3, #0]
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	4b28      	ldr	r3, [pc, #160]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	61bb      	str	r3, [r7, #24]
 800129c:	e00b      	b.n	80012b6 <SEGGER_SYSVIEW_Start+0xe6>
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	1c59      	adds	r1, r3, #1
 80012a6:	61f9      	str	r1, [r7, #28]
 80012a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	701a      	strb	r2, [r3, #0]
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	09db      	lsrs	r3, r3, #7
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2b7f      	cmp	r3, #127	; 0x7f
 80012ba:	d8f0      	bhi.n	800129e <SEGGER_SYSVIEW_Start+0xce>
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	1c5a      	adds	r2, r3, #1
 80012c0:	61fa      	str	r2, [r7, #28]
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	701a      	strb	r2, [r3, #0]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	2300      	movs	r3, #0
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	e00b      	b.n	80012ee <SEGGER_SYSVIEW_Start+0x11e>
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	1c59      	adds	r1, r3, #1
 80012de:	6179      	str	r1, [r7, #20]
 80012e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	09db      	lsrs	r3, r3, #7
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	2b7f      	cmp	r3, #127	; 0x7f
 80012f2:	d8f0      	bhi.n	80012d6 <SEGGER_SYSVIEW_Start+0x106>
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	617a      	str	r2, [r7, #20]
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	701a      	strb	r2, [r3, #0]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001304:	2218      	movs	r2, #24
 8001306:	6839      	ldr	r1, [r7, #0]
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff fc2d 	bl	8000b68 <_SendPacket>
      RECORD_END();
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 800131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001320:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8001322:	f000 f9eb 	bl	80016fc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8001326:	f000 f9b1 	bl	800168c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800132a:	f000 fac1 	bl	80018b0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800132e:	bf00      	nop
 8001330:	3730      	adds	r7, #48	; 0x30
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000a2c 	.word	0x20000a2c
 800133c:	08008a84 	.word	0x08008a84
 8001340:	20000a5c 	.word	0x20000a5c

08001344 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800134a:	f3ef 8311 	mrs	r3, BASEPRI
 800134e:	f04f 0120 	mov.w	r1, #32
 8001352:	f381 8811 	msr	BASEPRI, r1
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	480b      	ldr	r0, [pc, #44]	; (8001388 <SEGGER_SYSVIEW_Stop+0x44>)
 800135a:	f7ff fb19 	bl	8000990 <_PreparePacket>
 800135e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <SEGGER_SYSVIEW_Stop+0x48>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d007      	beq.n	8001378 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8001368:	220b      	movs	r2, #11
 800136a:	6839      	ldr	r1, [r7, #0]
 800136c:	6838      	ldr	r0, [r7, #0]
 800136e:	f7ff fbfb 	bl	8000b68 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <SEGGER_SYSVIEW_Stop+0x48>)
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f383 8811 	msr	BASEPRI, r3
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000a5c 	.word	0x20000a5c
 800138c:	20000a2c 	.word	0x20000a2c

08001390 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	; 0x30
 8001394:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001396:	f3ef 8311 	mrs	r3, BASEPRI
 800139a:	f04f 0120 	mov.w	r1, #32
 800139e:	f381 8811 	msr	BASEPRI, r1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	4845      	ldr	r0, [pc, #276]	; (80014bc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80013a6:	f7ff faf3 	bl	8000990 <_PreparePacket>
 80013aa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013b4:	4b42      	ldr	r3, [pc, #264]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ba:	e00b      	b.n	80013d4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80013bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c2:	1c59      	adds	r1, r3, #1
 80013c4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80013c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	701a      	strb	r2, [r3, #0]
 80013ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d0:	09db      	lsrs	r3, r3, #7
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80013d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d6:	2b7f      	cmp	r3, #127	; 0x7f
 80013d8:	d8f0      	bhi.n	80013bc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80013da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013dc:	1c5a      	adds	r2, r3, #1
 80013de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	701a      	strb	r2, [r3, #0]
 80013e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
 80013ee:	4b34      	ldr	r3, [pc, #208]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	623b      	str	r3, [r7, #32]
 80013f4:	e00b      	b.n	800140e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80013f6:	6a3b      	ldr	r3, [r7, #32]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	1c59      	adds	r1, r3, #1
 80013fe:	6279      	str	r1, [r7, #36]	; 0x24
 8001400:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	701a      	strb	r2, [r3, #0]
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	09db      	lsrs	r3, r3, #7
 800140c:	623b      	str	r3, [r7, #32]
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	2b7f      	cmp	r3, #127	; 0x7f
 8001412:	d8f0      	bhi.n	80013f6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	627a      	str	r2, [r7, #36]	; 0x24
 800141a:	6a3a      	ldr	r2, [r7, #32]
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	701a      	strb	r2, [r3, #0]
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	61fb      	str	r3, [r7, #28]
 8001428:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	61bb      	str	r3, [r7, #24]
 800142e:	e00b      	b.n	8001448 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	b2da      	uxtb	r2, r3
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	1c59      	adds	r1, r3, #1
 8001438:	61f9      	str	r1, [r7, #28]
 800143a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	701a      	strb	r2, [r3, #0]
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	09db      	lsrs	r3, r3, #7
 8001446:	61bb      	str	r3, [r7, #24]
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	2b7f      	cmp	r3, #127	; 0x7f
 800144c:	d8f0      	bhi.n	8001430 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	1c5a      	adds	r2, r3, #1
 8001452:	61fa      	str	r2, [r7, #28]
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	701a      	strb	r2, [r3, #0]
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	e00b      	b.n	8001480 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	1c59      	adds	r1, r3, #1
 8001470:	6179      	str	r1, [r7, #20]
 8001472:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	701a      	strb	r2, [r3, #0]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	09db      	lsrs	r3, r3, #7
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	2b7f      	cmp	r3, #127	; 0x7f
 8001484:	d8f0      	bhi.n	8001468 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	617a      	str	r2, [r7, #20]
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	701a      	strb	r2, [r3, #0]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001496:	2218      	movs	r2, #24
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	68b8      	ldr	r0, [r7, #8]
 800149c:	f7ff fb64 	bl	8000b68 <_SendPacket>
  RECORD_END();
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d002      	beq.n	80014b4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	4798      	blx	r3
  }
}
 80014b4:	bf00      	nop
 80014b6:	3730      	adds	r7, #48	; 0x30
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000a5c 	.word	0x20000a5c
 80014c0:	20000a2c 	.word	0x20000a2c

080014c4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b092      	sub	sp, #72	; 0x48
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80014cc:	f3ef 8311 	mrs	r3, BASEPRI
 80014d0:	f04f 0120 	mov.w	r1, #32
 80014d4:	f381 8811 	msr	BASEPRI, r1
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	486a      	ldr	r0, [pc, #424]	; (8001684 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80014dc:	f7ff fa58 	bl	8000990 <_PreparePacket>
 80014e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	647b      	str	r3, [r7, #68]	; 0x44
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4b66      	ldr	r3, [pc, #408]	; (8001688 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	643b      	str	r3, [r7, #64]	; 0x40
 80014f6:	e00b      	b.n	8001510 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80014f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014fe:	1c59      	adds	r1, r3, #1
 8001500:	6479      	str	r1, [r7, #68]	; 0x44
 8001502:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]
 800150a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800150c:	09db      	lsrs	r3, r3, #7
 800150e:	643b      	str	r3, [r7, #64]	; 0x40
 8001510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001512:	2b7f      	cmp	r3, #127	; 0x7f
 8001514:	d8f0      	bhi.n	80014f8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8001516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001518:	1c5a      	adds	r2, r3, #1
 800151a:	647a      	str	r2, [r7, #68]	; 0x44
 800151c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	701a      	strb	r2, [r3, #0]
 8001522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001524:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	63fb      	str	r3, [r7, #60]	; 0x3c
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001530:	e00b      	b.n	800154a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8001532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001534:	b2da      	uxtb	r2, r3
 8001536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001538:	1c59      	adds	r1, r3, #1
 800153a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800153c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001546:	09db      	lsrs	r3, r3, #7
 8001548:	63bb      	str	r3, [r7, #56]	; 0x38
 800154a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800154c:	2b7f      	cmp	r3, #127	; 0x7f
 800154e:	d8f0      	bhi.n	8001532 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8001550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001552:	1c5a      	adds	r2, r3, #1
 8001554:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800155e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2220      	movs	r2, #32
 8001566:	4619      	mov	r1, r3
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7ff f9e1 	bl	8000930 <_EncodeStr>
 800156e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8001570:	2209      	movs	r2, #9
 8001572:	68f9      	ldr	r1, [r7, #12]
 8001574:	6938      	ldr	r0, [r7, #16]
 8001576:	f7ff faf7 	bl	8000b68 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	637b      	str	r3, [r7, #52]	; 0x34
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4b40      	ldr	r3, [pc, #256]	; (8001688 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	633b      	str	r3, [r7, #48]	; 0x30
 800158e:	e00b      	b.n	80015a8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8001590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001592:	b2da      	uxtb	r2, r3
 8001594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001596:	1c59      	adds	r1, r3, #1
 8001598:	6379      	str	r1, [r7, #52]	; 0x34
 800159a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	701a      	strb	r2, [r3, #0]
 80015a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a4:	09db      	lsrs	r3, r3, #7
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
 80015a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015aa:	2b7f      	cmp	r3, #127	; 0x7f
 80015ac:	d8f0      	bhi.n	8001590 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80015ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	637a      	str	r2, [r7, #52]	; 0x34
 80015b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]
 80015ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80015c8:	e00b      	b.n	80015e2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80015ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d0:	1c59      	adds	r1, r3, #1
 80015d2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80015d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	701a      	strb	r2, [r3, #0]
 80015dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015de:	09db      	lsrs	r3, r3, #7
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80015e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e4:	2b7f      	cmp	r3, #127	; 0x7f
 80015e6:	d8f0      	bhi.n	80015ca <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80015e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80015ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	701a      	strb	r2, [r3, #0]
 80015f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	623b      	str	r3, [r7, #32]
 8001602:	e00b      	b.n	800161c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	b2da      	uxtb	r2, r3
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	1c59      	adds	r1, r3, #1
 800160c:	6279      	str	r1, [r7, #36]	; 0x24
 800160e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]
 8001616:	6a3b      	ldr	r3, [r7, #32]
 8001618:	09db      	lsrs	r3, r3, #7
 800161a:	623b      	str	r3, [r7, #32]
 800161c:	6a3b      	ldr	r3, [r7, #32]
 800161e:	2b7f      	cmp	r3, #127	; 0x7f
 8001620:	d8f0      	bhi.n	8001604 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	627a      	str	r2, [r7, #36]	; 0x24
 8001628:	6a3a      	ldr	r2, [r7, #32]
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	701a      	strb	r2, [r3, #0]
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	61fb      	str	r3, [r7, #28]
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
 800163a:	e00b      	b.n	8001654 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	1c59      	adds	r1, r3, #1
 8001644:	61f9      	str	r1, [r7, #28]
 8001646:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	701a      	strb	r2, [r3, #0]
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	09db      	lsrs	r3, r3, #7
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	2b7f      	cmp	r3, #127	; 0x7f
 8001658:	d8f0      	bhi.n	800163c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	61fa      	str	r2, [r7, #28]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	701a      	strb	r2, [r3, #0]
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800166a:	2215      	movs	r2, #21
 800166c:	68f9      	ldr	r1, [r7, #12]
 800166e:	6938      	ldr	r0, [r7, #16]
 8001670:	f7ff fa7a 	bl	8000b68 <_SendPacket>
  RECORD_END();
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	f383 8811 	msr	BASEPRI, r3
}
 800167a:	bf00      	nop
 800167c:	3748      	adds	r7, #72	; 0x48
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000a5c 	.word	0x20000a5c
 8001688:	20000a2c 	.word	0x20000a2c

0800168c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d008      	beq.n	80016aa <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80016a2:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4798      	blx	r3
  }
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000a2c 	.word	0x20000a2c

080016b4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016bc:	f3ef 8311 	mrs	r3, BASEPRI
 80016c0:	f04f 0120 	mov.w	r1, #32
 80016c4:	f381 8811 	msr	BASEPRI, r1
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	480b      	ldr	r0, [pc, #44]	; (80016f8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80016cc:	f7ff f960 	bl	8000990 <_PreparePacket>
 80016d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016d2:	2280      	movs	r2, #128	; 0x80
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	6938      	ldr	r0, [r7, #16]
 80016d8:	f7ff f92a 	bl	8000930 <_EncodeStr>
 80016dc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80016de:	220e      	movs	r2, #14
 80016e0:	68f9      	ldr	r1, [r7, #12]
 80016e2:	6938      	ldr	r0, [r7, #16]
 80016e4:	f7ff fa40 	bl	8000b68 <_SendPacket>
  RECORD_END();
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f383 8811 	msr	BASEPRI, r3
}
 80016ee:	bf00      	nop
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000a5c 	.word	0x20000a5c

080016fc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d01a      	beq.n	8001740 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d015      	beq.n	8001740 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8001714:	4b10      	ldr	r3, [pc, #64]	; (8001758 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4798      	blx	r3
 800171c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8001720:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8001722:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	000a      	movs	r2, r1
 8001730:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8001732:	4613      	mov	r3, r2
 8001734:	461a      	mov	r2, r3
 8001736:	4621      	mov	r1, r4
 8001738:	200d      	movs	r0, #13
 800173a:	f7ff fcef 	bl	800111c <SEGGER_SYSVIEW_RecordU32x2>
 800173e:	e006      	b.n	800174e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	200c      	movs	r0, #12
 8001748:	f7ff fcac 	bl	80010a4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bd90      	pop	{r4, r7, pc}
 8001756:	bf00      	nop
 8001758:	20000a2c 	.word	0x20000a2c
 800175c:	e0001004 	.word	0xe0001004

08001760 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b08c      	sub	sp, #48	; 0x30
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800176a:	4b40      	ldr	r3, [pc, #256]	; (800186c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d077      	beq.n	8001862 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8001772:	4b3e      	ldr	r3, [pc, #248]	; (800186c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8001778:	2300      	movs	r3, #0
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
 800177c:	e008      	b.n	8001790 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800177e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8001784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001786:	2b00      	cmp	r3, #0
 8001788:	d007      	beq.n	800179a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800178a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178c:	3301      	adds	r3, #1
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001794:	429a      	cmp	r2, r3
 8001796:	d3f2      	bcc.n	800177e <SEGGER_SYSVIEW_SendModule+0x1e>
 8001798:	e000      	b.n	800179c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800179a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800179c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d055      	beq.n	800184e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80017a2:	f3ef 8311 	mrs	r3, BASEPRI
 80017a6:	f04f 0120 	mov.w	r1, #32
 80017aa:	f381 8811 	msr	BASEPRI, r1
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	482f      	ldr	r0, [pc, #188]	; (8001870 <SEGGER_SYSVIEW_SendModule+0x110>)
 80017b2:	f7ff f8ed 	bl	8000990 <_PreparePacket>
 80017b6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	623b      	str	r3, [r7, #32]
 80017c4:	e00b      	b.n	80017de <SEGGER_SYSVIEW_SendModule+0x7e>
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	1c59      	adds	r1, r3, #1
 80017ce:	6279      	str	r1, [r7, #36]	; 0x24
 80017d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	701a      	strb	r2, [r3, #0]
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	09db      	lsrs	r3, r3, #7
 80017dc:	623b      	str	r3, [r7, #32]
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	2b7f      	cmp	r3, #127	; 0x7f
 80017e2:	d8f0      	bhi.n	80017c6 <SEGGER_SYSVIEW_SendModule+0x66>
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	627a      	str	r2, [r7, #36]	; 0x24
 80017ea:	6a3a      	ldr	r2, [r7, #32]
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	61fb      	str	r3, [r7, #28]
 80017f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	61bb      	str	r3, [r7, #24]
 80017fe:	e00b      	b.n	8001818 <SEGGER_SYSVIEW_SendModule+0xb8>
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	b2da      	uxtb	r2, r3
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	1c59      	adds	r1, r3, #1
 8001808:	61f9      	str	r1, [r7, #28]
 800180a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	701a      	strb	r2, [r3, #0]
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	09db      	lsrs	r3, r3, #7
 8001816:	61bb      	str	r3, [r7, #24]
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	2b7f      	cmp	r3, #127	; 0x7f
 800181c:	d8f0      	bhi.n	8001800 <SEGGER_SYSVIEW_SendModule+0xa0>
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	61fa      	str	r2, [r7, #28]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800182e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	4619      	mov	r1, r3
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f7ff f87a 	bl	8000930 <_EncodeStr>
 800183c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800183e:	2216      	movs	r2, #22
 8001840:	68f9      	ldr	r1, [r7, #12]
 8001842:	6938      	ldr	r0, [r7, #16]
 8001844:	f7ff f990 	bl	8000b68 <_SendPacket>
      RECORD_END();
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800184e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001850:	2b00      	cmp	r3, #0
 8001852:	d006      	beq.n	8001862 <SEGGER_SYSVIEW_SendModule+0x102>
 8001854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d002      	beq.n	8001862 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800185c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	4798      	blx	r3
    }
  }
}
 8001862:	bf00      	nop
 8001864:	3730      	adds	r7, #48	; 0x30
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000a54 	.word	0x20000a54
 8001870:	20000a5c 	.word	0x20000a5c

08001874 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00f      	beq.n	80018a2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d002      	beq.n	8001896 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f2      	bne.n	8001888 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000a54 	.word	0x20000a54

080018b0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80018b6:	f3ef 8311 	mrs	r3, BASEPRI
 80018ba:	f04f 0120 	mov.w	r1, #32
 80018be:	f381 8811 	msr	BASEPRI, r1
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	4817      	ldr	r0, [pc, #92]	; (8001924 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80018c6:	f7ff f863 	bl	8000990 <_PreparePacket>
 80018ca:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	4b14      	ldr	r3, [pc, #80]	; (8001928 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	e00b      	b.n	80018f4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	1c59      	adds	r1, r3, #1
 80018e4:	6179      	str	r1, [r7, #20]
 80018e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	701a      	strb	r2, [r3, #0]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	09db      	lsrs	r3, r3, #7
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	2b7f      	cmp	r3, #127	; 0x7f
 80018f8:	d8f0      	bhi.n	80018dc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	617a      	str	r2, [r7, #20]
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	701a      	strb	r2, [r3, #0]
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800190a:	221b      	movs	r2, #27
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	68b8      	ldr	r0, [r7, #8]
 8001910:	f7ff f92a 	bl	8000b68 <_SendPacket>
  RECORD_END();
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f383 8811 	msr	BASEPRI, r3
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000a5c 	.word	0x20000a5c
 8001928:	20000a58 	.word	0x20000a58

0800192c <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 800192c:	b40f      	push	{r0, r1, r2, r3}
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	461a      	mov	r2, r3
 800193e:	2100      	movs	r1, #0
 8001940:	6938      	ldr	r0, [r7, #16]
 8001942:	f7ff fa7f 	bl	8000e44 <_VPrintHost>
  va_end(ParamList);
#endif
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001950:	b004      	add	sp, #16
 8001952:	4770      	bx	lr

08001954 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001958:	4803      	ldr	r0, [pc, #12]	; (8001968 <_cbSendSystemDesc+0x14>)
 800195a:	f7ff feab 	bl	80016b4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800195e:	4803      	ldr	r0, [pc, #12]	; (800196c <_cbSendSystemDesc+0x18>)
 8001960:	f7ff fea8 	bl	80016b4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	08008a04 	.word	0x08008a04
 800196c:	08008a38 	.word	0x08008a38

08001970 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <SEGGER_SYSVIEW_Conf+0x20>)
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <SEGGER_SYSVIEW_Conf+0x20>)
 800197a:	6819      	ldr	r1, [r3, #0]
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <SEGGER_SYSVIEW_Conf+0x24>)
 800197e:	4a06      	ldr	r2, [pc, #24]	; (8001998 <SEGGER_SYSVIEW_Conf+0x28>)
 8001980:	f7ff fb1e 	bl	8000fc0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001984:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001988:	f7ff fb5e 	bl	8001048 <SEGGER_SYSVIEW_SetRAMBase>
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000000 	.word	0x20000000
 8001994:	08001955 	.word	0x08001955
 8001998:	08008a90 	.word	0x08008a90

0800199c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800199c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800199e:	b085      	sub	sp, #20
 80019a0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	e048      	b.n	8001a3a <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 80019a8:	4929      	ldr	r1, [pc, #164]	; (8001a50 <_cbSendTaskList+0xb4>)
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f005 ff05 	bl	80077c8 <uxTaskGetStackHighWaterMark>
 80019be:	4601      	mov	r1, r0
 80019c0:	4823      	ldr	r0, [pc, #140]	; (8001a50 <_cbSendTaskList+0xb4>)
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4403      	add	r3, r0
 80019ce:	3310      	adds	r3, #16
 80019d0:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80019d2:	491f      	ldr	r1, [pc, #124]	; (8001a50 <_cbSendTaskList+0xb4>)
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	440b      	add	r3, r1
 80019e0:	6818      	ldr	r0, [r3, #0]
 80019e2:	491b      	ldr	r1, [pc, #108]	; (8001a50 <_cbSendTaskList+0xb4>)
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	3304      	adds	r3, #4
 80019f2:	6819      	ldr	r1, [r3, #0]
 80019f4:	4c16      	ldr	r4, [pc, #88]	; (8001a50 <_cbSendTaskList+0xb4>)
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4423      	add	r3, r4
 8001a02:	3308      	adds	r3, #8
 8001a04:	681c      	ldr	r4, [r3, #0]
 8001a06:	4d12      	ldr	r5, [pc, #72]	; (8001a50 <_cbSendTaskList+0xb4>)
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	442b      	add	r3, r5
 8001a14:	330c      	adds	r3, #12
 8001a16:	681d      	ldr	r5, [r3, #0]
 8001a18:	4e0d      	ldr	r6, [pc, #52]	; (8001a50 <_cbSendTaskList+0xb4>)
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4433      	add	r3, r6
 8001a26:	3310      	adds	r3, #16
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	462b      	mov	r3, r5
 8001a2e:	4622      	mov	r2, r4
 8001a30:	f000 f855 	bl	8001ade <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3301      	adds	r3, #1
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <_cbSendTaskList+0xb8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d3b1      	bcc.n	80019a8 <_cbSendTaskList+0xc>
  }
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000b40 	.word	0x20000b40
 8001a54:	20000be0 	.word	0x20000be0

08001a58 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001a60:	f005 fba0 	bl	80071a4 <xTaskGetTickCountFromISR>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2200      	movs	r2, #0
 8001a68:	469a      	mov	sl, r3
 8001a6a:	4693      	mov	fp, r2
 8001a6c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001a70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	f04f 0a00 	mov.w	sl, #0
 8001a7c:	f04f 0b00 	mov.w	fp, #0
 8001a80:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001a84:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001a88:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001a8c:	4652      	mov	r2, sl
 8001a8e:	465b      	mov	r3, fp
 8001a90:	1a14      	subs	r4, r2, r0
 8001a92:	eb63 0501 	sbc.w	r5, r3, r1
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	00ab      	lsls	r3, r5, #2
 8001aa0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001aa4:	00a2      	lsls	r2, r4, #2
 8001aa6:	4614      	mov	r4, r2
 8001aa8:	461d      	mov	r5, r3
 8001aaa:	eb14 0800 	adds.w	r8, r4, r0
 8001aae:	eb45 0901 	adc.w	r9, r5, r1
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ac6:	4690      	mov	r8, r2
 8001ac8:	4699      	mov	r9, r3
 8001aca:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001ace:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001ade <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b08a      	sub	sp, #40	; 0x28
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	60f8      	str	r0, [r7, #12]
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	2214      	movs	r2, #20
 8001af2:	2100      	movs	r1, #0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f006 ff31 	bl	800895c <memset>
  TaskInfo.TaskID     = TaskID;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001b0e:	f107 0314 	add.w	r3, r7, #20
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fcd6 	bl	80014c4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001b18:	bf00      	nop
 8001b1a:	3728      	adds	r7, #40	; 0x28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b24:	f000 fcb1 	bl	800248a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b28:	f000 f820 	bl	8001b6c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SEGGER_SYSVIEW_Conf();
 8001b2c:	f7ff ff20 	bl	8001970 <SEGGER_SYSVIEW_Conf>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b30:	f000 f98c 	bl	8001e4c <MX_GPIO_Init>
  MX_ETH_Init();
 8001b34:	f000 f8de 	bl	8001cf4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001b38:	f000 f92a 	bl	8001d90 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001b3c:	f000 f958 	bl	8001df0 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8001b40:	f000 f886 	bl	8001c50 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b44:	f004 f8f6 	bl	8005d34 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001b48:	4a05      	ldr	r2, [pc, #20]	; (8001b60 <main+0x40>)
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4805      	ldr	r0, [pc, #20]	; (8001b64 <main+0x44>)
 8001b4e:	f004 f95b 	bl	8005e08 <osThreadNew>
 8001b52:	4603      	mov	r3, r0
 8001b54:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <main+0x48>)
 8001b56:	6013      	str	r3, [r2, #0]
  /* add events, ... */

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001b58:	f004 f920 	bl	8005d9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <main+0x3c>
 8001b5e:	bf00      	nop
 8001b60:	08008a98 	.word	0x08008a98
 8001b64:	08001f91 	.word	0x08001f91
 8001b68:	200012a4 	.word	0x200012a4

08001b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b094      	sub	sp, #80	; 0x50
 8001b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b72:	f107 031c 	add.w	r3, r7, #28
 8001b76:	2234      	movs	r2, #52	; 0x34
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f006 feee 	bl	800895c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b80:	f107 0308 	add.w	r3, r7, #8
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b90:	f002 f810 	bl	8003bb4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b94:	4b2c      	ldr	r3, [pc, #176]	; (8001c48 <SystemClock_Config+0xdc>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	4a2b      	ldr	r2, [pc, #172]	; (8001c48 <SystemClock_Config+0xdc>)
 8001b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba0:	4b29      	ldr	r3, [pc, #164]	; (8001c48 <SystemClock_Config+0xdc>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bac:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <SystemClock_Config+0xe0>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bb4:	4a25      	ldr	r2, [pc, #148]	; (8001c4c <SystemClock_Config+0xe0>)
 8001bb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	4b23      	ldr	r3, [pc, #140]	; (8001c4c <SystemClock_Config+0xe0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bc4:	603b      	str	r3, [r7, #0]
 8001bc6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001bcc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001bd0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bda:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001bdc:	2304      	movs	r3, #4
 8001bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001be0:	2360      	movs	r3, #96	; 0x60
 8001be2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001be4:	2302      	movs	r3, #2
 8001be6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001be8:	2304      	movs	r3, #4
 8001bea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bec:	2302      	movs	r3, #2
 8001bee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bf0:	f107 031c 	add.w	r3, r7, #28
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f002 f83d 	bl	8003c74 <HAL_RCC_OscConfig>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c00:	f000 f9e4 	bl	8001fcc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c04:	f001 ffe6 	bl	8003bd4 <HAL_PWREx_EnableOverDrive>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c0e:	f000 f9dd 	bl	8001fcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c12:	230f      	movs	r3, #15
 8001c14:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c16:	2302      	movs	r3, #2
 8001c18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c28:	f107 0308 	add.w	r3, r7, #8
 8001c2c:	2103      	movs	r1, #3
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f002 face 	bl	80041d0 <HAL_RCC_ClockConfig>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001c3a:	f000 f9c7 	bl	8001fcc <Error_Handler>
  }
}
 8001c3e:	bf00      	nop
 8001c40:	3750      	adds	r7, #80	; 0x50
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40007000 	.word	0x40007000

08001c50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c56:	463b      	mov	r3, r7
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c62:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <MX_ADC1_Init+0x98>)
 8001c64:	4a21      	ldr	r2, [pc, #132]	; (8001cec <MX_ADC1_Init+0x9c>)
 8001c66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c68:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <MX_ADC1_Init+0x98>)
 8001c6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c6e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c70:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <MX_ADC1_Init+0x98>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c76:	4b1c      	ldr	r3, [pc, #112]	; (8001ce8 <MX_ADC1_Init+0x98>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ce8 <MX_ADC1_Init+0x98>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c82:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <MX_ADC1_Init+0x98>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c8a:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <MX_ADC1_Init+0x98>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c90:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <MX_ADC1_Init+0x98>)
 8001c92:	4a17      	ldr	r2, [pc, #92]	; (8001cf0 <MX_ADC1_Init+0xa0>)
 8001c94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c96:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <MX_ADC1_Init+0x98>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <MX_ADC1_Init+0x98>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ca2:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_ADC1_Init+0x98>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001caa:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <MX_ADC1_Init+0x98>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cb0:	480d      	ldr	r0, [pc, #52]	; (8001ce8 <MX_ADC1_Init+0x98>)
 8001cb2:	f000 fc6b 	bl	800258c <HAL_ADC_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001cbc:	f000 f986 	bl	8001fcc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001cc0:	2304      	movs	r3, #4
 8001cc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ccc:	463b      	mov	r3, r7
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_ADC1_Init+0x98>)
 8001cd2:	f000 fe05 	bl	80028e0 <HAL_ADC_ConfigChannel>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001cdc:	f000 f976 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ce0:	bf00      	nop
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000c1c 	.word	0x20000c1c
 8001cec:	40012000 	.word	0x40012000
 8001cf0:	0f000001 	.word	0x0f000001

08001cf4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001cf8:	4b1f      	ldr	r3, [pc, #124]	; (8001d78 <MX_ETH_Init+0x84>)
 8001cfa:	4a20      	ldr	r2, [pc, #128]	; (8001d7c <MX_ETH_Init+0x88>)
 8001cfc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001cfe:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <MX_ETH_Init+0x8c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001d04:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <MX_ETH_Init+0x8c>)
 8001d06:	2280      	movs	r2, #128	; 0x80
 8001d08:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <MX_ETH_Init+0x8c>)
 8001d0c:	22e1      	movs	r2, #225	; 0xe1
 8001d0e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001d10:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <MX_ETH_Init+0x8c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001d16:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <MX_ETH_Init+0x8c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001d1c:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <MX_ETH_Init+0x8c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <MX_ETH_Init+0x84>)
 8001d24:	4a16      	ldr	r2, [pc, #88]	; (8001d80 <MX_ETH_Init+0x8c>)
 8001d26:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001d28:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <MX_ETH_Init+0x84>)
 8001d2a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001d2e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <MX_ETH_Init+0x84>)
 8001d32:	4a14      	ldr	r2, [pc, #80]	; (8001d84 <MX_ETH_Init+0x90>)
 8001d34:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <MX_ETH_Init+0x84>)
 8001d38:	4a13      	ldr	r2, [pc, #76]	; (8001d88 <MX_ETH_Init+0x94>)
 8001d3a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <MX_ETH_Init+0x84>)
 8001d3e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001d42:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001d44:	480c      	ldr	r0, [pc, #48]	; (8001d78 <MX_ETH_Init+0x84>)
 8001d46:	f001 f901 	bl	8002f4c <HAL_ETH_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001d50:	f000 f93c 	bl	8001fcc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001d54:	2238      	movs	r2, #56	; 0x38
 8001d56:	2100      	movs	r1, #0
 8001d58:	480c      	ldr	r0, [pc, #48]	; (8001d8c <MX_ETH_Init+0x98>)
 8001d5a:	f006 fdff 	bl	800895c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <MX_ETH_Init+0x98>)
 8001d60:	2221      	movs	r2, #33	; 0x21
 8001d62:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <MX_ETH_Init+0x98>)
 8001d66:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001d6a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001d6c:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <MX_ETH_Init+0x98>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000c64 	.word	0x20000c64
 8001d7c:	40028000 	.word	0x40028000
 8001d80:	200012a8 	.word	0x200012a8
 8001d84:	200000b0 	.word	0x200000b0
 8001d88:	20000010 	.word	0x20000010
 8001d8c:	20000be4 	.word	0x20000be4

08001d90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d94:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001d96:	4a15      	ldr	r2, [pc, #84]	; (8001dec <MX_USART3_UART_Init+0x5c>)
 8001d98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d9a:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001d9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001da0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001da2:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001da8:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001dae:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001db6:	220c      	movs	r2, #12
 8001db8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dba:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc0:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dc6:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dd2:	4805      	ldr	r0, [pc, #20]	; (8001de8 <MX_USART3_UART_Init+0x58>)
 8001dd4:	f003 f84a 	bl	8004e6c <HAL_UART_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001dde:	f000 f8f5 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000d14 	.word	0x20000d14
 8001dec:	40004800 	.word	0x40004800

08001df0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001df4:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001df6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001dfa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dfe:	2206      	movs	r2, #6
 8001e00:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001e02:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e04:	2202      	movs	r2, #2
 8001e06:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e10:	2202      	movs	r2, #2
 8001e12:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001e20:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001e32:	4805      	ldr	r0, [pc, #20]	; (8001e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e34:	f001 fd75 	bl	8003922 <HAL_PCD_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001e3e:	f000 f8c5 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000d9c 	.word	0x20000d9c

08001e4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08c      	sub	sp, #48	; 0x30
 8001e50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e52:	f107 031c 	add.w	r3, r7, #28
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	60da      	str	r2, [r3, #12]
 8001e60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e62:	4b47      	ldr	r3, [pc, #284]	; (8001f80 <MX_GPIO_Init+0x134>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a46      	ldr	r2, [pc, #280]	; (8001f80 <MX_GPIO_Init+0x134>)
 8001e68:	f043 0304 	orr.w	r3, r3, #4
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b44      	ldr	r3, [pc, #272]	; (8001f80 <MX_GPIO_Init+0x134>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	61bb      	str	r3, [r7, #24]
 8001e78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e7a:	4b41      	ldr	r3, [pc, #260]	; (8001f80 <MX_GPIO_Init+0x134>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a40      	ldr	r2, [pc, #256]	; (8001f80 <MX_GPIO_Init+0x134>)
 8001e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b3e      	ldr	r3, [pc, #248]	; (8001f80 <MX_GPIO_Init+0x134>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e92:	4b3b      	ldr	r3, [pc, #236]	; (8001f80 <MX_GPIO_Init+0x134>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a3a      	ldr	r2, [pc, #232]	; (8001f80 <MX_GPIO_Init+0x134>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b38      	ldr	r3, [pc, #224]	; (8001f80 <MX_GPIO_Init+0x134>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eaa:	4b35      	ldr	r3, [pc, #212]	; (8001f80 <MX_GPIO_Init+0x134>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a34      	ldr	r2, [pc, #208]	; (8001f80 <MX_GPIO_Init+0x134>)
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b32      	ldr	r3, [pc, #200]	; (8001f80 <MX_GPIO_Init+0x134>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ec2:	4b2f      	ldr	r3, [pc, #188]	; (8001f80 <MX_GPIO_Init+0x134>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a2e      	ldr	r2, [pc, #184]	; (8001f80 <MX_GPIO_Init+0x134>)
 8001ec8:	f043 0308 	orr.w	r3, r3, #8
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b2c      	ldr	r3, [pc, #176]	; (8001f80 <MX_GPIO_Init+0x134>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001eda:	4b29      	ldr	r3, [pc, #164]	; (8001f80 <MX_GPIO_Init+0x134>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a28      	ldr	r2, [pc, #160]	; (8001f80 <MX_GPIO_Init+0x134>)
 8001ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b26      	ldr	r3, [pc, #152]	; (8001f80 <MX_GPIO_Init+0x134>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eee:	607b      	str	r3, [r7, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001ef8:	4822      	ldr	r0, [pc, #136]	; (8001f84 <MX_GPIO_Init+0x138>)
 8001efa:	f001 fcf9 	bl	80038f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2140      	movs	r1, #64	; 0x40
 8001f02:	4821      	ldr	r0, [pc, #132]	; (8001f88 <MX_GPIO_Init+0x13c>)
 8001f04:	f001 fcf4 	bl	80038f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001f08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001f18:	f107 031c 	add.w	r3, r7, #28
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	481b      	ldr	r0, [pc, #108]	; (8001f8c <MX_GPIO_Init+0x140>)
 8001f20:	f001 fb3a 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001f24:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f32:	2300      	movs	r3, #0
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f36:	f107 031c 	add.w	r3, r7, #28
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4811      	ldr	r0, [pc, #68]	; (8001f84 <MX_GPIO_Init+0x138>)
 8001f3e:	f001 fb2b 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001f42:	2340      	movs	r3, #64	; 0x40
 8001f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f46:	2301      	movs	r3, #1
 8001f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001f52:	f107 031c 	add.w	r3, r7, #28
 8001f56:	4619      	mov	r1, r3
 8001f58:	480b      	ldr	r0, [pc, #44]	; (8001f88 <MX_GPIO_Init+0x13c>)
 8001f5a:	f001 fb1d 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001f5e:	2380      	movs	r3, #128	; 0x80
 8001f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f62:	2300      	movs	r3, #0
 8001f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f6a:	f107 031c 	add.w	r3, r7, #28
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4805      	ldr	r0, [pc, #20]	; (8001f88 <MX_GPIO_Init+0x13c>)
 8001f72:	f001 fb11 	bl	8003598 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f76:	bf00      	nop
 8001f78:	3730      	adds	r7, #48	; 0x30
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40020400 	.word	0x40020400
 8001f88:	40021800 	.word	0x40021800
 8001f8c:	40020800 	.word	0x40020800

08001f90 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  uint32_t AD_RES = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
    osDelay(100);
 8001f9c:	2064      	movs	r0, #100	; 0x64
 8001f9e:	f003 ffd9 	bl	8005f54 <osDelay>
    HAL_ADC_Start(&hadc1);
 8001fa2:	4808      	ldr	r0, [pc, #32]	; (8001fc4 <StartDefaultTask+0x34>)
 8001fa4:	f000 fb36 	bl	8002614 <HAL_ADC_Start>
   // Poll ADC1 Perihperal & TimeOut = 1mSec
    HAL_ADC_PollForConversion(&hadc1, 1);
 8001fa8:	2101      	movs	r1, #1
 8001faa:	4806      	ldr	r0, [pc, #24]	; (8001fc4 <StartDefaultTask+0x34>)
 8001fac:	f000 fc00 	bl	80027b0 <HAL_ADC_PollForConversion>
    AD_RES = HAL_ADC_GetValue(&hadc1);
 8001fb0:	4804      	ldr	r0, [pc, #16]	; (8001fc4 <StartDefaultTask+0x34>)
 8001fb2:	f000 fc88 	bl	80028c6 <HAL_ADC_GetValue>
 8001fb6:	60f8      	str	r0, [r7, #12]
    SEGGER_SYSVIEW_PrintfHost("%u\n", AD_RES);
 8001fb8:	68f9      	ldr	r1, [r7, #12]
 8001fba:	4803      	ldr	r0, [pc, #12]	; (8001fc8 <StartDefaultTask+0x38>)
 8001fbc:	f7ff fcb6 	bl	800192c <SEGGER_SYSVIEW_PrintfHost>
  {
 8001fc0:	e7ec      	b.n	8001f9c <StartDefaultTask+0xc>
 8001fc2:	bf00      	nop
 8001fc4:	20000c1c 	.word	0x20000c1c
 8001fc8:	08008a54 	.word	0x08008a54

08001fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd0:	b672      	cpsid	i
}
 8001fd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <Error_Handler+0x8>
	...

08001fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fde:	4b11      	ldr	r3, [pc, #68]	; (8002024 <HAL_MspInit+0x4c>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	4a10      	ldr	r2, [pc, #64]	; (8002024 <HAL_MspInit+0x4c>)
 8001fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fea:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <HAL_MspInit+0x4c>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	607b      	str	r3, [r7, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_MspInit+0x4c>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <HAL_MspInit+0x4c>)
 8001ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002000:	6453      	str	r3, [r2, #68]	; 0x44
 8002002:	4b08      	ldr	r3, [pc, #32]	; (8002024 <HAL_MspInit+0x4c>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200a:	603b      	str	r3, [r7, #0]
 800200c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800200e:	2200      	movs	r2, #0
 8002010:	210f      	movs	r1, #15
 8002012:	f06f 0001 	mvn.w	r0, #1
 8002016:	f000 ff70 	bl	8002efa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800

08002028 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	; 0x28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a15      	ldr	r2, [pc, #84]	; (800209c <HAL_ADC_MspInit+0x74>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d123      	bne.n	8002092 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <HAL_ADC_MspInit+0x78>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <HAL_ADC_MspInit+0x78>)
 8002050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002054:	6453      	str	r3, [r2, #68]	; 0x44
 8002056:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <HAL_ADC_MspInit+0x78>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002062:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <HAL_ADC_MspInit+0x78>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a0e      	ldr	r2, [pc, #56]	; (80020a0 <HAL_ADC_MspInit+0x78>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <HAL_ADC_MspInit+0x78>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800207a:	2310      	movs	r3, #16
 800207c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800207e:	2303      	movs	r3, #3
 8002080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002086:	f107 0314 	add.w	r3, r7, #20
 800208a:	4619      	mov	r1, r3
 800208c:	4805      	ldr	r0, [pc, #20]	; (80020a4 <HAL_ADC_MspInit+0x7c>)
 800208e:	f001 fa83 	bl	8003598 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002092:	bf00      	nop
 8002094:	3728      	adds	r7, #40	; 0x28
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40012000 	.word	0x40012000
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40020000 	.word	0x40020000

080020a8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08e      	sub	sp, #56	; 0x38
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a4e      	ldr	r2, [pc, #312]	; (8002200 <HAL_ETH_MspInit+0x158>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	f040 8096 	bne.w	80021f8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80020cc:	4b4d      	ldr	r3, [pc, #308]	; (8002204 <HAL_ETH_MspInit+0x15c>)
 80020ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d0:	4a4c      	ldr	r2, [pc, #304]	; (8002204 <HAL_ETH_MspInit+0x15c>)
 80020d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020d6:	6313      	str	r3, [r2, #48]	; 0x30
 80020d8:	4b4a      	ldr	r3, [pc, #296]	; (8002204 <HAL_ETH_MspInit+0x15c>)
 80020da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e0:	623b      	str	r3, [r7, #32]
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	4b47      	ldr	r3, [pc, #284]	; (8002204 <HAL_ETH_MspInit+0x15c>)
 80020e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e8:	4a46      	ldr	r2, [pc, #280]	; (8002204 <HAL_ETH_MspInit+0x15c>)
 80020ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020ee:	6313      	str	r3, [r2, #48]	; 0x30
 80020f0:	4b44      	ldr	r3, [pc, #272]	; (8002204 <HAL_ETH_MspInit+0x15c>)
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020f8:	61fb      	str	r3, [r7, #28]
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	4b41      	ldr	r3, [pc, #260]	; (8002204 <HAL_ETH_MspInit+0x15c>)
 80020fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002100:	4a40      	ldr	r2, [pc, #256]	; (8002204 <HAL_ETH_MspInit+0x15c>)
 8002102:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002106:	6313      	str	r3, [r2, #48]	; 0x30
 8002108:	4b3e      	ldr	r3, [pc, #248]	; (8002204 <HAL_ETH_MspInit+0x15c>)
 800210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002110:	61bb      	str	r3, [r7, #24]
 8002112:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002114:	4b3b      	ldr	r3, [pc, #236]	; (8002204 <HAL_ETH_MspInit+0x15c>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	4a3a      	ldr	r2, [pc, #232]	; (8002204 <HAL_ETH_MspInit+0x15c>)
 800211a:	f043 0304 	orr.w	r3, r3, #4
 800211e:	6313      	str	r3, [r2, #48]	; 0x30
 8002120:	4b38      	ldr	r3, [pc, #224]	; (8002204 <HAL_ETH_MspInit+0x15c>)
 8002122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212c:	4b35      	ldr	r3, [pc, #212]	; (8002204 <HAL_ETH_MspInit+0x15c>)
 800212e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002130:	4a34      	ldr	r2, [pc, #208]	; (8002204 <HAL_ETH_MspInit+0x15c>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	6313      	str	r3, [r2, #48]	; 0x30
 8002138:	4b32      	ldr	r3, [pc, #200]	; (8002204 <HAL_ETH_MspInit+0x15c>)
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002144:	4b2f      	ldr	r3, [pc, #188]	; (8002204 <HAL_ETH_MspInit+0x15c>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	4a2e      	ldr	r2, [pc, #184]	; (8002204 <HAL_ETH_MspInit+0x15c>)
 800214a:	f043 0302 	orr.w	r3, r3, #2
 800214e:	6313      	str	r3, [r2, #48]	; 0x30
 8002150:	4b2c      	ldr	r3, [pc, #176]	; (8002204 <HAL_ETH_MspInit+0x15c>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800215c:	4b29      	ldr	r3, [pc, #164]	; (8002204 <HAL_ETH_MspInit+0x15c>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	4a28      	ldr	r2, [pc, #160]	; (8002204 <HAL_ETH_MspInit+0x15c>)
 8002162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002166:	6313      	str	r3, [r2, #48]	; 0x30
 8002168:	4b26      	ldr	r3, [pc, #152]	; (8002204 <HAL_ETH_MspInit+0x15c>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002174:	2332      	movs	r3, #50	; 0x32
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002178:	2302      	movs	r3, #2
 800217a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002180:	2303      	movs	r3, #3
 8002182:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002184:	230b      	movs	r3, #11
 8002186:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800218c:	4619      	mov	r1, r3
 800218e:	481e      	ldr	r0, [pc, #120]	; (8002208 <HAL_ETH_MspInit+0x160>)
 8002190:	f001 fa02 	bl	8003598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002194:	2386      	movs	r3, #134	; 0x86
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002198:	2302      	movs	r3, #2
 800219a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a0:	2303      	movs	r3, #3
 80021a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021a4:	230b      	movs	r3, #11
 80021a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ac:	4619      	mov	r1, r3
 80021ae:	4817      	ldr	r0, [pc, #92]	; (800220c <HAL_ETH_MspInit+0x164>)
 80021b0:	f001 f9f2 	bl	8003598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80021b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c2:	2303      	movs	r3, #3
 80021c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021c6:	230b      	movs	r3, #11
 80021c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80021ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ce:	4619      	mov	r1, r3
 80021d0:	480f      	ldr	r0, [pc, #60]	; (8002210 <HAL_ETH_MspInit+0x168>)
 80021d2:	f001 f9e1 	bl	8003598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80021d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	2302      	movs	r3, #2
 80021de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e4:	2303      	movs	r3, #3
 80021e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021e8:	230b      	movs	r3, #11
 80021ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f0:	4619      	mov	r1, r3
 80021f2:	4808      	ldr	r0, [pc, #32]	; (8002214 <HAL_ETH_MspInit+0x16c>)
 80021f4:	f001 f9d0 	bl	8003598 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80021f8:	bf00      	nop
 80021fa:	3738      	adds	r7, #56	; 0x38
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40028000 	.word	0x40028000
 8002204:	40023800 	.word	0x40023800
 8002208:	40020800 	.word	0x40020800
 800220c:	40020000 	.word	0x40020000
 8002210:	40020400 	.word	0x40020400
 8002214:	40021800 	.word	0x40021800

08002218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b0ae      	sub	sp, #184	; 0xb8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002220:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002230:	f107 0314 	add.w	r3, r7, #20
 8002234:	2290      	movs	r2, #144	; 0x90
 8002236:	2100      	movs	r1, #0
 8002238:	4618      	mov	r0, r3
 800223a:	f006 fb8f 	bl	800895c <memset>
  if(huart->Instance==USART3)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a22      	ldr	r2, [pc, #136]	; (80022cc <HAL_UART_MspInit+0xb4>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d13c      	bne.n	80022c2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800224c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800224e:	2300      	movs	r3, #0
 8002250:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002252:	f107 0314 	add.w	r3, r7, #20
 8002256:	4618      	mov	r0, r3
 8002258:	f002 f9e0 	bl	800461c <HAL_RCCEx_PeriphCLKConfig>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002262:	f7ff feb3 	bl	8001fcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002266:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_UART_MspInit+0xb8>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	4a19      	ldr	r2, [pc, #100]	; (80022d0 <HAL_UART_MspInit+0xb8>)
 800226c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002270:	6413      	str	r3, [r2, #64]	; 0x40
 8002272:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <HAL_UART_MspInit+0xb8>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800227e:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <HAL_UART_MspInit+0xb8>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a13      	ldr	r2, [pc, #76]	; (80022d0 <HAL_UART_MspInit+0xb8>)
 8002284:	f043 0308 	orr.w	r3, r3, #8
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <HAL_UART_MspInit+0xb8>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002296:	f44f 7340 	mov.w	r3, #768	; 0x300
 800229a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229e:	2302      	movs	r3, #2
 80022a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022aa:	2303      	movs	r3, #3
 80022ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022b0:	2307      	movs	r3, #7
 80022b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022b6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80022ba:	4619      	mov	r1, r3
 80022bc:	4805      	ldr	r0, [pc, #20]	; (80022d4 <HAL_UART_MspInit+0xbc>)
 80022be:	f001 f96b 	bl	8003598 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80022c2:	bf00      	nop
 80022c4:	37b8      	adds	r7, #184	; 0xb8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40004800 	.word	0x40004800
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40020c00 	.word	0x40020c00

080022d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b0ae      	sub	sp, #184	; 0xb8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	2290      	movs	r2, #144	; 0x90
 80022f6:	2100      	movs	r1, #0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f006 fb2f 	bl	800895c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002306:	d159      	bne.n	80023bc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002308:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800230c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800230e:	2300      	movs	r3, #0
 8002310:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	4618      	mov	r0, r3
 800231a:	f002 f97f 	bl	800461c <HAL_RCCEx_PeriphCLKConfig>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002324:	f7ff fe52 	bl	8001fcc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002328:	4b26      	ldr	r3, [pc, #152]	; (80023c4 <HAL_PCD_MspInit+0xec>)
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	4a25      	ldr	r2, [pc, #148]	; (80023c4 <HAL_PCD_MspInit+0xec>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6313      	str	r3, [r2, #48]	; 0x30
 8002334:	4b23      	ldr	r3, [pc, #140]	; (80023c4 <HAL_PCD_MspInit+0xec>)
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002340:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002344:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002348:	2302      	movs	r3, #2
 800234a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002354:	2303      	movs	r3, #3
 8002356:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800235a:	230a      	movs	r3, #10
 800235c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002360:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002364:	4619      	mov	r1, r3
 8002366:	4818      	ldr	r0, [pc, #96]	; (80023c8 <HAL_PCD_MspInit+0xf0>)
 8002368:	f001 f916 	bl	8003598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800236c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002370:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002374:	2300      	movs	r3, #0
 8002376:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002380:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002384:	4619      	mov	r1, r3
 8002386:	4810      	ldr	r0, [pc, #64]	; (80023c8 <HAL_PCD_MspInit+0xf0>)
 8002388:	f001 f906 	bl	8003598 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800238c:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <HAL_PCD_MspInit+0xec>)
 800238e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002390:	4a0c      	ldr	r2, [pc, #48]	; (80023c4 <HAL_PCD_MspInit+0xec>)
 8002392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002396:	6353      	str	r3, [r2, #52]	; 0x34
 8002398:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <HAL_PCD_MspInit+0xec>)
 800239a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <HAL_PCD_MspInit+0xec>)
 80023a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a8:	4a06      	ldr	r2, [pc, #24]	; (80023c4 <HAL_PCD_MspInit+0xec>)
 80023aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ae:	6453      	str	r3, [r2, #68]	; 0x44
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <HAL_PCD_MspInit+0xec>)
 80023b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80023bc:	bf00      	nop
 80023be:	37b8      	adds	r7, #184	; 0xb8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40020000 	.word	0x40020000

080023cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023d0:	e7fe      	b.n	80023d0 <NMI_Handler+0x4>

080023d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023d6:	e7fe      	b.n	80023d6 <HardFault_Handler+0x4>

080023d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023dc:	e7fe      	b.n	80023dc <MemManage_Handler+0x4>

080023de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023de:	b480      	push	{r7}
 80023e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023e2:	e7fe      	b.n	80023e2 <BusFault_Handler+0x4>

080023e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e8:	e7fe      	b.n	80023e8 <UsageFault_Handler+0x4>

080023ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023fc:	f000 f882 	bl	8002504 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002400:	f005 fa50 	bl	80078a4 <xTaskGetSchedulerState>
 8002404:	4603      	mov	r3, r0
 8002406:	2b01      	cmp	r3, #1
 8002408:	d001      	beq.n	800240e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800240a:	f006 f82d 	bl	8008468 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <SystemInit+0x20>)
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241e:	4a05      	ldr	r2, [pc, #20]	; (8002434 <SystemInit+0x20>)
 8002420:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002424:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002438:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002470 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800243c:	480d      	ldr	r0, [pc, #52]	; (8002474 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800243e:	490e      	ldr	r1, [pc, #56]	; (8002478 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002440:	4a0e      	ldr	r2, [pc, #56]	; (800247c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002444:	e002      	b.n	800244c <LoopCopyDataInit>

08002446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800244a:	3304      	adds	r3, #4

0800244c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800244c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800244e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002450:	d3f9      	bcc.n	8002446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002452:	4a0b      	ldr	r2, [pc, #44]	; (8002480 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002454:	4c0b      	ldr	r4, [pc, #44]	; (8002484 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002458:	e001      	b.n	800245e <LoopFillZerobss>

0800245a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800245a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800245c:	3204      	adds	r2, #4

0800245e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800245e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002460:	d3fb      	bcc.n	800245a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002462:	f7ff ffd7 	bl	8002414 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002466:	f006 fa81 	bl	800896c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800246a:	f7ff fb59 	bl	8001b20 <main>
  bx  lr    
 800246e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002470:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002478:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800247c:	08008ae4 	.word	0x08008ae4
  ldr r2, =_sbss
 8002480:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8002484:	20005bfc 	.word	0x20005bfc

08002488 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002488:	e7fe      	b.n	8002488 <ADC_IRQHandler>

0800248a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800248e:	2003      	movs	r0, #3
 8002490:	f000 fd28 	bl	8002ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002494:	200f      	movs	r0, #15
 8002496:	f000 f805 	bl	80024a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800249a:	f7ff fd9d 	bl	8001fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024ac:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <HAL_InitTick+0x54>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_InitTick+0x58>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4619      	mov	r1, r3
 80024b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80024be:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 fd35 	bl	8002f32 <HAL_SYSTICK_Config>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e00e      	b.n	80024f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b0f      	cmp	r3, #15
 80024d6:	d80a      	bhi.n	80024ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d8:	2200      	movs	r2, #0
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	f04f 30ff 	mov.w	r0, #4294967295
 80024e0:	f000 fd0b 	bl	8002efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024e4:	4a06      	ldr	r2, [pc, #24]	; (8002500 <HAL_InitTick+0x5c>)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	e000      	b.n	80024f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20000000 	.word	0x20000000
 80024fc:	20000008 	.word	0x20000008
 8002500:	20000004 	.word	0x20000004

08002504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HAL_IncTick+0x20>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_IncTick+0x24>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4413      	add	r3, r2
 8002514:	4a04      	ldr	r2, [pc, #16]	; (8002528 <HAL_IncTick+0x24>)
 8002516:	6013      	str	r3, [r2, #0]
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	20000008 	.word	0x20000008
 8002528:	200012b0 	.word	0x200012b0

0800252c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  return uwTick;
 8002530:	4b03      	ldr	r3, [pc, #12]	; (8002540 <HAL_GetTick+0x14>)
 8002532:	681b      	ldr	r3, [r3, #0]
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	200012b0 	.word	0x200012b0

08002544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800254c:	f7ff ffee 	bl	800252c <HAL_GetTick>
 8002550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255c:	d005      	beq.n	800256a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800255e:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <HAL_Delay+0x44>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4413      	add	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800256a:	bf00      	nop
 800256c:	f7ff ffde 	bl	800252c <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	429a      	cmp	r2, r3
 800257a:	d8f7      	bhi.n	800256c <HAL_Delay+0x28>
  {
  }
}
 800257c:	bf00      	nop
 800257e:	bf00      	nop
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000008 	.word	0x20000008

0800258c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e031      	b.n	8002606 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d109      	bne.n	80025be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff fd3c 	bl	8002028 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f003 0310 	and.w	r3, r3, #16
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d116      	bne.n	80025f8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <HAL_ADC_Init+0x84>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	f043 0202 	orr.w	r2, r3, #2
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 fad6 	bl	8002b8c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f023 0303 	bic.w	r3, r3, #3
 80025ee:	f043 0201 	orr.w	r2, r3, #1
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	641a      	str	r2, [r3, #64]	; 0x40
 80025f6:	e001      	b.n	80025fc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002604:	7bfb      	ldrb	r3, [r7, #15]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	ffffeefd 	.word	0xffffeefd

08002614 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_ADC_Start+0x1a>
 800262a:	2302      	movs	r3, #2
 800262c:	e0ad      	b.n	800278a <HAL_ADC_Start+0x176>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b01      	cmp	r3, #1
 8002642:	d018      	beq.n	8002676 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0201 	orr.w	r2, r2, #1
 8002652:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002654:	4b50      	ldr	r3, [pc, #320]	; (8002798 <HAL_ADC_Start+0x184>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a50      	ldr	r2, [pc, #320]	; (800279c <HAL_ADC_Start+0x188>)
 800265a:	fba2 2303 	umull	r2, r3, r2, r3
 800265e:	0c9a      	lsrs	r2, r3, #18
 8002660:	4613      	mov	r3, r2
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	4413      	add	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002668:	e002      	b.n	8002670 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	3b01      	subs	r3, #1
 800266e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f9      	bne.n	800266a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d175      	bne.n	8002770 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002688:	4b45      	ldr	r3, [pc, #276]	; (80027a0 <HAL_ADC_Start+0x18c>)
 800268a:	4013      	ands	r3, r2
 800268c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d007      	beq.n	80026b2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026be:	d106      	bne.n	80026ce <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c4:	f023 0206 	bic.w	r2, r3, #6
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	645a      	str	r2, [r3, #68]	; 0x44
 80026cc:	e002      	b.n	80026d4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026e4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80026e6:	4b2f      	ldr	r3, [pc, #188]	; (80027a4 <HAL_ADC_Start+0x190>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10f      	bne.n	8002712 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d143      	bne.n	8002788 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	e03a      	b.n	8002788 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a24      	ldr	r2, [pc, #144]	; (80027a8 <HAL_ADC_Start+0x194>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d10e      	bne.n	800273a <HAL_ADC_Start+0x126>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d107      	bne.n	800273a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002738:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800273a:	4b1a      	ldr	r3, [pc, #104]	; (80027a4 <HAL_ADC_Start+0x190>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	2b00      	cmp	r3, #0
 8002744:	d120      	bne.n	8002788 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a18      	ldr	r2, [pc, #96]	; (80027ac <HAL_ADC_Start+0x198>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d11b      	bne.n	8002788 <HAL_ADC_Start+0x174>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d114      	bne.n	8002788 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800276c:	609a      	str	r2, [r3, #8]
 800276e:	e00b      	b.n	8002788 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	f043 0210 	orr.w	r2, r3, #16
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002780:	f043 0201 	orr.w	r2, r3, #1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	20000000 	.word	0x20000000
 800279c:	431bde83 	.word	0x431bde83
 80027a0:	fffff8fe 	.word	0xfffff8fe
 80027a4:	40012300 	.word	0x40012300
 80027a8:	40012000 	.word	0x40012000
 80027ac:	40012200 	.word	0x40012200

080027b0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027cc:	d113      	bne.n	80027f6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027dc:	d10b      	bne.n	80027f6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f043 0220 	orr.w	r2, r3, #32
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e063      	b.n	80028be <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80027f6:	f7ff fe99 	bl	800252c <HAL_GetTick>
 80027fa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027fc:	e021      	b.n	8002842 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002804:	d01d      	beq.n	8002842 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d007      	beq.n	800281c <HAL_ADC_PollForConversion+0x6c>
 800280c:	f7ff fe8e 	bl	800252c <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d212      	bcs.n	8002842 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b02      	cmp	r3, #2
 8002828:	d00b      	beq.n	8002842 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f043 0204 	orr.w	r2, r3, #4
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e03d      	b.n	80028be <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b02      	cmp	r3, #2
 800284e:	d1d6      	bne.n	80027fe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f06f 0212 	mvn.w	r2, #18
 8002858:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d123      	bne.n	80028bc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002878:	2b00      	cmp	r3, #0
 800287a:	d11f      	bne.n	80028bc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002882:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002886:	2b00      	cmp	r3, #0
 8002888:	d006      	beq.n	8002898 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002894:	2b00      	cmp	r3, #0
 8002896:	d111      	bne.n	80028bc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d105      	bne.n	80028bc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	f043 0201 	orr.w	r2, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x1c>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e136      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x28a>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b09      	cmp	r3, #9
 800290a:	d93a      	bls.n	8002982 <HAL_ADC_ConfigChannel+0xa2>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002914:	d035      	beq.n	8002982 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68d9      	ldr	r1, [r3, #12]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	b29b      	uxth	r3, r3
 8002922:	461a      	mov	r2, r3
 8002924:	4613      	mov	r3, r2
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	4413      	add	r3, r2
 800292a:	3b1e      	subs	r3, #30
 800292c:	2207      	movs	r2, #7
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43da      	mvns	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	400a      	ands	r2, r1
 800293a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a8d      	ldr	r2, [pc, #564]	; (8002b78 <HAL_ADC_ConfigChannel+0x298>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d10a      	bne.n	800295c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68d9      	ldr	r1, [r3, #12]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	061a      	lsls	r2, r3, #24
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800295a:	e035      	b.n	80029c8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68d9      	ldr	r1, [r3, #12]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	b29b      	uxth	r3, r3
 800296c:	4618      	mov	r0, r3
 800296e:	4603      	mov	r3, r0
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	4403      	add	r3, r0
 8002974:	3b1e      	subs	r3, #30
 8002976:	409a      	lsls	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002980:	e022      	b.n	80029c8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6919      	ldr	r1, [r3, #16]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	b29b      	uxth	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	4613      	mov	r3, r2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	4413      	add	r3, r2
 8002996:	2207      	movs	r2, #7
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43da      	mvns	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	400a      	ands	r2, r1
 80029a4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6919      	ldr	r1, [r3, #16]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	4618      	mov	r0, r3
 80029b8:	4603      	mov	r3, r0
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	4403      	add	r3, r0
 80029be:	409a      	lsls	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b06      	cmp	r3, #6
 80029ce:	d824      	bhi.n	8002a1a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	3b05      	subs	r3, #5
 80029e2:	221f      	movs	r2, #31
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43da      	mvns	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	400a      	ands	r2, r1
 80029f0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	4618      	mov	r0, r3
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	3b05      	subs	r3, #5
 8002a0c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	635a      	str	r2, [r3, #52]	; 0x34
 8002a18:	e04c      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b0c      	cmp	r3, #12
 8002a20:	d824      	bhi.n	8002a6c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	3b23      	subs	r3, #35	; 0x23
 8002a34:	221f      	movs	r2, #31
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43da      	mvns	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	400a      	ands	r2, r1
 8002a42:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	4618      	mov	r0, r3
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3b23      	subs	r3, #35	; 0x23
 8002a5e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	631a      	str	r2, [r3, #48]	; 0x30
 8002a6a:	e023      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3b41      	subs	r3, #65	; 0x41
 8002a7e:	221f      	movs	r2, #31
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43da      	mvns	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	400a      	ands	r2, r1
 8002a8c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3b41      	subs	r3, #65	; 0x41
 8002aa8:	fa00 f203 	lsl.w	r2, r0, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a30      	ldr	r2, [pc, #192]	; (8002b7c <HAL_ADC_ConfigChannel+0x29c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d10a      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x1f4>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ac6:	d105      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002ac8:	4b2d      	ldr	r3, [pc, #180]	; (8002b80 <HAL_ADC_ConfigChannel+0x2a0>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	4a2c      	ldr	r2, [pc, #176]	; (8002b80 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ace:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002ad2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a28      	ldr	r2, [pc, #160]	; (8002b7c <HAL_ADC_ConfigChannel+0x29c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d10f      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x21e>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b12      	cmp	r3, #18
 8002ae4:	d10b      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002ae6:	4b26      	ldr	r3, [pc, #152]	; (8002b80 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	4a25      	ldr	r2, [pc, #148]	; (8002b80 <HAL_ADC_ConfigChannel+0x2a0>)
 8002aec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002af0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002af2:	4b23      	ldr	r3, [pc, #140]	; (8002b80 <HAL_ADC_ConfigChannel+0x2a0>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	4a22      	ldr	r2, [pc, #136]	; (8002b80 <HAL_ADC_ConfigChannel+0x2a0>)
 8002af8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002afc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a1e      	ldr	r2, [pc, #120]	; (8002b7c <HAL_ADC_ConfigChannel+0x29c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d12b      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x280>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a1a      	ldr	r2, [pc, #104]	; (8002b78 <HAL_ADC_ConfigChannel+0x298>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d003      	beq.n	8002b1a <HAL_ADC_ConfigChannel+0x23a>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b11      	cmp	r3, #17
 8002b18:	d122      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002b1a:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	4a18      	ldr	r2, [pc, #96]	; (8002b80 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b20:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002b24:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002b26:	4b16      	ldr	r3, [pc, #88]	; (8002b80 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	4a15      	ldr	r2, [pc, #84]	; (8002b80 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b30:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a10      	ldr	r2, [pc, #64]	; (8002b78 <HAL_ADC_ConfigChannel+0x298>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d111      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <HAL_ADC_ConfigChannel+0x2a4>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a11      	ldr	r2, [pc, #68]	; (8002b88 <HAL_ADC_ConfigChannel+0x2a8>)
 8002b42:	fba2 2303 	umull	r2, r3, r2, r3
 8002b46:	0c9a      	lsrs	r2, r3, #18
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b52:	e002      	b.n	8002b5a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1f9      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	10000012 	.word	0x10000012
 8002b7c:	40012000 	.word	0x40012000
 8002b80:	40012300 	.word	0x40012300
 8002b84:	20000000 	.word	0x20000000
 8002b88:	431bde83 	.word	0x431bde83

08002b8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002b94:	4b78      	ldr	r3, [pc, #480]	; (8002d78 <ADC_Init+0x1ec>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	4a77      	ldr	r2, [pc, #476]	; (8002d78 <ADC_Init+0x1ec>)
 8002b9a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002b9e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002ba0:	4b75      	ldr	r3, [pc, #468]	; (8002d78 <ADC_Init+0x1ec>)
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	4973      	ldr	r1, [pc, #460]	; (8002d78 <ADC_Init+0x1ec>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6859      	ldr	r1, [r3, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	021a      	lsls	r2, r3, #8
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002be0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6859      	ldr	r1, [r3, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6899      	ldr	r1, [r3, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1a:	4a58      	ldr	r2, [pc, #352]	; (8002d7c <ADC_Init+0x1f0>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d022      	beq.n	8002c66 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6899      	ldr	r1, [r3, #8]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6899      	ldr	r1, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	e00f      	b.n	8002c86 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0202 	bic.w	r2, r2, #2
 8002c94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6899      	ldr	r1, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	005a      	lsls	r2, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d01b      	beq.n	8002cec <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cc2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002cd2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6859      	ldr	r1, [r3, #4]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	035a      	lsls	r2, r3, #13
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	e007      	b.n	8002cfc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cfa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	051a      	lsls	r2, r3, #20
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6899      	ldr	r1, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d3e:	025a      	lsls	r2, r3, #9
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6899      	ldr	r1, [r3, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	029a      	lsls	r2, r3, #10
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	609a      	str	r2, [r3, #8]
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	40012300 	.word	0x40012300
 8002d7c:	0f000001 	.word	0x0f000001

08002d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <__NVIC_SetPriorityGrouping+0x40>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dae:	4a04      	ldr	r2, [pc, #16]	; (8002dc0 <__NVIC_SetPriorityGrouping+0x40>)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	60d3      	str	r3, [r2, #12]
}
 8002db4:	bf00      	nop
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	e000ed00 	.word	0xe000ed00
 8002dc4:	05fa0000 	.word	0x05fa0000

08002dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dcc:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	0a1b      	lsrs	r3, r3, #8
 8002dd2:	f003 0307 	and.w	r3, r3, #7
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	e000ed00 	.word	0xe000ed00

08002de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	6039      	str	r1, [r7, #0]
 8002dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	db0a      	blt.n	8002e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	490c      	ldr	r1, [pc, #48]	; (8002e30 <__NVIC_SetPriority+0x4c>)
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	0112      	lsls	r2, r2, #4
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	440b      	add	r3, r1
 8002e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e0c:	e00a      	b.n	8002e24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4908      	ldr	r1, [pc, #32]	; (8002e34 <__NVIC_SetPriority+0x50>)
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	3b04      	subs	r3, #4
 8002e1c:	0112      	lsls	r2, r2, #4
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	440b      	add	r3, r1
 8002e22:	761a      	strb	r2, [r3, #24]
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	e000e100 	.word	0xe000e100
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b089      	sub	sp, #36	; 0x24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f1c3 0307 	rsb	r3, r3, #7
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	bf28      	it	cs
 8002e56:	2304      	movcs	r3, #4
 8002e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	2b06      	cmp	r3, #6
 8002e60:	d902      	bls.n	8002e68 <NVIC_EncodePriority+0x30>
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3b03      	subs	r3, #3
 8002e66:	e000      	b.n	8002e6a <NVIC_EncodePriority+0x32>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43da      	mvns	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e80:	f04f 31ff 	mov.w	r1, #4294967295
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8a:	43d9      	mvns	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e90:	4313      	orrs	r3, r2
         );
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3724      	adds	r7, #36	; 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eb0:	d301      	bcc.n	8002eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e00f      	b.n	8002ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ee0 <SysTick_Config+0x40>)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ebe:	210f      	movs	r1, #15
 8002ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec4:	f7ff ff8e 	bl	8002de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ec8:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <SysTick_Config+0x40>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ece:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <SysTick_Config+0x40>)
 8002ed0:	2207      	movs	r2, #7
 8002ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	e000e010 	.word	0xe000e010

08002ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7ff ff47 	bl	8002d80 <__NVIC_SetPriorityGrouping>
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b086      	sub	sp, #24
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	4603      	mov	r3, r0
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	607a      	str	r2, [r7, #4]
 8002f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f0c:	f7ff ff5c 	bl	8002dc8 <__NVIC_GetPriorityGrouping>
 8002f10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	6978      	ldr	r0, [r7, #20]
 8002f18:	f7ff ff8e 	bl	8002e38 <NVIC_EncodePriority>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff ff5d 	bl	8002de4 <__NVIC_SetPriority>
}
 8002f2a:	bf00      	nop
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b082      	sub	sp, #8
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff ffb0 	bl	8002ea0 <SysTick_Config>
 8002f40:	4603      	mov	r3, r0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e06a      	b.n	8003034 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d106      	bne.n	8002f76 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2223      	movs	r2, #35	; 0x23
 8002f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff f899 	bl	80020a8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f76:	4b31      	ldr	r3, [pc, #196]	; (800303c <HAL_ETH_Init+0xf0>)
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	4a30      	ldr	r2, [pc, #192]	; (800303c <HAL_ETH_Init+0xf0>)
 8002f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f80:	6453      	str	r3, [r2, #68]	; 0x44
 8002f82:	4b2e      	ldr	r3, [pc, #184]	; (800303c <HAL_ETH_Init+0xf0>)
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002f8e:	4b2c      	ldr	r3, [pc, #176]	; (8003040 <HAL_ETH_Init+0xf4>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	4a2b      	ldr	r2, [pc, #172]	; (8003040 <HAL_ETH_Init+0xf4>)
 8002f94:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f98:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002f9a:	4b29      	ldr	r3, [pc, #164]	; (8003040 <HAL_ETH_Init+0xf4>)
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	4927      	ldr	r1, [pc, #156]	; (8003040 <HAL_ETH_Init+0xf4>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002fa8:	4b25      	ldr	r3, [pc, #148]	; (8003040 <HAL_ETH_Init+0xf4>)
 8002faa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6812      	ldr	r2, [r2, #0]
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fc2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fc4:	f7ff fab2 	bl	800252c <HAL_GetTick>
 8002fc8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002fca:	e011      	b.n	8002ff0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002fcc:	f7ff faae 	bl	800252c <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002fda:	d909      	bls.n	8002ff0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2204      	movs	r2, #4
 8002fe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	22e0      	movs	r2, #224	; 0xe0
 8002fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e021      	b.n	8003034 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1e4      	bne.n	8002fcc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f958 	bl	80032b8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f9ff 	bl	800340c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 fa55 	bl	80034be <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	461a      	mov	r2, r3
 800301a:	2100      	movs	r1, #0
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f9bd 	bl	800339c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2210      	movs	r2, #16
 800302e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40023800 	.word	0x40023800
 8003040:	40013800 	.word	0x40013800

08003044 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	4b51      	ldr	r3, [pc, #324]	; (80031a0 <ETH_SetMACConfig+0x15c>)
 800305a:	4013      	ands	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	7c1b      	ldrb	r3, [r3, #16]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d102      	bne.n	800306c <ETH_SetMACConfig+0x28>
 8003066:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800306a:	e000      	b.n	800306e <ETH_SetMACConfig+0x2a>
 800306c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	7c5b      	ldrb	r3, [r3, #17]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d102      	bne.n	800307c <ETH_SetMACConfig+0x38>
 8003076:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800307a:	e000      	b.n	800307e <ETH_SetMACConfig+0x3a>
 800307c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800307e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003084:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	7fdb      	ldrb	r3, [r3, #31]
 800308a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800308c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003092:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	7f92      	ldrb	r2, [r2, #30]
 8003098:	2a00      	cmp	r2, #0
 800309a:	d102      	bne.n	80030a2 <ETH_SetMACConfig+0x5e>
 800309c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030a0:	e000      	b.n	80030a4 <ETH_SetMACConfig+0x60>
 80030a2:	2200      	movs	r2, #0
                        macconf->Speed |
 80030a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	7f1b      	ldrb	r3, [r3, #28]
 80030aa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80030ac:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80030b2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	791b      	ldrb	r3, [r3, #4]
 80030b8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80030ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	f892 2020 	ldrb.w	r2, [r2, #32]
 80030c2:	2a00      	cmp	r2, #0
 80030c4:	d102      	bne.n	80030cc <ETH_SetMACConfig+0x88>
 80030c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ca:	e000      	b.n	80030ce <ETH_SetMACConfig+0x8a>
 80030cc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80030ce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	7bdb      	ldrb	r3, [r3, #15]
 80030d4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80030d6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80030dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030e4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80030e6:	4313      	orrs	r3, r2
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030fe:	2001      	movs	r0, #1
 8003100:	f7ff fa20 	bl	8002544 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	f64f 7341 	movw	r3, #65345	; 0xff41
 800311a:	4013      	ands	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003122:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800312a:	2a00      	cmp	r2, #0
 800312c:	d101      	bne.n	8003132 <ETH_SetMACConfig+0xee>
 800312e:	2280      	movs	r2, #128	; 0x80
 8003130:	e000      	b.n	8003134 <ETH_SetMACConfig+0xf0>
 8003132:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003134:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800313a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003142:	2a01      	cmp	r2, #1
 8003144:	d101      	bne.n	800314a <ETH_SetMACConfig+0x106>
 8003146:	2208      	movs	r2, #8
 8003148:	e000      	b.n	800314c <ETH_SetMACConfig+0x108>
 800314a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800314c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003154:	2a01      	cmp	r2, #1
 8003156:	d101      	bne.n	800315c <ETH_SetMACConfig+0x118>
 8003158:	2204      	movs	r2, #4
 800315a:	e000      	b.n	800315e <ETH_SetMACConfig+0x11a>
 800315c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800315e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003166:	2a01      	cmp	r2, #1
 8003168:	d101      	bne.n	800316e <ETH_SetMACConfig+0x12a>
 800316a:	2202      	movs	r2, #2
 800316c:	e000      	b.n	8003170 <ETH_SetMACConfig+0x12c>
 800316e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003170:	4313      	orrs	r3, r2
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4313      	orrs	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003188:	2001      	movs	r0, #1
 800318a:	f7ff f9db 	bl	8002544 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	619a      	str	r2, [r3, #24]
}
 8003196:	bf00      	nop
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	ff20810f 	.word	0xff20810f

080031a4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4b3d      	ldr	r3, [pc, #244]	; (80032b4 <ETH_SetDMAConfig+0x110>)
 80031be:	4013      	ands	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	7b1b      	ldrb	r3, [r3, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d102      	bne.n	80031d0 <ETH_SetDMAConfig+0x2c>
 80031ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80031ce:	e000      	b.n	80031d2 <ETH_SetDMAConfig+0x2e>
 80031d0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	7b5b      	ldrb	r3, [r3, #13]
 80031d6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80031d8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	7f52      	ldrb	r2, [r2, #29]
 80031de:	2a00      	cmp	r2, #0
 80031e0:	d102      	bne.n	80031e8 <ETH_SetDMAConfig+0x44>
 80031e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80031e6:	e000      	b.n	80031ea <ETH_SetDMAConfig+0x46>
 80031e8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80031ea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	7b9b      	ldrb	r3, [r3, #14]
 80031f0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80031f2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80031f8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	7f1b      	ldrb	r3, [r3, #28]
 80031fe:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003200:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	7f9b      	ldrb	r3, [r3, #30]
 8003206:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003208:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800320e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003216:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003218:	4313      	orrs	r3, r2
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	4313      	orrs	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003228:	461a      	mov	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800323a:	2001      	movs	r0, #1
 800323c:	f7ff f982 	bl	8002544 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003248:	461a      	mov	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	791b      	ldrb	r3, [r3, #4]
 8003252:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003258:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800325e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003264:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800326c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800326e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003276:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800327c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6812      	ldr	r2, [r2, #0]
 8003282:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003286:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800328a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003298:	2001      	movs	r0, #1
 800329a:	f7ff f953 	bl	8002544 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032a6:	461a      	mov	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6013      	str	r3, [r2, #0]
}
 80032ac:	bf00      	nop
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	f8de3f23 	.word	0xf8de3f23

080032b8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b0a6      	sub	sp, #152	; 0x98
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80032c0:	2301      	movs	r3, #1
 80032c2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80032c6:	2301      	movs	r3, #1
 80032c8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80032cc:	2300      	movs	r3, #0
 80032ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80032d0:	2300      	movs	r3, #0
 80032d2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80032d6:	2301      	movs	r3, #1
 80032d8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80032dc:	2300      	movs	r3, #0
 80032de:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80032e2:	2301      	movs	r3, #1
 80032e4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80032e8:	2300      	movs	r3, #0
 80032ea:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80032ee:	2300      	movs	r3, #0
 80032f0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80032f4:	2300      	movs	r3, #0
 80032f6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80032f8:	2300      	movs	r3, #0
 80032fa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003302:	2300      	movs	r3, #0
 8003304:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003308:	2300      	movs	r3, #0
 800330a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800330e:	2300      	movs	r3, #0
 8003310:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003314:	2300      	movs	r3, #0
 8003316:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800331a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800331e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003320:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003324:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003326:	2300      	movs	r3, #0
 8003328:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800332c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003330:	4619      	mov	r1, r3
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff fe86 	bl	8003044 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003338:	2301      	movs	r3, #1
 800333a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800333c:	2301      	movs	r3, #1
 800333e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003340:	2301      	movs	r3, #1
 8003342:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003346:	2301      	movs	r3, #1
 8003348:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800334a:	2300      	movs	r3, #0
 800334c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800334e:	2300      	movs	r3, #0
 8003350:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003354:	2300      	movs	r3, #0
 8003356:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800335a:	2300      	movs	r3, #0
 800335c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800335e:	2301      	movs	r3, #1
 8003360:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003364:	2301      	movs	r3, #1
 8003366:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800336c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800336e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003372:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003378:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800337a:	2301      	movs	r3, #1
 800337c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003380:	2300      	movs	r3, #0
 8003382:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003384:	2300      	movs	r3, #0
 8003386:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003388:	f107 0308 	add.w	r3, r7, #8
 800338c:	4619      	mov	r1, r3
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ff08 	bl	80031a4 <ETH_SetDMAConfig>
}
 8003394:	bf00      	nop
 8003396:	3798      	adds	r7, #152	; 0x98
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800339c:	b480      	push	{r7}
 800339e:	b087      	sub	sp, #28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3305      	adds	r3, #5
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	021b      	lsls	r3, r3, #8
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	3204      	adds	r2, #4
 80033b4:	7812      	ldrb	r2, [r2, #0]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	4b11      	ldr	r3, [pc, #68]	; (8003404 <ETH_MACAddressConfig+0x68>)
 80033be:	4413      	add	r3, r2
 80033c0:	461a      	mov	r2, r3
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3303      	adds	r3, #3
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	061a      	lsls	r2, r3, #24
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3302      	adds	r3, #2
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	041b      	lsls	r3, r3, #16
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3301      	adds	r3, #1
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	021b      	lsls	r3, r3, #8
 80033e0:	4313      	orrs	r3, r2
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	7812      	ldrb	r2, [r2, #0]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	4b06      	ldr	r3, [pc, #24]	; (8003408 <ETH_MACAddressConfig+0x6c>)
 80033ee:	4413      	add	r3, r2
 80033f0:	461a      	mov	r2, r3
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	6013      	str	r3, [r2, #0]
}
 80033f6:	bf00      	nop
 80033f8:	371c      	adds	r7, #28
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40028040 	.word	0x40028040
 8003408:	40028044 	.word	0x40028044

0800340c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003414:	2300      	movs	r3, #0
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	e03e      	b.n	8003498 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68d9      	ldr	r1, [r3, #12]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	440b      	add	r3, r1
 800342a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2200      	movs	r2, #0
 8003436:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2200      	movs	r2, #0
 800343c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2200      	movs	r2, #0
 8003442:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003444:	68b9      	ldr	r1, [r7, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	3206      	adds	r2, #6
 800344c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d80c      	bhi.n	800347c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68d9      	ldr	r1, [r3, #12]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	4613      	mov	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	440b      	add	r3, r1
 8003474:	461a      	mov	r2, r3
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	60da      	str	r2, [r3, #12]
 800347a:	e004      	b.n	8003486 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	461a      	mov	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	3301      	adds	r3, #1
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b03      	cmp	r3, #3
 800349c:	d9bd      	bls.n	800341a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034b0:	611a      	str	r2, [r3, #16]
}
 80034b2:	bf00      	nop
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80034be:	b480      	push	{r7}
 80034c0:	b085      	sub	sp, #20
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80034c6:	2300      	movs	r3, #0
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	e046      	b.n	800355a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6919      	ldr	r1, [r3, #16]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	440b      	add	r3, r1
 80034dc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2200      	movs	r2, #0
 80034e8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2200      	movs	r2, #0
 80034ee:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2200      	movs	r2, #0
 80034f4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2200      	movs	r2, #0
 80034fa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2200      	movs	r2, #0
 8003500:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003508:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003510:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	3212      	adds	r2, #18
 8003526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d80c      	bhi.n	800354a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6919      	ldr	r1, [r3, #16]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	1c5a      	adds	r2, r3, #1
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	440b      	add	r3, r1
 8003542:	461a      	mov	r2, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	60da      	str	r2, [r3, #12]
 8003548:	e004      	b.n	8003554 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	461a      	mov	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	3301      	adds	r3, #1
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2b03      	cmp	r3, #3
 800355e:	d9b5      	bls.n	80034cc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691a      	ldr	r2, [r3, #16]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800358a:	60da      	str	r2, [r3, #12]
}
 800358c:	bf00      	nop
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003598:	b480      	push	{r7}
 800359a:	b089      	sub	sp, #36	; 0x24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80035aa:	2300      	movs	r3, #0
 80035ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80035ae:	2300      	movs	r3, #0
 80035b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
 80035b6:	e175      	b.n	80038a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80035b8:	2201      	movs	r2, #1
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4013      	ands	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	f040 8164 	bne.w	800389e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d005      	beq.n	80035ee <HAL_GPIO_Init+0x56>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d130      	bne.n	8003650 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	2203      	movs	r2, #3
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4013      	ands	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4313      	orrs	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003624:	2201      	movs	r2, #1
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4013      	ands	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	091b      	lsrs	r3, r3, #4
 800363a:	f003 0201 	and.w	r2, r3, #1
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	2b03      	cmp	r3, #3
 800365a:	d017      	beq.n	800368c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	2203      	movs	r2, #3
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	43db      	mvns	r3, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4013      	ands	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	4313      	orrs	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f003 0303 	and.w	r3, r3, #3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d123      	bne.n	80036e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	08da      	lsrs	r2, r3, #3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3208      	adds	r2, #8
 80036a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	220f      	movs	r2, #15
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	08da      	lsrs	r2, r3, #3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3208      	adds	r2, #8
 80036da:	69b9      	ldr	r1, [r7, #24]
 80036dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	2203      	movs	r2, #3
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f003 0203 	and.w	r2, r3, #3
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80be 	beq.w	800389e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003722:	4b66      	ldr	r3, [pc, #408]	; (80038bc <HAL_GPIO_Init+0x324>)
 8003724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003726:	4a65      	ldr	r2, [pc, #404]	; (80038bc <HAL_GPIO_Init+0x324>)
 8003728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800372c:	6453      	str	r3, [r2, #68]	; 0x44
 800372e:	4b63      	ldr	r3, [pc, #396]	; (80038bc <HAL_GPIO_Init+0x324>)
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800373a:	4a61      	ldr	r2, [pc, #388]	; (80038c0 <HAL_GPIO_Init+0x328>)
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	089b      	lsrs	r3, r3, #2
 8003740:	3302      	adds	r3, #2
 8003742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003746:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	220f      	movs	r2, #15
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	43db      	mvns	r3, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4013      	ands	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a58      	ldr	r2, [pc, #352]	; (80038c4 <HAL_GPIO_Init+0x32c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d037      	beq.n	80037d6 <HAL_GPIO_Init+0x23e>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a57      	ldr	r2, [pc, #348]	; (80038c8 <HAL_GPIO_Init+0x330>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d031      	beq.n	80037d2 <HAL_GPIO_Init+0x23a>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a56      	ldr	r2, [pc, #344]	; (80038cc <HAL_GPIO_Init+0x334>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d02b      	beq.n	80037ce <HAL_GPIO_Init+0x236>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a55      	ldr	r2, [pc, #340]	; (80038d0 <HAL_GPIO_Init+0x338>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d025      	beq.n	80037ca <HAL_GPIO_Init+0x232>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a54      	ldr	r2, [pc, #336]	; (80038d4 <HAL_GPIO_Init+0x33c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d01f      	beq.n	80037c6 <HAL_GPIO_Init+0x22e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a53      	ldr	r2, [pc, #332]	; (80038d8 <HAL_GPIO_Init+0x340>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d019      	beq.n	80037c2 <HAL_GPIO_Init+0x22a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a52      	ldr	r2, [pc, #328]	; (80038dc <HAL_GPIO_Init+0x344>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d013      	beq.n	80037be <HAL_GPIO_Init+0x226>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a51      	ldr	r2, [pc, #324]	; (80038e0 <HAL_GPIO_Init+0x348>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00d      	beq.n	80037ba <HAL_GPIO_Init+0x222>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a50      	ldr	r2, [pc, #320]	; (80038e4 <HAL_GPIO_Init+0x34c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d007      	beq.n	80037b6 <HAL_GPIO_Init+0x21e>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a4f      	ldr	r2, [pc, #316]	; (80038e8 <HAL_GPIO_Init+0x350>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d101      	bne.n	80037b2 <HAL_GPIO_Init+0x21a>
 80037ae:	2309      	movs	r3, #9
 80037b0:	e012      	b.n	80037d8 <HAL_GPIO_Init+0x240>
 80037b2:	230a      	movs	r3, #10
 80037b4:	e010      	b.n	80037d8 <HAL_GPIO_Init+0x240>
 80037b6:	2308      	movs	r3, #8
 80037b8:	e00e      	b.n	80037d8 <HAL_GPIO_Init+0x240>
 80037ba:	2307      	movs	r3, #7
 80037bc:	e00c      	b.n	80037d8 <HAL_GPIO_Init+0x240>
 80037be:	2306      	movs	r3, #6
 80037c0:	e00a      	b.n	80037d8 <HAL_GPIO_Init+0x240>
 80037c2:	2305      	movs	r3, #5
 80037c4:	e008      	b.n	80037d8 <HAL_GPIO_Init+0x240>
 80037c6:	2304      	movs	r3, #4
 80037c8:	e006      	b.n	80037d8 <HAL_GPIO_Init+0x240>
 80037ca:	2303      	movs	r3, #3
 80037cc:	e004      	b.n	80037d8 <HAL_GPIO_Init+0x240>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e002      	b.n	80037d8 <HAL_GPIO_Init+0x240>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <HAL_GPIO_Init+0x240>
 80037d6:	2300      	movs	r3, #0
 80037d8:	69fa      	ldr	r2, [r7, #28]
 80037da:	f002 0203 	and.w	r2, r2, #3
 80037de:	0092      	lsls	r2, r2, #2
 80037e0:	4093      	lsls	r3, r2
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80037e8:	4935      	ldr	r1, [pc, #212]	; (80038c0 <HAL_GPIO_Init+0x328>)
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	089b      	lsrs	r3, r3, #2
 80037ee:	3302      	adds	r3, #2
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037f6:	4b3d      	ldr	r3, [pc, #244]	; (80038ec <HAL_GPIO_Init+0x354>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	43db      	mvns	r3, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4013      	ands	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	4313      	orrs	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800381a:	4a34      	ldr	r2, [pc, #208]	; (80038ec <HAL_GPIO_Init+0x354>)
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003820:	4b32      	ldr	r3, [pc, #200]	; (80038ec <HAL_GPIO_Init+0x354>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	43db      	mvns	r3, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4013      	ands	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003844:	4a29      	ldr	r2, [pc, #164]	; (80038ec <HAL_GPIO_Init+0x354>)
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800384a:	4b28      	ldr	r3, [pc, #160]	; (80038ec <HAL_GPIO_Init+0x354>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	43db      	mvns	r3, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4013      	ands	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	4313      	orrs	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800386e:	4a1f      	ldr	r2, [pc, #124]	; (80038ec <HAL_GPIO_Init+0x354>)
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003874:	4b1d      	ldr	r3, [pc, #116]	; (80038ec <HAL_GPIO_Init+0x354>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	43db      	mvns	r3, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4013      	ands	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003898:	4a14      	ldr	r2, [pc, #80]	; (80038ec <HAL_GPIO_Init+0x354>)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	3301      	adds	r3, #1
 80038a2:	61fb      	str	r3, [r7, #28]
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	2b0f      	cmp	r3, #15
 80038a8:	f67f ae86 	bls.w	80035b8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80038ac:	bf00      	nop
 80038ae:	bf00      	nop
 80038b0:	3724      	adds	r7, #36	; 0x24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	40023800 	.word	0x40023800
 80038c0:	40013800 	.word	0x40013800
 80038c4:	40020000 	.word	0x40020000
 80038c8:	40020400 	.word	0x40020400
 80038cc:	40020800 	.word	0x40020800
 80038d0:	40020c00 	.word	0x40020c00
 80038d4:	40021000 	.word	0x40021000
 80038d8:	40021400 	.word	0x40021400
 80038dc:	40021800 	.word	0x40021800
 80038e0:	40021c00 	.word	0x40021c00
 80038e4:	40022000 	.word	0x40022000
 80038e8:	40022400 	.word	0x40022400
 80038ec:	40013c00 	.word	0x40013c00

080038f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	807b      	strh	r3, [r7, #2]
 80038fc:	4613      	mov	r3, r2
 80038fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003900:	787b      	ldrb	r3, [r7, #1]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003906:	887a      	ldrh	r2, [r7, #2]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800390c:	e003      	b.n	8003916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800390e:	887b      	ldrh	r3, [r7, #2]
 8003910:	041a      	lsls	r2, r3, #16
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	619a      	str	r2, [r3, #24]
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003922:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003924:	b08f      	sub	sp, #60	; 0x3c
 8003926:	af0a      	add	r7, sp, #40	; 0x28
 8003928:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e116      	b.n	8003b62 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d106      	bne.n	8003954 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7fe fcc2 	bl	80022d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2203      	movs	r2, #3
 8003958:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003964:	2b00      	cmp	r3, #0
 8003966:	d102      	bne.n	800396e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f001 ff3a 	bl	80057ec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	603b      	str	r3, [r7, #0]
 800397e:	687e      	ldr	r6, [r7, #4]
 8003980:	466d      	mov	r5, sp
 8003982:	f106 0410 	add.w	r4, r6, #16
 8003986:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003988:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800398a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800398c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800398e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003992:	e885 0003 	stmia.w	r5, {r0, r1}
 8003996:	1d33      	adds	r3, r6, #4
 8003998:	cb0e      	ldmia	r3, {r1, r2, r3}
 800399a:	6838      	ldr	r0, [r7, #0]
 800399c:	f001 fece 	bl	800573c <USB_CoreInit>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d005      	beq.n	80039b2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2202      	movs	r2, #2
 80039aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e0d7      	b.n	8003b62 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2100      	movs	r1, #0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f001 ff28 	bl	800580e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039be:	2300      	movs	r3, #0
 80039c0:	73fb      	strb	r3, [r7, #15]
 80039c2:	e04a      	b.n	8003a5a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039c4:	7bfa      	ldrb	r2, [r7, #15]
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	333d      	adds	r3, #61	; 0x3d
 80039d4:	2201      	movs	r2, #1
 80039d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039d8:	7bfa      	ldrb	r2, [r7, #15]
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	4613      	mov	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	4413      	add	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	333c      	adds	r3, #60	; 0x3c
 80039e8:	7bfa      	ldrb	r2, [r7, #15]
 80039ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039ec:	7bfa      	ldrb	r2, [r7, #15]
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
 80039f0:	b298      	uxth	r0, r3
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	4613      	mov	r3, r2
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	4413      	add	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	3344      	adds	r3, #68	; 0x44
 8003a00:	4602      	mov	r2, r0
 8003a02:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a04:	7bfa      	ldrb	r2, [r7, #15]
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	3340      	adds	r3, #64	; 0x40
 8003a14:	2200      	movs	r2, #0
 8003a16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a18:	7bfa      	ldrb	r2, [r7, #15]
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	4413      	add	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	3348      	adds	r3, #72	; 0x48
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a2c:	7bfa      	ldrb	r2, [r7, #15]
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	4613      	mov	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4413      	add	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	334c      	adds	r3, #76	; 0x4c
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a40:	7bfa      	ldrb	r2, [r7, #15]
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	3354      	adds	r3, #84	; 0x54
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
 8003a56:	3301      	adds	r3, #1
 8003a58:	73fb      	strb	r3, [r7, #15]
 8003a5a:	7bfa      	ldrb	r2, [r7, #15]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d3af      	bcc.n	80039c4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a64:	2300      	movs	r3, #0
 8003a66:	73fb      	strb	r3, [r7, #15]
 8003a68:	e044      	b.n	8003af4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a6a:	7bfa      	ldrb	r2, [r7, #15]
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	4413      	add	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a80:	7bfa      	ldrb	r2, [r7, #15]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003a92:	7bfa      	ldrb	r2, [r7, #15]
 8003a94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a96:	7bfa      	ldrb	r2, [r7, #15]
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	4413      	add	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003aac:	7bfa      	ldrb	r2, [r7, #15]
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003abe:	2200      	movs	r2, #0
 8003ac0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ac2:	7bfa      	ldrb	r2, [r7, #15]
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ad8:	7bfa      	ldrb	r2, [r7, #15]
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	4613      	mov	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
 8003af0:	3301      	adds	r3, #1
 8003af2:	73fb      	strb	r3, [r7, #15]
 8003af4:	7bfa      	ldrb	r2, [r7, #15]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d3b5      	bcc.n	8003a6a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	603b      	str	r3, [r7, #0]
 8003b04:	687e      	ldr	r6, [r7, #4]
 8003b06:	466d      	mov	r5, sp
 8003b08:	f106 0410 	add.w	r4, r6, #16
 8003b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b18:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b1c:	1d33      	adds	r3, r6, #4
 8003b1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b20:	6838      	ldr	r0, [r7, #0]
 8003b22:	f001 fec1 	bl	80058a8 <USB_DevInit>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d005      	beq.n	8003b38 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e014      	b.n	8003b62 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d102      	bne.n	8003b56 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f80b 	bl	8003b6c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f002 f87f 	bl	8005c5e <USB_DevDisconnect>

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003b6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b9a:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <HAL_PCDEx_ActivateLPM+0x44>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	10000003 	.word	0x10000003

08003bb4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bb8:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a04      	ldr	r2, [pc, #16]	; (8003bd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc2:	6013      	str	r3, [r2, #0]
}
 8003bc4:	bf00      	nop
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	40007000 	.word	0x40007000

08003bd4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003bde:	4b23      	ldr	r3, [pc, #140]	; (8003c6c <HAL_PWREx_EnableOverDrive+0x98>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	4a22      	ldr	r2, [pc, #136]	; (8003c6c <HAL_PWREx_EnableOverDrive+0x98>)
 8003be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bea:	4b20      	ldr	r3, [pc, #128]	; (8003c6c <HAL_PWREx_EnableOverDrive+0x98>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003bf6:	4b1e      	ldr	r3, [pc, #120]	; (8003c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a1d      	ldr	r2, [pc, #116]	; (8003c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c00:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c02:	f7fe fc93 	bl	800252c <HAL_GetTick>
 8003c06:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c08:	e009      	b.n	8003c1e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c0a:	f7fe fc8f 	bl	800252c <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c18:	d901      	bls.n	8003c1e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e022      	b.n	8003c64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c1e:	4b14      	ldr	r3, [pc, #80]	; (8003c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c2a:	d1ee      	bne.n	8003c0a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c2c:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a0f      	ldr	r2, [pc, #60]	; (8003c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c38:	f7fe fc78 	bl	800252c <HAL_GetTick>
 8003c3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c3e:	e009      	b.n	8003c54 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c40:	f7fe fc74 	bl	800252c <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c4e:	d901      	bls.n	8003c54 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e007      	b.n	8003c64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c54:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c60:	d1ee      	bne.n	8003c40 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40007000 	.word	0x40007000

08003c74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e29b      	b.n	80041c2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 8087 	beq.w	8003da6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c98:	4b96      	ldr	r3, [pc, #600]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 030c 	and.w	r3, r3, #12
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d00c      	beq.n	8003cbe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ca4:	4b93      	ldr	r3, [pc, #588]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 030c 	and.w	r3, r3, #12
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d112      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x62>
 8003cb0:	4b90      	ldr	r3, [pc, #576]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cbc:	d10b      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cbe:	4b8d      	ldr	r3, [pc, #564]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d06c      	beq.n	8003da4 <HAL_RCC_OscConfig+0x130>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d168      	bne.n	8003da4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e275      	b.n	80041c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cde:	d106      	bne.n	8003cee <HAL_RCC_OscConfig+0x7a>
 8003ce0:	4b84      	ldr	r3, [pc, #528]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a83      	ldr	r2, [pc, #524]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	e02e      	b.n	8003d4c <HAL_RCC_OscConfig+0xd8>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10c      	bne.n	8003d10 <HAL_RCC_OscConfig+0x9c>
 8003cf6:	4b7f      	ldr	r3, [pc, #508]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a7e      	ldr	r2, [pc, #504]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d00:	6013      	str	r3, [r2, #0]
 8003d02:	4b7c      	ldr	r3, [pc, #496]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a7b      	ldr	r2, [pc, #492]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003d08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	e01d      	b.n	8003d4c <HAL_RCC_OscConfig+0xd8>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d18:	d10c      	bne.n	8003d34 <HAL_RCC_OscConfig+0xc0>
 8003d1a:	4b76      	ldr	r3, [pc, #472]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a75      	ldr	r2, [pc, #468]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	4b73      	ldr	r3, [pc, #460]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a72      	ldr	r2, [pc, #456]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	e00b      	b.n	8003d4c <HAL_RCC_OscConfig+0xd8>
 8003d34:	4b6f      	ldr	r3, [pc, #444]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a6e      	ldr	r2, [pc, #440]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	4b6c      	ldr	r3, [pc, #432]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a6b      	ldr	r2, [pc, #428]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d013      	beq.n	8003d7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d54:	f7fe fbea 	bl	800252c <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d5c:	f7fe fbe6 	bl	800252c <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b64      	cmp	r3, #100	; 0x64
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e229      	b.n	80041c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6e:	4b61      	ldr	r3, [pc, #388]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0f0      	beq.n	8003d5c <HAL_RCC_OscConfig+0xe8>
 8003d7a:	e014      	b.n	8003da6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7c:	f7fe fbd6 	bl	800252c <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d84:	f7fe fbd2 	bl	800252c <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b64      	cmp	r3, #100	; 0x64
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e215      	b.n	80041c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d96:	4b57      	ldr	r3, [pc, #348]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f0      	bne.n	8003d84 <HAL_RCC_OscConfig+0x110>
 8003da2:	e000      	b.n	8003da6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d069      	beq.n	8003e86 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003db2:	4b50      	ldr	r3, [pc, #320]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 030c 	and.w	r3, r3, #12
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00b      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dbe:	4b4d      	ldr	r3, [pc, #308]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 030c 	and.w	r3, r3, #12
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d11c      	bne.n	8003e04 <HAL_RCC_OscConfig+0x190>
 8003dca:	4b4a      	ldr	r3, [pc, #296]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d116      	bne.n	8003e04 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dd6:	4b47      	ldr	r3, [pc, #284]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d005      	beq.n	8003dee <HAL_RCC_OscConfig+0x17a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d001      	beq.n	8003dee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e1e9      	b.n	80041c2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dee:	4b41      	ldr	r3, [pc, #260]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	493d      	ldr	r1, [pc, #244]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e02:	e040      	b.n	8003e86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d023      	beq.n	8003e54 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e0c:	4b39      	ldr	r3, [pc, #228]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a38      	ldr	r2, [pc, #224]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003e12:	f043 0301 	orr.w	r3, r3, #1
 8003e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e18:	f7fe fb88 	bl	800252c <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e20:	f7fe fb84 	bl	800252c <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e1c7      	b.n	80041c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e32:	4b30      	ldr	r3, [pc, #192]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0f0      	beq.n	8003e20 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e3e:	4b2d      	ldr	r3, [pc, #180]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	4929      	ldr	r1, [pc, #164]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	600b      	str	r3, [r1, #0]
 8003e52:	e018      	b.n	8003e86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e54:	4b27      	ldr	r3, [pc, #156]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a26      	ldr	r2, [pc, #152]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003e5a:	f023 0301 	bic.w	r3, r3, #1
 8003e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fe fb64 	bl	800252c <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e68:	f7fe fb60 	bl	800252c <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e1a3      	b.n	80041c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e7a:	4b1e      	ldr	r3, [pc, #120]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f0      	bne.n	8003e68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d038      	beq.n	8003f04 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d019      	beq.n	8003ece <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e9a:	4b16      	ldr	r3, [pc, #88]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e9e:	4a15      	ldr	r2, [pc, #84]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003ea0:	f043 0301 	orr.w	r3, r3, #1
 8003ea4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea6:	f7fe fb41 	bl	800252c <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eae:	f7fe fb3d 	bl	800252c <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e180      	b.n	80041c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ec0:	4b0c      	ldr	r3, [pc, #48]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0f0      	beq.n	8003eae <HAL_RCC_OscConfig+0x23a>
 8003ecc:	e01a      	b.n	8003f04 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ece:	4b09      	ldr	r3, [pc, #36]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed2:	4a08      	ldr	r2, [pc, #32]	; (8003ef4 <HAL_RCC_OscConfig+0x280>)
 8003ed4:	f023 0301 	bic.w	r3, r3, #1
 8003ed8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eda:	f7fe fb27 	bl	800252c <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee0:	e00a      	b.n	8003ef8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ee2:	f7fe fb23 	bl	800252c <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d903      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e166      	b.n	80041c2 <HAL_RCC_OscConfig+0x54e>
 8003ef4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef8:	4b92      	ldr	r3, [pc, #584]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 8003efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1ee      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 80a4 	beq.w	800405a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f12:	4b8c      	ldr	r3, [pc, #560]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10d      	bne.n	8003f3a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f1e:	4b89      	ldr	r3, [pc, #548]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	4a88      	ldr	r2, [pc, #544]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 8003f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f28:	6413      	str	r3, [r2, #64]	; 0x40
 8003f2a:	4b86      	ldr	r3, [pc, #536]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f32:	60bb      	str	r3, [r7, #8]
 8003f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f36:	2301      	movs	r3, #1
 8003f38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f3a:	4b83      	ldr	r3, [pc, #524]	; (8004148 <HAL_RCC_OscConfig+0x4d4>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d118      	bne.n	8003f78 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f46:	4b80      	ldr	r3, [pc, #512]	; (8004148 <HAL_RCC_OscConfig+0x4d4>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a7f      	ldr	r2, [pc, #508]	; (8004148 <HAL_RCC_OscConfig+0x4d4>)
 8003f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f52:	f7fe faeb 	bl	800252c <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f5a:	f7fe fae7 	bl	800252c <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b64      	cmp	r3, #100	; 0x64
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e12a      	b.n	80041c2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f6c:	4b76      	ldr	r3, [pc, #472]	; (8004148 <HAL_RCC_OscConfig+0x4d4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0f0      	beq.n	8003f5a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d106      	bne.n	8003f8e <HAL_RCC_OscConfig+0x31a>
 8003f80:	4b70      	ldr	r3, [pc, #448]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 8003f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f84:	4a6f      	ldr	r2, [pc, #444]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 8003f86:	f043 0301 	orr.w	r3, r3, #1
 8003f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f8c:	e02d      	b.n	8003fea <HAL_RCC_OscConfig+0x376>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10c      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x33c>
 8003f96:	4b6b      	ldr	r3, [pc, #428]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 8003f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9a:	4a6a      	ldr	r2, [pc, #424]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 8003f9c:	f023 0301 	bic.w	r3, r3, #1
 8003fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa2:	4b68      	ldr	r3, [pc, #416]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 8003fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa6:	4a67      	ldr	r2, [pc, #412]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 8003fa8:	f023 0304 	bic.w	r3, r3, #4
 8003fac:	6713      	str	r3, [r2, #112]	; 0x70
 8003fae:	e01c      	b.n	8003fea <HAL_RCC_OscConfig+0x376>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2b05      	cmp	r3, #5
 8003fb6:	d10c      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x35e>
 8003fb8:	4b62      	ldr	r3, [pc, #392]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 8003fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbc:	4a61      	ldr	r2, [pc, #388]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 8003fbe:	f043 0304 	orr.w	r3, r3, #4
 8003fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc4:	4b5f      	ldr	r3, [pc, #380]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc8:	4a5e      	ldr	r2, [pc, #376]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd0:	e00b      	b.n	8003fea <HAL_RCC_OscConfig+0x376>
 8003fd2:	4b5c      	ldr	r3, [pc, #368]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 8003fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd6:	4a5b      	ldr	r2, [pc, #364]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 8003fd8:	f023 0301 	bic.w	r3, r3, #1
 8003fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003fde:	4b59      	ldr	r3, [pc, #356]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 8003fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe2:	4a58      	ldr	r2, [pc, #352]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 8003fe4:	f023 0304 	bic.w	r3, r3, #4
 8003fe8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d015      	beq.n	800401e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff2:	f7fe fa9b 	bl	800252c <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff8:	e00a      	b.n	8004010 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ffa:	f7fe fa97 	bl	800252c <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	f241 3288 	movw	r2, #5000	; 0x1388
 8004008:	4293      	cmp	r3, r2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e0d8      	b.n	80041c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004010:	4b4c      	ldr	r3, [pc, #304]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 8004012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0ee      	beq.n	8003ffa <HAL_RCC_OscConfig+0x386>
 800401c:	e014      	b.n	8004048 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800401e:	f7fe fa85 	bl	800252c <HAL_GetTick>
 8004022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004024:	e00a      	b.n	800403c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004026:	f7fe fa81 	bl	800252c <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	f241 3288 	movw	r2, #5000	; 0x1388
 8004034:	4293      	cmp	r3, r2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e0c2      	b.n	80041c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800403c:	4b41      	ldr	r3, [pc, #260]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 800403e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1ee      	bne.n	8004026 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004048:	7dfb      	ldrb	r3, [r7, #23]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d105      	bne.n	800405a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800404e:	4b3d      	ldr	r3, [pc, #244]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	4a3c      	ldr	r2, [pc, #240]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 8004054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004058:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 80ae 	beq.w	80041c0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004064:	4b37      	ldr	r3, [pc, #220]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 030c 	and.w	r3, r3, #12
 800406c:	2b08      	cmp	r3, #8
 800406e:	d06d      	beq.n	800414c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	2b02      	cmp	r3, #2
 8004076:	d14b      	bne.n	8004110 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004078:	4b32      	ldr	r3, [pc, #200]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a31      	ldr	r2, [pc, #196]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 800407e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004084:	f7fe fa52 	bl	800252c <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800408c:	f7fe fa4e 	bl	800252c <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e091      	b.n	80041c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800409e:	4b29      	ldr	r3, [pc, #164]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1f0      	bne.n	800408c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69da      	ldr	r2, [r3, #28]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	019b      	lsls	r3, r3, #6
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c0:	085b      	lsrs	r3, r3, #1
 80040c2:	3b01      	subs	r3, #1
 80040c4:	041b      	lsls	r3, r3, #16
 80040c6:	431a      	orrs	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	061b      	lsls	r3, r3, #24
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	071b      	lsls	r3, r3, #28
 80040d6:	491b      	ldr	r1, [pc, #108]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040dc:	4b19      	ldr	r3, [pc, #100]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a18      	ldr	r2, [pc, #96]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 80040e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e8:	f7fe fa20 	bl	800252c <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f0:	f7fe fa1c 	bl	800252c <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e05f      	b.n	80041c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004102:	4b10      	ldr	r3, [pc, #64]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f0      	beq.n	80040f0 <HAL_RCC_OscConfig+0x47c>
 800410e:	e057      	b.n	80041c0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004110:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a0b      	ldr	r2, [pc, #44]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 8004116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800411a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7fe fa06 	bl	800252c <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004124:	f7fe fa02 	bl	800252c <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e045      	b.n	80041c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004136:	4b03      	ldr	r3, [pc, #12]	; (8004144 <HAL_RCC_OscConfig+0x4d0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f0      	bne.n	8004124 <HAL_RCC_OscConfig+0x4b0>
 8004142:	e03d      	b.n	80041c0 <HAL_RCC_OscConfig+0x54c>
 8004144:	40023800 	.word	0x40023800
 8004148:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800414c:	4b1f      	ldr	r3, [pc, #124]	; (80041cc <HAL_RCC_OscConfig+0x558>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d030      	beq.n	80041bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004164:	429a      	cmp	r2, r3
 8004166:	d129      	bne.n	80041bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004172:	429a      	cmp	r2, r3
 8004174:	d122      	bne.n	80041bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800417c:	4013      	ands	r3, r2
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004182:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004184:	4293      	cmp	r3, r2
 8004186:	d119      	bne.n	80041bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004192:	085b      	lsrs	r3, r3, #1
 8004194:	3b01      	subs	r3, #1
 8004196:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004198:	429a      	cmp	r2, r3
 800419a:	d10f      	bne.n	80041bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d107      	bne.n	80041bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d001      	beq.n	80041c0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e000      	b.n	80041c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	40023800 	.word	0x40023800

080041d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80041da:	2300      	movs	r3, #0
 80041dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e0d0      	b.n	800438a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041e8:	4b6a      	ldr	r3, [pc, #424]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d910      	bls.n	8004218 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f6:	4b67      	ldr	r3, [pc, #412]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f023 020f 	bic.w	r2, r3, #15
 80041fe:	4965      	ldr	r1, [pc, #404]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	4313      	orrs	r3, r2
 8004204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004206:	4b63      	ldr	r3, [pc, #396]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d001      	beq.n	8004218 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e0b8      	b.n	800438a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d020      	beq.n	8004266 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004230:	4b59      	ldr	r3, [pc, #356]	; (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4a58      	ldr	r2, [pc, #352]	; (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 8004236:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800423a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0308 	and.w	r3, r3, #8
 8004244:	2b00      	cmp	r3, #0
 8004246:	d005      	beq.n	8004254 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004248:	4b53      	ldr	r3, [pc, #332]	; (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	4a52      	ldr	r2, [pc, #328]	; (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 800424e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004252:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004254:	4b50      	ldr	r3, [pc, #320]	; (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	494d      	ldr	r1, [pc, #308]	; (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 8004262:	4313      	orrs	r3, r2
 8004264:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d040      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d107      	bne.n	800428a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427a:	4b47      	ldr	r3, [pc, #284]	; (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d115      	bne.n	80042b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e07f      	b.n	800438a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d107      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004292:	4b41      	ldr	r3, [pc, #260]	; (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d109      	bne.n	80042b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e073      	b.n	800438a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a2:	4b3d      	ldr	r3, [pc, #244]	; (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e06b      	b.n	800438a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042b2:	4b39      	ldr	r3, [pc, #228]	; (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f023 0203 	bic.w	r2, r3, #3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	4936      	ldr	r1, [pc, #216]	; (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c4:	f7fe f932 	bl	800252c <HAL_GetTick>
 80042c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ca:	e00a      	b.n	80042e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042cc:	f7fe f92e 	bl	800252c <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042da:	4293      	cmp	r3, r2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e053      	b.n	800438a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e2:	4b2d      	ldr	r3, [pc, #180]	; (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 020c 	and.w	r2, r3, #12
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d1eb      	bne.n	80042cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042f4:	4b27      	ldr	r3, [pc, #156]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 030f 	and.w	r3, r3, #15
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d210      	bcs.n	8004324 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004302:	4b24      	ldr	r3, [pc, #144]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f023 020f 	bic.w	r2, r3, #15
 800430a:	4922      	ldr	r1, [pc, #136]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004312:	4b20      	ldr	r3, [pc, #128]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d001      	beq.n	8004324 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e032      	b.n	800438a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	d008      	beq.n	8004342 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004330:	4b19      	ldr	r3, [pc, #100]	; (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	4916      	ldr	r1, [pc, #88]	; (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 800433e:	4313      	orrs	r3, r2
 8004340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d009      	beq.n	8004362 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800434e:	4b12      	ldr	r3, [pc, #72]	; (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	490e      	ldr	r1, [pc, #56]	; (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 800435e:	4313      	orrs	r3, r2
 8004360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004362:	f000 f821 	bl	80043a8 <HAL_RCC_GetSysClockFreq>
 8004366:	4602      	mov	r2, r0
 8004368:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	091b      	lsrs	r3, r3, #4
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	490a      	ldr	r1, [pc, #40]	; (800439c <HAL_RCC_ClockConfig+0x1cc>)
 8004374:	5ccb      	ldrb	r3, [r1, r3]
 8004376:	fa22 f303 	lsr.w	r3, r2, r3
 800437a:	4a09      	ldr	r2, [pc, #36]	; (80043a0 <HAL_RCC_ClockConfig+0x1d0>)
 800437c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800437e:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <HAL_RCC_ClockConfig+0x1d4>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f7fe f88e 	bl	80024a4 <HAL_InitTick>

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40023c00 	.word	0x40023c00
 8004398:	40023800 	.word	0x40023800
 800439c:	08008abc 	.word	0x08008abc
 80043a0:	20000000 	.word	0x20000000
 80043a4:	20000004 	.word	0x20000004

080043a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043ac:	b094      	sub	sp, #80	; 0x50
 80043ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80043b0:	2300      	movs	r3, #0
 80043b2:	647b      	str	r3, [r7, #68]	; 0x44
 80043b4:	2300      	movs	r3, #0
 80043b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043b8:	2300      	movs	r3, #0
 80043ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80043bc:	2300      	movs	r3, #0
 80043be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043c0:	4b79      	ldr	r3, [pc, #484]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f003 030c 	and.w	r3, r3, #12
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d00d      	beq.n	80043e8 <HAL_RCC_GetSysClockFreq+0x40>
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	f200 80e1 	bhi.w	8004594 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <HAL_RCC_GetSysClockFreq+0x34>
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d003      	beq.n	80043e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80043da:	e0db      	b.n	8004594 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043dc:	4b73      	ldr	r3, [pc, #460]	; (80045ac <HAL_RCC_GetSysClockFreq+0x204>)
 80043de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043e0:	e0db      	b.n	800459a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043e2:	4b73      	ldr	r3, [pc, #460]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80043e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043e6:	e0d8      	b.n	800459a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043e8:	4b6f      	ldr	r3, [pc, #444]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043f0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80043f2:	4b6d      	ldr	r3, [pc, #436]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d063      	beq.n	80044c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043fe:	4b6a      	ldr	r3, [pc, #424]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	099b      	lsrs	r3, r3, #6
 8004404:	2200      	movs	r2, #0
 8004406:	63bb      	str	r3, [r7, #56]	; 0x38
 8004408:	63fa      	str	r2, [r7, #60]	; 0x3c
 800440a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004410:	633b      	str	r3, [r7, #48]	; 0x30
 8004412:	2300      	movs	r3, #0
 8004414:	637b      	str	r3, [r7, #52]	; 0x34
 8004416:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800441a:	4622      	mov	r2, r4
 800441c:	462b      	mov	r3, r5
 800441e:	f04f 0000 	mov.w	r0, #0
 8004422:	f04f 0100 	mov.w	r1, #0
 8004426:	0159      	lsls	r1, r3, #5
 8004428:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800442c:	0150      	lsls	r0, r2, #5
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	4621      	mov	r1, r4
 8004434:	1a51      	subs	r1, r2, r1
 8004436:	6139      	str	r1, [r7, #16]
 8004438:	4629      	mov	r1, r5
 800443a:	eb63 0301 	sbc.w	r3, r3, r1
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800444c:	4659      	mov	r1, fp
 800444e:	018b      	lsls	r3, r1, #6
 8004450:	4651      	mov	r1, sl
 8004452:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004456:	4651      	mov	r1, sl
 8004458:	018a      	lsls	r2, r1, #6
 800445a:	4651      	mov	r1, sl
 800445c:	ebb2 0801 	subs.w	r8, r2, r1
 8004460:	4659      	mov	r1, fp
 8004462:	eb63 0901 	sbc.w	r9, r3, r1
 8004466:	f04f 0200 	mov.w	r2, #0
 800446a:	f04f 0300 	mov.w	r3, #0
 800446e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004472:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004476:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800447a:	4690      	mov	r8, r2
 800447c:	4699      	mov	r9, r3
 800447e:	4623      	mov	r3, r4
 8004480:	eb18 0303 	adds.w	r3, r8, r3
 8004484:	60bb      	str	r3, [r7, #8]
 8004486:	462b      	mov	r3, r5
 8004488:	eb49 0303 	adc.w	r3, r9, r3
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	f04f 0200 	mov.w	r2, #0
 8004492:	f04f 0300 	mov.w	r3, #0
 8004496:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800449a:	4629      	mov	r1, r5
 800449c:	024b      	lsls	r3, r1, #9
 800449e:	4621      	mov	r1, r4
 80044a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044a4:	4621      	mov	r1, r4
 80044a6:	024a      	lsls	r2, r1, #9
 80044a8:	4610      	mov	r0, r2
 80044aa:	4619      	mov	r1, r3
 80044ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ae:	2200      	movs	r2, #0
 80044b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80044b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044b8:	f7fb ff0c 	bl	80002d4 <__aeabi_uldivmod>
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	4613      	mov	r3, r2
 80044c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044c4:	e058      	b.n	8004578 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044c6:	4b38      	ldr	r3, [pc, #224]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	099b      	lsrs	r3, r3, #6
 80044cc:	2200      	movs	r2, #0
 80044ce:	4618      	mov	r0, r3
 80044d0:	4611      	mov	r1, r2
 80044d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044d6:	623b      	str	r3, [r7, #32]
 80044d8:	2300      	movs	r3, #0
 80044da:	627b      	str	r3, [r7, #36]	; 0x24
 80044dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044e0:	4642      	mov	r2, r8
 80044e2:	464b      	mov	r3, r9
 80044e4:	f04f 0000 	mov.w	r0, #0
 80044e8:	f04f 0100 	mov.w	r1, #0
 80044ec:	0159      	lsls	r1, r3, #5
 80044ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044f2:	0150      	lsls	r0, r2, #5
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	4641      	mov	r1, r8
 80044fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80044fe:	4649      	mov	r1, r9
 8004500:	eb63 0b01 	sbc.w	fp, r3, r1
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004510:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004514:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004518:	ebb2 040a 	subs.w	r4, r2, sl
 800451c:	eb63 050b 	sbc.w	r5, r3, fp
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	f04f 0300 	mov.w	r3, #0
 8004528:	00eb      	lsls	r3, r5, #3
 800452a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800452e:	00e2      	lsls	r2, r4, #3
 8004530:	4614      	mov	r4, r2
 8004532:	461d      	mov	r5, r3
 8004534:	4643      	mov	r3, r8
 8004536:	18e3      	adds	r3, r4, r3
 8004538:	603b      	str	r3, [r7, #0]
 800453a:	464b      	mov	r3, r9
 800453c:	eb45 0303 	adc.w	r3, r5, r3
 8004540:	607b      	str	r3, [r7, #4]
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800454e:	4629      	mov	r1, r5
 8004550:	028b      	lsls	r3, r1, #10
 8004552:	4621      	mov	r1, r4
 8004554:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004558:	4621      	mov	r1, r4
 800455a:	028a      	lsls	r2, r1, #10
 800455c:	4610      	mov	r0, r2
 800455e:	4619      	mov	r1, r3
 8004560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004562:	2200      	movs	r2, #0
 8004564:	61bb      	str	r3, [r7, #24]
 8004566:	61fa      	str	r2, [r7, #28]
 8004568:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800456c:	f7fb feb2 	bl	80002d4 <__aeabi_uldivmod>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4613      	mov	r3, r2
 8004576:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004578:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	0c1b      	lsrs	r3, r3, #16
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	3301      	adds	r3, #1
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004588:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800458a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800458c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004590:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004592:	e002      	b.n	800459a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004594:	4b05      	ldr	r3, [pc, #20]	; (80045ac <HAL_RCC_GetSysClockFreq+0x204>)
 8004596:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800459a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800459c:	4618      	mov	r0, r3
 800459e:	3750      	adds	r7, #80	; 0x50
 80045a0:	46bd      	mov	sp, r7
 80045a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045a6:	bf00      	nop
 80045a8:	40023800 	.word	0x40023800
 80045ac:	00f42400 	.word	0x00f42400
 80045b0:	007a1200 	.word	0x007a1200

080045b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045b8:	4b03      	ldr	r3, [pc, #12]	; (80045c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045ba:	681b      	ldr	r3, [r3, #0]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	20000000 	.word	0x20000000

080045cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045d0:	f7ff fff0 	bl	80045b4 <HAL_RCC_GetHCLKFreq>
 80045d4:	4602      	mov	r2, r0
 80045d6:	4b05      	ldr	r3, [pc, #20]	; (80045ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	0a9b      	lsrs	r3, r3, #10
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	4903      	ldr	r1, [pc, #12]	; (80045f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045e2:	5ccb      	ldrb	r3, [r1, r3]
 80045e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40023800 	.word	0x40023800
 80045f0:	08008acc 	.word	0x08008acc

080045f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045f8:	f7ff ffdc 	bl	80045b4 <HAL_RCC_GetHCLKFreq>
 80045fc:	4602      	mov	r2, r0
 80045fe:	4b05      	ldr	r3, [pc, #20]	; (8004614 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	0b5b      	lsrs	r3, r3, #13
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	4903      	ldr	r1, [pc, #12]	; (8004618 <HAL_RCC_GetPCLK2Freq+0x24>)
 800460a:	5ccb      	ldrb	r3, [r1, r3]
 800460c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004610:	4618      	mov	r0, r3
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40023800 	.word	0x40023800
 8004618:	08008acc 	.word	0x08008acc

0800461c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b088      	sub	sp, #32
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004628:	2300      	movs	r3, #0
 800462a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004630:	2300      	movs	r3, #0
 8004632:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	d012      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004644:	4b69      	ldr	r3, [pc, #420]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	4a68      	ldr	r2, [pc, #416]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800464e:	6093      	str	r3, [r2, #8]
 8004650:	4b66      	ldr	r3, [pc, #408]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004658:	4964      	ldr	r1, [pc, #400]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800465a:	4313      	orrs	r3, r2
 800465c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004666:	2301      	movs	r3, #1
 8004668:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d017      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004676:	4b5d      	ldr	r3, [pc, #372]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800467c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004684:	4959      	ldr	r1, [pc, #356]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004686:	4313      	orrs	r3, r2
 8004688:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004690:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004694:	d101      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004696:	2301      	movs	r3, #1
 8004698:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80046a2:	2301      	movs	r3, #1
 80046a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d017      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046b2:	4b4e      	ldr	r3, [pc, #312]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	494a      	ldr	r1, [pc, #296]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046d0:	d101      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80046d2:	2301      	movs	r3, #1
 80046d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80046de:	2301      	movs	r3, #1
 80046e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80046ee:	2301      	movs	r3, #1
 80046f0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0320 	and.w	r3, r3, #32
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 808b 	beq.w	8004816 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004700:	4b3a      	ldr	r3, [pc, #232]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	4a39      	ldr	r2, [pc, #228]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800470a:	6413      	str	r3, [r2, #64]	; 0x40
 800470c:	4b37      	ldr	r3, [pc, #220]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004714:	60bb      	str	r3, [r7, #8]
 8004716:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004718:	4b35      	ldr	r3, [pc, #212]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a34      	ldr	r2, [pc, #208]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800471e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004722:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004724:	f7fd ff02 	bl	800252c <HAL_GetTick>
 8004728:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800472a:	e008      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800472c:	f7fd fefe 	bl	800252c <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b64      	cmp	r3, #100	; 0x64
 8004738:	d901      	bls.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e38f      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800473e:	4b2c      	ldr	r3, [pc, #176]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0f0      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800474a:	4b28      	ldr	r3, [pc, #160]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800474c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004752:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d035      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	429a      	cmp	r2, r3
 8004766:	d02e      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004768:	4b20      	ldr	r3, [pc, #128]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800476a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004770:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004772:	4b1e      	ldr	r3, [pc, #120]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004776:	4a1d      	ldr	r2, [pc, #116]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800477c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800477e:	4b1b      	ldr	r3, [pc, #108]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004782:	4a1a      	ldr	r2, [pc, #104]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004788:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800478a:	4a18      	ldr	r2, [pc, #96]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004790:	4b16      	ldr	r3, [pc, #88]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b01      	cmp	r3, #1
 800479a:	d114      	bne.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479c:	f7fd fec6 	bl	800252c <HAL_GetTick>
 80047a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a2:	e00a      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047a4:	f7fd fec2 	bl	800252c <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d901      	bls.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e351      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ba:	4b0c      	ldr	r3, [pc, #48]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0ee      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047d2:	d111      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80047d4:	4b05      	ldr	r3, [pc, #20]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047e0:	4b04      	ldr	r3, [pc, #16]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80047e2:	400b      	ands	r3, r1
 80047e4:	4901      	ldr	r1, [pc, #4]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	608b      	str	r3, [r1, #8]
 80047ea:	e00b      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80047ec:	40023800 	.word	0x40023800
 80047f0:	40007000 	.word	0x40007000
 80047f4:	0ffffcff 	.word	0x0ffffcff
 80047f8:	4bac      	ldr	r3, [pc, #688]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	4aab      	ldr	r2, [pc, #684]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004802:	6093      	str	r3, [r2, #8]
 8004804:	4ba9      	ldr	r3, [pc, #676]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004806:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004810:	49a6      	ldr	r1, [pc, #664]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004812:	4313      	orrs	r3, r2
 8004814:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0310 	and.w	r3, r3, #16
 800481e:	2b00      	cmp	r3, #0
 8004820:	d010      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004822:	4ba2      	ldr	r3, [pc, #648]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004828:	4aa0      	ldr	r2, [pc, #640]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800482a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800482e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004832:	4b9e      	ldr	r3, [pc, #632]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004834:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483c:	499b      	ldr	r1, [pc, #620]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00a      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004850:	4b96      	ldr	r3, [pc, #600]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004856:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800485e:	4993      	ldr	r1, [pc, #588]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004872:	4b8e      	ldr	r3, [pc, #568]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004878:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004880:	498a      	ldr	r1, [pc, #552]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00a      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004894:	4b85      	ldr	r3, [pc, #532]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048a2:	4982      	ldr	r1, [pc, #520]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048b6:	4b7d      	ldr	r3, [pc, #500]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c4:	4979      	ldr	r1, [pc, #484]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048d8:	4b74      	ldr	r3, [pc, #464]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048de:	f023 0203 	bic.w	r2, r3, #3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e6:	4971      	ldr	r1, [pc, #452]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048fa:	4b6c      	ldr	r3, [pc, #432]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004900:	f023 020c 	bic.w	r2, r3, #12
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004908:	4968      	ldr	r1, [pc, #416]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800491c:	4b63      	ldr	r3, [pc, #396]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800491e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004922:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800492a:	4960      	ldr	r1, [pc, #384]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800493e:	4b5b      	ldr	r3, [pc, #364]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004944:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800494c:	4957      	ldr	r1, [pc, #348]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800494e:	4313      	orrs	r3, r2
 8004950:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004960:	4b52      	ldr	r3, [pc, #328]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004966:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496e:	494f      	ldr	r1, [pc, #316]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004970:	4313      	orrs	r3, r2
 8004972:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004982:	4b4a      	ldr	r3, [pc, #296]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004988:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004990:	4946      	ldr	r1, [pc, #280]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00a      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80049a4:	4b41      	ldr	r3, [pc, #260]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b2:	493e      	ldr	r1, [pc, #248]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80049c6:	4b39      	ldr	r3, [pc, #228]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d4:	4935      	ldr	r1, [pc, #212]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00a      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049e8:	4b30      	ldr	r3, [pc, #192]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049f6:	492d      	ldr	r1, [pc, #180]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d011      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a0a:	4b28      	ldr	r3, [pc, #160]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a10:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a18:	4924      	ldr	r1, [pc, #144]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a28:	d101      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a4a:	4b18      	ldr	r3, [pc, #96]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a50:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a58:	4914      	ldr	r1, [pc, #80]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00b      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a6c:	4b0f      	ldr	r3, [pc, #60]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a72:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a7c:	490b      	ldr	r1, [pc, #44]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00f      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004a90:	4b06      	ldr	r3, [pc, #24]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a96:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aa0:	4902      	ldr	r1, [pc, #8]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004aa8:	e002      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004aaa:	bf00      	nop
 8004aac:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00b      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004abc:	4b8a      	ldr	r3, [pc, #552]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ac2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004acc:	4986      	ldr	r1, [pc, #536]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00b      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004ae0:	4b81      	ldr	r3, [pc, #516]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ae6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004af0:	497d      	ldr	r1, [pc, #500]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d006      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 80d6 	beq.w	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b0c:	4b76      	ldr	r3, [pc, #472]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a75      	ldr	r2, [pc, #468]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b18:	f7fd fd08 	bl	800252c <HAL_GetTick>
 8004b1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b20:	f7fd fd04 	bl	800252c <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b64      	cmp	r3, #100	; 0x64
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e195      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b32:	4b6d      	ldr	r3, [pc, #436]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1f0      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d021      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d11d      	bne.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b52:	4b65      	ldr	r3, [pc, #404]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b58:	0c1b      	lsrs	r3, r3, #16
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b60:	4b61      	ldr	r3, [pc, #388]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b66:	0e1b      	lsrs	r3, r3, #24
 8004b68:	f003 030f 	and.w	r3, r3, #15
 8004b6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	019a      	lsls	r2, r3, #6
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	041b      	lsls	r3, r3, #16
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	061b      	lsls	r3, r3, #24
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	071b      	lsls	r3, r3, #28
 8004b86:	4958      	ldr	r1, [pc, #352]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d004      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ba2:	d00a      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d02e      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bb8:	d129      	bne.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004bba:	4b4b      	ldr	r3, [pc, #300]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bc0:	0c1b      	lsrs	r3, r3, #16
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004bc8:	4b47      	ldr	r3, [pc, #284]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bce:	0f1b      	lsrs	r3, r3, #28
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	019a      	lsls	r2, r3, #6
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	041b      	lsls	r3, r3, #16
 8004be0:	431a      	orrs	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	061b      	lsls	r3, r3, #24
 8004be8:	431a      	orrs	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	071b      	lsls	r3, r3, #28
 8004bee:	493e      	ldr	r1, [pc, #248]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004bf6:	4b3c      	ldr	r3, [pc, #240]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bfc:	f023 021f 	bic.w	r2, r3, #31
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	3b01      	subs	r3, #1
 8004c06:	4938      	ldr	r1, [pc, #224]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d01d      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c1a:	4b33      	ldr	r3, [pc, #204]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c20:	0e1b      	lsrs	r3, r3, #24
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c28:	4b2f      	ldr	r3, [pc, #188]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c2e:	0f1b      	lsrs	r3, r3, #28
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	019a      	lsls	r2, r3, #6
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	041b      	lsls	r3, r3, #16
 8004c42:	431a      	orrs	r2, r3
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	061b      	lsls	r3, r3, #24
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	071b      	lsls	r3, r3, #28
 8004c4e:	4926      	ldr	r1, [pc, #152]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d011      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	019a      	lsls	r2, r3, #6
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	041b      	lsls	r3, r3, #16
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	061b      	lsls	r3, r3, #24
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	071b      	lsls	r3, r3, #28
 8004c7e:	491a      	ldr	r1, [pc, #104]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c86:	4b18      	ldr	r3, [pc, #96]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a17      	ldr	r2, [pc, #92]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c92:	f7fd fc4b 	bl	800252c <HAL_GetTick>
 8004c96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c98:	e008      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c9a:	f7fd fc47 	bl	800252c <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b64      	cmp	r3, #100	; 0x64
 8004ca6:	d901      	bls.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e0d8      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cac:	4b0e      	ldr	r3, [pc, #56]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0f0      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	f040 80ce 	bne.w	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004cc0:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a08      	ldr	r2, [pc, #32]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ccc:	f7fd fc2e 	bl	800252c <HAL_GetTick>
 8004cd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004cd2:	e00b      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004cd4:	f7fd fc2a 	bl	800252c <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b64      	cmp	r3, #100	; 0x64
 8004ce0:	d904      	bls.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e0bb      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004ce6:	bf00      	nop
 8004ce8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004cec:	4b5e      	ldr	r3, [pc, #376]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cf8:	d0ec      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d009      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d02e      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d12a      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d22:	4b51      	ldr	r3, [pc, #324]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d28:	0c1b      	lsrs	r3, r3, #16
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d30:	4b4d      	ldr	r3, [pc, #308]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d36:	0f1b      	lsrs	r3, r3, #28
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	019a      	lsls	r2, r3, #6
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	041b      	lsls	r3, r3, #16
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	061b      	lsls	r3, r3, #24
 8004d50:	431a      	orrs	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	071b      	lsls	r3, r3, #28
 8004d56:	4944      	ldr	r1, [pc, #272]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d5e:	4b42      	ldr	r3, [pc, #264]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d64:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	021b      	lsls	r3, r3, #8
 8004d70:	493d      	ldr	r1, [pc, #244]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d022      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d8c:	d11d      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d8e:	4b36      	ldr	r3, [pc, #216]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d94:	0e1b      	lsrs	r3, r3, #24
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d9c:	4b32      	ldr	r3, [pc, #200]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da2:	0f1b      	lsrs	r3, r3, #28
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	019a      	lsls	r2, r3, #6
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	041b      	lsls	r3, r3, #16
 8004db6:	431a      	orrs	r2, r3
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	061b      	lsls	r3, r3, #24
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	071b      	lsls	r3, r3, #28
 8004dc2:	4929      	ldr	r1, [pc, #164]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0308 	and.w	r3, r3, #8
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d028      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004dd6:	4b24      	ldr	r3, [pc, #144]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ddc:	0e1b      	lsrs	r3, r3, #24
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004de4:	4b20      	ldr	r3, [pc, #128]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dea:	0c1b      	lsrs	r3, r3, #16
 8004dec:	f003 0303 	and.w	r3, r3, #3
 8004df0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	019a      	lsls	r2, r3, #6
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	041b      	lsls	r3, r3, #16
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	061b      	lsls	r3, r3, #24
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	071b      	lsls	r3, r3, #28
 8004e0a:	4917      	ldr	r1, [pc, #92]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e12:	4b15      	ldr	r3, [pc, #84]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e20:	4911      	ldr	r1, [pc, #68]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e28:	4b0f      	ldr	r3, [pc, #60]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a0e      	ldr	r2, [pc, #56]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e34:	f7fd fb7a 	bl	800252c <HAL_GetTick>
 8004e38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e3c:	f7fd fb76 	bl	800252c <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b64      	cmp	r3, #100	; 0x64
 8004e48:	d901      	bls.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e007      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e4e:	4b06      	ldr	r3, [pc, #24]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e5a:	d1ef      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3720      	adds	r7, #32
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	40023800 	.word	0x40023800

08004e6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e040      	b.n	8004f00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d106      	bne.n	8004e94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7fd f9c2 	bl	8002218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2224      	movs	r2, #36	; 0x24
 8004e98:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0201 	bic.w	r2, r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f82c 	bl	8004f08 <UART_SetConfig>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d101      	bne.n	8004eba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e022      	b.n	8004f00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fa84 	bl	80053d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ed6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689a      	ldr	r2, [r3, #8]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ee6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0201 	orr.w	r2, r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 fb0b 	bl	8005514 <UART_CheckIdleState>
 8004efe:	4603      	mov	r3, r0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	431a      	orrs	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	4ba6      	ldr	r3, [pc, #664]	; (80051cc <UART_SetConfig+0x2c4>)
 8004f34:	4013      	ands	r3, r2
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6812      	ldr	r2, [r2, #0]
 8004f3a:	6979      	ldr	r1, [r7, #20]
 8004f3c:	430b      	orrs	r3, r1
 8004f3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a94      	ldr	r2, [pc, #592]	; (80051d0 <UART_SetConfig+0x2c8>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d120      	bne.n	8004fc6 <UART_SetConfig+0xbe>
 8004f84:	4b93      	ldr	r3, [pc, #588]	; (80051d4 <UART_SetConfig+0x2cc>)
 8004f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	2b03      	cmp	r3, #3
 8004f90:	d816      	bhi.n	8004fc0 <UART_SetConfig+0xb8>
 8004f92:	a201      	add	r2, pc, #4	; (adr r2, 8004f98 <UART_SetConfig+0x90>)
 8004f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f98:	08004fa9 	.word	0x08004fa9
 8004f9c:	08004fb5 	.word	0x08004fb5
 8004fa0:	08004faf 	.word	0x08004faf
 8004fa4:	08004fbb 	.word	0x08004fbb
 8004fa8:	2301      	movs	r3, #1
 8004faa:	77fb      	strb	r3, [r7, #31]
 8004fac:	e150      	b.n	8005250 <UART_SetConfig+0x348>
 8004fae:	2302      	movs	r3, #2
 8004fb0:	77fb      	strb	r3, [r7, #31]
 8004fb2:	e14d      	b.n	8005250 <UART_SetConfig+0x348>
 8004fb4:	2304      	movs	r3, #4
 8004fb6:	77fb      	strb	r3, [r7, #31]
 8004fb8:	e14a      	b.n	8005250 <UART_SetConfig+0x348>
 8004fba:	2308      	movs	r3, #8
 8004fbc:	77fb      	strb	r3, [r7, #31]
 8004fbe:	e147      	b.n	8005250 <UART_SetConfig+0x348>
 8004fc0:	2310      	movs	r3, #16
 8004fc2:	77fb      	strb	r3, [r7, #31]
 8004fc4:	e144      	b.n	8005250 <UART_SetConfig+0x348>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a83      	ldr	r2, [pc, #524]	; (80051d8 <UART_SetConfig+0x2d0>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d132      	bne.n	8005036 <UART_SetConfig+0x12e>
 8004fd0:	4b80      	ldr	r3, [pc, #512]	; (80051d4 <UART_SetConfig+0x2cc>)
 8004fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd6:	f003 030c 	and.w	r3, r3, #12
 8004fda:	2b0c      	cmp	r3, #12
 8004fdc:	d828      	bhi.n	8005030 <UART_SetConfig+0x128>
 8004fde:	a201      	add	r2, pc, #4	; (adr r2, 8004fe4 <UART_SetConfig+0xdc>)
 8004fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe4:	08005019 	.word	0x08005019
 8004fe8:	08005031 	.word	0x08005031
 8004fec:	08005031 	.word	0x08005031
 8004ff0:	08005031 	.word	0x08005031
 8004ff4:	08005025 	.word	0x08005025
 8004ff8:	08005031 	.word	0x08005031
 8004ffc:	08005031 	.word	0x08005031
 8005000:	08005031 	.word	0x08005031
 8005004:	0800501f 	.word	0x0800501f
 8005008:	08005031 	.word	0x08005031
 800500c:	08005031 	.word	0x08005031
 8005010:	08005031 	.word	0x08005031
 8005014:	0800502b 	.word	0x0800502b
 8005018:	2300      	movs	r3, #0
 800501a:	77fb      	strb	r3, [r7, #31]
 800501c:	e118      	b.n	8005250 <UART_SetConfig+0x348>
 800501e:	2302      	movs	r3, #2
 8005020:	77fb      	strb	r3, [r7, #31]
 8005022:	e115      	b.n	8005250 <UART_SetConfig+0x348>
 8005024:	2304      	movs	r3, #4
 8005026:	77fb      	strb	r3, [r7, #31]
 8005028:	e112      	b.n	8005250 <UART_SetConfig+0x348>
 800502a:	2308      	movs	r3, #8
 800502c:	77fb      	strb	r3, [r7, #31]
 800502e:	e10f      	b.n	8005250 <UART_SetConfig+0x348>
 8005030:	2310      	movs	r3, #16
 8005032:	77fb      	strb	r3, [r7, #31]
 8005034:	e10c      	b.n	8005250 <UART_SetConfig+0x348>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a68      	ldr	r2, [pc, #416]	; (80051dc <UART_SetConfig+0x2d4>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d120      	bne.n	8005082 <UART_SetConfig+0x17a>
 8005040:	4b64      	ldr	r3, [pc, #400]	; (80051d4 <UART_SetConfig+0x2cc>)
 8005042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005046:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800504a:	2b30      	cmp	r3, #48	; 0x30
 800504c:	d013      	beq.n	8005076 <UART_SetConfig+0x16e>
 800504e:	2b30      	cmp	r3, #48	; 0x30
 8005050:	d814      	bhi.n	800507c <UART_SetConfig+0x174>
 8005052:	2b20      	cmp	r3, #32
 8005054:	d009      	beq.n	800506a <UART_SetConfig+0x162>
 8005056:	2b20      	cmp	r3, #32
 8005058:	d810      	bhi.n	800507c <UART_SetConfig+0x174>
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <UART_SetConfig+0x15c>
 800505e:	2b10      	cmp	r3, #16
 8005060:	d006      	beq.n	8005070 <UART_SetConfig+0x168>
 8005062:	e00b      	b.n	800507c <UART_SetConfig+0x174>
 8005064:	2300      	movs	r3, #0
 8005066:	77fb      	strb	r3, [r7, #31]
 8005068:	e0f2      	b.n	8005250 <UART_SetConfig+0x348>
 800506a:	2302      	movs	r3, #2
 800506c:	77fb      	strb	r3, [r7, #31]
 800506e:	e0ef      	b.n	8005250 <UART_SetConfig+0x348>
 8005070:	2304      	movs	r3, #4
 8005072:	77fb      	strb	r3, [r7, #31]
 8005074:	e0ec      	b.n	8005250 <UART_SetConfig+0x348>
 8005076:	2308      	movs	r3, #8
 8005078:	77fb      	strb	r3, [r7, #31]
 800507a:	e0e9      	b.n	8005250 <UART_SetConfig+0x348>
 800507c:	2310      	movs	r3, #16
 800507e:	77fb      	strb	r3, [r7, #31]
 8005080:	e0e6      	b.n	8005250 <UART_SetConfig+0x348>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a56      	ldr	r2, [pc, #344]	; (80051e0 <UART_SetConfig+0x2d8>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d120      	bne.n	80050ce <UART_SetConfig+0x1c6>
 800508c:	4b51      	ldr	r3, [pc, #324]	; (80051d4 <UART_SetConfig+0x2cc>)
 800508e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005092:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005096:	2bc0      	cmp	r3, #192	; 0xc0
 8005098:	d013      	beq.n	80050c2 <UART_SetConfig+0x1ba>
 800509a:	2bc0      	cmp	r3, #192	; 0xc0
 800509c:	d814      	bhi.n	80050c8 <UART_SetConfig+0x1c0>
 800509e:	2b80      	cmp	r3, #128	; 0x80
 80050a0:	d009      	beq.n	80050b6 <UART_SetConfig+0x1ae>
 80050a2:	2b80      	cmp	r3, #128	; 0x80
 80050a4:	d810      	bhi.n	80050c8 <UART_SetConfig+0x1c0>
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d002      	beq.n	80050b0 <UART_SetConfig+0x1a8>
 80050aa:	2b40      	cmp	r3, #64	; 0x40
 80050ac:	d006      	beq.n	80050bc <UART_SetConfig+0x1b4>
 80050ae:	e00b      	b.n	80050c8 <UART_SetConfig+0x1c0>
 80050b0:	2300      	movs	r3, #0
 80050b2:	77fb      	strb	r3, [r7, #31]
 80050b4:	e0cc      	b.n	8005250 <UART_SetConfig+0x348>
 80050b6:	2302      	movs	r3, #2
 80050b8:	77fb      	strb	r3, [r7, #31]
 80050ba:	e0c9      	b.n	8005250 <UART_SetConfig+0x348>
 80050bc:	2304      	movs	r3, #4
 80050be:	77fb      	strb	r3, [r7, #31]
 80050c0:	e0c6      	b.n	8005250 <UART_SetConfig+0x348>
 80050c2:	2308      	movs	r3, #8
 80050c4:	77fb      	strb	r3, [r7, #31]
 80050c6:	e0c3      	b.n	8005250 <UART_SetConfig+0x348>
 80050c8:	2310      	movs	r3, #16
 80050ca:	77fb      	strb	r3, [r7, #31]
 80050cc:	e0c0      	b.n	8005250 <UART_SetConfig+0x348>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a44      	ldr	r2, [pc, #272]	; (80051e4 <UART_SetConfig+0x2dc>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d125      	bne.n	8005124 <UART_SetConfig+0x21c>
 80050d8:	4b3e      	ldr	r3, [pc, #248]	; (80051d4 <UART_SetConfig+0x2cc>)
 80050da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050e6:	d017      	beq.n	8005118 <UART_SetConfig+0x210>
 80050e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ec:	d817      	bhi.n	800511e <UART_SetConfig+0x216>
 80050ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050f2:	d00b      	beq.n	800510c <UART_SetConfig+0x204>
 80050f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050f8:	d811      	bhi.n	800511e <UART_SetConfig+0x216>
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <UART_SetConfig+0x1fe>
 80050fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005102:	d006      	beq.n	8005112 <UART_SetConfig+0x20a>
 8005104:	e00b      	b.n	800511e <UART_SetConfig+0x216>
 8005106:	2300      	movs	r3, #0
 8005108:	77fb      	strb	r3, [r7, #31]
 800510a:	e0a1      	b.n	8005250 <UART_SetConfig+0x348>
 800510c:	2302      	movs	r3, #2
 800510e:	77fb      	strb	r3, [r7, #31]
 8005110:	e09e      	b.n	8005250 <UART_SetConfig+0x348>
 8005112:	2304      	movs	r3, #4
 8005114:	77fb      	strb	r3, [r7, #31]
 8005116:	e09b      	b.n	8005250 <UART_SetConfig+0x348>
 8005118:	2308      	movs	r3, #8
 800511a:	77fb      	strb	r3, [r7, #31]
 800511c:	e098      	b.n	8005250 <UART_SetConfig+0x348>
 800511e:	2310      	movs	r3, #16
 8005120:	77fb      	strb	r3, [r7, #31]
 8005122:	e095      	b.n	8005250 <UART_SetConfig+0x348>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a2f      	ldr	r2, [pc, #188]	; (80051e8 <UART_SetConfig+0x2e0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d125      	bne.n	800517a <UART_SetConfig+0x272>
 800512e:	4b29      	ldr	r3, [pc, #164]	; (80051d4 <UART_SetConfig+0x2cc>)
 8005130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005134:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005138:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800513c:	d017      	beq.n	800516e <UART_SetConfig+0x266>
 800513e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005142:	d817      	bhi.n	8005174 <UART_SetConfig+0x26c>
 8005144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005148:	d00b      	beq.n	8005162 <UART_SetConfig+0x25a>
 800514a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800514e:	d811      	bhi.n	8005174 <UART_SetConfig+0x26c>
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <UART_SetConfig+0x254>
 8005154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005158:	d006      	beq.n	8005168 <UART_SetConfig+0x260>
 800515a:	e00b      	b.n	8005174 <UART_SetConfig+0x26c>
 800515c:	2301      	movs	r3, #1
 800515e:	77fb      	strb	r3, [r7, #31]
 8005160:	e076      	b.n	8005250 <UART_SetConfig+0x348>
 8005162:	2302      	movs	r3, #2
 8005164:	77fb      	strb	r3, [r7, #31]
 8005166:	e073      	b.n	8005250 <UART_SetConfig+0x348>
 8005168:	2304      	movs	r3, #4
 800516a:	77fb      	strb	r3, [r7, #31]
 800516c:	e070      	b.n	8005250 <UART_SetConfig+0x348>
 800516e:	2308      	movs	r3, #8
 8005170:	77fb      	strb	r3, [r7, #31]
 8005172:	e06d      	b.n	8005250 <UART_SetConfig+0x348>
 8005174:	2310      	movs	r3, #16
 8005176:	77fb      	strb	r3, [r7, #31]
 8005178:	e06a      	b.n	8005250 <UART_SetConfig+0x348>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a1b      	ldr	r2, [pc, #108]	; (80051ec <UART_SetConfig+0x2e4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d138      	bne.n	80051f6 <UART_SetConfig+0x2ee>
 8005184:	4b13      	ldr	r3, [pc, #76]	; (80051d4 <UART_SetConfig+0x2cc>)
 8005186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800518e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005192:	d017      	beq.n	80051c4 <UART_SetConfig+0x2bc>
 8005194:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005198:	d82a      	bhi.n	80051f0 <UART_SetConfig+0x2e8>
 800519a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800519e:	d00b      	beq.n	80051b8 <UART_SetConfig+0x2b0>
 80051a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051a4:	d824      	bhi.n	80051f0 <UART_SetConfig+0x2e8>
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <UART_SetConfig+0x2aa>
 80051aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ae:	d006      	beq.n	80051be <UART_SetConfig+0x2b6>
 80051b0:	e01e      	b.n	80051f0 <UART_SetConfig+0x2e8>
 80051b2:	2300      	movs	r3, #0
 80051b4:	77fb      	strb	r3, [r7, #31]
 80051b6:	e04b      	b.n	8005250 <UART_SetConfig+0x348>
 80051b8:	2302      	movs	r3, #2
 80051ba:	77fb      	strb	r3, [r7, #31]
 80051bc:	e048      	b.n	8005250 <UART_SetConfig+0x348>
 80051be:	2304      	movs	r3, #4
 80051c0:	77fb      	strb	r3, [r7, #31]
 80051c2:	e045      	b.n	8005250 <UART_SetConfig+0x348>
 80051c4:	2308      	movs	r3, #8
 80051c6:	77fb      	strb	r3, [r7, #31]
 80051c8:	e042      	b.n	8005250 <UART_SetConfig+0x348>
 80051ca:	bf00      	nop
 80051cc:	efff69f3 	.word	0xefff69f3
 80051d0:	40011000 	.word	0x40011000
 80051d4:	40023800 	.word	0x40023800
 80051d8:	40004400 	.word	0x40004400
 80051dc:	40004800 	.word	0x40004800
 80051e0:	40004c00 	.word	0x40004c00
 80051e4:	40005000 	.word	0x40005000
 80051e8:	40011400 	.word	0x40011400
 80051ec:	40007800 	.word	0x40007800
 80051f0:	2310      	movs	r3, #16
 80051f2:	77fb      	strb	r3, [r7, #31]
 80051f4:	e02c      	b.n	8005250 <UART_SetConfig+0x348>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a72      	ldr	r2, [pc, #456]	; (80053c4 <UART_SetConfig+0x4bc>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d125      	bne.n	800524c <UART_SetConfig+0x344>
 8005200:	4b71      	ldr	r3, [pc, #452]	; (80053c8 <UART_SetConfig+0x4c0>)
 8005202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005206:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800520a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800520e:	d017      	beq.n	8005240 <UART_SetConfig+0x338>
 8005210:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005214:	d817      	bhi.n	8005246 <UART_SetConfig+0x33e>
 8005216:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800521a:	d00b      	beq.n	8005234 <UART_SetConfig+0x32c>
 800521c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005220:	d811      	bhi.n	8005246 <UART_SetConfig+0x33e>
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <UART_SetConfig+0x326>
 8005226:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800522a:	d006      	beq.n	800523a <UART_SetConfig+0x332>
 800522c:	e00b      	b.n	8005246 <UART_SetConfig+0x33e>
 800522e:	2300      	movs	r3, #0
 8005230:	77fb      	strb	r3, [r7, #31]
 8005232:	e00d      	b.n	8005250 <UART_SetConfig+0x348>
 8005234:	2302      	movs	r3, #2
 8005236:	77fb      	strb	r3, [r7, #31]
 8005238:	e00a      	b.n	8005250 <UART_SetConfig+0x348>
 800523a:	2304      	movs	r3, #4
 800523c:	77fb      	strb	r3, [r7, #31]
 800523e:	e007      	b.n	8005250 <UART_SetConfig+0x348>
 8005240:	2308      	movs	r3, #8
 8005242:	77fb      	strb	r3, [r7, #31]
 8005244:	e004      	b.n	8005250 <UART_SetConfig+0x348>
 8005246:	2310      	movs	r3, #16
 8005248:	77fb      	strb	r3, [r7, #31]
 800524a:	e001      	b.n	8005250 <UART_SetConfig+0x348>
 800524c:	2310      	movs	r3, #16
 800524e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005258:	d15b      	bne.n	8005312 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800525a:	7ffb      	ldrb	r3, [r7, #31]
 800525c:	2b08      	cmp	r3, #8
 800525e:	d828      	bhi.n	80052b2 <UART_SetConfig+0x3aa>
 8005260:	a201      	add	r2, pc, #4	; (adr r2, 8005268 <UART_SetConfig+0x360>)
 8005262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005266:	bf00      	nop
 8005268:	0800528d 	.word	0x0800528d
 800526c:	08005295 	.word	0x08005295
 8005270:	0800529d 	.word	0x0800529d
 8005274:	080052b3 	.word	0x080052b3
 8005278:	080052a3 	.word	0x080052a3
 800527c:	080052b3 	.word	0x080052b3
 8005280:	080052b3 	.word	0x080052b3
 8005284:	080052b3 	.word	0x080052b3
 8005288:	080052ab 	.word	0x080052ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800528c:	f7ff f99e 	bl	80045cc <HAL_RCC_GetPCLK1Freq>
 8005290:	61b8      	str	r0, [r7, #24]
        break;
 8005292:	e013      	b.n	80052bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005294:	f7ff f9ae 	bl	80045f4 <HAL_RCC_GetPCLK2Freq>
 8005298:	61b8      	str	r0, [r7, #24]
        break;
 800529a:	e00f      	b.n	80052bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800529c:	4b4b      	ldr	r3, [pc, #300]	; (80053cc <UART_SetConfig+0x4c4>)
 800529e:	61bb      	str	r3, [r7, #24]
        break;
 80052a0:	e00c      	b.n	80052bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052a2:	f7ff f881 	bl	80043a8 <HAL_RCC_GetSysClockFreq>
 80052a6:	61b8      	str	r0, [r7, #24]
        break;
 80052a8:	e008      	b.n	80052bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ae:	61bb      	str	r3, [r7, #24]
        break;
 80052b0:	e004      	b.n	80052bc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	77bb      	strb	r3, [r7, #30]
        break;
 80052ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d074      	beq.n	80053ac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	005a      	lsls	r2, r3, #1
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	085b      	lsrs	r3, r3, #1
 80052cc:	441a      	add	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	2b0f      	cmp	r3, #15
 80052dc:	d916      	bls.n	800530c <UART_SetConfig+0x404>
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e4:	d212      	bcs.n	800530c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	f023 030f 	bic.w	r3, r3, #15
 80052ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	085b      	lsrs	r3, r3, #1
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	f003 0307 	and.w	r3, r3, #7
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	89fb      	ldrh	r3, [r7, #14]
 80052fe:	4313      	orrs	r3, r2
 8005300:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	89fa      	ldrh	r2, [r7, #14]
 8005308:	60da      	str	r2, [r3, #12]
 800530a:	e04f      	b.n	80053ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	77bb      	strb	r3, [r7, #30]
 8005310:	e04c      	b.n	80053ac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005312:	7ffb      	ldrb	r3, [r7, #31]
 8005314:	2b08      	cmp	r3, #8
 8005316:	d828      	bhi.n	800536a <UART_SetConfig+0x462>
 8005318:	a201      	add	r2, pc, #4	; (adr r2, 8005320 <UART_SetConfig+0x418>)
 800531a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531e:	bf00      	nop
 8005320:	08005345 	.word	0x08005345
 8005324:	0800534d 	.word	0x0800534d
 8005328:	08005355 	.word	0x08005355
 800532c:	0800536b 	.word	0x0800536b
 8005330:	0800535b 	.word	0x0800535b
 8005334:	0800536b 	.word	0x0800536b
 8005338:	0800536b 	.word	0x0800536b
 800533c:	0800536b 	.word	0x0800536b
 8005340:	08005363 	.word	0x08005363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005344:	f7ff f942 	bl	80045cc <HAL_RCC_GetPCLK1Freq>
 8005348:	61b8      	str	r0, [r7, #24]
        break;
 800534a:	e013      	b.n	8005374 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800534c:	f7ff f952 	bl	80045f4 <HAL_RCC_GetPCLK2Freq>
 8005350:	61b8      	str	r0, [r7, #24]
        break;
 8005352:	e00f      	b.n	8005374 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005354:	4b1d      	ldr	r3, [pc, #116]	; (80053cc <UART_SetConfig+0x4c4>)
 8005356:	61bb      	str	r3, [r7, #24]
        break;
 8005358:	e00c      	b.n	8005374 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800535a:	f7ff f825 	bl	80043a8 <HAL_RCC_GetSysClockFreq>
 800535e:	61b8      	str	r0, [r7, #24]
        break;
 8005360:	e008      	b.n	8005374 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005366:	61bb      	str	r3, [r7, #24]
        break;
 8005368:	e004      	b.n	8005374 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800536a:	2300      	movs	r3, #0
 800536c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	77bb      	strb	r3, [r7, #30]
        break;
 8005372:	bf00      	nop
    }

    if (pclk != 0U)
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d018      	beq.n	80053ac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	085a      	lsrs	r2, r3, #1
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	441a      	add	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	fbb2 f3f3 	udiv	r3, r2, r3
 800538c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	2b0f      	cmp	r3, #15
 8005392:	d909      	bls.n	80053a8 <UART_SetConfig+0x4a0>
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800539a:	d205      	bcs.n	80053a8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	b29a      	uxth	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	60da      	str	r2, [r3, #12]
 80053a6:	e001      	b.n	80053ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80053b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3720      	adds	r7, #32
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	40007c00 	.word	0x40007c00
 80053c8:	40023800 	.word	0x40023800
 80053cc:	00f42400 	.word	0x00f42400

080053d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00a      	beq.n	80053fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00a      	beq.n	800543e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	f003 0308 	and.w	r3, r3, #8
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	f003 0310 	and.w	r3, r3, #16
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00a      	beq.n	8005482 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	f003 0320 	and.w	r3, r3, #32
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d01a      	beq.n	80054e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ce:	d10a      	bne.n	80054e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00a      	beq.n	8005508 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	605a      	str	r2, [r3, #4]
  }
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af02      	add	r7, sp, #8
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005524:	f7fd f802 	bl	800252c <HAL_GetTick>
 8005528:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0308 	and.w	r3, r3, #8
 8005534:	2b08      	cmp	r3, #8
 8005536:	d10e      	bne.n	8005556 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005538:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f831 	bl	80055ae <UART_WaitOnFlagUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e027      	b.n	80055a6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b04      	cmp	r3, #4
 8005562:	d10e      	bne.n	8005582 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005564:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f81b 	bl	80055ae <UART_WaitOnFlagUntilTimeout>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e011      	b.n	80055a6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2220      	movs	r2, #32
 8005586:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2220      	movs	r2, #32
 800558c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b09c      	sub	sp, #112	; 0x70
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	60f8      	str	r0, [r7, #12]
 80055b6:	60b9      	str	r1, [r7, #8]
 80055b8:	603b      	str	r3, [r7, #0]
 80055ba:	4613      	mov	r3, r2
 80055bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055be:	e0a7      	b.n	8005710 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c6:	f000 80a3 	beq.w	8005710 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ca:	f7fc ffaf 	bl	800252c <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d302      	bcc.n	80055e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80055da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d13f      	bne.n	8005660 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055e8:	e853 3f00 	ldrex	r3, [r3]
 80055ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055f4:	667b      	str	r3, [r7, #100]	; 0x64
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005600:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005602:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005604:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005606:	e841 2300 	strex	r3, r2, [r1]
 800560a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800560c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1e6      	bne.n	80055e0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3308      	adds	r3, #8
 8005618:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005624:	f023 0301 	bic.w	r3, r3, #1
 8005628:	663b      	str	r3, [r7, #96]	; 0x60
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3308      	adds	r3, #8
 8005630:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005632:	64ba      	str	r2, [r7, #72]	; 0x48
 8005634:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005638:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e5      	bne.n	8005612 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2220      	movs	r2, #32
 800564a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2220      	movs	r2, #32
 8005650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e068      	b.n	8005732 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0304 	and.w	r3, r3, #4
 800566a:	2b00      	cmp	r3, #0
 800566c:	d050      	beq.n	8005710 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800567c:	d148      	bne.n	8005710 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005686:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005690:	e853 3f00 	ldrex	r3, [r3]
 8005694:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800569c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	461a      	mov	r2, r3
 80056a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056a6:	637b      	str	r3, [r7, #52]	; 0x34
 80056a8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056ae:	e841 2300 	strex	r3, r2, [r1]
 80056b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1e6      	bne.n	8005688 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3308      	adds	r3, #8
 80056c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	613b      	str	r3, [r7, #16]
   return(result);
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	f023 0301 	bic.w	r3, r3, #1
 80056d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3308      	adds	r3, #8
 80056d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056da:	623a      	str	r2, [r7, #32]
 80056dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	69f9      	ldr	r1, [r7, #28]
 80056e0:	6a3a      	ldr	r2, [r7, #32]
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e5      	bne.n	80056ba <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2220      	movs	r2, #32
 80056f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2220      	movs	r2, #32
 80056f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2220      	movs	r2, #32
 8005700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e010      	b.n	8005732 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	69da      	ldr	r2, [r3, #28]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	4013      	ands	r3, r2
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	429a      	cmp	r2, r3
 800571e:	bf0c      	ite	eq
 8005720:	2301      	moveq	r3, #1
 8005722:	2300      	movne	r3, #0
 8005724:	b2db      	uxtb	r3, r3
 8005726:	461a      	mov	r2, r3
 8005728:	79fb      	ldrb	r3, [r7, #7]
 800572a:	429a      	cmp	r2, r3
 800572c:	f43f af48 	beq.w	80055c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3770      	adds	r7, #112	; 0x70
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
	...

0800573c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800573c:	b084      	sub	sp, #16
 800573e:	b580      	push	{r7, lr}
 8005740:	b084      	sub	sp, #16
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	f107 001c 	add.w	r0, r7, #28
 800574a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	2b01      	cmp	r3, #1
 8005752:	d120      	bne.n	8005796 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005758:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68da      	ldr	r2, [r3, #12]
 8005764:	4b20      	ldr	r3, [pc, #128]	; (80057e8 <USB_CoreInit+0xac>)
 8005766:	4013      	ands	r3, r2
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800577a:	2b01      	cmp	r3, #1
 800577c:	d105      	bne.n	800578a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fa96 	bl	8005cbc <USB_CoreReset>
 8005790:	4603      	mov	r3, r0
 8005792:	73fb      	strb	r3, [r7, #15]
 8005794:	e010      	b.n	80057b8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fa8a 	bl	8005cbc <USB_CoreReset>
 80057a8:	4603      	mov	r3, r0
 80057aa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80057b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d10b      	bne.n	80057d6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f043 0206 	orr.w	r2, r3, #6
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f043 0220 	orr.w	r2, r3, #32
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057e2:	b004      	add	sp, #16
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	ffbdffbf 	.word	0xffbdffbf

080057ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f023 0201 	bic.w	r2, r3, #1
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr

0800580e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b084      	sub	sp, #16
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
 8005816:	460b      	mov	r3, r1
 8005818:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800581a:	2300      	movs	r3, #0
 800581c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800582a:	78fb      	ldrb	r3, [r7, #3]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d115      	bne.n	800585c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800583c:	2001      	movs	r0, #1
 800583e:	f7fc fe81 	bl	8002544 <HAL_Delay>
      ms++;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	3301      	adds	r3, #1
 8005846:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 fa29 	bl	8005ca0 <USB_GetMode>
 800584e:	4603      	mov	r3, r0
 8005850:	2b01      	cmp	r3, #1
 8005852:	d01e      	beq.n	8005892 <USB_SetCurrentMode+0x84>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2b31      	cmp	r3, #49	; 0x31
 8005858:	d9f0      	bls.n	800583c <USB_SetCurrentMode+0x2e>
 800585a:	e01a      	b.n	8005892 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800585c:	78fb      	ldrb	r3, [r7, #3]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d115      	bne.n	800588e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800586e:	2001      	movs	r0, #1
 8005870:	f7fc fe68 	bl	8002544 <HAL_Delay>
      ms++;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	3301      	adds	r3, #1
 8005878:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fa10 	bl	8005ca0 <USB_GetMode>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d005      	beq.n	8005892 <USB_SetCurrentMode+0x84>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b31      	cmp	r3, #49	; 0x31
 800588a:	d9f0      	bls.n	800586e <USB_SetCurrentMode+0x60>
 800588c:	e001      	b.n	8005892 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e005      	b.n	800589e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2b32      	cmp	r3, #50	; 0x32
 8005896:	d101      	bne.n	800589c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e000      	b.n	800589e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
	...

080058a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058a8:	b084      	sub	sp, #16
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b086      	sub	sp, #24
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80058b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80058c2:	2300      	movs	r3, #0
 80058c4:	613b      	str	r3, [r7, #16]
 80058c6:	e009      	b.n	80058dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	3340      	adds	r3, #64	; 0x40
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	2200      	movs	r2, #0
 80058d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	3301      	adds	r3, #1
 80058da:	613b      	str	r3, [r7, #16]
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	2b0e      	cmp	r3, #14
 80058e0:	d9f2      	bls.n	80058c8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80058e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d11c      	bne.n	8005922 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058f6:	f043 0302 	orr.w	r3, r3, #2
 80058fa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	e005      	b.n	800592e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005926:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005934:	461a      	mov	r2, r3
 8005936:	2300      	movs	r3, #0
 8005938:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005940:	4619      	mov	r1, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005948:	461a      	mov	r2, r3
 800594a:	680b      	ldr	r3, [r1, #0]
 800594c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800594e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005950:	2b01      	cmp	r3, #1
 8005952:	d10c      	bne.n	800596e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005956:	2b00      	cmp	r3, #0
 8005958:	d104      	bne.n	8005964 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800595a:	2100      	movs	r1, #0
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f965 	bl	8005c2c <USB_SetDevSpeed>
 8005962:	e008      	b.n	8005976 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005964:	2101      	movs	r1, #1
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f960 	bl	8005c2c <USB_SetDevSpeed>
 800596c:	e003      	b.n	8005976 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800596e:	2103      	movs	r1, #3
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f95b 	bl	8005c2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005976:	2110      	movs	r1, #16
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f8f3 	bl	8005b64 <USB_FlushTxFifo>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f91f 	bl	8005bcc <USB_FlushRxFifo>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599e:	461a      	mov	r2, r3
 80059a0:	2300      	movs	r3, #0
 80059a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059aa:	461a      	mov	r2, r3
 80059ac:	2300      	movs	r3, #0
 80059ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b6:	461a      	mov	r2, r3
 80059b8:	2300      	movs	r3, #0
 80059ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059bc:	2300      	movs	r3, #0
 80059be:	613b      	str	r3, [r7, #16]
 80059c0:	e043      	b.n	8005a4a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059d8:	d118      	bne.n	8005a0c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10a      	bne.n	80059f6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ec:	461a      	mov	r2, r3
 80059ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059f2:	6013      	str	r3, [r2, #0]
 80059f4:	e013      	b.n	8005a1e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a02:	461a      	mov	r2, r3
 8005a04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a08:	6013      	str	r3, [r2, #0]
 8005a0a:	e008      	b.n	8005a1e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a18:	461a      	mov	r2, r3
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	3301      	adds	r3, #1
 8005a48:	613b      	str	r3, [r7, #16]
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d3b7      	bcc.n	80059c2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a52:	2300      	movs	r3, #0
 8005a54:	613b      	str	r3, [r7, #16]
 8005a56:	e043      	b.n	8005ae0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a6e:	d118      	bne.n	8005aa2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10a      	bne.n	8005a8c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a82:	461a      	mov	r2, r3
 8005a84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a88:	6013      	str	r3, [r2, #0]
 8005a8a:	e013      	b.n	8005ab4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a98:	461a      	mov	r2, r3
 8005a9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	e008      	b.n	8005ab4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aae:	461a      	mov	r2, r3
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	015a      	lsls	r2, r3, #5
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	4413      	add	r3, r2
 8005ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ad8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	3301      	adds	r3, #1
 8005ade:	613b      	str	r3, [r7, #16]
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d3b7      	bcc.n	8005a58 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005af6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005afa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005b08:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d105      	bne.n	8005b1c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	f043 0210 	orr.w	r2, r3, #16
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	699a      	ldr	r2, [r3, #24]
 8005b20:	4b0e      	ldr	r3, [pc, #56]	; (8005b5c <USB_DevInit+0x2b4>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d005      	beq.n	8005b3a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	f043 0208 	orr.w	r2, r3, #8
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d105      	bne.n	8005b4c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	699a      	ldr	r2, [r3, #24]
 8005b44:	4b06      	ldr	r3, [pc, #24]	; (8005b60 <USB_DevInit+0x2b8>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b58:	b004      	add	sp, #16
 8005b5a:	4770      	bx	lr
 8005b5c:	803c3800 	.word	0x803c3800
 8005b60:	40000004 	.word	0x40000004

08005b64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	3301      	adds	r3, #1
 8005b76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4a13      	ldr	r2, [pc, #76]	; (8005bc8 <USB_FlushTxFifo+0x64>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d901      	bls.n	8005b84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e01b      	b.n	8005bbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	daf2      	bge.n	8005b72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	019b      	lsls	r3, r3, #6
 8005b94:	f043 0220 	orr.w	r2, r3, #32
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4a08      	ldr	r2, [pc, #32]	; (8005bc8 <USB_FlushTxFifo+0x64>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d901      	bls.n	8005bae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e006      	b.n	8005bbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	f003 0320 	and.w	r3, r3, #32
 8005bb6:	2b20      	cmp	r3, #32
 8005bb8:	d0f0      	beq.n	8005b9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	00030d40 	.word	0x00030d40

08005bcc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4a11      	ldr	r2, [pc, #68]	; (8005c28 <USB_FlushRxFifo+0x5c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d901      	bls.n	8005bea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e018      	b.n	8005c1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	daf2      	bge.n	8005bd8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2210      	movs	r2, #16
 8005bfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	4a08      	ldr	r2, [pc, #32]	; (8005c28 <USB_FlushRxFifo+0x5c>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d901      	bls.n	8005c0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e006      	b.n	8005c1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f003 0310 	and.w	r3, r3, #16
 8005c16:	2b10      	cmp	r3, #16
 8005c18:	d0f0      	beq.n	8005bfc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	00030d40 	.word	0x00030d40

08005c2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	460b      	mov	r3, r1
 8005c36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	78fb      	ldrb	r3, [r7, #3]
 8005c46:	68f9      	ldr	r1, [r7, #12]
 8005c48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b085      	sub	sp, #20
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c78:	f023 0303 	bic.w	r3, r3, #3
 8005c7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c8c:	f043 0302 	orr.w	r3, r3, #2
 8005c90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	695b      	ldr	r3, [r3, #20]
 8005cac:	f003 0301 	and.w	r3, r3, #1
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4a13      	ldr	r2, [pc, #76]	; (8005d20 <USB_CoreReset+0x64>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d901      	bls.n	8005cda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e01b      	b.n	8005d12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	daf2      	bge.n	8005cc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	f043 0201 	orr.w	r2, r3, #1
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4a09      	ldr	r2, [pc, #36]	; (8005d20 <USB_CoreReset+0x64>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d901      	bls.n	8005d04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e006      	b.n	8005d12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d0f0      	beq.n	8005cf2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	00030d40 	.word	0x00030d40

08005d24 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005d28:	bf00      	nop
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
	...

08005d34 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d3a:	f3ef 8305 	mrs	r3, IPSR
 8005d3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d40:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10f      	bne.n	8005d66 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d46:	f3ef 8310 	mrs	r3, PRIMASK
 8005d4a:	607b      	str	r3, [r7, #4]
  return(result);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d105      	bne.n	8005d5e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d52:	f3ef 8311 	mrs	r3, BASEPRI
 8005d56:	603b      	str	r3, [r7, #0]
  return(result);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d007      	beq.n	8005d6e <osKernelInitialize+0x3a>
 8005d5e:	4b0e      	ldr	r3, [pc, #56]	; (8005d98 <osKernelInitialize+0x64>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d103      	bne.n	8005d6e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005d66:	f06f 0305 	mvn.w	r3, #5
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	e00c      	b.n	8005d88 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005d6e:	4b0a      	ldr	r3, [pc, #40]	; (8005d98 <osKernelInitialize+0x64>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d105      	bne.n	8005d82 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005d76:	4b08      	ldr	r3, [pc, #32]	; (8005d98 <osKernelInitialize+0x64>)
 8005d78:	2201      	movs	r2, #1
 8005d7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	e002      	b.n	8005d88 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005d82:	f04f 33ff 	mov.w	r3, #4294967295
 8005d86:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005d88:	68fb      	ldr	r3, [r7, #12]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	200012b4 	.word	0x200012b4

08005d9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005da2:	f3ef 8305 	mrs	r3, IPSR
 8005da6:	60bb      	str	r3, [r7, #8]
  return(result);
 8005da8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10f      	bne.n	8005dce <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dae:	f3ef 8310 	mrs	r3, PRIMASK
 8005db2:	607b      	str	r3, [r7, #4]
  return(result);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d105      	bne.n	8005dc6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005dba:	f3ef 8311 	mrs	r3, BASEPRI
 8005dbe:	603b      	str	r3, [r7, #0]
  return(result);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d007      	beq.n	8005dd6 <osKernelStart+0x3a>
 8005dc6:	4b0f      	ldr	r3, [pc, #60]	; (8005e04 <osKernelStart+0x68>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d103      	bne.n	8005dd6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8005dce:	f06f 0305 	mvn.w	r3, #5
 8005dd2:	60fb      	str	r3, [r7, #12]
 8005dd4:	e010      	b.n	8005df8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005dd6:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <osKernelStart+0x68>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d109      	bne.n	8005df2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005dde:	f7ff ffa1 	bl	8005d24 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005de2:	4b08      	ldr	r3, [pc, #32]	; (8005e04 <osKernelStart+0x68>)
 8005de4:	2202      	movs	r2, #2
 8005de6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005de8:	f001 f8b4 	bl	8006f54 <vTaskStartScheduler>
      stat = osOK;
 8005dec:	2300      	movs	r3, #0
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	e002      	b.n	8005df8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005df2:	f04f 33ff 	mov.w	r3, #4294967295
 8005df6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005df8:	68fb      	ldr	r3, [r7, #12]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	200012b4 	.word	0x200012b4

08005e08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b090      	sub	sp, #64	; 0x40
 8005e0c:	af04      	add	r7, sp, #16
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e14:	2300      	movs	r3, #0
 8005e16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e18:	f3ef 8305 	mrs	r3, IPSR
 8005e1c:	61fb      	str	r3, [r7, #28]
  return(result);
 8005e1e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f040 808f 	bne.w	8005f44 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e26:	f3ef 8310 	mrs	r3, PRIMASK
 8005e2a:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d105      	bne.n	8005e3e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e32:	f3ef 8311 	mrs	r3, BASEPRI
 8005e36:	617b      	str	r3, [r7, #20]
  return(result);
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <osThreadNew+0x3e>
 8005e3e:	4b44      	ldr	r3, [pc, #272]	; (8005f50 <osThreadNew+0x148>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d07e      	beq.n	8005f44 <osThreadNew+0x13c>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d07b      	beq.n	8005f44 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005e4c:	2380      	movs	r3, #128	; 0x80
 8005e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005e50:	2318      	movs	r3, #24
 8005e52:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005e54:	2300      	movs	r3, #0
 8005e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005e58:	f04f 33ff 	mov.w	r3, #4294967295
 8005e5c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d045      	beq.n	8005ef0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <osThreadNew+0x6a>
        name = attr->name;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d002      	beq.n	8005e80 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d008      	beq.n	8005e98 <osThreadNew+0x90>
 8005e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e88:	2b38      	cmp	r3, #56	; 0x38
 8005e8a:	d805      	bhi.n	8005e98 <osThreadNew+0x90>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d001      	beq.n	8005e9c <osThreadNew+0x94>
        return (NULL);
 8005e98:	2300      	movs	r3, #0
 8005e9a:	e054      	b.n	8005f46 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d003      	beq.n	8005eac <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	089b      	lsrs	r3, r3, #2
 8005eaa:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00e      	beq.n	8005ed2 <osThreadNew+0xca>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	2b5b      	cmp	r3, #91	; 0x5b
 8005eba:	d90a      	bls.n	8005ed2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d006      	beq.n	8005ed2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <osThreadNew+0xca>
        mem = 1;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	623b      	str	r3, [r7, #32]
 8005ed0:	e010      	b.n	8005ef4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10c      	bne.n	8005ef4 <osThreadNew+0xec>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d108      	bne.n	8005ef4 <osThreadNew+0xec>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d104      	bne.n	8005ef4 <osThreadNew+0xec>
          mem = 0;
 8005eea:	2300      	movs	r3, #0
 8005eec:	623b      	str	r3, [r7, #32]
 8005eee:	e001      	b.n	8005ef4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005ef4:	6a3b      	ldr	r3, [r7, #32]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d110      	bne.n	8005f1c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f02:	9202      	str	r2, [sp, #8]
 8005f04:	9301      	str	r3, [sp, #4]
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f000 fe3f 	bl	8006b94 <xTaskCreateStatic>
 8005f16:	4603      	mov	r3, r0
 8005f18:	613b      	str	r3, [r7, #16]
 8005f1a:	e013      	b.n	8005f44 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d110      	bne.n	8005f44 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	f107 0310 	add.w	r3, r7, #16
 8005f2a:	9301      	str	r3, [sp, #4]
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 fe90 	bl	8006c5a <xTaskCreate>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d001      	beq.n	8005f44 <osThreadNew+0x13c>
          hTask = NULL;
 8005f40:	2300      	movs	r3, #0
 8005f42:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f44:	693b      	ldr	r3, [r7, #16]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3730      	adds	r7, #48	; 0x30
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	200012b4 	.word	0x200012b4

08005f54 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f5c:	f3ef 8305 	mrs	r3, IPSR
 8005f60:	613b      	str	r3, [r7, #16]
  return(result);
 8005f62:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10f      	bne.n	8005f88 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f68:	f3ef 8310 	mrs	r3, PRIMASK
 8005f6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d105      	bne.n	8005f80 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f74:	f3ef 8311 	mrs	r3, BASEPRI
 8005f78:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d007      	beq.n	8005f90 <osDelay+0x3c>
 8005f80:	4b0a      	ldr	r3, [pc, #40]	; (8005fac <osDelay+0x58>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d103      	bne.n	8005f90 <osDelay+0x3c>
    stat = osErrorISR;
 8005f88:	f06f 0305 	mvn.w	r3, #5
 8005f8c:	617b      	str	r3, [r7, #20]
 8005f8e:	e007      	b.n	8005fa0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005f90:	2300      	movs	r3, #0
 8005f92:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 ffa4 	bl	8006ee8 <vTaskDelay>
    }
  }

  return (stat);
 8005fa0:	697b      	ldr	r3, [r7, #20]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3718      	adds	r7, #24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	200012b4 	.word	0x200012b4

08005fb0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4a07      	ldr	r2, [pc, #28]	; (8005fdc <vApplicationGetIdleTaskMemory+0x2c>)
 8005fc0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	4a06      	ldr	r2, [pc, #24]	; (8005fe0 <vApplicationGetIdleTaskMemory+0x30>)
 8005fc6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2280      	movs	r2, #128	; 0x80
 8005fcc:	601a      	str	r2, [r3, #0]
}
 8005fce:	bf00      	nop
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	200012b8 	.word	0x200012b8
 8005fe0:	20001314 	.word	0x20001314

08005fe4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4a07      	ldr	r2, [pc, #28]	; (8006010 <vApplicationGetTimerTaskMemory+0x2c>)
 8005ff4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	4a06      	ldr	r2, [pc, #24]	; (8006014 <vApplicationGetTimerTaskMemory+0x30>)
 8005ffa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006002:	601a      	str	r2, [r3, #0]
}
 8006004:	bf00      	nop
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	20001514 	.word	0x20001514
 8006014:	20001570 	.word	0x20001570

08006018 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f103 0208 	add.w	r2, r3, #8
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f04f 32ff 	mov.w	r2, #4294967295
 8006030:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f103 0208 	add.w	r2, r3, #8
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f103 0208 	add.w	r2, r3, #8
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006066:	bf00      	nop
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006072:	b480      	push	{r7}
 8006074:	b085      	sub	sp, #20
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	601a      	str	r2, [r3, #0]
}
 80060ae:	bf00      	nop
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060ba:	b480      	push	{r7}
 80060bc:	b085      	sub	sp, #20
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
 80060c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d0:	d103      	bne.n	80060da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	e00c      	b.n	80060f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	3308      	adds	r3, #8
 80060de:	60fb      	str	r3, [r7, #12]
 80060e0:	e002      	b.n	80060e8 <vListInsert+0x2e>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	60fb      	str	r3, [r7, #12]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d2f6      	bcs.n	80060e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	683a      	ldr	r2, [r7, #0]
 8006102:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	601a      	str	r2, [r3, #0]
}
 8006120:	bf00      	nop
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	6892      	ldr	r2, [r2, #8]
 8006142:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	6852      	ldr	r2, [r2, #4]
 800614c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	429a      	cmp	r2, r3
 8006156:	d103      	bne.n	8006160 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689a      	ldr	r2, [r3, #8]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	1e5a      	subs	r2, r3, #1
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10c      	bne.n	80061ae <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006198:	b672      	cpsid	i
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	b662      	cpsie	i
 80061a8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80061aa:	bf00      	nop
 80061ac:	e7fe      	b.n	80061ac <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80061ae:	f002 f8c5 	bl	800833c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ba:	68f9      	ldr	r1, [r7, #12]
 80061bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061be:	fb01 f303 	mul.w	r3, r1, r3
 80061c2:	441a      	add	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061de:	3b01      	subs	r3, #1
 80061e0:	68f9      	ldr	r1, [r7, #12]
 80061e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061e4:	fb01 f303 	mul.w	r3, r1, r3
 80061e8:	441a      	add	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	22ff      	movs	r2, #255	; 0xff
 80061f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	22ff      	movs	r2, #255	; 0xff
 80061fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d114      	bne.n	800622e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d01a      	beq.n	8006242 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	3310      	adds	r3, #16
 8006210:	4618      	mov	r0, r3
 8006212:	f001 f949 	bl	80074a8 <xTaskRemoveFromEventList>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d012      	beq.n	8006242 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800621c:	4b0c      	ldr	r3, [pc, #48]	; (8006250 <xQueueGenericReset+0xd0>)
 800621e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	e009      	b.n	8006242 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3310      	adds	r3, #16
 8006232:	4618      	mov	r0, r3
 8006234:	f7ff fef0 	bl	8006018 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	3324      	adds	r3, #36	; 0x24
 800623c:	4618      	mov	r0, r3
 800623e:	f7ff feeb 	bl	8006018 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006242:	f002 f8af 	bl	80083a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006246:	2301      	movs	r3, #1
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	e000ed04 	.word	0xe000ed04

08006254 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006254:	b580      	push	{r7, lr}
 8006256:	b08e      	sub	sp, #56	; 0x38
 8006258:	af02      	add	r7, sp, #8
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10c      	bne.n	8006282 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626c:	b672      	cpsid	i
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	b662      	cpsie	i
 800627c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800627e:	bf00      	nop
 8006280:	e7fe      	b.n	8006280 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10c      	bne.n	80062a2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628c:	b672      	cpsid	i
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	b662      	cpsie	i
 800629c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800629e:	bf00      	nop
 80062a0:	e7fe      	b.n	80062a0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d002      	beq.n	80062ae <xQueueGenericCreateStatic+0x5a>
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d001      	beq.n	80062b2 <xQueueGenericCreateStatic+0x5e>
 80062ae:	2301      	movs	r3, #1
 80062b0:	e000      	b.n	80062b4 <xQueueGenericCreateStatic+0x60>
 80062b2:	2300      	movs	r3, #0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10c      	bne.n	80062d2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80062b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062bc:	b672      	cpsid	i
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	b662      	cpsie	i
 80062cc:	623b      	str	r3, [r7, #32]
}
 80062ce:	bf00      	nop
 80062d0:	e7fe      	b.n	80062d0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d102      	bne.n	80062de <xQueueGenericCreateStatic+0x8a>
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d101      	bne.n	80062e2 <xQueueGenericCreateStatic+0x8e>
 80062de:	2301      	movs	r3, #1
 80062e0:	e000      	b.n	80062e4 <xQueueGenericCreateStatic+0x90>
 80062e2:	2300      	movs	r3, #0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10c      	bne.n	8006302 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80062e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ec:	b672      	cpsid	i
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	b662      	cpsie	i
 80062fc:	61fb      	str	r3, [r7, #28]
}
 80062fe:	bf00      	nop
 8006300:	e7fe      	b.n	8006300 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006302:	2350      	movs	r3, #80	; 0x50
 8006304:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	2b50      	cmp	r3, #80	; 0x50
 800630a:	d00c      	beq.n	8006326 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006310:	b672      	cpsid	i
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	b662      	cpsie	i
 8006320:	61bb      	str	r3, [r7, #24]
}
 8006322:	bf00      	nop
 8006324:	e7fe      	b.n	8006324 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006326:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800632c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00d      	beq.n	800634e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800633a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800633e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	4613      	mov	r3, r2
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	68b9      	ldr	r1, [r7, #8]
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 f805 	bl	8006358 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800634e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006350:	4618      	mov	r0, r3
 8006352:	3730      	adds	r7, #48	; 0x30
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
 8006364:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d103      	bne.n	8006374 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	69ba      	ldr	r2, [r7, #24]
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	e002      	b.n	800637a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006386:	2101      	movs	r1, #1
 8006388:	69b8      	ldr	r0, [r7, #24]
 800638a:	f7ff fef9 	bl	8006180 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	78fa      	ldrb	r2, [r7, #3]
 8006392:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006396:	bf00      	nop
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
	...

080063a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b08e      	sub	sp, #56	; 0x38
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
 80063ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80063ae:	2300      	movs	r3, #0
 80063b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80063b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10c      	bne.n	80063d6 <xQueueGenericSend+0x36>
	__asm volatile
 80063bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c0:	b672      	cpsid	i
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	b662      	cpsie	i
 80063d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80063d2:	bf00      	nop
 80063d4:	e7fe      	b.n	80063d4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d103      	bne.n	80063e4 <xQueueGenericSend+0x44>
 80063dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <xQueueGenericSend+0x48>
 80063e4:	2301      	movs	r3, #1
 80063e6:	e000      	b.n	80063ea <xQueueGenericSend+0x4a>
 80063e8:	2300      	movs	r3, #0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10c      	bne.n	8006408 <xQueueGenericSend+0x68>
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f2:	b672      	cpsid	i
 80063f4:	f383 8811 	msr	BASEPRI, r3
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	b662      	cpsie	i
 8006402:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006404:	bf00      	nop
 8006406:	e7fe      	b.n	8006406 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	2b02      	cmp	r3, #2
 800640c:	d103      	bne.n	8006416 <xQueueGenericSend+0x76>
 800640e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006412:	2b01      	cmp	r3, #1
 8006414:	d101      	bne.n	800641a <xQueueGenericSend+0x7a>
 8006416:	2301      	movs	r3, #1
 8006418:	e000      	b.n	800641c <xQueueGenericSend+0x7c>
 800641a:	2300      	movs	r3, #0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10c      	bne.n	800643a <xQueueGenericSend+0x9a>
	__asm volatile
 8006420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006424:	b672      	cpsid	i
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	b662      	cpsie	i
 8006434:	623b      	str	r3, [r7, #32]
}
 8006436:	bf00      	nop
 8006438:	e7fe      	b.n	8006438 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800643a:	f001 fa33 	bl	80078a4 <xTaskGetSchedulerState>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d102      	bne.n	800644a <xQueueGenericSend+0xaa>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <xQueueGenericSend+0xae>
 800644a:	2301      	movs	r3, #1
 800644c:	e000      	b.n	8006450 <xQueueGenericSend+0xb0>
 800644e:	2300      	movs	r3, #0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10c      	bne.n	800646e <xQueueGenericSend+0xce>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006458:	b672      	cpsid	i
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	b662      	cpsie	i
 8006468:	61fb      	str	r3, [r7, #28]
}
 800646a:	bf00      	nop
 800646c:	e7fe      	b.n	800646c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800646e:	f001 ff65 	bl	800833c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647a:	429a      	cmp	r2, r3
 800647c:	d302      	bcc.n	8006484 <xQueueGenericSend+0xe4>
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2b02      	cmp	r3, #2
 8006482:	d129      	bne.n	80064d8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	68b9      	ldr	r1, [r7, #8]
 8006488:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800648a:	f000 fa15 	bl	80068b8 <prvCopyDataToQueue>
 800648e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006494:	2b00      	cmp	r3, #0
 8006496:	d010      	beq.n	80064ba <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649a:	3324      	adds	r3, #36	; 0x24
 800649c:	4618      	mov	r0, r3
 800649e:	f001 f803 	bl	80074a8 <xTaskRemoveFromEventList>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d013      	beq.n	80064d0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80064a8:	4b3f      	ldr	r3, [pc, #252]	; (80065a8 <xQueueGenericSend+0x208>)
 80064aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	e00a      	b.n	80064d0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80064ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d007      	beq.n	80064d0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80064c0:	4b39      	ldr	r3, [pc, #228]	; (80065a8 <xQueueGenericSend+0x208>)
 80064c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064c6:	601a      	str	r2, [r3, #0]
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80064d0:	f001 ff68 	bl	80083a4 <vPortExitCritical>
				return pdPASS;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e063      	b.n	80065a0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d103      	bne.n	80064e6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064de:	f001 ff61 	bl	80083a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80064e2:	2300      	movs	r3, #0
 80064e4:	e05c      	b.n	80065a0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d106      	bne.n	80064fa <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064ec:	f107 0314 	add.w	r3, r7, #20
 80064f0:	4618      	mov	r0, r3
 80064f2:	f001 f83f 	bl	8007574 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064f6:	2301      	movs	r3, #1
 80064f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064fa:	f001 ff53 	bl	80083a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064fe:	f000 fd93 	bl	8007028 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006502:	f001 ff1b 	bl	800833c <vPortEnterCritical>
 8006506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006508:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800650c:	b25b      	sxtb	r3, r3
 800650e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006512:	d103      	bne.n	800651c <xQueueGenericSend+0x17c>
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	2200      	movs	r2, #0
 8006518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800651c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006522:	b25b      	sxtb	r3, r3
 8006524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006528:	d103      	bne.n	8006532 <xQueueGenericSend+0x192>
 800652a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006532:	f001 ff37 	bl	80083a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006536:	1d3a      	adds	r2, r7, #4
 8006538:	f107 0314 	add.w	r3, r7, #20
 800653c:	4611      	mov	r1, r2
 800653e:	4618      	mov	r0, r3
 8006540:	f001 f82e 	bl	80075a0 <xTaskCheckForTimeOut>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d124      	bne.n	8006594 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800654a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800654c:	f000 faac 	bl	8006aa8 <prvIsQueueFull>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d018      	beq.n	8006588 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006558:	3310      	adds	r3, #16
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	4611      	mov	r1, r2
 800655e:	4618      	mov	r0, r3
 8006560:	f000 ff4e 	bl	8007400 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006566:	f000 fa37 	bl	80069d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800656a:	f000 fd6b 	bl	8007044 <xTaskResumeAll>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	f47f af7c 	bne.w	800646e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006576:	4b0c      	ldr	r3, [pc, #48]	; (80065a8 <xQueueGenericSend+0x208>)
 8006578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	e772      	b.n	800646e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800658a:	f000 fa25 	bl	80069d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800658e:	f000 fd59 	bl	8007044 <xTaskResumeAll>
 8006592:	e76c      	b.n	800646e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006594:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006596:	f000 fa1f 	bl	80069d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800659a:	f000 fd53 	bl	8007044 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800659e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3738      	adds	r7, #56	; 0x38
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	e000ed04 	.word	0xe000ed04

080065ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b08e      	sub	sp, #56	; 0x38
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
 80065b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80065be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10c      	bne.n	80065de <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80065c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c8:	b672      	cpsid	i
 80065ca:	f383 8811 	msr	BASEPRI, r3
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	b662      	cpsie	i
 80065d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80065da:	bf00      	nop
 80065dc:	e7fe      	b.n	80065dc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d103      	bne.n	80065ec <xQueueGenericSendFromISR+0x40>
 80065e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <xQueueGenericSendFromISR+0x44>
 80065ec:	2301      	movs	r3, #1
 80065ee:	e000      	b.n	80065f2 <xQueueGenericSendFromISR+0x46>
 80065f0:	2300      	movs	r3, #0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10c      	bne.n	8006610 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80065f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fa:	b672      	cpsid	i
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	b662      	cpsie	i
 800660a:	623b      	str	r3, [r7, #32]
}
 800660c:	bf00      	nop
 800660e:	e7fe      	b.n	800660e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	2b02      	cmp	r3, #2
 8006614:	d103      	bne.n	800661e <xQueueGenericSendFromISR+0x72>
 8006616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800661a:	2b01      	cmp	r3, #1
 800661c:	d101      	bne.n	8006622 <xQueueGenericSendFromISR+0x76>
 800661e:	2301      	movs	r3, #1
 8006620:	e000      	b.n	8006624 <xQueueGenericSendFromISR+0x78>
 8006622:	2300      	movs	r3, #0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10c      	bne.n	8006642 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662c:	b672      	cpsid	i
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	b662      	cpsie	i
 800663c:	61fb      	str	r3, [r7, #28]
}
 800663e:	bf00      	nop
 8006640:	e7fe      	b.n	8006640 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006642:	f001 ff63 	bl	800850c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006646:	f3ef 8211 	mrs	r2, BASEPRI
 800664a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664e:	b672      	cpsid	i
 8006650:	f383 8811 	msr	BASEPRI, r3
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	f3bf 8f4f 	dsb	sy
 800665c:	b662      	cpsie	i
 800665e:	61ba      	str	r2, [r7, #24]
 8006660:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006662:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006664:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800666e:	429a      	cmp	r2, r3
 8006670:	d302      	bcc.n	8006678 <xQueueGenericSendFromISR+0xcc>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b02      	cmp	r3, #2
 8006676:	d12c      	bne.n	80066d2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800667e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	68b9      	ldr	r1, [r7, #8]
 8006686:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006688:	f000 f916 	bl	80068b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800668c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006694:	d112      	bne.n	80066bc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669a:	2b00      	cmp	r3, #0
 800669c:	d016      	beq.n	80066cc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800669e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a0:	3324      	adds	r3, #36	; 0x24
 80066a2:	4618      	mov	r0, r3
 80066a4:	f000 ff00 	bl	80074a8 <xTaskRemoveFromEventList>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00e      	beq.n	80066cc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00b      	beq.n	80066cc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	e007      	b.n	80066cc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80066bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066c0:	3301      	adds	r3, #1
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	b25a      	sxtb	r2, r3
 80066c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80066cc:	2301      	movs	r3, #1
 80066ce:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80066d0:	e001      	b.n	80066d6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80066d2:	2300      	movs	r3, #0
 80066d4:	637b      	str	r3, [r7, #52]	; 0x34
 80066d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80066e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3738      	adds	r7, #56	; 0x38
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b08c      	sub	sp, #48	; 0x30
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80066f8:	2300      	movs	r3, #0
 80066fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10c      	bne.n	8006720 <xQueueReceive+0x34>
	__asm volatile
 8006706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670a:	b672      	cpsid	i
 800670c:	f383 8811 	msr	BASEPRI, r3
 8006710:	f3bf 8f6f 	isb	sy
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	b662      	cpsie	i
 800671a:	623b      	str	r3, [r7, #32]
}
 800671c:	bf00      	nop
 800671e:	e7fe      	b.n	800671e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d103      	bne.n	800672e <xQueueReceive+0x42>
 8006726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <xQueueReceive+0x46>
 800672e:	2301      	movs	r3, #1
 8006730:	e000      	b.n	8006734 <xQueueReceive+0x48>
 8006732:	2300      	movs	r3, #0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10c      	bne.n	8006752 <xQueueReceive+0x66>
	__asm volatile
 8006738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673c:	b672      	cpsid	i
 800673e:	f383 8811 	msr	BASEPRI, r3
 8006742:	f3bf 8f6f 	isb	sy
 8006746:	f3bf 8f4f 	dsb	sy
 800674a:	b662      	cpsie	i
 800674c:	61fb      	str	r3, [r7, #28]
}
 800674e:	bf00      	nop
 8006750:	e7fe      	b.n	8006750 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006752:	f001 f8a7 	bl	80078a4 <xTaskGetSchedulerState>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d102      	bne.n	8006762 <xQueueReceive+0x76>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <xQueueReceive+0x7a>
 8006762:	2301      	movs	r3, #1
 8006764:	e000      	b.n	8006768 <xQueueReceive+0x7c>
 8006766:	2300      	movs	r3, #0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10c      	bne.n	8006786 <xQueueReceive+0x9a>
	__asm volatile
 800676c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006770:	b672      	cpsid	i
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	b662      	cpsie	i
 8006780:	61bb      	str	r3, [r7, #24]
}
 8006782:	bf00      	nop
 8006784:	e7fe      	b.n	8006784 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006786:	f001 fdd9 	bl	800833c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800678a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	2b00      	cmp	r3, #0
 8006794:	d01f      	beq.n	80067d6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006796:	68b9      	ldr	r1, [r7, #8]
 8006798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800679a:	f000 f8f7 	bl	800698c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a0:	1e5a      	subs	r2, r3, #1
 80067a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00f      	beq.n	80067ce <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b0:	3310      	adds	r3, #16
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 fe78 	bl	80074a8 <xTaskRemoveFromEventList>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d007      	beq.n	80067ce <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80067be:	4b3d      	ldr	r3, [pc, #244]	; (80068b4 <xQueueReceive+0x1c8>)
 80067c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067c4:	601a      	str	r2, [r3, #0]
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80067ce:	f001 fde9 	bl	80083a4 <vPortExitCritical>
				return pdPASS;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e069      	b.n	80068aa <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d103      	bne.n	80067e4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067dc:	f001 fde2 	bl	80083a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80067e0:	2300      	movs	r3, #0
 80067e2:	e062      	b.n	80068aa <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d106      	bne.n	80067f8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067ea:	f107 0310 	add.w	r3, r7, #16
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fec0 	bl	8007574 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067f4:	2301      	movs	r3, #1
 80067f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067f8:	f001 fdd4 	bl	80083a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067fc:	f000 fc14 	bl	8007028 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006800:	f001 fd9c 	bl	800833c <vPortEnterCritical>
 8006804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006806:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800680a:	b25b      	sxtb	r3, r3
 800680c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006810:	d103      	bne.n	800681a <xQueueReceive+0x12e>
 8006812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800681a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006820:	b25b      	sxtb	r3, r3
 8006822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006826:	d103      	bne.n	8006830 <xQueueReceive+0x144>
 8006828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682a:	2200      	movs	r2, #0
 800682c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006830:	f001 fdb8 	bl	80083a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006834:	1d3a      	adds	r2, r7, #4
 8006836:	f107 0310 	add.w	r3, r7, #16
 800683a:	4611      	mov	r1, r2
 800683c:	4618      	mov	r0, r3
 800683e:	f000 feaf 	bl	80075a0 <xTaskCheckForTimeOut>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d123      	bne.n	8006890 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800684a:	f000 f917 	bl	8006a7c <prvIsQueueEmpty>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d017      	beq.n	8006884 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006856:	3324      	adds	r3, #36	; 0x24
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	4611      	mov	r1, r2
 800685c:	4618      	mov	r0, r3
 800685e:	f000 fdcf 	bl	8007400 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006862:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006864:	f000 f8b8 	bl	80069d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006868:	f000 fbec 	bl	8007044 <xTaskResumeAll>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d189      	bne.n	8006786 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8006872:	4b10      	ldr	r3, [pc, #64]	; (80068b4 <xQueueReceive+0x1c8>)
 8006874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006878:	601a      	str	r2, [r3, #0]
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	e780      	b.n	8006786 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006884:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006886:	f000 f8a7 	bl	80069d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800688a:	f000 fbdb 	bl	8007044 <xTaskResumeAll>
 800688e:	e77a      	b.n	8006786 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006892:	f000 f8a1 	bl	80069d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006896:	f000 fbd5 	bl	8007044 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800689a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800689c:	f000 f8ee 	bl	8006a7c <prvIsQueueEmpty>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f43f af6f 	beq.w	8006786 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80068a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3730      	adds	r7, #48	; 0x30
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	e000ed04 	.word	0xe000ed04

080068b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80068c4:	2300      	movs	r3, #0
 80068c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10d      	bne.n	80068f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d14d      	bne.n	800697a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 fffc 	bl	80078e0 <xTaskPriorityDisinherit>
 80068e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	609a      	str	r2, [r3, #8]
 80068f0:	e043      	b.n	800697a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d119      	bne.n	800692c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6858      	ldr	r0, [r3, #4]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006900:	461a      	mov	r2, r3
 8006902:	68b9      	ldr	r1, [r7, #8]
 8006904:	f002 f856 	bl	80089b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006910:	441a      	add	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	429a      	cmp	r2, r3
 8006920:	d32b      	bcc.n	800697a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	605a      	str	r2, [r3, #4]
 800692a:	e026      	b.n	800697a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	68d8      	ldr	r0, [r3, #12]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006934:	461a      	mov	r2, r3
 8006936:	68b9      	ldr	r1, [r7, #8]
 8006938:	f002 f83c 	bl	80089b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	68da      	ldr	r2, [r3, #12]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006944:	425b      	negs	r3, r3
 8006946:	441a      	add	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	68da      	ldr	r2, [r3, #12]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	429a      	cmp	r2, r3
 8006956:	d207      	bcs.n	8006968 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	689a      	ldr	r2, [r3, #8]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006960:	425b      	negs	r3, r3
 8006962:	441a      	add	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b02      	cmp	r3, #2
 800696c:	d105      	bne.n	800697a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d002      	beq.n	800697a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	3b01      	subs	r3, #1
 8006978:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1c5a      	adds	r2, r3, #1
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006982:	697b      	ldr	r3, [r7, #20]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3718      	adds	r7, #24
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	2b00      	cmp	r3, #0
 800699c:	d018      	beq.n	80069d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68da      	ldr	r2, [r3, #12]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	441a      	add	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68da      	ldr	r2, [r3, #12]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d303      	bcc.n	80069c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68d9      	ldr	r1, [r3, #12]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c8:	461a      	mov	r2, r3
 80069ca:	6838      	ldr	r0, [r7, #0]
 80069cc:	f001 fff2 	bl	80089b4 <memcpy>
	}
}
 80069d0:	bf00      	nop
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80069e0:	f001 fcac 	bl	800833c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069ec:	e011      	b.n	8006a12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d012      	beq.n	8006a1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	3324      	adds	r3, #36	; 0x24
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fd54 	bl	80074a8 <xTaskRemoveFromEventList>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a06:	f000 fe31 	bl	800766c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a0a:	7bfb      	ldrb	r3, [r7, #15]
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	dce9      	bgt.n	80069ee <prvUnlockQueue+0x16>
 8006a1a:	e000      	b.n	8006a1e <prvUnlockQueue+0x46>
					break;
 8006a1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	22ff      	movs	r2, #255	; 0xff
 8006a22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006a26:	f001 fcbd 	bl	80083a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a2a:	f001 fc87 	bl	800833c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a36:	e011      	b.n	8006a5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d012      	beq.n	8006a66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	3310      	adds	r3, #16
 8006a44:	4618      	mov	r0, r3
 8006a46:	f000 fd2f 	bl	80074a8 <xTaskRemoveFromEventList>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a50:	f000 fe0c 	bl	800766c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a54:	7bbb      	ldrb	r3, [r7, #14]
 8006a56:	3b01      	subs	r3, #1
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	dce9      	bgt.n	8006a38 <prvUnlockQueue+0x60>
 8006a64:	e000      	b.n	8006a68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	22ff      	movs	r2, #255	; 0xff
 8006a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006a70:	f001 fc98 	bl	80083a4 <vPortExitCritical>
}
 8006a74:	bf00      	nop
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a84:	f001 fc5a 	bl	800833c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d102      	bne.n	8006a96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a90:	2301      	movs	r3, #1
 8006a92:	60fb      	str	r3, [r7, #12]
 8006a94:	e001      	b.n	8006a9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a96:	2300      	movs	r3, #0
 8006a98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a9a:	f001 fc83 	bl	80083a4 <vPortExitCritical>

	return xReturn;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ab0:	f001 fc44 	bl	800833c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d102      	bne.n	8006ac6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	e001      	b.n	8006aca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006aca:	f001 fc6b 	bl	80083a4 <vPortExitCritical>

	return xReturn;
 8006ace:	68fb      	ldr	r3, [r7, #12]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	60fb      	str	r3, [r7, #12]
 8006ae6:	e014      	b.n	8006b12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006ae8:	4a0f      	ldr	r2, [pc, #60]	; (8006b28 <vQueueAddToRegistry+0x50>)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10b      	bne.n	8006b0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006af4:	490c      	ldr	r1, [pc, #48]	; (8006b28 <vQueueAddToRegistry+0x50>)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006afe:	4a0a      	ldr	r2, [pc, #40]	; (8006b28 <vQueueAddToRegistry+0x50>)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	4413      	add	r3, r2
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006b0a:	e006      	b.n	8006b1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	60fb      	str	r3, [r7, #12]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2b07      	cmp	r3, #7
 8006b16:	d9e7      	bls.n	8006ae8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b18:	bf00      	nop
 8006b1a:	bf00      	nop
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	20001970 	.word	0x20001970

08006b2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b3c:	f001 fbfe 	bl	800833c <vPortEnterCritical>
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b46:	b25b      	sxtb	r3, r3
 8006b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4c:	d103      	bne.n	8006b56 <vQueueWaitForMessageRestricted+0x2a>
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b5c:	b25b      	sxtb	r3, r3
 8006b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b62:	d103      	bne.n	8006b6c <vQueueWaitForMessageRestricted+0x40>
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b6c:	f001 fc1a 	bl	80083a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d106      	bne.n	8006b86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	3324      	adds	r3, #36	; 0x24
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	68b9      	ldr	r1, [r7, #8]
 8006b80:	4618      	mov	r0, r3
 8006b82:	f000 fc63 	bl	800744c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006b86:	6978      	ldr	r0, [r7, #20]
 8006b88:	f7ff ff26 	bl	80069d8 <prvUnlockQueue>
	}
 8006b8c:	bf00      	nop
 8006b8e:	3718      	adds	r7, #24
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b08e      	sub	sp, #56	; 0x38
 8006b98:	af04      	add	r7, sp, #16
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
 8006ba0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10c      	bne.n	8006bc2 <xTaskCreateStatic+0x2e>
	__asm volatile
 8006ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bac:	b672      	cpsid	i
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	b662      	cpsie	i
 8006bbc:	623b      	str	r3, [r7, #32]
}
 8006bbe:	bf00      	nop
 8006bc0:	e7fe      	b.n	8006bc0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10c      	bne.n	8006be2 <xTaskCreateStatic+0x4e>
	__asm volatile
 8006bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bcc:	b672      	cpsid	i
 8006bce:	f383 8811 	msr	BASEPRI, r3
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	f3bf 8f4f 	dsb	sy
 8006bda:	b662      	cpsie	i
 8006bdc:	61fb      	str	r3, [r7, #28]
}
 8006bde:	bf00      	nop
 8006be0:	e7fe      	b.n	8006be0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006be2:	235c      	movs	r3, #92	; 0x5c
 8006be4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	2b5c      	cmp	r3, #92	; 0x5c
 8006bea:	d00c      	beq.n	8006c06 <xTaskCreateStatic+0x72>
	__asm volatile
 8006bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf0:	b672      	cpsid	i
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	b662      	cpsie	i
 8006c00:	61bb      	str	r3, [r7, #24]
}
 8006c02:	bf00      	nop
 8006c04:	e7fe      	b.n	8006c04 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006c06:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d01e      	beq.n	8006c4c <xTaskCreateStatic+0xb8>
 8006c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d01b      	beq.n	8006c4c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c16:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c1c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	2202      	movs	r2, #2
 8006c22:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c26:	2300      	movs	r3, #0
 8006c28:	9303      	str	r3, [sp, #12]
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	9302      	str	r3, [sp, #8]
 8006c2e:	f107 0314 	add.w	r3, r7, #20
 8006c32:	9301      	str	r3, [sp, #4]
 8006c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	68b9      	ldr	r1, [r7, #8]
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 f850 	bl	8006ce4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c46:	f000 f8df 	bl	8006e08 <prvAddNewTaskToReadyList>
 8006c4a:	e001      	b.n	8006c50 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c50:	697b      	ldr	r3, [r7, #20]
	}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3728      	adds	r7, #40	; 0x28
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b08c      	sub	sp, #48	; 0x30
 8006c5e:	af04      	add	r7, sp, #16
 8006c60:	60f8      	str	r0, [r7, #12]
 8006c62:	60b9      	str	r1, [r7, #8]
 8006c64:	603b      	str	r3, [r7, #0]
 8006c66:	4613      	mov	r3, r2
 8006c68:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c6a:	88fb      	ldrh	r3, [r7, #6]
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f001 fc90 	bl	8008594 <pvPortMalloc>
 8006c74:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00e      	beq.n	8006c9a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c7c:	205c      	movs	r0, #92	; 0x5c
 8006c7e:	f001 fc89 	bl	8008594 <pvPortMalloc>
 8006c82:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	631a      	str	r2, [r3, #48]	; 0x30
 8006c90:	e005      	b.n	8006c9e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c92:	6978      	ldr	r0, [r7, #20]
 8006c94:	f001 fd48 	bl	8008728 <vPortFree>
 8006c98:	e001      	b.n	8006c9e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d017      	beq.n	8006cd4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006cac:	88fa      	ldrh	r2, [r7, #6]
 8006cae:	2300      	movs	r3, #0
 8006cb0:	9303      	str	r3, [sp, #12]
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	9302      	str	r3, [sp, #8]
 8006cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb8:	9301      	str	r3, [sp, #4]
 8006cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	68b9      	ldr	r1, [r7, #8]
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f000 f80e 	bl	8006ce4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cc8:	69f8      	ldr	r0, [r7, #28]
 8006cca:	f000 f89d 	bl	8006e08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	61bb      	str	r3, [r7, #24]
 8006cd2:	e002      	b.n	8006cda <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006cda:	69bb      	ldr	r3, [r7, #24]
	}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3720      	adds	r7, #32
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b088      	sub	sp, #32
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
 8006cf0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	21a5      	movs	r1, #165	; 0xa5
 8006cfe:	f001 fe2d 	bl	800895c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d06:	6879      	ldr	r1, [r7, #4]
 8006d08:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006d0c:	440b      	add	r3, r1
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4413      	add	r3, r2
 8006d12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	f023 0307 	bic.w	r3, r3, #7
 8006d1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	f003 0307 	and.w	r3, r3, #7
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00c      	beq.n	8006d40 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8006d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2a:	b672      	cpsid	i
 8006d2c:	f383 8811 	msr	BASEPRI, r3
 8006d30:	f3bf 8f6f 	isb	sy
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	b662      	cpsie	i
 8006d3a:	617b      	str	r3, [r7, #20]
}
 8006d3c:	bf00      	nop
 8006d3e:	e7fe      	b.n	8006d3e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d01f      	beq.n	8006d86 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d46:	2300      	movs	r3, #0
 8006d48:	61fb      	str	r3, [r7, #28]
 8006d4a:	e012      	b.n	8006d72 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d4c:	68ba      	ldr	r2, [r7, #8]
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	4413      	add	r3, r2
 8006d52:	7819      	ldrb	r1, [r3, #0]
 8006d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	4413      	add	r3, r2
 8006d5a:	3334      	adds	r3, #52	; 0x34
 8006d5c:	460a      	mov	r2, r1
 8006d5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	4413      	add	r3, r2
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d006      	beq.n	8006d7a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	61fb      	str	r3, [r7, #28]
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	2b0f      	cmp	r3, #15
 8006d76:	d9e9      	bls.n	8006d4c <prvInitialiseNewTask+0x68>
 8006d78:	e000      	b.n	8006d7c <prvInitialiseNewTask+0x98>
			{
				break;
 8006d7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d84:	e003      	b.n	8006d8e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d90:	2b37      	cmp	r3, #55	; 0x37
 8006d92:	d901      	bls.n	8006d98 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d94:	2337      	movs	r3, #55	; 0x37
 8006d96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006da2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da6:	2200      	movs	r2, #0
 8006da8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dac:	3304      	adds	r3, #4
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7ff f952 	bl	8006058 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db6:	3318      	adds	r3, #24
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7ff f94d 	bl	8006058 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	68f9      	ldr	r1, [r7, #12]
 8006de6:	69b8      	ldr	r0, [r7, #24]
 8006de8:	f001 f99c 	bl	8008124 <pxPortInitialiseStack>
 8006dec:	4602      	mov	r2, r0
 8006dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006dfe:	bf00      	nop
 8006e00:	3720      	adds	r7, #32
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
	...

08006e08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e10:	f001 fa94 	bl	800833c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e14:	4b2d      	ldr	r3, [pc, #180]	; (8006ecc <prvAddNewTaskToReadyList+0xc4>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	4a2c      	ldr	r2, [pc, #176]	; (8006ecc <prvAddNewTaskToReadyList+0xc4>)
 8006e1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e1e:	4b2c      	ldr	r3, [pc, #176]	; (8006ed0 <prvAddNewTaskToReadyList+0xc8>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d109      	bne.n	8006e3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e26:	4a2a      	ldr	r2, [pc, #168]	; (8006ed0 <prvAddNewTaskToReadyList+0xc8>)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e2c:	4b27      	ldr	r3, [pc, #156]	; (8006ecc <prvAddNewTaskToReadyList+0xc4>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d110      	bne.n	8006e56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e34:	f000 fc3e 	bl	80076b4 <prvInitialiseTaskLists>
 8006e38:	e00d      	b.n	8006e56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e3a:	4b26      	ldr	r3, [pc, #152]	; (8006ed4 <prvAddNewTaskToReadyList+0xcc>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d109      	bne.n	8006e56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e42:	4b23      	ldr	r3, [pc, #140]	; (8006ed0 <prvAddNewTaskToReadyList+0xc8>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d802      	bhi.n	8006e56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e50:	4a1f      	ldr	r2, [pc, #124]	; (8006ed0 <prvAddNewTaskToReadyList+0xc8>)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e56:	4b20      	ldr	r3, [pc, #128]	; (8006ed8 <prvAddNewTaskToReadyList+0xd0>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	4a1e      	ldr	r2, [pc, #120]	; (8006ed8 <prvAddNewTaskToReadyList+0xd0>)
 8006e5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006e60:	4b1d      	ldr	r3, [pc, #116]	; (8006ed8 <prvAddNewTaskToReadyList+0xd0>)
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e6c:	4b1b      	ldr	r3, [pc, #108]	; (8006edc <prvAddNewTaskToReadyList+0xd4>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d903      	bls.n	8006e7c <prvAddNewTaskToReadyList+0x74>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e78:	4a18      	ldr	r2, [pc, #96]	; (8006edc <prvAddNewTaskToReadyList+0xd4>)
 8006e7a:	6013      	str	r3, [r2, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e80:	4613      	mov	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4413      	add	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4a15      	ldr	r2, [pc, #84]	; (8006ee0 <prvAddNewTaskToReadyList+0xd8>)
 8006e8a:	441a      	add	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	3304      	adds	r3, #4
 8006e90:	4619      	mov	r1, r3
 8006e92:	4610      	mov	r0, r2
 8006e94:	f7ff f8ed 	bl	8006072 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e98:	f001 fa84 	bl	80083a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e9c:	4b0d      	ldr	r3, [pc, #52]	; (8006ed4 <prvAddNewTaskToReadyList+0xcc>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00e      	beq.n	8006ec2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ea4:	4b0a      	ldr	r3, [pc, #40]	; (8006ed0 <prvAddNewTaskToReadyList+0xc8>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d207      	bcs.n	8006ec2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006eb2:	4b0c      	ldr	r3, [pc, #48]	; (8006ee4 <prvAddNewTaskToReadyList+0xdc>)
 8006eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eb8:	601a      	str	r2, [r3, #0]
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ec2:	bf00      	nop
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	20001e84 	.word	0x20001e84
 8006ed0:	200019b0 	.word	0x200019b0
 8006ed4:	20001e90 	.word	0x20001e90
 8006ed8:	20001ea0 	.word	0x20001ea0
 8006edc:	20001e8c 	.word	0x20001e8c
 8006ee0:	200019b4 	.word	0x200019b4
 8006ee4:	e000ed04 	.word	0xe000ed04

08006ee8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d019      	beq.n	8006f2e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006efa:	4b14      	ldr	r3, [pc, #80]	; (8006f4c <vTaskDelay+0x64>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00c      	beq.n	8006f1c <vTaskDelay+0x34>
	__asm volatile
 8006f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f06:	b672      	cpsid	i
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	b662      	cpsie	i
 8006f16:	60bb      	str	r3, [r7, #8]
}
 8006f18:	bf00      	nop
 8006f1a:	e7fe      	b.n	8006f1a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006f1c:	f000 f884 	bl	8007028 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f20:	2100      	movs	r1, #0
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fd4e 	bl	80079c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f28:	f000 f88c 	bl	8007044 <xTaskResumeAll>
 8006f2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d107      	bne.n	8006f44 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006f34:	4b06      	ldr	r3, [pc, #24]	; (8006f50 <vTaskDelay+0x68>)
 8006f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f3a:	601a      	str	r2, [r3, #0]
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f44:	bf00      	nop
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	20001eac 	.word	0x20001eac
 8006f50:	e000ed04 	.word	0xe000ed04

08006f54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b08a      	sub	sp, #40	; 0x28
 8006f58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f62:	463a      	mov	r2, r7
 8006f64:	1d39      	adds	r1, r7, #4
 8006f66:	f107 0308 	add.w	r3, r7, #8
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7ff f820 	bl	8005fb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f70:	6839      	ldr	r1, [r7, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	9202      	str	r2, [sp, #8]
 8006f78:	9301      	str	r3, [sp, #4]
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	2300      	movs	r3, #0
 8006f80:	460a      	mov	r2, r1
 8006f82:	4923      	ldr	r1, [pc, #140]	; (8007010 <vTaskStartScheduler+0xbc>)
 8006f84:	4823      	ldr	r0, [pc, #140]	; (8007014 <vTaskStartScheduler+0xc0>)
 8006f86:	f7ff fe05 	bl	8006b94 <xTaskCreateStatic>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	4a22      	ldr	r2, [pc, #136]	; (8007018 <vTaskStartScheduler+0xc4>)
 8006f8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f90:	4b21      	ldr	r3, [pc, #132]	; (8007018 <vTaskStartScheduler+0xc4>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	617b      	str	r3, [r7, #20]
 8006f9c:	e001      	b.n	8006fa2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d102      	bne.n	8006fae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006fa8:	f000 fd60 	bl	8007a6c <xTimerCreateTimerTask>
 8006fac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d118      	bne.n	8006fe6 <vTaskStartScheduler+0x92>
	__asm volatile
 8006fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb8:	b672      	cpsid	i
 8006fba:	f383 8811 	msr	BASEPRI, r3
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f3bf 8f4f 	dsb	sy
 8006fc6:	b662      	cpsie	i
 8006fc8:	613b      	str	r3, [r7, #16]
}
 8006fca:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006fcc:	4b13      	ldr	r3, [pc, #76]	; (800701c <vTaskStartScheduler+0xc8>)
 8006fce:	f04f 32ff 	mov.w	r2, #4294967295
 8006fd2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006fd4:	4b12      	ldr	r3, [pc, #72]	; (8007020 <vTaskStartScheduler+0xcc>)
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006fda:	4b12      	ldr	r3, [pc, #72]	; (8007024 <vTaskStartScheduler+0xd0>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006fe0:	f001 f92e 	bl	8008240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006fe4:	e010      	b.n	8007008 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fec:	d10c      	bne.n	8007008 <vTaskStartScheduler+0xb4>
	__asm volatile
 8006fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff2:	b672      	cpsid	i
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	b662      	cpsie	i
 8007002:	60fb      	str	r3, [r7, #12]
}
 8007004:	bf00      	nop
 8007006:	e7fe      	b.n	8007006 <vTaskStartScheduler+0xb2>
}
 8007008:	bf00      	nop
 800700a:	3718      	adds	r7, #24
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	08008a58 	.word	0x08008a58
 8007014:	08007685 	.word	0x08007685
 8007018:	20001ea8 	.word	0x20001ea8
 800701c:	20001ea4 	.word	0x20001ea4
 8007020:	20001e90 	.word	0x20001e90
 8007024:	20001e88 	.word	0x20001e88

08007028 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007028:	b480      	push	{r7}
 800702a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800702c:	4b04      	ldr	r3, [pc, #16]	; (8007040 <vTaskSuspendAll+0x18>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	3301      	adds	r3, #1
 8007032:	4a03      	ldr	r2, [pc, #12]	; (8007040 <vTaskSuspendAll+0x18>)
 8007034:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007036:	bf00      	nop
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr
 8007040:	20001eac 	.word	0x20001eac

08007044 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800704a:	2300      	movs	r3, #0
 800704c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800704e:	2300      	movs	r3, #0
 8007050:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007052:	4b43      	ldr	r3, [pc, #268]	; (8007160 <xTaskResumeAll+0x11c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10c      	bne.n	8007074 <xTaskResumeAll+0x30>
	__asm volatile
 800705a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705e:	b672      	cpsid	i
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	b662      	cpsie	i
 800706e:	603b      	str	r3, [r7, #0]
}
 8007070:	bf00      	nop
 8007072:	e7fe      	b.n	8007072 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007074:	f001 f962 	bl	800833c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007078:	4b39      	ldr	r3, [pc, #228]	; (8007160 <xTaskResumeAll+0x11c>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3b01      	subs	r3, #1
 800707e:	4a38      	ldr	r2, [pc, #224]	; (8007160 <xTaskResumeAll+0x11c>)
 8007080:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007082:	4b37      	ldr	r3, [pc, #220]	; (8007160 <xTaskResumeAll+0x11c>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d162      	bne.n	8007150 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800708a:	4b36      	ldr	r3, [pc, #216]	; (8007164 <xTaskResumeAll+0x120>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d05e      	beq.n	8007150 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007092:	e02f      	b.n	80070f4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007094:	4b34      	ldr	r3, [pc, #208]	; (8007168 <xTaskResumeAll+0x124>)
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	3318      	adds	r3, #24
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7ff f843 	bl	800612c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	3304      	adds	r3, #4
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7ff f83e 	bl	800612c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b4:	4b2d      	ldr	r3, [pc, #180]	; (800716c <xTaskResumeAll+0x128>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d903      	bls.n	80070c4 <xTaskResumeAll+0x80>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c0:	4a2a      	ldr	r2, [pc, #168]	; (800716c <xTaskResumeAll+0x128>)
 80070c2:	6013      	str	r3, [r2, #0]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c8:	4613      	mov	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4413      	add	r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	4a27      	ldr	r2, [pc, #156]	; (8007170 <xTaskResumeAll+0x12c>)
 80070d2:	441a      	add	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	3304      	adds	r3, #4
 80070d8:	4619      	mov	r1, r3
 80070da:	4610      	mov	r0, r2
 80070dc:	f7fe ffc9 	bl	8006072 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e4:	4b23      	ldr	r3, [pc, #140]	; (8007174 <xTaskResumeAll+0x130>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d302      	bcc.n	80070f4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80070ee:	4b22      	ldr	r3, [pc, #136]	; (8007178 <xTaskResumeAll+0x134>)
 80070f0:	2201      	movs	r2, #1
 80070f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070f4:	4b1c      	ldr	r3, [pc, #112]	; (8007168 <xTaskResumeAll+0x124>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1cb      	bne.n	8007094 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007102:	f000 fbaf 	bl	8007864 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007106:	4b1d      	ldr	r3, [pc, #116]	; (800717c <xTaskResumeAll+0x138>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d010      	beq.n	8007134 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007112:	f000 f859 	bl	80071c8 <xTaskIncrementTick>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800711c:	4b16      	ldr	r3, [pc, #88]	; (8007178 <xTaskResumeAll+0x134>)
 800711e:	2201      	movs	r2, #1
 8007120:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	3b01      	subs	r3, #1
 8007126:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1f1      	bne.n	8007112 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800712e:	4b13      	ldr	r3, [pc, #76]	; (800717c <xTaskResumeAll+0x138>)
 8007130:	2200      	movs	r2, #0
 8007132:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007134:	4b10      	ldr	r3, [pc, #64]	; (8007178 <xTaskResumeAll+0x134>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d009      	beq.n	8007150 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800713c:	2301      	movs	r3, #1
 800713e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007140:	4b0f      	ldr	r3, [pc, #60]	; (8007180 <xTaskResumeAll+0x13c>)
 8007142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007150:	f001 f928 	bl	80083a4 <vPortExitCritical>

	return xAlreadyYielded;
 8007154:	68bb      	ldr	r3, [r7, #8]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	20001eac 	.word	0x20001eac
 8007164:	20001e84 	.word	0x20001e84
 8007168:	20001e44 	.word	0x20001e44
 800716c:	20001e8c 	.word	0x20001e8c
 8007170:	200019b4 	.word	0x200019b4
 8007174:	200019b0 	.word	0x200019b0
 8007178:	20001e98 	.word	0x20001e98
 800717c:	20001e94 	.word	0x20001e94
 8007180:	e000ed04 	.word	0xe000ed04

08007184 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800718a:	4b05      	ldr	r3, [pc, #20]	; (80071a0 <xTaskGetTickCount+0x1c>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007190:	687b      	ldr	r3, [r7, #4]
}
 8007192:	4618      	mov	r0, r3
 8007194:	370c      	adds	r7, #12
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	20001e88 	.word	0x20001e88

080071a4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071aa:	f001 f9af 	bl	800850c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80071ae:	2300      	movs	r3, #0
 80071b0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80071b2:	4b04      	ldr	r3, [pc, #16]	; (80071c4 <xTaskGetTickCountFromISR+0x20>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071b8:	683b      	ldr	r3, [r7, #0]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	20001e88 	.word	0x20001e88

080071c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80071ce:	2300      	movs	r3, #0
 80071d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071d2:	4b50      	ldr	r3, [pc, #320]	; (8007314 <xTaskIncrementTick+0x14c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f040 808b 	bne.w	80072f2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80071dc:	4b4e      	ldr	r3, [pc, #312]	; (8007318 <xTaskIncrementTick+0x150>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3301      	adds	r3, #1
 80071e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80071e4:	4a4c      	ldr	r2, [pc, #304]	; (8007318 <xTaskIncrementTick+0x150>)
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d122      	bne.n	8007236 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80071f0:	4b4a      	ldr	r3, [pc, #296]	; (800731c <xTaskIncrementTick+0x154>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00c      	beq.n	8007214 <xTaskIncrementTick+0x4c>
	__asm volatile
 80071fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fe:	b672      	cpsid	i
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	b662      	cpsie	i
 800720e:	603b      	str	r3, [r7, #0]
}
 8007210:	bf00      	nop
 8007212:	e7fe      	b.n	8007212 <xTaskIncrementTick+0x4a>
 8007214:	4b41      	ldr	r3, [pc, #260]	; (800731c <xTaskIncrementTick+0x154>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	60fb      	str	r3, [r7, #12]
 800721a:	4b41      	ldr	r3, [pc, #260]	; (8007320 <xTaskIncrementTick+0x158>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a3f      	ldr	r2, [pc, #252]	; (800731c <xTaskIncrementTick+0x154>)
 8007220:	6013      	str	r3, [r2, #0]
 8007222:	4a3f      	ldr	r2, [pc, #252]	; (8007320 <xTaskIncrementTick+0x158>)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6013      	str	r3, [r2, #0]
 8007228:	4b3e      	ldr	r3, [pc, #248]	; (8007324 <xTaskIncrementTick+0x15c>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	3301      	adds	r3, #1
 800722e:	4a3d      	ldr	r2, [pc, #244]	; (8007324 <xTaskIncrementTick+0x15c>)
 8007230:	6013      	str	r3, [r2, #0]
 8007232:	f000 fb17 	bl	8007864 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007236:	4b3c      	ldr	r3, [pc, #240]	; (8007328 <xTaskIncrementTick+0x160>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	429a      	cmp	r2, r3
 800723e:	d349      	bcc.n	80072d4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007240:	4b36      	ldr	r3, [pc, #216]	; (800731c <xTaskIncrementTick+0x154>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d104      	bne.n	8007254 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800724a:	4b37      	ldr	r3, [pc, #220]	; (8007328 <xTaskIncrementTick+0x160>)
 800724c:	f04f 32ff 	mov.w	r2, #4294967295
 8007250:	601a      	str	r2, [r3, #0]
					break;
 8007252:	e03f      	b.n	80072d4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007254:	4b31      	ldr	r3, [pc, #196]	; (800731c <xTaskIncrementTick+0x154>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	429a      	cmp	r2, r3
 800726a:	d203      	bcs.n	8007274 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800726c:	4a2e      	ldr	r2, [pc, #184]	; (8007328 <xTaskIncrementTick+0x160>)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007272:	e02f      	b.n	80072d4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	3304      	adds	r3, #4
 8007278:	4618      	mov	r0, r3
 800727a:	f7fe ff57 	bl	800612c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007282:	2b00      	cmp	r3, #0
 8007284:	d004      	beq.n	8007290 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	3318      	adds	r3, #24
 800728a:	4618      	mov	r0, r3
 800728c:	f7fe ff4e 	bl	800612c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007294:	4b25      	ldr	r3, [pc, #148]	; (800732c <xTaskIncrementTick+0x164>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	429a      	cmp	r2, r3
 800729a:	d903      	bls.n	80072a4 <xTaskIncrementTick+0xdc>
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a0:	4a22      	ldr	r2, [pc, #136]	; (800732c <xTaskIncrementTick+0x164>)
 80072a2:	6013      	str	r3, [r2, #0]
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a8:	4613      	mov	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4a1f      	ldr	r2, [pc, #124]	; (8007330 <xTaskIncrementTick+0x168>)
 80072b2:	441a      	add	r2, r3
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	3304      	adds	r3, #4
 80072b8:	4619      	mov	r1, r3
 80072ba:	4610      	mov	r0, r2
 80072bc:	f7fe fed9 	bl	8006072 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c4:	4b1b      	ldr	r3, [pc, #108]	; (8007334 <xTaskIncrementTick+0x16c>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d3b8      	bcc.n	8007240 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80072ce:	2301      	movs	r3, #1
 80072d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072d2:	e7b5      	b.n	8007240 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80072d4:	4b17      	ldr	r3, [pc, #92]	; (8007334 <xTaskIncrementTick+0x16c>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072da:	4915      	ldr	r1, [pc, #84]	; (8007330 <xTaskIncrementTick+0x168>)
 80072dc:	4613      	mov	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	440b      	add	r3, r1
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d907      	bls.n	80072fc <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80072ec:	2301      	movs	r3, #1
 80072ee:	617b      	str	r3, [r7, #20]
 80072f0:	e004      	b.n	80072fc <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80072f2:	4b11      	ldr	r3, [pc, #68]	; (8007338 <xTaskIncrementTick+0x170>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	3301      	adds	r3, #1
 80072f8:	4a0f      	ldr	r2, [pc, #60]	; (8007338 <xTaskIncrementTick+0x170>)
 80072fa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80072fc:	4b0f      	ldr	r3, [pc, #60]	; (800733c <xTaskIncrementTick+0x174>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d001      	beq.n	8007308 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8007304:	2301      	movs	r3, #1
 8007306:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007308:	697b      	ldr	r3, [r7, #20]
}
 800730a:	4618      	mov	r0, r3
 800730c:	3718      	adds	r7, #24
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	20001eac 	.word	0x20001eac
 8007318:	20001e88 	.word	0x20001e88
 800731c:	20001e3c 	.word	0x20001e3c
 8007320:	20001e40 	.word	0x20001e40
 8007324:	20001e9c 	.word	0x20001e9c
 8007328:	20001ea4 	.word	0x20001ea4
 800732c:	20001e8c 	.word	0x20001e8c
 8007330:	200019b4 	.word	0x200019b4
 8007334:	200019b0 	.word	0x200019b0
 8007338:	20001e94 	.word	0x20001e94
 800733c:	20001e98 	.word	0x20001e98

08007340 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007346:	4b29      	ldr	r3, [pc, #164]	; (80073ec <vTaskSwitchContext+0xac>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d003      	beq.n	8007356 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800734e:	4b28      	ldr	r3, [pc, #160]	; (80073f0 <vTaskSwitchContext+0xb0>)
 8007350:	2201      	movs	r2, #1
 8007352:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007354:	e043      	b.n	80073de <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8007356:	4b26      	ldr	r3, [pc, #152]	; (80073f0 <vTaskSwitchContext+0xb0>)
 8007358:	2200      	movs	r2, #0
 800735a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800735c:	4b25      	ldr	r3, [pc, #148]	; (80073f4 <vTaskSwitchContext+0xb4>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	60fb      	str	r3, [r7, #12]
 8007362:	e012      	b.n	800738a <vTaskSwitchContext+0x4a>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10c      	bne.n	8007384 <vTaskSwitchContext+0x44>
	__asm volatile
 800736a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736e:	b672      	cpsid	i
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	b662      	cpsie	i
 800737e:	607b      	str	r3, [r7, #4]
}
 8007380:	bf00      	nop
 8007382:	e7fe      	b.n	8007382 <vTaskSwitchContext+0x42>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	3b01      	subs	r3, #1
 8007388:	60fb      	str	r3, [r7, #12]
 800738a:	491b      	ldr	r1, [pc, #108]	; (80073f8 <vTaskSwitchContext+0xb8>)
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	4613      	mov	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	440b      	add	r3, r1
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d0e2      	beq.n	8007364 <vTaskSwitchContext+0x24>
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	4613      	mov	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4413      	add	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4a13      	ldr	r2, [pc, #76]	; (80073f8 <vTaskSwitchContext+0xb8>)
 80073aa:	4413      	add	r3, r2
 80073ac:	60bb      	str	r3, [r7, #8]
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	605a      	str	r2, [r3, #4]
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	3308      	adds	r3, #8
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d104      	bne.n	80073ce <vTaskSwitchContext+0x8e>
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	685a      	ldr	r2, [r3, #4]
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	605a      	str	r2, [r3, #4]
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	4a09      	ldr	r2, [pc, #36]	; (80073fc <vTaskSwitchContext+0xbc>)
 80073d6:	6013      	str	r3, [r2, #0]
 80073d8:	4a06      	ldr	r2, [pc, #24]	; (80073f4 <vTaskSwitchContext+0xb4>)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6013      	str	r3, [r2, #0]
}
 80073de:	bf00      	nop
 80073e0:	3714      	adds	r7, #20
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	20001eac 	.word	0x20001eac
 80073f0:	20001e98 	.word	0x20001e98
 80073f4:	20001e8c 	.word	0x20001e8c
 80073f8:	200019b4 	.word	0x200019b4
 80073fc:	200019b0 	.word	0x200019b0

08007400 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10c      	bne.n	800742a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007414:	b672      	cpsid	i
 8007416:	f383 8811 	msr	BASEPRI, r3
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	b662      	cpsie	i
 8007424:	60fb      	str	r3, [r7, #12]
}
 8007426:	bf00      	nop
 8007428:	e7fe      	b.n	8007428 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800742a:	4b07      	ldr	r3, [pc, #28]	; (8007448 <vTaskPlaceOnEventList+0x48>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	3318      	adds	r3, #24
 8007430:	4619      	mov	r1, r3
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7fe fe41 	bl	80060ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007438:	2101      	movs	r1, #1
 800743a:	6838      	ldr	r0, [r7, #0]
 800743c:	f000 fac2 	bl	80079c4 <prvAddCurrentTaskToDelayedList>
}
 8007440:	bf00      	nop
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	200019b0 	.word	0x200019b0

0800744c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800744c:	b580      	push	{r7, lr}
 800744e:	b086      	sub	sp, #24
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10c      	bne.n	8007478 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800745e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007462:	b672      	cpsid	i
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	b662      	cpsie	i
 8007472:	617b      	str	r3, [r7, #20]
}
 8007474:	bf00      	nop
 8007476:	e7fe      	b.n	8007476 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007478:	4b0a      	ldr	r3, [pc, #40]	; (80074a4 <vTaskPlaceOnEventListRestricted+0x58>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	3318      	adds	r3, #24
 800747e:	4619      	mov	r1, r3
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f7fe fdf6 	bl	8006072 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800748c:	f04f 33ff 	mov.w	r3, #4294967295
 8007490:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007492:	6879      	ldr	r1, [r7, #4]
 8007494:	68b8      	ldr	r0, [r7, #8]
 8007496:	f000 fa95 	bl	80079c4 <prvAddCurrentTaskToDelayedList>
	}
 800749a:	bf00      	nop
 800749c:	3718      	adds	r7, #24
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	200019b0 	.word	0x200019b0

080074a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10c      	bne.n	80074d8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c2:	b672      	cpsid	i
 80074c4:	f383 8811 	msr	BASEPRI, r3
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	b662      	cpsie	i
 80074d2:	60fb      	str	r3, [r7, #12]
}
 80074d4:	bf00      	nop
 80074d6:	e7fe      	b.n	80074d6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	3318      	adds	r3, #24
 80074dc:	4618      	mov	r0, r3
 80074de:	f7fe fe25 	bl	800612c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074e2:	4b1e      	ldr	r3, [pc, #120]	; (800755c <xTaskRemoveFromEventList+0xb4>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d11d      	bne.n	8007526 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	3304      	adds	r3, #4
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fe fe1c 	bl	800612c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f8:	4b19      	ldr	r3, [pc, #100]	; (8007560 <xTaskRemoveFromEventList+0xb8>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d903      	bls.n	8007508 <xTaskRemoveFromEventList+0x60>
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007504:	4a16      	ldr	r2, [pc, #88]	; (8007560 <xTaskRemoveFromEventList+0xb8>)
 8007506:	6013      	str	r3, [r2, #0]
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800750c:	4613      	mov	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	4413      	add	r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4a13      	ldr	r2, [pc, #76]	; (8007564 <xTaskRemoveFromEventList+0xbc>)
 8007516:	441a      	add	r2, r3
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	3304      	adds	r3, #4
 800751c:	4619      	mov	r1, r3
 800751e:	4610      	mov	r0, r2
 8007520:	f7fe fda7 	bl	8006072 <vListInsertEnd>
 8007524:	e005      	b.n	8007532 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	3318      	adds	r3, #24
 800752a:	4619      	mov	r1, r3
 800752c:	480e      	ldr	r0, [pc, #56]	; (8007568 <xTaskRemoveFromEventList+0xc0>)
 800752e:	f7fe fda0 	bl	8006072 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007536:	4b0d      	ldr	r3, [pc, #52]	; (800756c <xTaskRemoveFromEventList+0xc4>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753c:	429a      	cmp	r2, r3
 800753e:	d905      	bls.n	800754c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007540:	2301      	movs	r3, #1
 8007542:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007544:	4b0a      	ldr	r3, [pc, #40]	; (8007570 <xTaskRemoveFromEventList+0xc8>)
 8007546:	2201      	movs	r2, #1
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	e001      	b.n	8007550 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800754c:	2300      	movs	r3, #0
 800754e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007550:	697b      	ldr	r3, [r7, #20]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3718      	adds	r7, #24
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	20001eac 	.word	0x20001eac
 8007560:	20001e8c 	.word	0x20001e8c
 8007564:	200019b4 	.word	0x200019b4
 8007568:	20001e44 	.word	0x20001e44
 800756c:	200019b0 	.word	0x200019b0
 8007570:	20001e98 	.word	0x20001e98

08007574 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800757c:	4b06      	ldr	r3, [pc, #24]	; (8007598 <vTaskInternalSetTimeOutState+0x24>)
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007584:	4b05      	ldr	r3, [pc, #20]	; (800759c <vTaskInternalSetTimeOutState+0x28>)
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	605a      	str	r2, [r3, #4]
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr
 8007598:	20001e9c 	.word	0x20001e9c
 800759c:	20001e88 	.word	0x20001e88

080075a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b088      	sub	sp, #32
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10c      	bne.n	80075ca <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80075b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b4:	b672      	cpsid	i
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	b662      	cpsie	i
 80075c4:	613b      	str	r3, [r7, #16]
}
 80075c6:	bf00      	nop
 80075c8:	e7fe      	b.n	80075c8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10c      	bne.n	80075ea <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80075d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d4:	b672      	cpsid	i
 80075d6:	f383 8811 	msr	BASEPRI, r3
 80075da:	f3bf 8f6f 	isb	sy
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	b662      	cpsie	i
 80075e4:	60fb      	str	r3, [r7, #12]
}
 80075e6:	bf00      	nop
 80075e8:	e7fe      	b.n	80075e8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80075ea:	f000 fea7 	bl	800833c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80075ee:	4b1d      	ldr	r3, [pc, #116]	; (8007664 <xTaskCheckForTimeOut+0xc4>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	69ba      	ldr	r2, [r7, #24]
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007606:	d102      	bne.n	800760e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007608:	2300      	movs	r3, #0
 800760a:	61fb      	str	r3, [r7, #28]
 800760c:	e023      	b.n	8007656 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	4b15      	ldr	r3, [pc, #84]	; (8007668 <xTaskCheckForTimeOut+0xc8>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	429a      	cmp	r2, r3
 8007618:	d007      	beq.n	800762a <xTaskCheckForTimeOut+0x8a>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	69ba      	ldr	r2, [r7, #24]
 8007620:	429a      	cmp	r2, r3
 8007622:	d302      	bcc.n	800762a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007624:	2301      	movs	r3, #1
 8007626:	61fb      	str	r3, [r7, #28]
 8007628:	e015      	b.n	8007656 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	697a      	ldr	r2, [r7, #20]
 8007630:	429a      	cmp	r2, r3
 8007632:	d20b      	bcs.n	800764c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	1ad2      	subs	r2, r2, r3
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f7ff ff97 	bl	8007574 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007646:	2300      	movs	r3, #0
 8007648:	61fb      	str	r3, [r7, #28]
 800764a:	e004      	b.n	8007656 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	2200      	movs	r2, #0
 8007650:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007652:	2301      	movs	r3, #1
 8007654:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007656:	f000 fea5 	bl	80083a4 <vPortExitCritical>

	return xReturn;
 800765a:	69fb      	ldr	r3, [r7, #28]
}
 800765c:	4618      	mov	r0, r3
 800765e:	3720      	adds	r7, #32
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	20001e88 	.word	0x20001e88
 8007668:	20001e9c 	.word	0x20001e9c

0800766c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800766c:	b480      	push	{r7}
 800766e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007670:	4b03      	ldr	r3, [pc, #12]	; (8007680 <vTaskMissedYield+0x14>)
 8007672:	2201      	movs	r2, #1
 8007674:	601a      	str	r2, [r3, #0]
}
 8007676:	bf00      	nop
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	20001e98 	.word	0x20001e98

08007684 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800768c:	f000 f852 	bl	8007734 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007690:	4b06      	ldr	r3, [pc, #24]	; (80076ac <prvIdleTask+0x28>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d9f9      	bls.n	800768c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007698:	4b05      	ldr	r3, [pc, #20]	; (80076b0 <prvIdleTask+0x2c>)
 800769a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800769e:	601a      	str	r2, [r3, #0]
 80076a0:	f3bf 8f4f 	dsb	sy
 80076a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80076a8:	e7f0      	b.n	800768c <prvIdleTask+0x8>
 80076aa:	bf00      	nop
 80076ac:	200019b4 	.word	0x200019b4
 80076b0:	e000ed04 	.word	0xe000ed04

080076b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076ba:	2300      	movs	r3, #0
 80076bc:	607b      	str	r3, [r7, #4]
 80076be:	e00c      	b.n	80076da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	4613      	mov	r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4413      	add	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4a12      	ldr	r2, [pc, #72]	; (8007714 <prvInitialiseTaskLists+0x60>)
 80076cc:	4413      	add	r3, r2
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7fe fca2 	bl	8006018 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	3301      	adds	r3, #1
 80076d8:	607b      	str	r3, [r7, #4]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b37      	cmp	r3, #55	; 0x37
 80076de:	d9ef      	bls.n	80076c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80076e0:	480d      	ldr	r0, [pc, #52]	; (8007718 <prvInitialiseTaskLists+0x64>)
 80076e2:	f7fe fc99 	bl	8006018 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80076e6:	480d      	ldr	r0, [pc, #52]	; (800771c <prvInitialiseTaskLists+0x68>)
 80076e8:	f7fe fc96 	bl	8006018 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80076ec:	480c      	ldr	r0, [pc, #48]	; (8007720 <prvInitialiseTaskLists+0x6c>)
 80076ee:	f7fe fc93 	bl	8006018 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80076f2:	480c      	ldr	r0, [pc, #48]	; (8007724 <prvInitialiseTaskLists+0x70>)
 80076f4:	f7fe fc90 	bl	8006018 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80076f8:	480b      	ldr	r0, [pc, #44]	; (8007728 <prvInitialiseTaskLists+0x74>)
 80076fa:	f7fe fc8d 	bl	8006018 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80076fe:	4b0b      	ldr	r3, [pc, #44]	; (800772c <prvInitialiseTaskLists+0x78>)
 8007700:	4a05      	ldr	r2, [pc, #20]	; (8007718 <prvInitialiseTaskLists+0x64>)
 8007702:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007704:	4b0a      	ldr	r3, [pc, #40]	; (8007730 <prvInitialiseTaskLists+0x7c>)
 8007706:	4a05      	ldr	r2, [pc, #20]	; (800771c <prvInitialiseTaskLists+0x68>)
 8007708:	601a      	str	r2, [r3, #0]
}
 800770a:	bf00      	nop
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	200019b4 	.word	0x200019b4
 8007718:	20001e14 	.word	0x20001e14
 800771c:	20001e28 	.word	0x20001e28
 8007720:	20001e44 	.word	0x20001e44
 8007724:	20001e58 	.word	0x20001e58
 8007728:	20001e70 	.word	0x20001e70
 800772c:	20001e3c 	.word	0x20001e3c
 8007730:	20001e40 	.word	0x20001e40

08007734 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800773a:	e019      	b.n	8007770 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800773c:	f000 fdfe 	bl	800833c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007740:	4b10      	ldr	r3, [pc, #64]	; (8007784 <prvCheckTasksWaitingTermination+0x50>)
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	3304      	adds	r3, #4
 800774c:	4618      	mov	r0, r3
 800774e:	f7fe fced 	bl	800612c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007752:	4b0d      	ldr	r3, [pc, #52]	; (8007788 <prvCheckTasksWaitingTermination+0x54>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	3b01      	subs	r3, #1
 8007758:	4a0b      	ldr	r2, [pc, #44]	; (8007788 <prvCheckTasksWaitingTermination+0x54>)
 800775a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800775c:	4b0b      	ldr	r3, [pc, #44]	; (800778c <prvCheckTasksWaitingTermination+0x58>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	3b01      	subs	r3, #1
 8007762:	4a0a      	ldr	r2, [pc, #40]	; (800778c <prvCheckTasksWaitingTermination+0x58>)
 8007764:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007766:	f000 fe1d 	bl	80083a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f848 	bl	8007800 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007770:	4b06      	ldr	r3, [pc, #24]	; (800778c <prvCheckTasksWaitingTermination+0x58>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1e1      	bne.n	800773c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007778:	bf00      	nop
 800777a:	bf00      	nop
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	20001e58 	.word	0x20001e58
 8007788:	20001e84 	.word	0x20001e84
 800778c:	20001e6c 	.word	0x20001e6c

08007790 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8007798:	2300      	movs	r3, #0
 800779a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800779c:	e005      	b.n	80077aa <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	3301      	adds	r3, #1
 80077a2:	607b      	str	r3, [r7, #4]
			ulCount++;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	3301      	adds	r3, #1
 80077a8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	2ba5      	cmp	r3, #165	; 0xa5
 80077b0:	d0f5      	beq.n	800779e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	089b      	lsrs	r3, r3, #2
 80077b6:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	b29b      	uxth	r3, r3
	}
 80077bc:	4618      	mov	r0, r3
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d102      	bne.n	80077dc <uxTaskGetStackHighWaterMark+0x14>
 80077d6:	4b09      	ldr	r3, [pc, #36]	; (80077fc <uxTaskGetStackHighWaterMark+0x34>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	e000      	b.n	80077de <uxTaskGetStackHighWaterMark+0x16>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e4:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80077e6:	6938      	ldr	r0, [r7, #16]
 80077e8:	f7ff ffd2 	bl	8007790 <prvTaskCheckFreeStackSpace>
 80077ec:	4603      	mov	r3, r0
 80077ee:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80077f0:	68fb      	ldr	r3, [r7, #12]
	}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3718      	adds	r7, #24
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	200019b0 	.word	0x200019b0

08007800 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800780e:	2b00      	cmp	r3, #0
 8007810:	d108      	bne.n	8007824 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007816:	4618      	mov	r0, r3
 8007818:	f000 ff86 	bl	8008728 <vPortFree>
				vPortFree( pxTCB );
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 ff83 	bl	8008728 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007822:	e01a      	b.n	800785a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800782a:	2b01      	cmp	r3, #1
 800782c:	d103      	bne.n	8007836 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 ff7a 	bl	8008728 <vPortFree>
	}
 8007834:	e011      	b.n	800785a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800783c:	2b02      	cmp	r3, #2
 800783e:	d00c      	beq.n	800785a <prvDeleteTCB+0x5a>
	__asm volatile
 8007840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007844:	b672      	cpsid	i
 8007846:	f383 8811 	msr	BASEPRI, r3
 800784a:	f3bf 8f6f 	isb	sy
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	b662      	cpsie	i
 8007854:	60fb      	str	r3, [r7, #12]
}
 8007856:	bf00      	nop
 8007858:	e7fe      	b.n	8007858 <prvDeleteTCB+0x58>
	}
 800785a:	bf00      	nop
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
	...

08007864 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800786a:	4b0c      	ldr	r3, [pc, #48]	; (800789c <prvResetNextTaskUnblockTime+0x38>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d104      	bne.n	800787e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007874:	4b0a      	ldr	r3, [pc, #40]	; (80078a0 <prvResetNextTaskUnblockTime+0x3c>)
 8007876:	f04f 32ff 	mov.w	r2, #4294967295
 800787a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800787c:	e008      	b.n	8007890 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800787e:	4b07      	ldr	r3, [pc, #28]	; (800789c <prvResetNextTaskUnblockTime+0x38>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	4a04      	ldr	r2, [pc, #16]	; (80078a0 <prvResetNextTaskUnblockTime+0x3c>)
 800788e:	6013      	str	r3, [r2, #0]
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr
 800789c:	20001e3c 	.word	0x20001e3c
 80078a0:	20001ea4 	.word	0x20001ea4

080078a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80078aa:	4b0b      	ldr	r3, [pc, #44]	; (80078d8 <xTaskGetSchedulerState+0x34>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d102      	bne.n	80078b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80078b2:	2301      	movs	r3, #1
 80078b4:	607b      	str	r3, [r7, #4]
 80078b6:	e008      	b.n	80078ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078b8:	4b08      	ldr	r3, [pc, #32]	; (80078dc <xTaskGetSchedulerState+0x38>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d102      	bne.n	80078c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80078c0:	2302      	movs	r3, #2
 80078c2:	607b      	str	r3, [r7, #4]
 80078c4:	e001      	b.n	80078ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80078c6:	2300      	movs	r3, #0
 80078c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80078ca:	687b      	ldr	r3, [r7, #4]
	}
 80078cc:	4618      	mov	r0, r3
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr
 80078d8:	20001e90 	.word	0x20001e90
 80078dc:	20001eac 	.word	0x20001eac

080078e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80078ec:	2300      	movs	r3, #0
 80078ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d05a      	beq.n	80079ac <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80078f6:	4b30      	ldr	r3, [pc, #192]	; (80079b8 <xTaskPriorityDisinherit+0xd8>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	693a      	ldr	r2, [r7, #16]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d00c      	beq.n	800791a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007904:	b672      	cpsid	i
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	b662      	cpsie	i
 8007914:	60fb      	str	r3, [r7, #12]
}
 8007916:	bf00      	nop
 8007918:	e7fe      	b.n	8007918 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10c      	bne.n	800793c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007926:	b672      	cpsid	i
 8007928:	f383 8811 	msr	BASEPRI, r3
 800792c:	f3bf 8f6f 	isb	sy
 8007930:	f3bf 8f4f 	dsb	sy
 8007934:	b662      	cpsie	i
 8007936:	60bb      	str	r3, [r7, #8]
}
 8007938:	bf00      	nop
 800793a:	e7fe      	b.n	800793a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007940:	1e5a      	subs	r2, r3, #1
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800794e:	429a      	cmp	r2, r3
 8007950:	d02c      	beq.n	80079ac <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007956:	2b00      	cmp	r3, #0
 8007958:	d128      	bne.n	80079ac <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	3304      	adds	r3, #4
 800795e:	4618      	mov	r0, r3
 8007960:	f7fe fbe4 	bl	800612c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007970:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800797c:	4b0f      	ldr	r3, [pc, #60]	; (80079bc <xTaskPriorityDisinherit+0xdc>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	429a      	cmp	r2, r3
 8007982:	d903      	bls.n	800798c <xTaskPriorityDisinherit+0xac>
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007988:	4a0c      	ldr	r2, [pc, #48]	; (80079bc <xTaskPriorityDisinherit+0xdc>)
 800798a:	6013      	str	r3, [r2, #0]
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007990:	4613      	mov	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	4a09      	ldr	r2, [pc, #36]	; (80079c0 <xTaskPriorityDisinherit+0xe0>)
 800799a:	441a      	add	r2, r3
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	3304      	adds	r3, #4
 80079a0:	4619      	mov	r1, r3
 80079a2:	4610      	mov	r0, r2
 80079a4:	f7fe fb65 	bl	8006072 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80079a8:	2301      	movs	r3, #1
 80079aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079ac:	697b      	ldr	r3, [r7, #20]
	}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3718      	adds	r7, #24
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	200019b0 	.word	0x200019b0
 80079bc:	20001e8c 	.word	0x20001e8c
 80079c0:	200019b4 	.word	0x200019b4

080079c4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80079ce:	4b21      	ldr	r3, [pc, #132]	; (8007a54 <prvAddCurrentTaskToDelayedList+0x90>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079d4:	4b20      	ldr	r3, [pc, #128]	; (8007a58 <prvAddCurrentTaskToDelayedList+0x94>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	3304      	adds	r3, #4
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fe fba6 	bl	800612c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e6:	d10a      	bne.n	80079fe <prvAddCurrentTaskToDelayedList+0x3a>
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d007      	beq.n	80079fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079ee:	4b1a      	ldr	r3, [pc, #104]	; (8007a58 <prvAddCurrentTaskToDelayedList+0x94>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	3304      	adds	r3, #4
 80079f4:	4619      	mov	r1, r3
 80079f6:	4819      	ldr	r0, [pc, #100]	; (8007a5c <prvAddCurrentTaskToDelayedList+0x98>)
 80079f8:	f7fe fb3b 	bl	8006072 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80079fc:	e026      	b.n	8007a4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4413      	add	r3, r2
 8007a04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a06:	4b14      	ldr	r3, [pc, #80]	; (8007a58 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68ba      	ldr	r2, [r7, #8]
 8007a0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a0e:	68ba      	ldr	r2, [r7, #8]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d209      	bcs.n	8007a2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a16:	4b12      	ldr	r3, [pc, #72]	; (8007a60 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	4b0f      	ldr	r3, [pc, #60]	; (8007a58 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	3304      	adds	r3, #4
 8007a20:	4619      	mov	r1, r3
 8007a22:	4610      	mov	r0, r2
 8007a24:	f7fe fb49 	bl	80060ba <vListInsert>
}
 8007a28:	e010      	b.n	8007a4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a2a:	4b0e      	ldr	r3, [pc, #56]	; (8007a64 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	4b0a      	ldr	r3, [pc, #40]	; (8007a58 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3304      	adds	r3, #4
 8007a34:	4619      	mov	r1, r3
 8007a36:	4610      	mov	r0, r2
 8007a38:	f7fe fb3f 	bl	80060ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a3c:	4b0a      	ldr	r3, [pc, #40]	; (8007a68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d202      	bcs.n	8007a4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007a46:	4a08      	ldr	r2, [pc, #32]	; (8007a68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	6013      	str	r3, [r2, #0]
}
 8007a4c:	bf00      	nop
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	20001e88 	.word	0x20001e88
 8007a58:	200019b0 	.word	0x200019b0
 8007a5c:	20001e70 	.word	0x20001e70
 8007a60:	20001e40 	.word	0x20001e40
 8007a64:	20001e3c 	.word	0x20001e3c
 8007a68:	20001ea4 	.word	0x20001ea4

08007a6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b08a      	sub	sp, #40	; 0x28
 8007a70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007a72:	2300      	movs	r3, #0
 8007a74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007a76:	f000 fb15 	bl	80080a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007a7a:	4b1d      	ldr	r3, [pc, #116]	; (8007af0 <xTimerCreateTimerTask+0x84>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d021      	beq.n	8007ac6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007a82:	2300      	movs	r3, #0
 8007a84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007a86:	2300      	movs	r3, #0
 8007a88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007a8a:	1d3a      	adds	r2, r7, #4
 8007a8c:	f107 0108 	add.w	r1, r7, #8
 8007a90:	f107 030c 	add.w	r3, r7, #12
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7fe faa5 	bl	8005fe4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007a9a:	6879      	ldr	r1, [r7, #4]
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	9202      	str	r2, [sp, #8]
 8007aa2:	9301      	str	r3, [sp, #4]
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	9300      	str	r3, [sp, #0]
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	460a      	mov	r2, r1
 8007aac:	4911      	ldr	r1, [pc, #68]	; (8007af4 <xTimerCreateTimerTask+0x88>)
 8007aae:	4812      	ldr	r0, [pc, #72]	; (8007af8 <xTimerCreateTimerTask+0x8c>)
 8007ab0:	f7ff f870 	bl	8006b94 <xTaskCreateStatic>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	4a11      	ldr	r2, [pc, #68]	; (8007afc <xTimerCreateTimerTask+0x90>)
 8007ab8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007aba:	4b10      	ldr	r3, [pc, #64]	; (8007afc <xTimerCreateTimerTask+0x90>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d001      	beq.n	8007ac6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10c      	bne.n	8007ae6 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8007acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad0:	b672      	cpsid	i
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	b662      	cpsie	i
 8007ae0:	613b      	str	r3, [r7, #16]
}
 8007ae2:	bf00      	nop
 8007ae4:	e7fe      	b.n	8007ae4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007ae6:	697b      	ldr	r3, [r7, #20]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3718      	adds	r7, #24
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	20001ee0 	.word	0x20001ee0
 8007af4:	08008a60 	.word	0x08008a60
 8007af8:	08007c3d 	.word	0x08007c3d
 8007afc:	20001ee4 	.word	0x20001ee4

08007b00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b08a      	sub	sp, #40	; 0x28
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
 8007b0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10c      	bne.n	8007b32 <xTimerGenericCommand+0x32>
	__asm volatile
 8007b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1c:	b672      	cpsid	i
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	b662      	cpsie	i
 8007b2c:	623b      	str	r3, [r7, #32]
}
 8007b2e:	bf00      	nop
 8007b30:	e7fe      	b.n	8007b30 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007b32:	4b1a      	ldr	r3, [pc, #104]	; (8007b9c <xTimerGenericCommand+0x9c>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d02a      	beq.n	8007b90 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	2b05      	cmp	r3, #5
 8007b4a:	dc18      	bgt.n	8007b7e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007b4c:	f7ff feaa 	bl	80078a4 <xTaskGetSchedulerState>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	d109      	bne.n	8007b6a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007b56:	4b11      	ldr	r3, [pc, #68]	; (8007b9c <xTimerGenericCommand+0x9c>)
 8007b58:	6818      	ldr	r0, [r3, #0]
 8007b5a:	f107 0110 	add.w	r1, r7, #16
 8007b5e:	2300      	movs	r3, #0
 8007b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b62:	f7fe fc1d 	bl	80063a0 <xQueueGenericSend>
 8007b66:	6278      	str	r0, [r7, #36]	; 0x24
 8007b68:	e012      	b.n	8007b90 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007b6a:	4b0c      	ldr	r3, [pc, #48]	; (8007b9c <xTimerGenericCommand+0x9c>)
 8007b6c:	6818      	ldr	r0, [r3, #0]
 8007b6e:	f107 0110 	add.w	r1, r7, #16
 8007b72:	2300      	movs	r3, #0
 8007b74:	2200      	movs	r2, #0
 8007b76:	f7fe fc13 	bl	80063a0 <xQueueGenericSend>
 8007b7a:	6278      	str	r0, [r7, #36]	; 0x24
 8007b7c:	e008      	b.n	8007b90 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007b7e:	4b07      	ldr	r3, [pc, #28]	; (8007b9c <xTimerGenericCommand+0x9c>)
 8007b80:	6818      	ldr	r0, [r3, #0]
 8007b82:	f107 0110 	add.w	r1, r7, #16
 8007b86:	2300      	movs	r3, #0
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	f7fe fd0f 	bl	80065ac <xQueueGenericSendFromISR>
 8007b8e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3728      	adds	r7, #40	; 0x28
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	20001ee0 	.word	0x20001ee0

08007ba0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b088      	sub	sp, #32
 8007ba4:	af02      	add	r7, sp, #8
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007baa:	4b23      	ldr	r3, [pc, #140]	; (8007c38 <prvProcessExpiredTimer+0x98>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	3304      	adds	r3, #4
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7fe fab7 	bl	800612c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bc4:	f003 0304 	and.w	r3, r3, #4
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d024      	beq.n	8007c16 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	699a      	ldr	r2, [r3, #24]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	18d1      	adds	r1, r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	6978      	ldr	r0, [r7, #20]
 8007bda:	f000 f8d3 	bl	8007d84 <prvInsertTimerInActiveList>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d021      	beq.n	8007c28 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007be4:	2300      	movs	r3, #0
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	2300      	movs	r3, #0
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	2100      	movs	r1, #0
 8007bee:	6978      	ldr	r0, [r7, #20]
 8007bf0:	f7ff ff86 	bl	8007b00 <xTimerGenericCommand>
 8007bf4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d115      	bne.n	8007c28 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8007bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c00:	b672      	cpsid	i
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	b662      	cpsie	i
 8007c10:	60fb      	str	r3, [r7, #12]
}
 8007c12:	bf00      	nop
 8007c14:	e7fe      	b.n	8007c14 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c1c:	f023 0301 	bic.w	r3, r3, #1
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	6a1b      	ldr	r3, [r3, #32]
 8007c2c:	6978      	ldr	r0, [r7, #20]
 8007c2e:	4798      	blx	r3
}
 8007c30:	bf00      	nop
 8007c32:	3718      	adds	r7, #24
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	20001ed8 	.word	0x20001ed8

08007c3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c44:	f107 0308 	add.w	r3, r7, #8
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f000 f857 	bl	8007cfc <prvGetNextExpireTime>
 8007c4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	4619      	mov	r1, r3
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f000 f803 	bl	8007c60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007c5a:	f000 f8d5 	bl	8007e08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c5e:	e7f1      	b.n	8007c44 <prvTimerTask+0x8>

08007c60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007c6a:	f7ff f9dd 	bl	8007028 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c6e:	f107 0308 	add.w	r3, r7, #8
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 f866 	bl	8007d44 <prvSampleTimeNow>
 8007c78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d130      	bne.n	8007ce2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10a      	bne.n	8007c9c <prvProcessTimerOrBlockTask+0x3c>
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d806      	bhi.n	8007c9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007c8e:	f7ff f9d9 	bl	8007044 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007c92:	68f9      	ldr	r1, [r7, #12]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f7ff ff83 	bl	8007ba0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007c9a:	e024      	b.n	8007ce6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d008      	beq.n	8007cb4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007ca2:	4b13      	ldr	r3, [pc, #76]	; (8007cf0 <prvProcessTimerOrBlockTask+0x90>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d101      	bne.n	8007cb0 <prvProcessTimerOrBlockTask+0x50>
 8007cac:	2301      	movs	r3, #1
 8007cae:	e000      	b.n	8007cb2 <prvProcessTimerOrBlockTask+0x52>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007cb4:	4b0f      	ldr	r3, [pc, #60]	; (8007cf4 <prvProcessTimerOrBlockTask+0x94>)
 8007cb6:	6818      	ldr	r0, [r3, #0]
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	683a      	ldr	r2, [r7, #0]
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	f7fe ff33 	bl	8006b2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007cc6:	f7ff f9bd 	bl	8007044 <xTaskResumeAll>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10a      	bne.n	8007ce6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007cd0:	4b09      	ldr	r3, [pc, #36]	; (8007cf8 <prvProcessTimerOrBlockTask+0x98>)
 8007cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cd6:	601a      	str	r2, [r3, #0]
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	f3bf 8f6f 	isb	sy
}
 8007ce0:	e001      	b.n	8007ce6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007ce2:	f7ff f9af 	bl	8007044 <xTaskResumeAll>
}
 8007ce6:	bf00      	nop
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	20001edc 	.word	0x20001edc
 8007cf4:	20001ee0 	.word	0x20001ee0
 8007cf8:	e000ed04 	.word	0xe000ed04

08007cfc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007d04:	4b0e      	ldr	r3, [pc, #56]	; (8007d40 <prvGetNextExpireTime+0x44>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d101      	bne.n	8007d12 <prvGetNextExpireTime+0x16>
 8007d0e:	2201      	movs	r2, #1
 8007d10:	e000      	b.n	8007d14 <prvGetNextExpireTime+0x18>
 8007d12:	2200      	movs	r2, #0
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d105      	bne.n	8007d2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d20:	4b07      	ldr	r3, [pc, #28]	; (8007d40 <prvGetNextExpireTime+0x44>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	60fb      	str	r3, [r7, #12]
 8007d2a:	e001      	b.n	8007d30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007d30:	68fb      	ldr	r3, [r7, #12]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	20001ed8 	.word	0x20001ed8

08007d44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007d4c:	f7ff fa1a 	bl	8007184 <xTaskGetTickCount>
 8007d50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007d52:	4b0b      	ldr	r3, [pc, #44]	; (8007d80 <prvSampleTimeNow+0x3c>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d205      	bcs.n	8007d68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007d5c:	f000 f93c 	bl	8007fd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	601a      	str	r2, [r3, #0]
 8007d66:	e002      	b.n	8007d6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007d6e:	4a04      	ldr	r2, [pc, #16]	; (8007d80 <prvSampleTimeNow+0x3c>)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007d74:	68fb      	ldr	r3, [r7, #12]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	20001ee8 	.word	0x20001ee8

08007d84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b086      	sub	sp, #24
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
 8007d90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007d92:	2300      	movs	r3, #0
 8007d94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	68ba      	ldr	r2, [r7, #8]
 8007d9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d812      	bhi.n	8007dd0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	1ad2      	subs	r2, r2, r3
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d302      	bcc.n	8007dbe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007db8:	2301      	movs	r3, #1
 8007dba:	617b      	str	r3, [r7, #20]
 8007dbc:	e01b      	b.n	8007df6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007dbe:	4b10      	ldr	r3, [pc, #64]	; (8007e00 <prvInsertTimerInActiveList+0x7c>)
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	3304      	adds	r3, #4
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	4610      	mov	r0, r2
 8007dca:	f7fe f976 	bl	80060ba <vListInsert>
 8007dce:	e012      	b.n	8007df6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d206      	bcs.n	8007de6 <prvInsertTimerInActiveList+0x62>
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d302      	bcc.n	8007de6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007de0:	2301      	movs	r3, #1
 8007de2:	617b      	str	r3, [r7, #20]
 8007de4:	e007      	b.n	8007df6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007de6:	4b07      	ldr	r3, [pc, #28]	; (8007e04 <prvInsertTimerInActiveList+0x80>)
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	3304      	adds	r3, #4
 8007dee:	4619      	mov	r1, r3
 8007df0:	4610      	mov	r0, r2
 8007df2:	f7fe f962 	bl	80060ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007df6:	697b      	ldr	r3, [r7, #20]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3718      	adds	r7, #24
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	20001edc 	.word	0x20001edc
 8007e04:	20001ed8 	.word	0x20001ed8

08007e08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b08e      	sub	sp, #56	; 0x38
 8007e0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e0e:	e0d0      	b.n	8007fb2 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	da1a      	bge.n	8007e4c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007e16:	1d3b      	adds	r3, r7, #4
 8007e18:	3304      	adds	r3, #4
 8007e1a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10c      	bne.n	8007e3c <prvProcessReceivedCommands+0x34>
	__asm volatile
 8007e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e26:	b672      	cpsid	i
 8007e28:	f383 8811 	msr	BASEPRI, r3
 8007e2c:	f3bf 8f6f 	isb	sy
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	b662      	cpsie	i
 8007e36:	61fb      	str	r3, [r7, #28]
}
 8007e38:	bf00      	nop
 8007e3a:	e7fe      	b.n	8007e3a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e42:	6850      	ldr	r0, [r2, #4]
 8007e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e46:	6892      	ldr	r2, [r2, #8]
 8007e48:	4611      	mov	r1, r2
 8007e4a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f2c0 80af 	blt.w	8007fb2 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5a:	695b      	ldr	r3, [r3, #20]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d004      	beq.n	8007e6a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e62:	3304      	adds	r3, #4
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7fe f961 	bl	800612c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e6a:	463b      	mov	r3, r7
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7ff ff69 	bl	8007d44 <prvSampleTimeNow>
 8007e72:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2b09      	cmp	r3, #9
 8007e78:	f200 809a 	bhi.w	8007fb0 <prvProcessReceivedCommands+0x1a8>
 8007e7c:	a201      	add	r2, pc, #4	; (adr r2, 8007e84 <prvProcessReceivedCommands+0x7c>)
 8007e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e82:	bf00      	nop
 8007e84:	08007ead 	.word	0x08007ead
 8007e88:	08007ead 	.word	0x08007ead
 8007e8c:	08007ead 	.word	0x08007ead
 8007e90:	08007f25 	.word	0x08007f25
 8007e94:	08007f39 	.word	0x08007f39
 8007e98:	08007f87 	.word	0x08007f87
 8007e9c:	08007ead 	.word	0x08007ead
 8007ea0:	08007ead 	.word	0x08007ead
 8007ea4:	08007f25 	.word	0x08007f25
 8007ea8:	08007f39 	.word	0x08007f39
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007eb2:	f043 0301 	orr.w	r3, r3, #1
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007ebe:	68ba      	ldr	r2, [r7, #8]
 8007ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec2:	699b      	ldr	r3, [r3, #24]
 8007ec4:	18d1      	adds	r1, r2, r3
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ecc:	f7ff ff5a 	bl	8007d84 <prvInsertTimerInActiveList>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d06d      	beq.n	8007fb2 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007edc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ee4:	f003 0304 	and.w	r3, r3, #4
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d062      	beq.n	8007fb2 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	441a      	add	r2, r3
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	9300      	str	r3, [sp, #0]
 8007ef8:	2300      	movs	r3, #0
 8007efa:	2100      	movs	r1, #0
 8007efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007efe:	f7ff fdff 	bl	8007b00 <xTimerGenericCommand>
 8007f02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007f04:	6a3b      	ldr	r3, [r7, #32]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d153      	bne.n	8007fb2 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8007f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0e:	b672      	cpsid	i
 8007f10:	f383 8811 	msr	BASEPRI, r3
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	b662      	cpsie	i
 8007f1e:	61bb      	str	r3, [r7, #24]
}
 8007f20:	bf00      	nop
 8007f22:	e7fe      	b.n	8007f22 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f2a:	f023 0301 	bic.w	r3, r3, #1
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007f36:	e03c      	b.n	8007fb2 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f3e:	f043 0301 	orr.w	r3, r3, #1
 8007f42:	b2da      	uxtb	r2, r3
 8007f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10c      	bne.n	8007f72 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8007f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5c:	b672      	cpsid	i
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	b662      	cpsie	i
 8007f6c:	617b      	str	r3, [r7, #20]
}
 8007f6e:	bf00      	nop
 8007f70:	e7fe      	b.n	8007f70 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f74:	699a      	ldr	r2, [r3, #24]
 8007f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f78:	18d1      	adds	r1, r2, r3
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f80:	f7ff ff00 	bl	8007d84 <prvInsertTimerInActiveList>
					break;
 8007f84:	e015      	b.n	8007fb2 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f8c:	f003 0302 	and.w	r3, r3, #2
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d103      	bne.n	8007f9c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8007f94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f96:	f000 fbc7 	bl	8008728 <vPortFree>
 8007f9a:	e00a      	b.n	8007fb2 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fa2:	f023 0301 	bic.w	r3, r3, #1
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007faa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007fae:	e000      	b.n	8007fb2 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8007fb0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007fb2:	4b08      	ldr	r3, [pc, #32]	; (8007fd4 <prvProcessReceivedCommands+0x1cc>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	1d39      	adds	r1, r7, #4
 8007fb8:	2200      	movs	r2, #0
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7fe fb96 	bl	80066ec <xQueueReceive>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f47f af24 	bne.w	8007e10 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007fc8:	bf00      	nop
 8007fca:	bf00      	nop
 8007fcc:	3730      	adds	r7, #48	; 0x30
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	20001ee0 	.word	0x20001ee0

08007fd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b088      	sub	sp, #32
 8007fdc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007fde:	e04a      	b.n	8008076 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fe0:	4b2e      	ldr	r3, [pc, #184]	; (800809c <prvSwitchTimerLists+0xc4>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fea:	4b2c      	ldr	r3, [pc, #176]	; (800809c <prvSwitchTimerLists+0xc4>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	3304      	adds	r3, #4
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7fe f897 	bl	800612c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800800c:	f003 0304 	and.w	r3, r3, #4
 8008010:	2b00      	cmp	r3, #0
 8008012:	d030      	beq.n	8008076 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	693a      	ldr	r2, [r7, #16]
 800801a:	4413      	add	r3, r2
 800801c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800801e:	68ba      	ldr	r2, [r7, #8]
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	429a      	cmp	r2, r3
 8008024:	d90e      	bls.n	8008044 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008032:	4b1a      	ldr	r3, [pc, #104]	; (800809c <prvSwitchTimerLists+0xc4>)
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	3304      	adds	r3, #4
 800803a:	4619      	mov	r1, r3
 800803c:	4610      	mov	r0, r2
 800803e:	f7fe f83c 	bl	80060ba <vListInsert>
 8008042:	e018      	b.n	8008076 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008044:	2300      	movs	r3, #0
 8008046:	9300      	str	r3, [sp, #0]
 8008048:	2300      	movs	r3, #0
 800804a:	693a      	ldr	r2, [r7, #16]
 800804c:	2100      	movs	r1, #0
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f7ff fd56 	bl	8007b00 <xTimerGenericCommand>
 8008054:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10c      	bne.n	8008076 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800805c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008060:	b672      	cpsid	i
 8008062:	f383 8811 	msr	BASEPRI, r3
 8008066:	f3bf 8f6f 	isb	sy
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	b662      	cpsie	i
 8008070:	603b      	str	r3, [r7, #0]
}
 8008072:	bf00      	nop
 8008074:	e7fe      	b.n	8008074 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008076:	4b09      	ldr	r3, [pc, #36]	; (800809c <prvSwitchTimerLists+0xc4>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1af      	bne.n	8007fe0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008080:	4b06      	ldr	r3, [pc, #24]	; (800809c <prvSwitchTimerLists+0xc4>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008086:	4b06      	ldr	r3, [pc, #24]	; (80080a0 <prvSwitchTimerLists+0xc8>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a04      	ldr	r2, [pc, #16]	; (800809c <prvSwitchTimerLists+0xc4>)
 800808c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800808e:	4a04      	ldr	r2, [pc, #16]	; (80080a0 <prvSwitchTimerLists+0xc8>)
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	6013      	str	r3, [r2, #0]
}
 8008094:	bf00      	nop
 8008096:	3718      	adds	r7, #24
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	20001ed8 	.word	0x20001ed8
 80080a0:	20001edc 	.word	0x20001edc

080080a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80080aa:	f000 f947 	bl	800833c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80080ae:	4b15      	ldr	r3, [pc, #84]	; (8008104 <prvCheckForValidListAndQueue+0x60>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d120      	bne.n	80080f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80080b6:	4814      	ldr	r0, [pc, #80]	; (8008108 <prvCheckForValidListAndQueue+0x64>)
 80080b8:	f7fd ffae 	bl	8006018 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80080bc:	4813      	ldr	r0, [pc, #76]	; (800810c <prvCheckForValidListAndQueue+0x68>)
 80080be:	f7fd ffab 	bl	8006018 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80080c2:	4b13      	ldr	r3, [pc, #76]	; (8008110 <prvCheckForValidListAndQueue+0x6c>)
 80080c4:	4a10      	ldr	r2, [pc, #64]	; (8008108 <prvCheckForValidListAndQueue+0x64>)
 80080c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80080c8:	4b12      	ldr	r3, [pc, #72]	; (8008114 <prvCheckForValidListAndQueue+0x70>)
 80080ca:	4a10      	ldr	r2, [pc, #64]	; (800810c <prvCheckForValidListAndQueue+0x68>)
 80080cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80080ce:	2300      	movs	r3, #0
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	4b11      	ldr	r3, [pc, #68]	; (8008118 <prvCheckForValidListAndQueue+0x74>)
 80080d4:	4a11      	ldr	r2, [pc, #68]	; (800811c <prvCheckForValidListAndQueue+0x78>)
 80080d6:	2110      	movs	r1, #16
 80080d8:	200a      	movs	r0, #10
 80080da:	f7fe f8bb 	bl	8006254 <xQueueGenericCreateStatic>
 80080de:	4603      	mov	r3, r0
 80080e0:	4a08      	ldr	r2, [pc, #32]	; (8008104 <prvCheckForValidListAndQueue+0x60>)
 80080e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80080e4:	4b07      	ldr	r3, [pc, #28]	; (8008104 <prvCheckForValidListAndQueue+0x60>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d005      	beq.n	80080f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80080ec:	4b05      	ldr	r3, [pc, #20]	; (8008104 <prvCheckForValidListAndQueue+0x60>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	490b      	ldr	r1, [pc, #44]	; (8008120 <prvCheckForValidListAndQueue+0x7c>)
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fe fcf0 	bl	8006ad8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80080f8:	f000 f954 	bl	80083a4 <vPortExitCritical>
}
 80080fc:	bf00      	nop
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	20001ee0 	.word	0x20001ee0
 8008108:	20001eb0 	.word	0x20001eb0
 800810c:	20001ec4 	.word	0x20001ec4
 8008110:	20001ed8 	.word	0x20001ed8
 8008114:	20001edc 	.word	0x20001edc
 8008118:	20001f8c 	.word	0x20001f8c
 800811c:	20001eec 	.word	0x20001eec
 8008120:	08008a68 	.word	0x08008a68

08008124 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	3b04      	subs	r3, #4
 8008134:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800813c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	3b04      	subs	r3, #4
 8008142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	f023 0201 	bic.w	r2, r3, #1
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	3b04      	subs	r3, #4
 8008152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008154:	4a0c      	ldr	r2, [pc, #48]	; (8008188 <pxPortInitialiseStack+0x64>)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	3b14      	subs	r3, #20
 800815e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	3b04      	subs	r3, #4
 800816a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f06f 0202 	mvn.w	r2, #2
 8008172:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	3b20      	subs	r3, #32
 8008178:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800817a:	68fb      	ldr	r3, [r7, #12]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3714      	adds	r7, #20
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr
 8008188:	0800818d 	.word	0x0800818d

0800818c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008192:	2300      	movs	r3, #0
 8008194:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008196:	4b14      	ldr	r3, [pc, #80]	; (80081e8 <prvTaskExitError+0x5c>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800819e:	d00c      	beq.n	80081ba <prvTaskExitError+0x2e>
	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a4:	b672      	cpsid	i
 80081a6:	f383 8811 	msr	BASEPRI, r3
 80081aa:	f3bf 8f6f 	isb	sy
 80081ae:	f3bf 8f4f 	dsb	sy
 80081b2:	b662      	cpsie	i
 80081b4:	60fb      	str	r3, [r7, #12]
}
 80081b6:	bf00      	nop
 80081b8:	e7fe      	b.n	80081b8 <prvTaskExitError+0x2c>
	__asm volatile
 80081ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081be:	b672      	cpsid	i
 80081c0:	f383 8811 	msr	BASEPRI, r3
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	b662      	cpsie	i
 80081ce:	60bb      	str	r3, [r7, #8]
}
 80081d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80081d2:	bf00      	nop
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d0fc      	beq.n	80081d4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80081da:	bf00      	nop
 80081dc:	bf00      	nop
 80081de:	3714      	adds	r7, #20
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr
 80081e8:	2000000c 	.word	0x2000000c
 80081ec:	00000000 	.word	0x00000000

080081f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80081f0:	4b07      	ldr	r3, [pc, #28]	; (8008210 <pxCurrentTCBConst2>)
 80081f2:	6819      	ldr	r1, [r3, #0]
 80081f4:	6808      	ldr	r0, [r1, #0]
 80081f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081fa:	f380 8809 	msr	PSP, r0
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f04f 0000 	mov.w	r0, #0
 8008206:	f380 8811 	msr	BASEPRI, r0
 800820a:	4770      	bx	lr
 800820c:	f3af 8000 	nop.w

08008210 <pxCurrentTCBConst2>:
 8008210:	200019b0 	.word	0x200019b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008214:	bf00      	nop
 8008216:	bf00      	nop

08008218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008218:	4808      	ldr	r0, [pc, #32]	; (800823c <prvPortStartFirstTask+0x24>)
 800821a:	6800      	ldr	r0, [r0, #0]
 800821c:	6800      	ldr	r0, [r0, #0]
 800821e:	f380 8808 	msr	MSP, r0
 8008222:	f04f 0000 	mov.w	r0, #0
 8008226:	f380 8814 	msr	CONTROL, r0
 800822a:	b662      	cpsie	i
 800822c:	b661      	cpsie	f
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	df00      	svc	0
 8008238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800823a:	bf00      	nop
 800823c:	e000ed08 	.word	0xe000ed08

08008240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008246:	4b37      	ldr	r3, [pc, #220]	; (8008324 <xPortStartScheduler+0xe4>)
 8008248:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	b2db      	uxtb	r3, r3
 8008250:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	22ff      	movs	r2, #255	; 0xff
 8008256:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	b2db      	uxtb	r3, r3
 800825e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	b2db      	uxtb	r3, r3
 8008264:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008268:	b2da      	uxtb	r2, r3
 800826a:	4b2f      	ldr	r3, [pc, #188]	; (8008328 <xPortStartScheduler+0xe8>)
 800826c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800826e:	4b2f      	ldr	r3, [pc, #188]	; (800832c <xPortStartScheduler+0xec>)
 8008270:	2207      	movs	r2, #7
 8008272:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008274:	e009      	b.n	800828a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008276:	4b2d      	ldr	r3, [pc, #180]	; (800832c <xPortStartScheduler+0xec>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	3b01      	subs	r3, #1
 800827c:	4a2b      	ldr	r2, [pc, #172]	; (800832c <xPortStartScheduler+0xec>)
 800827e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008280:	78fb      	ldrb	r3, [r7, #3]
 8008282:	b2db      	uxtb	r3, r3
 8008284:	005b      	lsls	r3, r3, #1
 8008286:	b2db      	uxtb	r3, r3
 8008288:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800828a:	78fb      	ldrb	r3, [r7, #3]
 800828c:	b2db      	uxtb	r3, r3
 800828e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008292:	2b80      	cmp	r3, #128	; 0x80
 8008294:	d0ef      	beq.n	8008276 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008296:	4b25      	ldr	r3, [pc, #148]	; (800832c <xPortStartScheduler+0xec>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f1c3 0307 	rsb	r3, r3, #7
 800829e:	2b04      	cmp	r3, #4
 80082a0:	d00c      	beq.n	80082bc <xPortStartScheduler+0x7c>
	__asm volatile
 80082a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a6:	b672      	cpsid	i
 80082a8:	f383 8811 	msr	BASEPRI, r3
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	f3bf 8f4f 	dsb	sy
 80082b4:	b662      	cpsie	i
 80082b6:	60bb      	str	r3, [r7, #8]
}
 80082b8:	bf00      	nop
 80082ba:	e7fe      	b.n	80082ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80082bc:	4b1b      	ldr	r3, [pc, #108]	; (800832c <xPortStartScheduler+0xec>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	021b      	lsls	r3, r3, #8
 80082c2:	4a1a      	ldr	r2, [pc, #104]	; (800832c <xPortStartScheduler+0xec>)
 80082c4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082c6:	4b19      	ldr	r3, [pc, #100]	; (800832c <xPortStartScheduler+0xec>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082ce:	4a17      	ldr	r2, [pc, #92]	; (800832c <xPortStartScheduler+0xec>)
 80082d0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	b2da      	uxtb	r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082da:	4b15      	ldr	r3, [pc, #84]	; (8008330 <xPortStartScheduler+0xf0>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a14      	ldr	r2, [pc, #80]	; (8008330 <xPortStartScheduler+0xf0>)
 80082e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80082e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082e6:	4b12      	ldr	r3, [pc, #72]	; (8008330 <xPortStartScheduler+0xf0>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a11      	ldr	r2, [pc, #68]	; (8008330 <xPortStartScheduler+0xf0>)
 80082ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80082f0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082f2:	f000 f8dd 	bl	80084b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082f6:	4b0f      	ldr	r3, [pc, #60]	; (8008334 <xPortStartScheduler+0xf4>)
 80082f8:	2200      	movs	r2, #0
 80082fa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80082fc:	f000 f8fc 	bl	80084f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008300:	4b0d      	ldr	r3, [pc, #52]	; (8008338 <xPortStartScheduler+0xf8>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a0c      	ldr	r2, [pc, #48]	; (8008338 <xPortStartScheduler+0xf8>)
 8008306:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800830a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800830c:	f7ff ff84 	bl	8008218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008310:	f7ff f816 	bl	8007340 <vTaskSwitchContext>
	prvTaskExitError();
 8008314:	f7ff ff3a 	bl	800818c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	e000e400 	.word	0xe000e400
 8008328:	20001fdc 	.word	0x20001fdc
 800832c:	20001fe0 	.word	0x20001fe0
 8008330:	e000ed20 	.word	0xe000ed20
 8008334:	2000000c 	.word	0x2000000c
 8008338:	e000ef34 	.word	0xe000ef34

0800833c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
	__asm volatile
 8008342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008346:	b672      	cpsid	i
 8008348:	f383 8811 	msr	BASEPRI, r3
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	b662      	cpsie	i
 8008356:	607b      	str	r3, [r7, #4]
}
 8008358:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800835a:	4b10      	ldr	r3, [pc, #64]	; (800839c <vPortEnterCritical+0x60>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	3301      	adds	r3, #1
 8008360:	4a0e      	ldr	r2, [pc, #56]	; (800839c <vPortEnterCritical+0x60>)
 8008362:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008364:	4b0d      	ldr	r3, [pc, #52]	; (800839c <vPortEnterCritical+0x60>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d111      	bne.n	8008390 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800836c:	4b0c      	ldr	r3, [pc, #48]	; (80083a0 <vPortEnterCritical+0x64>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00c      	beq.n	8008390 <vPortEnterCritical+0x54>
	__asm volatile
 8008376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837a:	b672      	cpsid	i
 800837c:	f383 8811 	msr	BASEPRI, r3
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	b662      	cpsie	i
 800838a:	603b      	str	r3, [r7, #0]
}
 800838c:	bf00      	nop
 800838e:	e7fe      	b.n	800838e <vPortEnterCritical+0x52>
	}
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	2000000c 	.word	0x2000000c
 80083a0:	e000ed04 	.word	0xe000ed04

080083a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80083aa:	4b13      	ldr	r3, [pc, #76]	; (80083f8 <vPortExitCritical+0x54>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d10c      	bne.n	80083cc <vPortExitCritical+0x28>
	__asm volatile
 80083b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b6:	b672      	cpsid	i
 80083b8:	f383 8811 	msr	BASEPRI, r3
 80083bc:	f3bf 8f6f 	isb	sy
 80083c0:	f3bf 8f4f 	dsb	sy
 80083c4:	b662      	cpsie	i
 80083c6:	607b      	str	r3, [r7, #4]
}
 80083c8:	bf00      	nop
 80083ca:	e7fe      	b.n	80083ca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80083cc:	4b0a      	ldr	r3, [pc, #40]	; (80083f8 <vPortExitCritical+0x54>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	3b01      	subs	r3, #1
 80083d2:	4a09      	ldr	r2, [pc, #36]	; (80083f8 <vPortExitCritical+0x54>)
 80083d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083d6:	4b08      	ldr	r3, [pc, #32]	; (80083f8 <vPortExitCritical+0x54>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d105      	bne.n	80083ea <vPortExitCritical+0x46>
 80083de:	2300      	movs	r3, #0
 80083e0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	f383 8811 	msr	BASEPRI, r3
}
 80083e8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80083ea:	bf00      	nop
 80083ec:	370c      	adds	r7, #12
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	2000000c 	.word	0x2000000c
 80083fc:	00000000 	.word	0x00000000

08008400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008400:	f3ef 8009 	mrs	r0, PSP
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	4b15      	ldr	r3, [pc, #84]	; (8008460 <pxCurrentTCBConst>)
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	f01e 0f10 	tst.w	lr, #16
 8008410:	bf08      	it	eq
 8008412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800841a:	6010      	str	r0, [r2, #0]
 800841c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008420:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008424:	b672      	cpsid	i
 8008426:	f380 8811 	msr	BASEPRI, r0
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	b662      	cpsie	i
 8008434:	f7fe ff84 	bl	8007340 <vTaskSwitchContext>
 8008438:	f04f 0000 	mov.w	r0, #0
 800843c:	f380 8811 	msr	BASEPRI, r0
 8008440:	bc09      	pop	{r0, r3}
 8008442:	6819      	ldr	r1, [r3, #0]
 8008444:	6808      	ldr	r0, [r1, #0]
 8008446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800844a:	f01e 0f10 	tst.w	lr, #16
 800844e:	bf08      	it	eq
 8008450:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008454:	f380 8809 	msr	PSP, r0
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop

08008460 <pxCurrentTCBConst>:
 8008460:	200019b0 	.word	0x200019b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008464:	bf00      	nop
 8008466:	bf00      	nop

08008468 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008472:	b672      	cpsid	i
 8008474:	f383 8811 	msr	BASEPRI, r3
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	b662      	cpsie	i
 8008482:	607b      	str	r3, [r7, #4]
}
 8008484:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008486:	f7fe fe9f 	bl	80071c8 <xTaskIncrementTick>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d003      	beq.n	8008498 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008490:	4b06      	ldr	r3, [pc, #24]	; (80084ac <xPortSysTickHandler+0x44>)
 8008492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008496:	601a      	str	r2, [r3, #0]
 8008498:	2300      	movs	r3, #0
 800849a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	f383 8811 	msr	BASEPRI, r3
}
 80084a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80084a4:	bf00      	nop
 80084a6:	3708      	adds	r7, #8
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	e000ed04 	.word	0xe000ed04

080084b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80084b0:	b480      	push	{r7}
 80084b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80084b4:	4b0b      	ldr	r3, [pc, #44]	; (80084e4 <vPortSetupTimerInterrupt+0x34>)
 80084b6:	2200      	movs	r2, #0
 80084b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80084ba:	4b0b      	ldr	r3, [pc, #44]	; (80084e8 <vPortSetupTimerInterrupt+0x38>)
 80084bc:	2200      	movs	r2, #0
 80084be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80084c0:	4b0a      	ldr	r3, [pc, #40]	; (80084ec <vPortSetupTimerInterrupt+0x3c>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a0a      	ldr	r2, [pc, #40]	; (80084f0 <vPortSetupTimerInterrupt+0x40>)
 80084c6:	fba2 2303 	umull	r2, r3, r2, r3
 80084ca:	099b      	lsrs	r3, r3, #6
 80084cc:	4a09      	ldr	r2, [pc, #36]	; (80084f4 <vPortSetupTimerInterrupt+0x44>)
 80084ce:	3b01      	subs	r3, #1
 80084d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80084d2:	4b04      	ldr	r3, [pc, #16]	; (80084e4 <vPortSetupTimerInterrupt+0x34>)
 80084d4:	2207      	movs	r2, #7
 80084d6:	601a      	str	r2, [r3, #0]
}
 80084d8:	bf00      	nop
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	e000e010 	.word	0xe000e010
 80084e8:	e000e018 	.word	0xe000e018
 80084ec:	20000000 	.word	0x20000000
 80084f0:	10624dd3 	.word	0x10624dd3
 80084f4:	e000e014 	.word	0xe000e014

080084f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80084f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008508 <vPortEnableVFP+0x10>
 80084fc:	6801      	ldr	r1, [r0, #0]
 80084fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008502:	6001      	str	r1, [r0, #0]
 8008504:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008506:	bf00      	nop
 8008508:	e000ed88 	.word	0xe000ed88

0800850c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008512:	f3ef 8305 	mrs	r3, IPSR
 8008516:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2b0f      	cmp	r3, #15
 800851c:	d916      	bls.n	800854c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800851e:	4a19      	ldr	r2, [pc, #100]	; (8008584 <vPortValidateInterruptPriority+0x78>)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	4413      	add	r3, r2
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008528:	4b17      	ldr	r3, [pc, #92]	; (8008588 <vPortValidateInterruptPriority+0x7c>)
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	7afa      	ldrb	r2, [r7, #11]
 800852e:	429a      	cmp	r2, r3
 8008530:	d20c      	bcs.n	800854c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008536:	b672      	cpsid	i
 8008538:	f383 8811 	msr	BASEPRI, r3
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	b662      	cpsie	i
 8008546:	607b      	str	r3, [r7, #4]
}
 8008548:	bf00      	nop
 800854a:	e7fe      	b.n	800854a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800854c:	4b0f      	ldr	r3, [pc, #60]	; (800858c <vPortValidateInterruptPriority+0x80>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008554:	4b0e      	ldr	r3, [pc, #56]	; (8008590 <vPortValidateInterruptPriority+0x84>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	429a      	cmp	r2, r3
 800855a:	d90c      	bls.n	8008576 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800855c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008560:	b672      	cpsid	i
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	b662      	cpsie	i
 8008570:	603b      	str	r3, [r7, #0]
}
 8008572:	bf00      	nop
 8008574:	e7fe      	b.n	8008574 <vPortValidateInterruptPriority+0x68>
	}
 8008576:	bf00      	nop
 8008578:	3714      	adds	r7, #20
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	e000e3f0 	.word	0xe000e3f0
 8008588:	20001fdc 	.word	0x20001fdc
 800858c:	e000ed0c 	.word	0xe000ed0c
 8008590:	20001fe0 	.word	0x20001fe0

08008594 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b08a      	sub	sp, #40	; 0x28
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800859c:	2300      	movs	r3, #0
 800859e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80085a0:	f7fe fd42 	bl	8007028 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80085a4:	4b5b      	ldr	r3, [pc, #364]	; (8008714 <pvPortMalloc+0x180>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d101      	bne.n	80085b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80085ac:	f000 f91a 	bl	80087e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80085b0:	4b59      	ldr	r3, [pc, #356]	; (8008718 <pvPortMalloc+0x184>)
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4013      	ands	r3, r2
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f040 8092 	bne.w	80086e2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d01f      	beq.n	8008604 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80085c4:	2208      	movs	r2, #8
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4413      	add	r3, r2
 80085ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f003 0307 	and.w	r3, r3, #7
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d016      	beq.n	8008604 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f023 0307 	bic.w	r3, r3, #7
 80085dc:	3308      	adds	r3, #8
 80085de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f003 0307 	and.w	r3, r3, #7
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00c      	beq.n	8008604 <pvPortMalloc+0x70>
	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ee:	b672      	cpsid	i
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	b662      	cpsie	i
 80085fe:	617b      	str	r3, [r7, #20]
}
 8008600:	bf00      	nop
 8008602:	e7fe      	b.n	8008602 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d06b      	beq.n	80086e2 <pvPortMalloc+0x14e>
 800860a:	4b44      	ldr	r3, [pc, #272]	; (800871c <pvPortMalloc+0x188>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	429a      	cmp	r2, r3
 8008612:	d866      	bhi.n	80086e2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008614:	4b42      	ldr	r3, [pc, #264]	; (8008720 <pvPortMalloc+0x18c>)
 8008616:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008618:	4b41      	ldr	r3, [pc, #260]	; (8008720 <pvPortMalloc+0x18c>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800861e:	e004      	b.n	800862a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008622:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	429a      	cmp	r2, r3
 8008632:	d903      	bls.n	800863c <pvPortMalloc+0xa8>
 8008634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1f1      	bne.n	8008620 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800863c:	4b35      	ldr	r3, [pc, #212]	; (8008714 <pvPortMalloc+0x180>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008642:	429a      	cmp	r2, r3
 8008644:	d04d      	beq.n	80086e2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008646:	6a3b      	ldr	r3, [r7, #32]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2208      	movs	r2, #8
 800864c:	4413      	add	r3, r2
 800864e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	6a3b      	ldr	r3, [r7, #32]
 8008656:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865a:	685a      	ldr	r2, [r3, #4]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	1ad2      	subs	r2, r2, r3
 8008660:	2308      	movs	r3, #8
 8008662:	005b      	lsls	r3, r3, #1
 8008664:	429a      	cmp	r2, r3
 8008666:	d921      	bls.n	80086ac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4413      	add	r3, r2
 800866e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	f003 0307 	and.w	r3, r3, #7
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00c      	beq.n	8008694 <pvPortMalloc+0x100>
	__asm volatile
 800867a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867e:	b672      	cpsid	i
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	b662      	cpsie	i
 800868e:	613b      	str	r3, [r7, #16]
}
 8008690:	bf00      	nop
 8008692:	e7fe      	b.n	8008692 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008696:	685a      	ldr	r2, [r3, #4]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	1ad2      	subs	r2, r2, r3
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80086a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80086a6:	69b8      	ldr	r0, [r7, #24]
 80086a8:	f000 f8fe 	bl	80088a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80086ac:	4b1b      	ldr	r3, [pc, #108]	; (800871c <pvPortMalloc+0x188>)
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	1ad3      	subs	r3, r2, r3
 80086b6:	4a19      	ldr	r2, [pc, #100]	; (800871c <pvPortMalloc+0x188>)
 80086b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80086ba:	4b18      	ldr	r3, [pc, #96]	; (800871c <pvPortMalloc+0x188>)
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	4b19      	ldr	r3, [pc, #100]	; (8008724 <pvPortMalloc+0x190>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d203      	bcs.n	80086ce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80086c6:	4b15      	ldr	r3, [pc, #84]	; (800871c <pvPortMalloc+0x188>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a16      	ldr	r2, [pc, #88]	; (8008724 <pvPortMalloc+0x190>)
 80086cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80086ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d0:	685a      	ldr	r2, [r3, #4]
 80086d2:	4b11      	ldr	r3, [pc, #68]	; (8008718 <pvPortMalloc+0x184>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	431a      	orrs	r2, r3
 80086d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80086dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086de:	2200      	movs	r2, #0
 80086e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80086e2:	f7fe fcaf 	bl	8007044 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	f003 0307 	and.w	r3, r3, #7
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00c      	beq.n	800870a <pvPortMalloc+0x176>
	__asm volatile
 80086f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f4:	b672      	cpsid	i
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	b662      	cpsie	i
 8008704:	60fb      	str	r3, [r7, #12]
}
 8008706:	bf00      	nop
 8008708:	e7fe      	b.n	8008708 <pvPortMalloc+0x174>
	return pvReturn;
 800870a:	69fb      	ldr	r3, [r7, #28]
}
 800870c:	4618      	mov	r0, r3
 800870e:	3728      	adds	r7, #40	; 0x28
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	20005bec 	.word	0x20005bec
 8008718:	20005bf8 	.word	0x20005bf8
 800871c:	20005bf0 	.word	0x20005bf0
 8008720:	20005be4 	.word	0x20005be4
 8008724:	20005bf4 	.word	0x20005bf4

08008728 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d04c      	beq.n	80087d4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800873a:	2308      	movs	r3, #8
 800873c:	425b      	negs	r3, r3
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	4413      	add	r3, r2
 8008742:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	685a      	ldr	r2, [r3, #4]
 800874c:	4b23      	ldr	r3, [pc, #140]	; (80087dc <vPortFree+0xb4>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4013      	ands	r3, r2
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10c      	bne.n	8008770 <vPortFree+0x48>
	__asm volatile
 8008756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875a:	b672      	cpsid	i
 800875c:	f383 8811 	msr	BASEPRI, r3
 8008760:	f3bf 8f6f 	isb	sy
 8008764:	f3bf 8f4f 	dsb	sy
 8008768:	b662      	cpsie	i
 800876a:	60fb      	str	r3, [r7, #12]
}
 800876c:	bf00      	nop
 800876e:	e7fe      	b.n	800876e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00c      	beq.n	8008792 <vPortFree+0x6a>
	__asm volatile
 8008778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877c:	b672      	cpsid	i
 800877e:	f383 8811 	msr	BASEPRI, r3
 8008782:	f3bf 8f6f 	isb	sy
 8008786:	f3bf 8f4f 	dsb	sy
 800878a:	b662      	cpsie	i
 800878c:	60bb      	str	r3, [r7, #8]
}
 800878e:	bf00      	nop
 8008790:	e7fe      	b.n	8008790 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	685a      	ldr	r2, [r3, #4]
 8008796:	4b11      	ldr	r3, [pc, #68]	; (80087dc <vPortFree+0xb4>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4013      	ands	r3, r2
 800879c:	2b00      	cmp	r3, #0
 800879e:	d019      	beq.n	80087d4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d115      	bne.n	80087d4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	685a      	ldr	r2, [r3, #4]
 80087ac:	4b0b      	ldr	r3, [pc, #44]	; (80087dc <vPortFree+0xb4>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	43db      	mvns	r3, r3
 80087b2:	401a      	ands	r2, r3
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80087b8:	f7fe fc36 	bl	8007028 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	685a      	ldr	r2, [r3, #4]
 80087c0:	4b07      	ldr	r3, [pc, #28]	; (80087e0 <vPortFree+0xb8>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4413      	add	r3, r2
 80087c6:	4a06      	ldr	r2, [pc, #24]	; (80087e0 <vPortFree+0xb8>)
 80087c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80087ca:	6938      	ldr	r0, [r7, #16]
 80087cc:	f000 f86c 	bl	80088a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80087d0:	f7fe fc38 	bl	8007044 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80087d4:	bf00      	nop
 80087d6:	3718      	adds	r7, #24
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	20005bf8 	.word	0x20005bf8
 80087e0:	20005bf0 	.word	0x20005bf0

080087e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80087e4:	b480      	push	{r7}
 80087e6:	b085      	sub	sp, #20
 80087e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80087ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80087f0:	4b27      	ldr	r3, [pc, #156]	; (8008890 <prvHeapInit+0xac>)
 80087f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f003 0307 	and.w	r3, r3, #7
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00c      	beq.n	8008818 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	3307      	adds	r3, #7
 8008802:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f023 0307 	bic.w	r3, r3, #7
 800880a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	4a1f      	ldr	r2, [pc, #124]	; (8008890 <prvHeapInit+0xac>)
 8008814:	4413      	add	r3, r2
 8008816:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800881c:	4a1d      	ldr	r2, [pc, #116]	; (8008894 <prvHeapInit+0xb0>)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008822:	4b1c      	ldr	r3, [pc, #112]	; (8008894 <prvHeapInit+0xb0>)
 8008824:	2200      	movs	r2, #0
 8008826:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	4413      	add	r3, r2
 800882e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008830:	2208      	movs	r2, #8
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	1a9b      	subs	r3, r3, r2
 8008836:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f023 0307 	bic.w	r3, r3, #7
 800883e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	4a15      	ldr	r2, [pc, #84]	; (8008898 <prvHeapInit+0xb4>)
 8008844:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008846:	4b14      	ldr	r3, [pc, #80]	; (8008898 <prvHeapInit+0xb4>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2200      	movs	r2, #0
 800884c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800884e:	4b12      	ldr	r3, [pc, #72]	; (8008898 <prvHeapInit+0xb4>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2200      	movs	r2, #0
 8008854:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	1ad2      	subs	r2, r2, r3
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008864:	4b0c      	ldr	r3, [pc, #48]	; (8008898 <prvHeapInit+0xb4>)
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	4a0a      	ldr	r2, [pc, #40]	; (800889c <prvHeapInit+0xb8>)
 8008872:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	4a09      	ldr	r2, [pc, #36]	; (80088a0 <prvHeapInit+0xbc>)
 800887a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800887c:	4b09      	ldr	r3, [pc, #36]	; (80088a4 <prvHeapInit+0xc0>)
 800887e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008882:	601a      	str	r2, [r3, #0]
}
 8008884:	bf00      	nop
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr
 8008890:	20001fe4 	.word	0x20001fe4
 8008894:	20005be4 	.word	0x20005be4
 8008898:	20005bec 	.word	0x20005bec
 800889c:	20005bf4 	.word	0x20005bf4
 80088a0:	20005bf0 	.word	0x20005bf0
 80088a4:	20005bf8 	.word	0x20005bf8

080088a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80088b0:	4b28      	ldr	r3, [pc, #160]	; (8008954 <prvInsertBlockIntoFreeList+0xac>)
 80088b2:	60fb      	str	r3, [r7, #12]
 80088b4:	e002      	b.n	80088bc <prvInsertBlockIntoFreeList+0x14>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	60fb      	str	r3, [r7, #12]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d8f7      	bhi.n	80088b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	4413      	add	r3, r2
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d108      	bne.n	80088ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	685a      	ldr	r2, [r3, #4]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	441a      	add	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	441a      	add	r2, r3
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d118      	bne.n	8008930 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	4b15      	ldr	r3, [pc, #84]	; (8008958 <prvInsertBlockIntoFreeList+0xb0>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	429a      	cmp	r2, r3
 8008908:	d00d      	beq.n	8008926 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	685a      	ldr	r2, [r3, #4]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	441a      	add	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	e008      	b.n	8008938 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008926:	4b0c      	ldr	r3, [pc, #48]	; (8008958 <prvInsertBlockIntoFreeList+0xb0>)
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	601a      	str	r2, [r3, #0]
 800892e:	e003      	b.n	8008938 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	429a      	cmp	r2, r3
 800893e:	d002      	beq.n	8008946 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008946:	bf00      	nop
 8008948:	3714      	adds	r7, #20
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	20005be4 	.word	0x20005be4
 8008958:	20005bec 	.word	0x20005bec

0800895c <memset>:
 800895c:	4402      	add	r2, r0
 800895e:	4603      	mov	r3, r0
 8008960:	4293      	cmp	r3, r2
 8008962:	d100      	bne.n	8008966 <memset+0xa>
 8008964:	4770      	bx	lr
 8008966:	f803 1b01 	strb.w	r1, [r3], #1
 800896a:	e7f9      	b.n	8008960 <memset+0x4>

0800896c <__libc_init_array>:
 800896c:	b570      	push	{r4, r5, r6, lr}
 800896e:	4d0d      	ldr	r5, [pc, #52]	; (80089a4 <__libc_init_array+0x38>)
 8008970:	4c0d      	ldr	r4, [pc, #52]	; (80089a8 <__libc_init_array+0x3c>)
 8008972:	1b64      	subs	r4, r4, r5
 8008974:	10a4      	asrs	r4, r4, #2
 8008976:	2600      	movs	r6, #0
 8008978:	42a6      	cmp	r6, r4
 800897a:	d109      	bne.n	8008990 <__libc_init_array+0x24>
 800897c:	4d0b      	ldr	r5, [pc, #44]	; (80089ac <__libc_init_array+0x40>)
 800897e:	4c0c      	ldr	r4, [pc, #48]	; (80089b0 <__libc_init_array+0x44>)
 8008980:	f000 f826 	bl	80089d0 <_init>
 8008984:	1b64      	subs	r4, r4, r5
 8008986:	10a4      	asrs	r4, r4, #2
 8008988:	2600      	movs	r6, #0
 800898a:	42a6      	cmp	r6, r4
 800898c:	d105      	bne.n	800899a <__libc_init_array+0x2e>
 800898e:	bd70      	pop	{r4, r5, r6, pc}
 8008990:	f855 3b04 	ldr.w	r3, [r5], #4
 8008994:	4798      	blx	r3
 8008996:	3601      	adds	r6, #1
 8008998:	e7ee      	b.n	8008978 <__libc_init_array+0xc>
 800899a:	f855 3b04 	ldr.w	r3, [r5], #4
 800899e:	4798      	blx	r3
 80089a0:	3601      	adds	r6, #1
 80089a2:	e7f2      	b.n	800898a <__libc_init_array+0x1e>
 80089a4:	08008adc 	.word	0x08008adc
 80089a8:	08008adc 	.word	0x08008adc
 80089ac:	08008adc 	.word	0x08008adc
 80089b0:	08008ae0 	.word	0x08008ae0

080089b4 <memcpy>:
 80089b4:	440a      	add	r2, r1
 80089b6:	4291      	cmp	r1, r2
 80089b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80089bc:	d100      	bne.n	80089c0 <memcpy+0xc>
 80089be:	4770      	bx	lr
 80089c0:	b510      	push	{r4, lr}
 80089c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089ca:	4291      	cmp	r1, r2
 80089cc:	d1f9      	bne.n	80089c2 <memcpy+0xe>
 80089ce:	bd10      	pop	{r4, pc}

080089d0 <_init>:
 80089d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d2:	bf00      	nop
 80089d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089d6:	bc08      	pop	{r3}
 80089d8:	469e      	mov	lr, r3
 80089da:	4770      	bx	lr

080089dc <_fini>:
 80089dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089de:	bf00      	nop
 80089e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089e2:	bc08      	pop	{r3}
 80089e4:	469e      	mov	lr, r3
 80089e6:	4770      	bx	lr
