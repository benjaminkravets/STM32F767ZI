
TMP1075_temp_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f00  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080030f8  080030f8  000040f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003108  08003108  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003108  08003108  00004108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003110  08003110  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003110  08003110  00004110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003114  08003114  00004114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003118  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08003124  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08003124  00005080  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e05  00000000  00000000  0000503a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001603  00000000  00000000  0000ce3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000778  00000000  00000000  0000e448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005a8  00000000  00000000  0000ebc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002599c  00000000  00000000  0000f168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a062  00000000  00000000  00034b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9474  00000000  00000000  0003eb66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127fda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dcc  00000000  00000000  00128020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00129dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080030e0 	.word	0x080030e0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080030e0 	.word	0x080030e0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b988 	b.w	8000560 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	468e      	mov	lr, r1
 8000270:	4604      	mov	r4, r0
 8000272:	4688      	mov	r8, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d962      	bls.n	8000344 <__udivmoddi4+0xdc>
 800027e:	fab2 f682 	clz	r6, r2
 8000282:	b14e      	cbz	r6, 8000298 <__udivmoddi4+0x30>
 8000284:	f1c6 0320 	rsb	r3, r6, #32
 8000288:	fa01 f806 	lsl.w	r8, r1, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	40b7      	lsls	r7, r6
 8000292:	ea43 0808 	orr.w	r8, r3, r8
 8000296:	40b4      	lsls	r4, r6
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	fa1f fc87 	uxth.w	ip, r7
 80002a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a4:	0c23      	lsrs	r3, r4, #16
 80002a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ae:	fb01 f20c 	mul.w	r2, r1, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002bc:	f080 80ea 	bcs.w	8000494 <__udivmoddi4+0x22c>
 80002c0:	429a      	cmp	r2, r3
 80002c2:	f240 80e7 	bls.w	8000494 <__udivmoddi4+0x22c>
 80002c6:	3902      	subs	r1, #2
 80002c8:	443b      	add	r3, r7
 80002ca:	1a9a      	subs	r2, r3, r2
 80002cc:	b2a3      	uxth	r3, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002da:	fb00 fc0c 	mul.w	ip, r0, ip
 80002de:	459c      	cmp	ip, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x8e>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e8:	f080 80d6 	bcs.w	8000498 <__udivmoddi4+0x230>
 80002ec:	459c      	cmp	ip, r3
 80002ee:	f240 80d3 	bls.w	8000498 <__udivmoddi4+0x230>
 80002f2:	443b      	add	r3, r7
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fa:	eba3 030c 	sub.w	r3, r3, ip
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa2>
 8000302:	40f3      	lsrs	r3, r6
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xb6>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb0>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa2>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x14c>
 8000326:	4573      	cmp	r3, lr
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xc8>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 8105 	bhi.w	800053a <__udivmoddi4+0x2d2>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb6e 0203 	sbc.w	r2, lr, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4690      	mov	r8, r2
 800033a:	2d00      	cmp	r5, #0
 800033c:	d0e5      	beq.n	800030a <__udivmoddi4+0xa2>
 800033e:	e9c5 4800 	strd	r4, r8, [r5]
 8000342:	e7e2      	b.n	800030a <__udivmoddi4+0xa2>
 8000344:	2a00      	cmp	r2, #0
 8000346:	f000 8090 	beq.w	800046a <__udivmoddi4+0x202>
 800034a:	fab2 f682 	clz	r6, r2
 800034e:	2e00      	cmp	r6, #0
 8000350:	f040 80a4 	bne.w	800049c <__udivmoddi4+0x234>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	0c03      	lsrs	r3, r0, #16
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	b280      	uxth	r0, r0
 800035e:	b2bc      	uxth	r4, r7
 8000360:	2101      	movs	r1, #1
 8000362:	fbb2 fcfe 	udiv	ip, r2, lr
 8000366:	fb0e 221c 	mls	r2, lr, ip, r2
 800036a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800036e:	fb04 f20c 	mul.w	r2, r4, ip
 8000372:	429a      	cmp	r2, r3
 8000374:	d907      	bls.n	8000386 <__udivmoddi4+0x11e>
 8000376:	18fb      	adds	r3, r7, r3
 8000378:	f10c 38ff 	add.w	r8, ip, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x11c>
 800037e:	429a      	cmp	r2, r3
 8000380:	f200 80e0 	bhi.w	8000544 <__udivmoddi4+0x2dc>
 8000384:	46c4      	mov	ip, r8
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	fbb3 f2fe 	udiv	r2, r3, lr
 800038c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000390:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000394:	fb02 f404 	mul.w	r4, r2, r4
 8000398:	429c      	cmp	r4, r3
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x144>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f102 30ff 	add.w	r0, r2, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x142>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f200 80ca 	bhi.w	800053e <__udivmoddi4+0x2d6>
 80003aa:	4602      	mov	r2, r0
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x98>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa0e f401 	lsl.w	r4, lr, r1
 80003c4:	fa20 f306 	lsr.w	r3, r0, r6
 80003c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	fa1f fc87 	uxth.w	ip, r7
 80003da:	fbbe f0f9 	udiv	r0, lr, r9
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x1a0>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003fa:	f080 809c 	bcs.w	8000536 <__udivmoddi4+0x2ce>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f240 8099 	bls.w	8000536 <__udivmoddi4+0x2ce>
 8000404:	3802      	subs	r0, #2
 8000406:	443c      	add	r4, r7
 8000408:	eba4 040e 	sub.w	r4, r4, lr
 800040c:	fa1f fe83 	uxth.w	lr, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800041c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000420:	45a4      	cmp	ip, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1ce>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f103 3eff 	add.w	lr, r3, #4294967295
 800042a:	f080 8082 	bcs.w	8000532 <__udivmoddi4+0x2ca>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d97f      	bls.n	8000532 <__udivmoddi4+0x2ca>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000442:	4564      	cmp	r4, ip
 8000444:	4673      	mov	r3, lr
 8000446:	46e1      	mov	r9, ip
 8000448:	d362      	bcc.n	8000510 <__udivmoddi4+0x2a8>
 800044a:	d05f      	beq.n	800050c <__udivmoddi4+0x2a4>
 800044c:	b15d      	cbz	r5, 8000466 <__udivmoddi4+0x1fe>
 800044e:	ebb8 0203 	subs.w	r2, r8, r3
 8000452:	eb64 0409 	sbc.w	r4, r4, r9
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	fa22 f301 	lsr.w	r3, r2, r1
 800045e:	431e      	orrs	r6, r3
 8000460:	40cc      	lsrs	r4, r1
 8000462:	e9c5 6400 	strd	r6, r4, [r5]
 8000466:	2100      	movs	r1, #0
 8000468:	e74f      	b.n	800030a <__udivmoddi4+0xa2>
 800046a:	fbb1 fcf2 	udiv	ip, r1, r2
 800046e:	0c01      	lsrs	r1, r0, #16
 8000470:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000474:	b280      	uxth	r0, r0
 8000476:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800047a:	463b      	mov	r3, r7
 800047c:	4638      	mov	r0, r7
 800047e:	463c      	mov	r4, r7
 8000480:	46b8      	mov	r8, r7
 8000482:	46be      	mov	lr, r7
 8000484:	2620      	movs	r6, #32
 8000486:	fbb1 f1f7 	udiv	r1, r1, r7
 800048a:	eba2 0208 	sub.w	r2, r2, r8
 800048e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000492:	e766      	b.n	8000362 <__udivmoddi4+0xfa>
 8000494:	4601      	mov	r1, r0
 8000496:	e718      	b.n	80002ca <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e72c      	b.n	80002f6 <__udivmoddi4+0x8e>
 800049c:	f1c6 0220 	rsb	r2, r6, #32
 80004a0:	fa2e f302 	lsr.w	r3, lr, r2
 80004a4:	40b7      	lsls	r7, r6
 80004a6:	40b1      	lsls	r1, r6
 80004a8:	fa20 f202 	lsr.w	r2, r0, r2
 80004ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b0:	430a      	orrs	r2, r1
 80004b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb08 f904 	mul.w	r9, r8, r4
 80004c6:	40b0      	lsls	r0, r6
 80004c8:	4589      	cmp	r9, r1
 80004ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ce:	b280      	uxth	r0, r0
 80004d0:	d93e      	bls.n	8000550 <__udivmoddi4+0x2e8>
 80004d2:	1879      	adds	r1, r7, r1
 80004d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d8:	d201      	bcs.n	80004de <__udivmoddi4+0x276>
 80004da:	4589      	cmp	r9, r1
 80004dc:	d81f      	bhi.n	800051e <__udivmoddi4+0x2b6>
 80004de:	eba1 0109 	sub.w	r1, r1, r9
 80004e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e6:	fb09 f804 	mul.w	r8, r9, r4
 80004ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ee:	b292      	uxth	r2, r2
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	4542      	cmp	r2, r8
 80004f6:	d229      	bcs.n	800054c <__udivmoddi4+0x2e4>
 80004f8:	18ba      	adds	r2, r7, r2
 80004fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004fe:	d2c4      	bcs.n	800048a <__udivmoddi4+0x222>
 8000500:	4542      	cmp	r2, r8
 8000502:	d2c2      	bcs.n	800048a <__udivmoddi4+0x222>
 8000504:	f1a9 0102 	sub.w	r1, r9, #2
 8000508:	443a      	add	r2, r7
 800050a:	e7be      	b.n	800048a <__udivmoddi4+0x222>
 800050c:	45f0      	cmp	r8, lr
 800050e:	d29d      	bcs.n	800044c <__udivmoddi4+0x1e4>
 8000510:	ebbe 0302 	subs.w	r3, lr, r2
 8000514:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000518:	3801      	subs	r0, #1
 800051a:	46e1      	mov	r9, ip
 800051c:	e796      	b.n	800044c <__udivmoddi4+0x1e4>
 800051e:	eba7 0909 	sub.w	r9, r7, r9
 8000522:	4449      	add	r1, r9
 8000524:	f1a8 0c02 	sub.w	ip, r8, #2
 8000528:	fbb1 f9fe 	udiv	r9, r1, lr
 800052c:	fb09 f804 	mul.w	r8, r9, r4
 8000530:	e7db      	b.n	80004ea <__udivmoddi4+0x282>
 8000532:	4673      	mov	r3, lr
 8000534:	e77f      	b.n	8000436 <__udivmoddi4+0x1ce>
 8000536:	4650      	mov	r0, sl
 8000538:	e766      	b.n	8000408 <__udivmoddi4+0x1a0>
 800053a:	4608      	mov	r0, r1
 800053c:	e6fd      	b.n	800033a <__udivmoddi4+0xd2>
 800053e:	443b      	add	r3, r7
 8000540:	3a02      	subs	r2, #2
 8000542:	e733      	b.n	80003ac <__udivmoddi4+0x144>
 8000544:	f1ac 0c02 	sub.w	ip, ip, #2
 8000548:	443b      	add	r3, r7
 800054a:	e71c      	b.n	8000386 <__udivmoddi4+0x11e>
 800054c:	4649      	mov	r1, r9
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x222>
 8000550:	eba1 0109 	sub.w	r1, r1, r9
 8000554:	46c4      	mov	ip, r8
 8000556:	fbb1 f9fe 	udiv	r9, r1, lr
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	e7c4      	b.n	80004ea <__udivmoddi4+0x282>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	0000      	movs	r0, r0
	...

08000568 <read_temp>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float read_temp() {
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af04      	add	r7, sp, #16
	uint8_t read_data[2] = { 0 };
 800056e:	2300      	movs	r3, #0
 8000570:	80bb      	strh	r3, [r7, #4]
	//uint8_t read_data[2] = {0b01010000, 0b00000000}; // 80
	//uint8_t read_data[2] = {0b00000000, 0b01000000}; // .25
	//uint8_t read_data[2] = {0b11111111, 0b11110000}; // -.0625
	//uint8_t read_data[2] = {0b11001110, 0b00000000}; // -50

	float temp_celsius = 0;
 8000572:	f04f 0300 	mov.w	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
	// 7.5.1.1 read temperature register (address 0)
	HAL_I2C_Mem_Read(&hi2c2, (72 << 1), 0, 1, read_data, 2, 1000);
 8000578:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800057c:	9302      	str	r3, [sp, #8]
 800057e:	2302      	movs	r3, #2
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2301      	movs	r3, #1
 8000588:	2200      	movs	r2, #0
 800058a:	2190      	movs	r1, #144	@ 0x90
 800058c:	481e      	ldr	r0, [pc, #120]	@ (8000608 <read_temp+0xa0>)
 800058e:	f001 f841 	bl	8001614 <HAL_I2C_Mem_Read>

	// last 4 bits (of last byte) are not used- disregard these and put first byte before it.
	uint32_t read_binary = read_data[1] >> 4 | read_data[0] << 4;
 8000592:	797b      	ldrb	r3, [r7, #5]
 8000594:	091b      	lsrs	r3, r3, #4
 8000596:	b2db      	uxtb	r3, r3
 8000598:	461a      	mov	r2, r3
 800059a:	793b      	ldrb	r3, [r7, #4]
 800059c:	011b      	lsls	r3, r3, #4
 800059e:	4313      	orrs	r3, r2
 80005a0:	60bb      	str	r3, [r7, #8]
	// test if negative by reading MSB
	if (1 << 11 & read_binary) {
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d011      	beq.n	80005d0 <read_temp+0x68>
		//if negative, get two's complement
		temp_celsius = -((~((int32_t) read_binary - 1)) & 4095) * .0625;
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	425b      	negs	r3, r3
 80005b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80005b4:	425b      	negs	r3, r3
 80005b6:	ee07 3a90 	vmov	s15, r3
 80005ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80005be:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 8000600 <read_temp+0x98>
 80005c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80005c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80005ca:	edc7 7a03 	vstr	s15, [r7, #12]
 80005ce:	e00c      	b.n	80005ea <read_temp+0x82>

	} else {
		//if positive, process normally
		temp_celsius = read_binary * .0625;
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	ee07 3a90 	vmov	s15, r3
 80005d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80005da:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8000600 <read_temp+0x98>
 80005de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80005e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80005e6:	edc7 7a03 	vstr	s15, [r7, #12]

	}
	return temp_celsius;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	ee07 3a90 	vmov	s15, r3
}
 80005f0:	eeb0 0a67 	vmov.f32	s0, s15
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	f3af 8000 	nop.w
 8000600:	00000000 	.word	0x00000000
 8000604:	3fb00000 	.word	0x3fb00000
 8000608:	20000028 	.word	0x20000028

0800060c <set_shutdown_mode>:

void set_shutdown_mode() {
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af04      	add	r7, sp, #16
	// table 7-8
	uint8_t conf_register[2] = { 0 };
 8000612:	2300      	movs	r3, #0
 8000614:	80bb      	strh	r3, [r7, #4]
	// read current config register
	HAL_I2C_Mem_Read(&hi2c2, (72 << 1), 1, 1, conf_register, 2, 100);
 8000616:	2364      	movs	r3, #100	@ 0x64
 8000618:	9302      	str	r3, [sp, #8]
 800061a:	2302      	movs	r3, #2
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	2301      	movs	r3, #1
 8000624:	2201      	movs	r2, #1
 8000626:	2190      	movs	r1, #144	@ 0x90
 8000628:	4812      	ldr	r0, [pc, #72]	@ (8000674 <set_shutdown_mode+0x68>)
 800062a:	f000 fff3 	bl	8001614 <HAL_I2C_Mem_Read>
	// write 1 to bit 0 of first register byte (bit 8 of the conf register)
	conf_register[0] |= (1);
 800062e:	793b      	ldrb	r3, [r7, #4]
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	b2db      	uxtb	r3, r3
 8000636:	713b      	strb	r3, [r7, #4]
	// write modified config to register
	HAL_I2C_Mem_Write(&hi2c2, (72 << 1), 1, 1, conf_register, 2, 100);
 8000638:	2364      	movs	r3, #100	@ 0x64
 800063a:	9302      	str	r3, [sp, #8]
 800063c:	2302      	movs	r3, #2
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2301      	movs	r3, #1
 8000646:	2201      	movs	r2, #1
 8000648:	2190      	movs	r1, #144	@ 0x90
 800064a:	480a      	ldr	r0, [pc, #40]	@ (8000674 <set_shutdown_mode+0x68>)
 800064c:	f000 fece 	bl	80013ec <HAL_I2C_Mem_Write>
	// test to see if write was successful
	uint8_t read_test[2] = { 0 };
 8000650:	2300      	movs	r3, #0
 8000652:	803b      	strh	r3, [r7, #0]
	HAL_I2C_Mem_Read(&hi2c2, (72 << 1), 1, 1, read_test, 2, 100);
 8000654:	2364      	movs	r3, #100	@ 0x64
 8000656:	9302      	str	r3, [sp, #8]
 8000658:	2302      	movs	r3, #2
 800065a:	9301      	str	r3, [sp, #4]
 800065c:	463b      	mov	r3, r7
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	2301      	movs	r3, #1
 8000662:	2201      	movs	r2, #1
 8000664:	2190      	movs	r1, #144	@ 0x90
 8000666:	4803      	ldr	r0, [pc, #12]	@ (8000674 <set_shutdown_mode+0x68>)
 8000668:	f000 ffd4 	bl	8001614 <HAL_I2C_Mem_Read>
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000028 	.word	0x20000028

08000678 <trigger_oneshot>:

void trigger_oneshot() {
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af04      	add	r7, sp, #16
	// table 7-8
	uint8_t conf_register[2] = { 0 };
 800067e:	2300      	movs	r3, #0
 8000680:	80bb      	strh	r3, [r7, #4]
	// read current config register
	HAL_I2C_Mem_Read(&hi2c2, (72 << 1), 1, 1, conf_register, 2, 100);
 8000682:	2364      	movs	r3, #100	@ 0x64
 8000684:	9302      	str	r3, [sp, #8]
 8000686:	2302      	movs	r3, #2
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	2301      	movs	r3, #1
 8000690:	2201      	movs	r2, #1
 8000692:	2190      	movs	r1, #144	@ 0x90
 8000694:	480b      	ldr	r0, [pc, #44]	@ (80006c4 <trigger_oneshot+0x4c>)
 8000696:	f000 ffbd 	bl	8001614 <HAL_I2C_Mem_Read>
	// write 1 to bit 7 of first register byte (bit 15 of the config register)
	conf_register[0] |= (1 << 7);
 800069a:	793b      	ldrb	r3, [r7, #4]
 800069c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	713b      	strb	r3, [r7, #4]
	// write to config register
	HAL_I2C_Mem_Write(&hi2c2, (72 << 1), 1, 1, conf_register, 2, 100);
 80006a4:	2364      	movs	r3, #100	@ 0x64
 80006a6:	9302      	str	r3, [sp, #8]
 80006a8:	2302      	movs	r3, #2
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	2301      	movs	r3, #1
 80006b2:	2201      	movs	r2, #1
 80006b4:	2190      	movs	r1, #144	@ 0x90
 80006b6:	4803      	ldr	r0, [pc, #12]	@ (80006c4 <trigger_oneshot+0x4c>)
 80006b8:	f000 fe98 	bl	80013ec <HAL_I2C_Mem_Write>

}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000028 	.word	0x20000028

080006c8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006ce:	f000 fac4 	bl	8000c5a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006d2:	f000 f813 	bl	80006fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006d6:	f000 f8ab 	bl	8000830 <MX_GPIO_Init>
	MX_I2C2_Init();
 80006da:	f000 f86b 	bl	80007b4 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
	//put in shutdown mode to reduce current by not continuously converting temperature
	set_shutdown_mode();
 80006de:	f7ff ff95 	bl	800060c <set_shutdown_mode>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
		// while in shutdown mode, trigger one conversion
		trigger_oneshot();
 80006e2:	f7ff ffc9 	bl	8000678 <trigger_oneshot>
		float temp_celsius = read_temp();
 80006e6:	f7ff ff3f 	bl	8000568 <read_temp>
 80006ea:	ed87 0a01 	vstr	s0, [r7, #4]
		HAL_Delay(500);
 80006ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006f2:	f000 fb0f 	bl	8000d14 <HAL_Delay>
	while (1) {
 80006f6:	bf00      	nop
 80006f8:	e7f3      	b.n	80006e2 <main+0x1a>
	...

080006fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	@ 0x50
 8000700:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2234      	movs	r2, #52	@ 0x34
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f002 fcbc 	bl	8003088 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000720:	4b22      	ldr	r3, [pc, #136]	@ (80007ac <SystemClock_Config+0xb0>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000724:	4a21      	ldr	r2, [pc, #132]	@ (80007ac <SystemClock_Config+0xb0>)
 8000726:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800072a:	6413      	str	r3, [r2, #64]	@ 0x40
 800072c:	4b1f      	ldr	r3, [pc, #124]	@ (80007ac <SystemClock_Config+0xb0>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000738:	4b1d      	ldr	r3, [pc, #116]	@ (80007b0 <SystemClock_Config+0xb4>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000740:	4a1b      	ldr	r2, [pc, #108]	@ (80007b0 <SystemClock_Config+0xb4>)
 8000742:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b19      	ldr	r3, [pc, #100]	@ (80007b0 <SystemClock_Config+0xb4>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000754:	2302      	movs	r3, #2
 8000756:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000758:	2301      	movs	r3, #1
 800075a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075c:	2310      	movs	r3, #16
 800075e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000760:	2300      	movs	r3, #0
 8000762:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4618      	mov	r0, r3
 800076a:	f001 fbc7 	bl	8001efc <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x7c>
		Error_Handler();
 8000774:	f000 f97e 	bl	8000a74 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000778:	230f      	movs	r3, #15
 800077a:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000784:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000788:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f001 fe5f 	bl	8002458 <HAL_RCC_ClockConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0xa8>
		Error_Handler();
 80007a0:	f000 f968 	bl	8000a74 <Error_Handler>
	}
}
 80007a4:	bf00      	nop
 80007a6:	3750      	adds	r7, #80	@ 0x50
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40007000 	.word	0x40007000

080007b4 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007ba:	4a1c      	ldr	r2, [pc, #112]	@ (800082c <MX_I2C2_Init+0x78>)
 80007bc:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x0000020B;
 80007be:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007c0:	f240 220b 	movw	r2, #523	@ 0x20b
 80007c4:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 80007c6:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007cc:	4b16      	ldr	r3, [pc, #88]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d2:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 80007d8:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007de:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e4:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80007f0:	480d      	ldr	r0, [pc, #52]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007f2:	f000 fd5f 	bl	80012b4 <HAL_I2C_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_I2C2_Init+0x4c>
		Error_Handler();
 80007fc:	f000 f93a 	bl	8000a74 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8000800:	2100      	movs	r1, #0
 8000802:	4809      	ldr	r0, [pc, #36]	@ (8000828 <MX_I2C2_Init+0x74>)
 8000804:	f001 fae2 	bl	8001dcc <HAL_I2CEx_ConfigAnalogFilter>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_I2C2_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 800080e:	f000 f931 	bl	8000a74 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8000812:	2100      	movs	r1, #0
 8000814:	4804      	ldr	r0, [pc, #16]	@ (8000828 <MX_I2C2_Init+0x74>)
 8000816:	f001 fb24 	bl	8001e62 <HAL_I2CEx_ConfigDigitalFilter>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_I2C2_Init+0x70>
		Error_Handler();
 8000820:	f000 f928 	bl	8000a74 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000028 	.word	0x20000028
 800082c:	40005800 	.word	0x40005800

08000830 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	@ 0x30
 8000834:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	4b85      	ldr	r3, [pc, #532]	@ (8000a5c <MX_GPIO_Init+0x22c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a84      	ldr	r2, [pc, #528]	@ (8000a5c <MX_GPIO_Init+0x22c>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b82      	ldr	r3, [pc, #520]	@ (8000a5c <MX_GPIO_Init+0x22c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800085e:	4b7f      	ldr	r3, [pc, #508]	@ (8000a5c <MX_GPIO_Init+0x22c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a7e      	ldr	r2, [pc, #504]	@ (8000a5c <MX_GPIO_Init+0x22c>)
 8000864:	f043 0320 	orr.w	r3, r3, #32
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b7c      	ldr	r3, [pc, #496]	@ (8000a5c <MX_GPIO_Init+0x22c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0320 	and.w	r3, r3, #32
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000876:	4b79      	ldr	r3, [pc, #484]	@ (8000a5c <MX_GPIO_Init+0x22c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a78      	ldr	r2, [pc, #480]	@ (8000a5c <MX_GPIO_Init+0x22c>)
 800087c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b76      	ldr	r3, [pc, #472]	@ (8000a5c <MX_GPIO_Init+0x22c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	4b73      	ldr	r3, [pc, #460]	@ (8000a5c <MX_GPIO_Init+0x22c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a72      	ldr	r2, [pc, #456]	@ (8000a5c <MX_GPIO_Init+0x22c>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b70      	ldr	r3, [pc, #448]	@ (8000a5c <MX_GPIO_Init+0x22c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	4b6d      	ldr	r3, [pc, #436]	@ (8000a5c <MX_GPIO_Init+0x22c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a6c      	ldr	r2, [pc, #432]	@ (8000a5c <MX_GPIO_Init+0x22c>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b6a      	ldr	r3, [pc, #424]	@ (8000a5c <MX_GPIO_Init+0x22c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80008be:	4b67      	ldr	r3, [pc, #412]	@ (8000a5c <MX_GPIO_Init+0x22c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a66      	ldr	r2, [pc, #408]	@ (8000a5c <MX_GPIO_Init+0x22c>)
 80008c4:	f043 0308 	orr.w	r3, r3, #8
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b64      	ldr	r3, [pc, #400]	@ (8000a5c <MX_GPIO_Init+0x22c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0308 	and.w	r3, r3, #8
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80008d6:	4b61      	ldr	r3, [pc, #388]	@ (8000a5c <MX_GPIO_Init+0x22c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a60      	ldr	r2, [pc, #384]	@ (8000a5c <MX_GPIO_Init+0x22c>)
 80008dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b5e      	ldr	r3, [pc, #376]	@ (8000a5c <MX_GPIO_Init+0x22c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008f4:	485a      	ldr	r0, [pc, #360]	@ (8000a60 <MX_GPIO_Init+0x230>)
 80008f6:	f000 fcc3 	bl	8001280 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 80008fa:	2200      	movs	r2, #0
 80008fc:	2140      	movs	r1, #64	@ 0x40
 80008fe:	4859      	ldr	r0, [pc, #356]	@ (8000a64 <MX_GPIO_Init+0x234>)
 8000900:	f000 fcbe 	bl	8001280 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000904:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000908:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800090a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800090e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4853      	ldr	r0, [pc, #332]	@ (8000a68 <MX_GPIO_Init+0x238>)
 800091c:	f000 fb04 	bl	8000f28 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8000920:	2332      	movs	r3, #50	@ 0x32
 8000922:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000930:	230b      	movs	r3, #11
 8000932:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	484b      	ldr	r0, [pc, #300]	@ (8000a68 <MX_GPIO_Init+0x238>)
 800093c:	f000 faf4 	bl	8000f28 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 8000940:	2386      	movs	r3, #134	@ 0x86
 8000942:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000950:	230b      	movs	r3, #11
 8000952:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	4844      	ldr	r0, [pc, #272]	@ (8000a6c <MX_GPIO_Init+0x23c>)
 800095c:	f000 fae4 	bl	8000f28 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000960:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000964:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4839      	ldr	r0, [pc, #228]	@ (8000a60 <MX_GPIO_Init+0x230>)
 800097a:	f000 fad5 	bl	8000f28 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800097e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000982:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098c:	2303      	movs	r3, #3
 800098e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000990:	230b      	movs	r3, #11
 8000992:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	4831      	ldr	r0, [pc, #196]	@ (8000a60 <MX_GPIO_Init+0x230>)
 800099c:	f000 fac4 	bl	8000f28 <HAL_GPIO_Init>

	/*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
	GPIO_InitStruct.Pin = STLK_RX_Pin | STLK_TX_Pin;
 80009a0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009a4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ae:	2303      	movs	r3, #3
 80009b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009b2:	2307      	movs	r3, #7
 80009b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	482c      	ldr	r0, [pc, #176]	@ (8000a70 <MX_GPIO_Init+0x240>)
 80009be:	f000 fab3 	bl	8000f28 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009c2:	2340      	movs	r3, #64	@ 0x40
 80009c4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c6:	2301      	movs	r3, #1
 80009c8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4822      	ldr	r0, [pc, #136]	@ (8000a64 <MX_GPIO_Init+0x234>)
 80009da:	f000 faa5 	bl	8000f28 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009de:	2380      	movs	r3, #128	@ 0x80
 80009e0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	481c      	ldr	r0, [pc, #112]	@ (8000a64 <MX_GPIO_Init+0x234>)
 80009f2:	f000 fa99 	bl	8000f28 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin | USB_ID_Pin | USB_DM_Pin | USB_DP_Pin;
 80009f6:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80009fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a08:	230a      	movs	r3, #10
 8000a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	4816      	ldr	r0, [pc, #88]	@ (8000a6c <MX_GPIO_Init+0x23c>)
 8000a14:	f000 fa88 	bl	8000f28 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a1c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480f      	ldr	r0, [pc, #60]	@ (8000a6c <MX_GPIO_Init+0x23c>)
 8000a2e:	f000 fa7b 	bl	8000f28 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 8000a32:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000a36:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a44:	230b      	movs	r3, #11
 8000a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <MX_GPIO_Init+0x234>)
 8000a50:	f000 fa6a 	bl	8000f28 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000a54:	bf00      	nop
 8000a56:	3730      	adds	r7, #48	@ 0x30
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020400 	.word	0x40020400
 8000a64:	40021800 	.word	0x40021800
 8000a68:	40020800 	.word	0x40020800
 8000a6c:	40020000 	.word	0x40020000
 8000a70:	40020c00 	.word	0x40020c00

08000a74 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <Error_Handler+0x8>

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa2:	4a08      	ldr	r2, [pc, #32]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000aa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b0ae      	sub	sp, #184	@ 0xb8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2290      	movs	r2, #144	@ 0x90
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f002 facd 	bl	8003088 <memset>
  if(hi2c->Instance==I2C2)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a21      	ldr	r2, [pc, #132]	@ (8000b78 <HAL_I2C_MspInit+0xb0>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d13b      	bne.n	8000b70 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000af8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000afc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4618      	mov	r0, r3
 8000b08:	f001 fe96 	bl	8002838 <HAL_RCCEx_PeriphCLKConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000b12:	f7ff ffaf 	bl	8000a74 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b16:	4b19      	ldr	r3, [pc, #100]	@ (8000b7c <HAL_I2C_MspInit+0xb4>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	4a18      	ldr	r2, [pc, #96]	@ (8000b7c <HAL_I2C_MspInit+0xb4>)
 8000b1c:	f043 0320 	orr.w	r3, r3, #32
 8000b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b22:	4b16      	ldr	r3, [pc, #88]	@ (8000b7c <HAL_I2C_MspInit+0xb4>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	f003 0320 	and.w	r3, r3, #32
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b34:	2312      	movs	r3, #18
 8000b36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b46:	2304      	movs	r3, #4
 8000b48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b4c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b50:	4619      	mov	r1, r3
 8000b52:	480b      	ldr	r0, [pc, #44]	@ (8000b80 <HAL_I2C_MspInit+0xb8>)
 8000b54:	f000 f9e8 	bl	8000f28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b58:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <HAL_I2C_MspInit+0xb4>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5c:	4a07      	ldr	r2, [pc, #28]	@ (8000b7c <HAL_I2C_MspInit+0xb4>)
 8000b5e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b64:	4b05      	ldr	r3, [pc, #20]	@ (8000b7c <HAL_I2C_MspInit+0xb4>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000b70:	bf00      	nop
 8000b72:	37b8      	adds	r7, #184	@ 0xb8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40005800 	.word	0x40005800
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40021400 	.word	0x40021400

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <NMI_Handler+0x4>

08000b8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <HardFault_Handler+0x4>

08000b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <MemManage_Handler+0x4>

08000b9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <BusFault_Handler+0x4>

08000ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <UsageFault_Handler+0x4>

08000bac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bda:	f000 f87b 	bl	8000cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be8:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <SystemInit+0x20>)
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bee:	4a05      	ldr	r2, [pc, #20]	@ (8000c04 <SystemInit+0x20>)
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c0c:	f7ff ffea 	bl	8000be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c10:	480c      	ldr	r0, [pc, #48]	@ (8000c44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c12:	490d      	ldr	r1, [pc, #52]	@ (8000c48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c14:	4a0d      	ldr	r2, [pc, #52]	@ (8000c4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c28:	4c0a      	ldr	r4, [pc, #40]	@ (8000c54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c36:	f002 fa2f 	bl	8003098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c3a:	f7ff fd45 	bl	80006c8 <main>
  bx  lr    
 8000c3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c40:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c4c:	08003118 	.word	0x08003118
  ldr r2, =_sbss
 8000c50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c54:	20000080 	.word	0x20000080

08000c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC_IRQHandler>

08000c5a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c5e:	2003      	movs	r0, #3
 8000c60:	f000 f92e 	bl	8000ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 f805 	bl	8000c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c6a:	f7ff ff09 	bl	8000a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c7c:	4b12      	ldr	r3, [pc, #72]	@ (8000cc8 <HAL_InitTick+0x54>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b12      	ldr	r3, [pc, #72]	@ (8000ccc <HAL_InitTick+0x58>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 f93b 	bl	8000f0e <HAL_SYSTICK_Config>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00e      	b.n	8000cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b0f      	cmp	r3, #15
 8000ca6:	d80a      	bhi.n	8000cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f000 f911 	bl	8000ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb4:	4a06      	ldr	r2, [pc, #24]	@ (8000cd0 <HAL_InitTick+0x5c>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e000      	b.n	8000cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20000004 	.word	0x20000004

08000cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <HAL_IncTick+0x20>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_IncTick+0x24>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a04      	ldr	r2, [pc, #16]	@ (8000cf8 <HAL_IncTick+0x24>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	2000007c 	.word	0x2000007c

08000cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b03      	ldr	r3, [pc, #12]	@ (8000d10 <HAL_GetTick+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	2000007c 	.word	0x2000007c

08000d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d1c:	f7ff ffee 	bl	8000cfc <HAL_GetTick>
 8000d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d2c:	d005      	beq.n	8000d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <HAL_Delay+0x44>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4413      	add	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d3a:	bf00      	nop
 8000d3c:	f7ff ffde 	bl	8000cfc <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d8f7      	bhi.n	8000d3c <HAL_Delay+0x28>
  {
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000008 	.word	0x20000008

08000d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <__NVIC_SetPriorityGrouping+0x40>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	4313      	orrs	r3, r2
 8000d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	@ (8000d9c <__NVIC_SetPriorityGrouping+0x40>)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	60d3      	str	r3, [r2, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00
 8000da0:	05fa0000 	.word	0x05fa0000

08000da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da8:	4b04      	ldr	r3, [pc, #16]	@ (8000dbc <__NVIC_GetPriorityGrouping+0x18>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	f003 0307 	and.w	r3, r3, #7
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	@ (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	@ (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	@ 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
         );
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	@ 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e8c:	d301      	bcc.n	8000e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00f      	b.n	8000eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e92:	4a0a      	ldr	r2, [pc, #40]	@ (8000ebc <SysTick_Config+0x40>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f7ff ff8e 	bl	8000dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea4:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <SysTick_Config+0x40>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eaa:	4b04      	ldr	r3, [pc, #16]	@ (8000ebc <SysTick_Config+0x40>)
 8000eac:	2207      	movs	r2, #7
 8000eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	e000e010 	.word	0xe000e010

08000ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ff47 	bl	8000d5c <__NVIC_SetPriorityGrouping>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee8:	f7ff ff5c 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 8000eec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	68b9      	ldr	r1, [r7, #8]
 8000ef2:	6978      	ldr	r0, [r7, #20]
 8000ef4:	f7ff ff8e 	bl	8000e14 <NVIC_EncodePriority>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff5d 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ffb0 	bl	8000e7c <SysTick_Config>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	@ 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
 8000f46:	e175      	b.n	8001234 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f48:	2201      	movs	r2, #1
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	f040 8164 	bne.w	800122e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d005      	beq.n	8000f7e <HAL_GPIO_Init+0x56>
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d130      	bne.n	8000fe0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	2203      	movs	r2, #3
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4013      	ands	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	68da      	ldr	r2, [r3, #12]
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	091b      	lsrs	r3, r3, #4
 8000fca:	f003 0201 	and.w	r2, r3, #1
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	d017      	beq.n	800101c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d123      	bne.n	8001070 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	08da      	lsrs	r2, r3, #3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3208      	adds	r2, #8
 8001030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	f003 0307 	and.w	r3, r3, #7
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	220f      	movs	r2, #15
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	691a      	ldr	r2, [r3, #16]
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	08da      	lsrs	r2, r3, #3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3208      	adds	r2, #8
 800106a:	69b9      	ldr	r1, [r7, #24]
 800106c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	2203      	movs	r2, #3
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0203 	and.w	r2, r3, #3
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f000 80be 	beq.w	800122e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b2:	4b66      	ldr	r3, [pc, #408]	@ (800124c <HAL_GPIO_Init+0x324>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b6:	4a65      	ldr	r2, [pc, #404]	@ (800124c <HAL_GPIO_Init+0x324>)
 80010b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010be:	4b63      	ldr	r3, [pc, #396]	@ (800124c <HAL_GPIO_Init+0x324>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010ca:	4a61      	ldr	r2, [pc, #388]	@ (8001250 <HAL_GPIO_Init+0x328>)
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	089b      	lsrs	r3, r3, #2
 80010d0:	3302      	adds	r3, #2
 80010d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	220f      	movs	r2, #15
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a58      	ldr	r2, [pc, #352]	@ (8001254 <HAL_GPIO_Init+0x32c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d037      	beq.n	8001166 <HAL_GPIO_Init+0x23e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a57      	ldr	r2, [pc, #348]	@ (8001258 <HAL_GPIO_Init+0x330>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d031      	beq.n	8001162 <HAL_GPIO_Init+0x23a>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a56      	ldr	r2, [pc, #344]	@ (800125c <HAL_GPIO_Init+0x334>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d02b      	beq.n	800115e <HAL_GPIO_Init+0x236>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a55      	ldr	r2, [pc, #340]	@ (8001260 <HAL_GPIO_Init+0x338>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d025      	beq.n	800115a <HAL_GPIO_Init+0x232>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a54      	ldr	r2, [pc, #336]	@ (8001264 <HAL_GPIO_Init+0x33c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d01f      	beq.n	8001156 <HAL_GPIO_Init+0x22e>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a53      	ldr	r2, [pc, #332]	@ (8001268 <HAL_GPIO_Init+0x340>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d019      	beq.n	8001152 <HAL_GPIO_Init+0x22a>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a52      	ldr	r2, [pc, #328]	@ (800126c <HAL_GPIO_Init+0x344>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d013      	beq.n	800114e <HAL_GPIO_Init+0x226>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a51      	ldr	r2, [pc, #324]	@ (8001270 <HAL_GPIO_Init+0x348>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d00d      	beq.n	800114a <HAL_GPIO_Init+0x222>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a50      	ldr	r2, [pc, #320]	@ (8001274 <HAL_GPIO_Init+0x34c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d007      	beq.n	8001146 <HAL_GPIO_Init+0x21e>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4f      	ldr	r2, [pc, #316]	@ (8001278 <HAL_GPIO_Init+0x350>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d101      	bne.n	8001142 <HAL_GPIO_Init+0x21a>
 800113e:	2309      	movs	r3, #9
 8001140:	e012      	b.n	8001168 <HAL_GPIO_Init+0x240>
 8001142:	230a      	movs	r3, #10
 8001144:	e010      	b.n	8001168 <HAL_GPIO_Init+0x240>
 8001146:	2308      	movs	r3, #8
 8001148:	e00e      	b.n	8001168 <HAL_GPIO_Init+0x240>
 800114a:	2307      	movs	r3, #7
 800114c:	e00c      	b.n	8001168 <HAL_GPIO_Init+0x240>
 800114e:	2306      	movs	r3, #6
 8001150:	e00a      	b.n	8001168 <HAL_GPIO_Init+0x240>
 8001152:	2305      	movs	r3, #5
 8001154:	e008      	b.n	8001168 <HAL_GPIO_Init+0x240>
 8001156:	2304      	movs	r3, #4
 8001158:	e006      	b.n	8001168 <HAL_GPIO_Init+0x240>
 800115a:	2303      	movs	r3, #3
 800115c:	e004      	b.n	8001168 <HAL_GPIO_Init+0x240>
 800115e:	2302      	movs	r3, #2
 8001160:	e002      	b.n	8001168 <HAL_GPIO_Init+0x240>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <HAL_GPIO_Init+0x240>
 8001166:	2300      	movs	r3, #0
 8001168:	69fa      	ldr	r2, [r7, #28]
 800116a:	f002 0203 	and.w	r2, r2, #3
 800116e:	0092      	lsls	r2, r2, #2
 8001170:	4093      	lsls	r3, r2
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001178:	4935      	ldr	r1, [pc, #212]	@ (8001250 <HAL_GPIO_Init+0x328>)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	089b      	lsrs	r3, r3, #2
 800117e:	3302      	adds	r3, #2
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001186:	4b3d      	ldr	r3, [pc, #244]	@ (800127c <HAL_GPIO_Init+0x354>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011aa:	4a34      	ldr	r2, [pc, #208]	@ (800127c <HAL_GPIO_Init+0x354>)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011b0:	4b32      	ldr	r3, [pc, #200]	@ (800127c <HAL_GPIO_Init+0x354>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011d4:	4a29      	ldr	r2, [pc, #164]	@ (800127c <HAL_GPIO_Init+0x354>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011da:	4b28      	ldr	r3, [pc, #160]	@ (800127c <HAL_GPIO_Init+0x354>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011fe:	4a1f      	ldr	r2, [pc, #124]	@ (800127c <HAL_GPIO_Init+0x354>)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001204:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <HAL_GPIO_Init+0x354>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001228:	4a14      	ldr	r2, [pc, #80]	@ (800127c <HAL_GPIO_Init+0x354>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3301      	adds	r3, #1
 8001232:	61fb      	str	r3, [r7, #28]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	2b0f      	cmp	r3, #15
 8001238:	f67f ae86 	bls.w	8000f48 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3724      	adds	r7, #36	@ 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800
 8001250:	40013800 	.word	0x40013800
 8001254:	40020000 	.word	0x40020000
 8001258:	40020400 	.word	0x40020400
 800125c:	40020800 	.word	0x40020800
 8001260:	40020c00 	.word	0x40020c00
 8001264:	40021000 	.word	0x40021000
 8001268:	40021400 	.word	0x40021400
 800126c:	40021800 	.word	0x40021800
 8001270:	40021c00 	.word	0x40021c00
 8001274:	40022000 	.word	0x40022000
 8001278:	40022400 	.word	0x40022400
 800127c:	40013c00 	.word	0x40013c00

08001280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	807b      	strh	r3, [r7, #2]
 800128c:	4613      	mov	r3, r2
 800128e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001290:	787b      	ldrb	r3, [r7, #1]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001296:	887a      	ldrh	r2, [r7, #2]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800129c:	e003      	b.n	80012a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	041a      	lsls	r2, r3, #16
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	619a      	str	r2, [r3, #24]
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e08b      	b.n	80013de <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d106      	bne.n	80012e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff fbf4 	bl	8000ac8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2224      	movs	r2, #36	@ 0x24
 80012e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0201 	bic.w	r2, r2, #1
 80012f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001304:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001314:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d107      	bne.n	800132e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	e006      	b.n	800133c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800133a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	2b02      	cmp	r3, #2
 8001342:	d108      	bne.n	8001356 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	e007      	b.n	8001366 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001364:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6859      	ldr	r1, [r3, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b1d      	ldr	r3, [pc, #116]	@ (80013e8 <HAL_I2C_Init+0x134>)
 8001372:	430b      	orrs	r3, r1
 8001374:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68da      	ldr	r2, [r3, #12]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001384:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691a      	ldr	r2, [r3, #16]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69d9      	ldr	r1, [r3, #28]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1a      	ldr	r2, [r3, #32]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	430a      	orrs	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 0201 	orr.w	r2, r2, #1
 80013be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2220      	movs	r2, #32
 80013ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	02008000 	.word	0x02008000

080013ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af02      	add	r7, sp, #8
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	4608      	mov	r0, r1
 80013f6:	4611      	mov	r1, r2
 80013f8:	461a      	mov	r2, r3
 80013fa:	4603      	mov	r3, r0
 80013fc:	817b      	strh	r3, [r7, #10]
 80013fe:	460b      	mov	r3, r1
 8001400:	813b      	strh	r3, [r7, #8]
 8001402:	4613      	mov	r3, r2
 8001404:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b20      	cmp	r3, #32
 8001410:	f040 80f9 	bne.w	8001606 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <HAL_I2C_Mem_Write+0x34>
 800141a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800141c:	2b00      	cmp	r3, #0
 800141e:	d105      	bne.n	800142c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001426:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e0ed      	b.n	8001608 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001432:	2b01      	cmp	r3, #1
 8001434:	d101      	bne.n	800143a <HAL_I2C_Mem_Write+0x4e>
 8001436:	2302      	movs	r3, #2
 8001438:	e0e6      	b.n	8001608 <HAL_I2C_Mem_Write+0x21c>
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001442:	f7ff fc5b 	bl	8000cfc <HAL_GetTick>
 8001446:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2319      	movs	r3, #25
 800144e:	2201      	movs	r2, #1
 8001450:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f000 fac3 	bl	80019e0 <I2C_WaitOnFlagUntilTimeout>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e0d1      	b.n	8001608 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2221      	movs	r2, #33	@ 0x21
 8001468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2240      	movs	r2, #64	@ 0x40
 8001470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2200      	movs	r2, #0
 8001478:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6a3a      	ldr	r2, [r7, #32]
 800147e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001484:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2200      	movs	r2, #0
 800148a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800148c:	88f8      	ldrh	r0, [r7, #6]
 800148e:	893a      	ldrh	r2, [r7, #8]
 8001490:	8979      	ldrh	r1, [r7, #10]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	4603      	mov	r3, r0
 800149c:	68f8      	ldr	r0, [r7, #12]
 800149e:	f000 f9d3 	bl	8001848 <I2C_RequestMemoryWrite>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d005      	beq.n	80014b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e0a9      	b.n	8001608 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	2bff      	cmp	r3, #255	@ 0xff
 80014bc:	d90e      	bls.n	80014dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	22ff      	movs	r2, #255	@ 0xff
 80014c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	8979      	ldrh	r1, [r7, #10]
 80014cc:	2300      	movs	r3, #0
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f000 fc47 	bl	8001d68 <I2C_TransferConfig>
 80014da:	e00f      	b.n	80014fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	8979      	ldrh	r1, [r7, #10]
 80014ee:	2300      	movs	r3, #0
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f000 fc36 	bl	8001d68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f000 fac6 	bl	8001a92 <I2C_WaitOnTXISFlagUntilTimeout>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e07b      	b.n	8001608 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001514:	781a      	ldrb	r2, [r3, #0]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001520:	1c5a      	adds	r2, r3, #1
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800152a:	b29b      	uxth	r3, r3
 800152c:	3b01      	subs	r3, #1
 800152e:	b29a      	uxth	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001538:	3b01      	subs	r3, #1
 800153a:	b29a      	uxth	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001544:	b29b      	uxth	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d034      	beq.n	80015b4 <HAL_I2C_Mem_Write+0x1c8>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800154e:	2b00      	cmp	r3, #0
 8001550:	d130      	bne.n	80015b4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001558:	2200      	movs	r2, #0
 800155a:	2180      	movs	r1, #128	@ 0x80
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f000 fa3f 	bl	80019e0 <I2C_WaitOnFlagUntilTimeout>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e04d      	b.n	8001608 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001570:	b29b      	uxth	r3, r3
 8001572:	2bff      	cmp	r3, #255	@ 0xff
 8001574:	d90e      	bls.n	8001594 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	22ff      	movs	r2, #255	@ 0xff
 800157a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001580:	b2da      	uxtb	r2, r3
 8001582:	8979      	ldrh	r1, [r7, #10]
 8001584:	2300      	movs	r3, #0
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f000 fbeb 	bl	8001d68 <I2C_TransferConfig>
 8001592:	e00f      	b.n	80015b4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001598:	b29a      	uxth	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	8979      	ldrh	r1, [r7, #10]
 80015a6:	2300      	movs	r3, #0
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f000 fbda 	bl	8001d68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d19e      	bne.n	80014fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f000 faac 	bl	8001b20 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e01a      	b.n	8001608 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2220      	movs	r2, #32
 80015d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6859      	ldr	r1, [r3, #4]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001610 <HAL_I2C_Mem_Write+0x224>)
 80015e6:	400b      	ands	r3, r1
 80015e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2220      	movs	r2, #32
 80015ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	e000      	b.n	8001608 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001606:	2302      	movs	r3, #2
  }
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	fe00e800 	.word	0xfe00e800

08001614 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af02      	add	r7, sp, #8
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	4608      	mov	r0, r1
 800161e:	4611      	mov	r1, r2
 8001620:	461a      	mov	r2, r3
 8001622:	4603      	mov	r3, r0
 8001624:	817b      	strh	r3, [r7, #10]
 8001626:	460b      	mov	r3, r1
 8001628:	813b      	strh	r3, [r7, #8]
 800162a:	4613      	mov	r3, r2
 800162c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b20      	cmp	r3, #32
 8001638:	f040 80fd 	bne.w	8001836 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800163c:	6a3b      	ldr	r3, [r7, #32]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d002      	beq.n	8001648 <HAL_I2C_Mem_Read+0x34>
 8001642:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001644:	2b00      	cmp	r3, #0
 8001646:	d105      	bne.n	8001654 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800164e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0f1      	b.n	8001838 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800165a:	2b01      	cmp	r3, #1
 800165c:	d101      	bne.n	8001662 <HAL_I2C_Mem_Read+0x4e>
 800165e:	2302      	movs	r3, #2
 8001660:	e0ea      	b.n	8001838 <HAL_I2C_Mem_Read+0x224>
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800166a:	f7ff fb47 	bl	8000cfc <HAL_GetTick>
 800166e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	2319      	movs	r3, #25
 8001676:	2201      	movs	r2, #1
 8001678:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f000 f9af 	bl	80019e0 <I2C_WaitOnFlagUntilTimeout>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0d5      	b.n	8001838 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2222      	movs	r2, #34	@ 0x22
 8001690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2240      	movs	r2, #64	@ 0x40
 8001698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2200      	movs	r2, #0
 80016a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6a3a      	ldr	r2, [r7, #32]
 80016a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80016ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016b4:	88f8      	ldrh	r0, [r7, #6]
 80016b6:	893a      	ldrh	r2, [r7, #8]
 80016b8:	8979      	ldrh	r1, [r7, #10]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	9301      	str	r3, [sp, #4]
 80016be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	4603      	mov	r3, r0
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f000 f913 	bl	80018f0 <I2C_RequestMemoryRead>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e0ad      	b.n	8001838 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	2bff      	cmp	r3, #255	@ 0xff
 80016e4:	d90e      	bls.n	8001704 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2201      	movs	r2, #1
 80016ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	8979      	ldrh	r1, [r7, #10]
 80016f4:	4b52      	ldr	r3, [pc, #328]	@ (8001840 <HAL_I2C_Mem_Read+0x22c>)
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f000 fb33 	bl	8001d68 <I2C_TransferConfig>
 8001702:	e00f      	b.n	8001724 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001708:	b29a      	uxth	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001712:	b2da      	uxtb	r2, r3
 8001714:	8979      	ldrh	r1, [r7, #10]
 8001716:	4b4a      	ldr	r3, [pc, #296]	@ (8001840 <HAL_I2C_Mem_Read+0x22c>)
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 fb22 	bl	8001d68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800172a:	2200      	movs	r2, #0
 800172c:	2104      	movs	r1, #4
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f000 f956 	bl	80019e0 <I2C_WaitOnFlagUntilTimeout>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e07c      	b.n	8001838 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800175a:	3b01      	subs	r3, #1
 800175c:	b29a      	uxth	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001766:	b29b      	uxth	r3, r3
 8001768:	3b01      	subs	r3, #1
 800176a:	b29a      	uxth	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001774:	b29b      	uxth	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d034      	beq.n	80017e4 <HAL_I2C_Mem_Read+0x1d0>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800177e:	2b00      	cmp	r3, #0
 8001780:	d130      	bne.n	80017e4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001788:	2200      	movs	r2, #0
 800178a:	2180      	movs	r1, #128	@ 0x80
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f000 f927 	bl	80019e0 <I2C_WaitOnFlagUntilTimeout>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e04d      	b.n	8001838 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	2bff      	cmp	r3, #255	@ 0xff
 80017a4:	d90e      	bls.n	80017c4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2201      	movs	r2, #1
 80017aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	8979      	ldrh	r1, [r7, #10]
 80017b4:	2300      	movs	r3, #0
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f000 fad3 	bl	8001d68 <I2C_TransferConfig>
 80017c2:	e00f      	b.n	80017e4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	8979      	ldrh	r1, [r7, #10]
 80017d6:	2300      	movs	r3, #0
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f000 fac2 	bl	8001d68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d19a      	bne.n	8001724 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f000 f994 	bl	8001b20 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e01a      	b.n	8001838 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2220      	movs	r2, #32
 8001808:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6859      	ldr	r1, [r3, #4]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b0b      	ldr	r3, [pc, #44]	@ (8001844 <HAL_I2C_Mem_Read+0x230>)
 8001816:	400b      	ands	r3, r1
 8001818:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2220      	movs	r2, #32
 800181e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	e000      	b.n	8001838 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001836:	2302      	movs	r3, #2
  }
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	80002400 	.word	0x80002400
 8001844:	fe00e800 	.word	0xfe00e800

08001848 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af02      	add	r7, sp, #8
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	4608      	mov	r0, r1
 8001852:	4611      	mov	r1, r2
 8001854:	461a      	mov	r2, r3
 8001856:	4603      	mov	r3, r0
 8001858:	817b      	strh	r3, [r7, #10]
 800185a:	460b      	mov	r3, r1
 800185c:	813b      	strh	r3, [r7, #8]
 800185e:	4613      	mov	r3, r2
 8001860:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	b2da      	uxtb	r2, r3
 8001866:	8979      	ldrh	r1, [r7, #10]
 8001868:	4b20      	ldr	r3, [pc, #128]	@ (80018ec <I2C_RequestMemoryWrite+0xa4>)
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f000 fa79 	bl	8001d68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	69b9      	ldr	r1, [r7, #24]
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	f000 f909 	bl	8001a92 <I2C_WaitOnTXISFlagUntilTimeout>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e02c      	b.n	80018e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d105      	bne.n	800189c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001890:	893b      	ldrh	r3, [r7, #8]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	629a      	str	r2, [r3, #40]	@ 0x28
 800189a:	e015      	b.n	80018c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800189c:	893b      	ldrh	r3, [r7, #8]
 800189e:	0a1b      	lsrs	r3, r3, #8
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	69b9      	ldr	r1, [r7, #24]
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 f8ef 	bl	8001a92 <I2C_WaitOnTXISFlagUntilTimeout>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e012      	b.n	80018e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018be:	893b      	ldrh	r3, [r7, #8]
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	2200      	movs	r2, #0
 80018d0:	2180      	movs	r1, #128	@ 0x80
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f000 f884 	bl	80019e0 <I2C_WaitOnFlagUntilTimeout>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	80002000 	.word	0x80002000

080018f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af02      	add	r7, sp, #8
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	4608      	mov	r0, r1
 80018fa:	4611      	mov	r1, r2
 80018fc:	461a      	mov	r2, r3
 80018fe:	4603      	mov	r3, r0
 8001900:	817b      	strh	r3, [r7, #10]
 8001902:	460b      	mov	r3, r1
 8001904:	813b      	strh	r3, [r7, #8]
 8001906:	4613      	mov	r3, r2
 8001908:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	b2da      	uxtb	r2, r3
 800190e:	8979      	ldrh	r1, [r7, #10]
 8001910:	4b20      	ldr	r3, [pc, #128]	@ (8001994 <I2C_RequestMemoryRead+0xa4>)
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	2300      	movs	r3, #0
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f000 fa26 	bl	8001d68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800191c:	69fa      	ldr	r2, [r7, #28]
 800191e:	69b9      	ldr	r1, [r7, #24]
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 f8b6 	bl	8001a92 <I2C_WaitOnTXISFlagUntilTimeout>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e02c      	b.n	800198a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d105      	bne.n	8001942 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001936:	893b      	ldrh	r3, [r7, #8]
 8001938:	b2da      	uxtb	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001940:	e015      	b.n	800196e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001942:	893b      	ldrh	r3, [r7, #8]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	b29b      	uxth	r3, r3
 8001948:	b2da      	uxtb	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001950:	69fa      	ldr	r2, [r7, #28]
 8001952:	69b9      	ldr	r1, [r7, #24]
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f000 f89c 	bl	8001a92 <I2C_WaitOnTXISFlagUntilTimeout>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e012      	b.n	800198a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001964:	893b      	ldrh	r3, [r7, #8]
 8001966:	b2da      	uxtb	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	2200      	movs	r2, #0
 8001976:	2140      	movs	r1, #64	@ 0x40
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	f000 f831 	bl	80019e0 <I2C_WaitOnFlagUntilTimeout>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	80002000 	.word	0x80002000

08001998 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d103      	bne.n	80019b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2200      	movs	r2, #0
 80019b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d007      	beq.n	80019d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	699a      	ldr	r2, [r3, #24]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0201 	orr.w	r2, r2, #1
 80019d2:	619a      	str	r2, [r3, #24]
  }
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	4613      	mov	r3, r2
 80019ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019f0:	e03b      	b.n	8001a6a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	6839      	ldr	r1, [r7, #0]
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 f8d6 	bl	8001ba8 <I2C_IsErrorOccurred>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e041      	b.n	8001a8a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a0c:	d02d      	beq.n	8001a6a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a0e:	f7ff f975 	bl	8000cfc <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d302      	bcc.n	8001a24 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d122      	bne.n	8001a6a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	699a      	ldr	r2, [r3, #24]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	bf0c      	ite	eq
 8001a34:	2301      	moveq	r3, #1
 8001a36:	2300      	movne	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d113      	bne.n	8001a6a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a46:	f043 0220 	orr.w	r2, r3, #32
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2220      	movs	r2, #32
 8001a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00f      	b.n	8001a8a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	699a      	ldr	r2, [r3, #24]
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	4013      	ands	r3, r2
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	bf0c      	ite	eq
 8001a7a:	2301      	moveq	r3, #1
 8001a7c:	2300      	movne	r3, #0
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	461a      	mov	r2, r3
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d0b4      	beq.n	80019f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b084      	sub	sp, #16
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a9e:	e033      	b.n	8001b08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	68b9      	ldr	r1, [r7, #8]
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f000 f87f 	bl	8001ba8 <I2C_IsErrorOccurred>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e031      	b.n	8001b18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aba:	d025      	beq.n	8001b08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001abc:	f7ff f91e 	bl	8000cfc <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d302      	bcc.n	8001ad2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d11a      	bne.n	8001b08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d013      	beq.n	8001b08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae4:	f043 0220 	orr.w	r2, r3, #32
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2220      	movs	r2, #32
 8001af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e007      	b.n	8001b18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d1c4      	bne.n	8001aa0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b2c:	e02f      	b.n	8001b8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f000 f838 	bl	8001ba8 <I2C_IsErrorOccurred>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e02d      	b.n	8001b9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b42:	f7ff f8db 	bl	8000cfc <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d302      	bcc.n	8001b58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d11a      	bne.n	8001b8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	f003 0320 	and.w	r3, r3, #32
 8001b62:	2b20      	cmp	r3, #32
 8001b64:	d013      	beq.n	8001b8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6a:	f043 0220 	orr.w	r2, r3, #32
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2220      	movs	r2, #32
 8001b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e007      	b.n	8001b9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f003 0320 	and.w	r3, r3, #32
 8001b98:	2b20      	cmp	r3, #32
 8001b9a:	d1c8      	bne.n	8001b2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	@ 0x28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	f003 0310 	and.w	r3, r3, #16
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d068      	beq.n	8001ca6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2210      	movs	r2, #16
 8001bda:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001bdc:	e049      	b.n	8001c72 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be4:	d045      	beq.n	8001c72 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001be6:	f7ff f889 	bl	8000cfc <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d302      	bcc.n	8001bfc <I2C_IsErrorOccurred+0x54>
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d13a      	bne.n	8001c72 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001c0e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c1e:	d121      	bne.n	8001c64 <I2C_IsErrorOccurred+0xbc>
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001c26:	d01d      	beq.n	8001c64 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001c28:	7cfb      	ldrb	r3, [r7, #19]
 8001c2a:	2b20      	cmp	r3, #32
 8001c2c:	d01a      	beq.n	8001c64 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c3c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c3e:	f7ff f85d 	bl	8000cfc <HAL_GetTick>
 8001c42:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c44:	e00e      	b.n	8001c64 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c46:	f7ff f859 	bl	8000cfc <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b19      	cmp	r3, #25
 8001c52:	d907      	bls.n	8001c64 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001c54:	6a3b      	ldr	r3, [r7, #32]
 8001c56:	f043 0320 	orr.w	r3, r3, #32
 8001c5a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001c62:	e006      	b.n	8001c72 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	f003 0320 	and.w	r3, r3, #32
 8001c6e:	2b20      	cmp	r3, #32
 8001c70:	d1e9      	bne.n	8001c46 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0320 	and.w	r3, r3, #32
 8001c7c:	2b20      	cmp	r3, #32
 8001c7e:	d003      	beq.n	8001c88 <I2C_IsErrorOccurred+0xe0>
 8001c80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0aa      	beq.n	8001bde <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001c88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d103      	bne.n	8001c98 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2220      	movs	r2, #32
 8001c96:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001c98:	6a3b      	ldr	r3, [r7, #32]
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00b      	beq.n	8001cd0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001cb8:	6a3b      	ldr	r3, [r7, #32]
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00b      	beq.n	8001cf2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001cda:	6a3b      	ldr	r3, [r7, #32]
 8001cdc:	f043 0308 	orr.w	r3, r3, #8
 8001ce0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00b      	beq.n	8001d14 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	f043 0302 	orr.w	r3, r3, #2
 8001d02:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001d14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d01c      	beq.n	8001d56 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f7ff fe3b 	bl	8001998 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6859      	ldr	r1, [r3, #4]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d64 <I2C_IsErrorOccurred+0x1bc>)
 8001d2e:	400b      	ands	r3, r1
 8001d30:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2220      	movs	r2, #32
 8001d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001d56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3728      	adds	r7, #40	@ 0x28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	fe00e800 	.word	0xfe00e800

08001d68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b087      	sub	sp, #28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	607b      	str	r3, [r7, #4]
 8001d72:	460b      	mov	r3, r1
 8001d74:	817b      	strh	r3, [r7, #10]
 8001d76:	4613      	mov	r3, r2
 8001d78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d7a:	897b      	ldrh	r3, [r7, #10]
 8001d7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d80:	7a7b      	ldrb	r3, [r7, #9]
 8001d82:	041b      	lsls	r3, r3, #16
 8001d84:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d88:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d8e:	6a3b      	ldr	r3, [r7, #32]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d96:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	0d5b      	lsrs	r3, r3, #21
 8001da2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001da6:	4b08      	ldr	r3, [pc, #32]	@ (8001dc8 <I2C_TransferConfig+0x60>)
 8001da8:	430b      	orrs	r3, r1
 8001daa:	43db      	mvns	r3, r3
 8001dac:	ea02 0103 	and.w	r1, r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001dba:	bf00      	nop
 8001dbc:	371c      	adds	r7, #28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	03ff63ff 	.word	0x03ff63ff

08001dcc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b20      	cmp	r3, #32
 8001de0:	d138      	bne.n	8001e54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e032      	b.n	8001e56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2224      	movs	r2, #36	@ 0x24
 8001dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0201 	bic.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001e1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6819      	ldr	r1, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2220      	movs	r2, #32
 8001e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e50:	2300      	movs	r3, #0
 8001e52:	e000      	b.n	8001e56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e54:	2302      	movs	r3, #2
  }
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b085      	sub	sp, #20
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b20      	cmp	r3, #32
 8001e76:	d139      	bne.n	8001eec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e033      	b.n	8001eee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2224      	movs	r2, #36	@ 0x24
 8001e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0201 	bic.w	r2, r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001eb4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0201 	orr.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2220      	movs	r2, #32
 8001edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	e000      	b.n	8001eee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001eec:	2302      	movs	r3, #2
  }
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001f04:	2300      	movs	r3, #0
 8001f06:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e29b      	b.n	800244a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 8087 	beq.w	800202e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f20:	4b96      	ldr	r3, [pc, #600]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 030c 	and.w	r3, r3, #12
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d00c      	beq.n	8001f46 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f2c:	4b93      	ldr	r3, [pc, #588]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 030c 	and.w	r3, r3, #12
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	d112      	bne.n	8001f5e <HAL_RCC_OscConfig+0x62>
 8001f38:	4b90      	ldr	r3, [pc, #576]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f44:	d10b      	bne.n	8001f5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f46:	4b8d      	ldr	r3, [pc, #564]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d06c      	beq.n	800202c <HAL_RCC_OscConfig+0x130>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d168      	bne.n	800202c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e275      	b.n	800244a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f66:	d106      	bne.n	8001f76 <HAL_RCC_OscConfig+0x7a>
 8001f68:	4b84      	ldr	r3, [pc, #528]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a83      	ldr	r2, [pc, #524]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8001f6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	e02e      	b.n	8001fd4 <HAL_RCC_OscConfig+0xd8>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10c      	bne.n	8001f98 <HAL_RCC_OscConfig+0x9c>
 8001f7e:	4b7f      	ldr	r3, [pc, #508]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a7e      	ldr	r2, [pc, #504]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8001f84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b7c      	ldr	r3, [pc, #496]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a7b      	ldr	r2, [pc, #492]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8001f90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e01d      	b.n	8001fd4 <HAL_RCC_OscConfig+0xd8>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fa0:	d10c      	bne.n	8001fbc <HAL_RCC_OscConfig+0xc0>
 8001fa2:	4b76      	ldr	r3, [pc, #472]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a75      	ldr	r2, [pc, #468]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8001fa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	4b73      	ldr	r3, [pc, #460]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a72      	ldr	r2, [pc, #456]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8001fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	e00b      	b.n	8001fd4 <HAL_RCC_OscConfig+0xd8>
 8001fbc:	4b6f      	ldr	r3, [pc, #444]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a6e      	ldr	r2, [pc, #440]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8001fc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	4b6c      	ldr	r3, [pc, #432]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a6b      	ldr	r2, [pc, #428]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8001fce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d013      	beq.n	8002004 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fdc:	f7fe fe8e 	bl	8000cfc <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe4:	f7fe fe8a 	bl	8000cfc <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b64      	cmp	r3, #100	@ 0x64
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e229      	b.n	800244a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff6:	4b61      	ldr	r3, [pc, #388]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0f0      	beq.n	8001fe4 <HAL_RCC_OscConfig+0xe8>
 8002002:	e014      	b.n	800202e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002004:	f7fe fe7a 	bl	8000cfc <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800200c:	f7fe fe76 	bl	8000cfc <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b64      	cmp	r3, #100	@ 0x64
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e215      	b.n	800244a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800201e:	4b57      	ldr	r3, [pc, #348]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x110>
 800202a:	e000      	b.n	800202e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d069      	beq.n	800210e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800203a:	4b50      	ldr	r3, [pc, #320]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00b      	beq.n	800205e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002046:	4b4d      	ldr	r3, [pc, #308]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	2b08      	cmp	r3, #8
 8002050:	d11c      	bne.n	800208c <HAL_RCC_OscConfig+0x190>
 8002052:	4b4a      	ldr	r3, [pc, #296]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d116      	bne.n	800208c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800205e:	4b47      	ldr	r3, [pc, #284]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d005      	beq.n	8002076 <HAL_RCC_OscConfig+0x17a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d001      	beq.n	8002076 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e1e9      	b.n	800244a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002076:	4b41      	ldr	r3, [pc, #260]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	493d      	ldr	r1, [pc, #244]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8002086:	4313      	orrs	r3, r2
 8002088:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208a:	e040      	b.n	800210e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d023      	beq.n	80020dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002094:	4b39      	ldr	r3, [pc, #228]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a38      	ldr	r2, [pc, #224]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a0:	f7fe fe2c 	bl	8000cfc <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a8:	f7fe fe28 	bl	8000cfc <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e1c7      	b.n	800244a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ba:	4b30      	ldr	r3, [pc, #192]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c6:	4b2d      	ldr	r3, [pc, #180]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4929      	ldr	r1, [pc, #164]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]
 80020da:	e018      	b.n	800210e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020dc:	4b27      	ldr	r3, [pc, #156]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a26      	ldr	r2, [pc, #152]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 80020e2:	f023 0301 	bic.w	r3, r3, #1
 80020e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e8:	f7fe fe08 	bl	8000cfc <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f0:	f7fe fe04 	bl	8000cfc <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e1a3      	b.n	800244a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002102:	4b1e      	ldr	r3, [pc, #120]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f0      	bne.n	80020f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d038      	beq.n	800218c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d019      	beq.n	8002156 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002122:	4b16      	ldr	r3, [pc, #88]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8002124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002126:	4a15      	ldr	r2, [pc, #84]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212e:	f7fe fde5 	bl	8000cfc <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002136:	f7fe fde1 	bl	8000cfc <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e180      	b.n	800244a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002148:	4b0c      	ldr	r3, [pc, #48]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 800214a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x23a>
 8002154:	e01a      	b.n	800218c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002156:	4b09      	ldr	r3, [pc, #36]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 8002158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800215a:	4a08      	ldr	r2, [pc, #32]	@ (800217c <HAL_RCC_OscConfig+0x280>)
 800215c:	f023 0301 	bic.w	r3, r3, #1
 8002160:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002162:	f7fe fdcb 	bl	8000cfc <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002168:	e00a      	b.n	8002180 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800216a:	f7fe fdc7 	bl	8000cfc <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d903      	bls.n	8002180 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e166      	b.n	800244a <HAL_RCC_OscConfig+0x54e>
 800217c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002180:	4b92      	ldr	r3, [pc, #584]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 8002182:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1ee      	bne.n	800216a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 80a4 	beq.w	80022e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800219a:	4b8c      	ldr	r3, [pc, #560]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10d      	bne.n	80021c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a6:	4b89      	ldr	r3, [pc, #548]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021aa:	4a88      	ldr	r2, [pc, #544]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 80021ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021b2:	4b86      	ldr	r3, [pc, #536]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021be:	2301      	movs	r3, #1
 80021c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021c2:	4b83      	ldr	r3, [pc, #524]	@ (80023d0 <HAL_RCC_OscConfig+0x4d4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d118      	bne.n	8002200 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80021ce:	4b80      	ldr	r3, [pc, #512]	@ (80023d0 <HAL_RCC_OscConfig+0x4d4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a7f      	ldr	r2, [pc, #508]	@ (80023d0 <HAL_RCC_OscConfig+0x4d4>)
 80021d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021da:	f7fe fd8f 	bl	8000cfc <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e2:	f7fe fd8b 	bl	8000cfc <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b64      	cmp	r3, #100	@ 0x64
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e12a      	b.n	800244a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021f4:	4b76      	ldr	r3, [pc, #472]	@ (80023d0 <HAL_RCC_OscConfig+0x4d4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d106      	bne.n	8002216 <HAL_RCC_OscConfig+0x31a>
 8002208:	4b70      	ldr	r3, [pc, #448]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 800220a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220c:	4a6f      	ldr	r2, [pc, #444]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6713      	str	r3, [r2, #112]	@ 0x70
 8002214:	e02d      	b.n	8002272 <HAL_RCC_OscConfig+0x376>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10c      	bne.n	8002238 <HAL_RCC_OscConfig+0x33c>
 800221e:	4b6b      	ldr	r3, [pc, #428]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002222:	4a6a      	ldr	r2, [pc, #424]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 8002224:	f023 0301 	bic.w	r3, r3, #1
 8002228:	6713      	str	r3, [r2, #112]	@ 0x70
 800222a:	4b68      	ldr	r3, [pc, #416]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 800222c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800222e:	4a67      	ldr	r2, [pc, #412]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 8002230:	f023 0304 	bic.w	r3, r3, #4
 8002234:	6713      	str	r3, [r2, #112]	@ 0x70
 8002236:	e01c      	b.n	8002272 <HAL_RCC_OscConfig+0x376>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b05      	cmp	r3, #5
 800223e:	d10c      	bne.n	800225a <HAL_RCC_OscConfig+0x35e>
 8002240:	4b62      	ldr	r3, [pc, #392]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 8002242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002244:	4a61      	ldr	r2, [pc, #388]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 8002246:	f043 0304 	orr.w	r3, r3, #4
 800224a:	6713      	str	r3, [r2, #112]	@ 0x70
 800224c:	4b5f      	ldr	r3, [pc, #380]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 800224e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002250:	4a5e      	ldr	r2, [pc, #376]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6713      	str	r3, [r2, #112]	@ 0x70
 8002258:	e00b      	b.n	8002272 <HAL_RCC_OscConfig+0x376>
 800225a:	4b5c      	ldr	r3, [pc, #368]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 800225c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800225e:	4a5b      	ldr	r2, [pc, #364]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 8002260:	f023 0301 	bic.w	r3, r3, #1
 8002264:	6713      	str	r3, [r2, #112]	@ 0x70
 8002266:	4b59      	ldr	r3, [pc, #356]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 8002268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800226a:	4a58      	ldr	r2, [pc, #352]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 800226c:	f023 0304 	bic.w	r3, r3, #4
 8002270:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d015      	beq.n	80022a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227a:	f7fe fd3f 	bl	8000cfc <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002280:	e00a      	b.n	8002298 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002282:	f7fe fd3b 	bl	8000cfc <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002290:	4293      	cmp	r3, r2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e0d8      	b.n	800244a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002298:	4b4c      	ldr	r3, [pc, #304]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 800229a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0ee      	beq.n	8002282 <HAL_RCC_OscConfig+0x386>
 80022a4:	e014      	b.n	80022d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a6:	f7fe fd29 	bl	8000cfc <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ac:	e00a      	b.n	80022c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ae:	f7fe fd25 	bl	8000cfc <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022bc:	4293      	cmp	r3, r2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e0c2      	b.n	800244a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c4:	4b41      	ldr	r3, [pc, #260]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 80022c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1ee      	bne.n	80022ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022d0:	7dfb      	ldrb	r3, [r7, #23]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d105      	bne.n	80022e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d6:	4b3d      	ldr	r3, [pc, #244]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	4a3c      	ldr	r2, [pc, #240]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 80022dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022e0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 80ae 	beq.w	8002448 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ec:	4b37      	ldr	r3, [pc, #220]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 030c 	and.w	r3, r3, #12
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	d06d      	beq.n	80023d4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d14b      	bne.n	8002398 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002300:	4b32      	ldr	r3, [pc, #200]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a31      	ldr	r2, [pc, #196]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 8002306:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800230a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230c:	f7fe fcf6 	bl	8000cfc <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002314:	f7fe fcf2 	bl	8000cfc <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e091      	b.n	800244a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002326:	4b29      	ldr	r3, [pc, #164]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69da      	ldr	r2, [r3, #28]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002340:	019b      	lsls	r3, r3, #6
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002348:	085b      	lsrs	r3, r3, #1
 800234a:	3b01      	subs	r3, #1
 800234c:	041b      	lsls	r3, r3, #16
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002354:	061b      	lsls	r3, r3, #24
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235c:	071b      	lsls	r3, r3, #28
 800235e:	491b      	ldr	r1, [pc, #108]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 8002360:	4313      	orrs	r3, r2
 8002362:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002364:	4b19      	ldr	r3, [pc, #100]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a18      	ldr	r2, [pc, #96]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 800236a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800236e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002370:	f7fe fcc4 	bl	8000cfc <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002378:	f7fe fcc0 	bl	8000cfc <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e05f      	b.n	800244a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238a:	4b10      	ldr	r3, [pc, #64]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0x47c>
 8002396:	e057      	b.n	8002448 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002398:	4b0c      	ldr	r3, [pc, #48]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0b      	ldr	r2, [pc, #44]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 800239e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a4:	f7fe fcaa 	bl	8000cfc <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ac:	f7fe fca6 	bl	8000cfc <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e045      	b.n	800244a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023be:	4b03      	ldr	r3, [pc, #12]	@ (80023cc <HAL_RCC_OscConfig+0x4d0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0x4b0>
 80023ca:	e03d      	b.n	8002448 <HAL_RCC_OscConfig+0x54c>
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80023d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002454 <HAL_RCC_OscConfig+0x558>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d030      	beq.n	8002444 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d129      	bne.n	8002444 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d122      	bne.n	8002444 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002404:	4013      	ands	r3, r2
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800240a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800240c:	4293      	cmp	r3, r2
 800240e:	d119      	bne.n	8002444 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241a:	085b      	lsrs	r3, r3, #1
 800241c:	3b01      	subs	r3, #1
 800241e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002420:	429a      	cmp	r2, r3
 8002422:	d10f      	bne.n	8002444 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002430:	429a      	cmp	r2, r3
 8002432:	d107      	bne.n	8002444 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002440:	429a      	cmp	r2, r3
 8002442:	d001      	beq.n	8002448 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40023800 	.word	0x40023800

08002458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0d0      	b.n	8002612 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002470:	4b6a      	ldr	r3, [pc, #424]	@ (800261c <HAL_RCC_ClockConfig+0x1c4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d910      	bls.n	80024a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247e:	4b67      	ldr	r3, [pc, #412]	@ (800261c <HAL_RCC_ClockConfig+0x1c4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 020f 	bic.w	r2, r3, #15
 8002486:	4965      	ldr	r1, [pc, #404]	@ (800261c <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248e:	4b63      	ldr	r3, [pc, #396]	@ (800261c <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0b8      	b.n	8002612 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d020      	beq.n	80024ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d005      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024b8:	4b59      	ldr	r3, [pc, #356]	@ (8002620 <HAL_RCC_ClockConfig+0x1c8>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	4a58      	ldr	r2, [pc, #352]	@ (8002620 <HAL_RCC_ClockConfig+0x1c8>)
 80024be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0308 	and.w	r3, r3, #8
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024d0:	4b53      	ldr	r3, [pc, #332]	@ (8002620 <HAL_RCC_ClockConfig+0x1c8>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	4a52      	ldr	r2, [pc, #328]	@ (8002620 <HAL_RCC_ClockConfig+0x1c8>)
 80024d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024dc:	4b50      	ldr	r3, [pc, #320]	@ (8002620 <HAL_RCC_ClockConfig+0x1c8>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	494d      	ldr	r1, [pc, #308]	@ (8002620 <HAL_RCC_ClockConfig+0x1c8>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d040      	beq.n	800257c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d107      	bne.n	8002512 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002502:	4b47      	ldr	r3, [pc, #284]	@ (8002620 <HAL_RCC_ClockConfig+0x1c8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d115      	bne.n	800253a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e07f      	b.n	8002612 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d107      	bne.n	800252a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251a:	4b41      	ldr	r3, [pc, #260]	@ (8002620 <HAL_RCC_ClockConfig+0x1c8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d109      	bne.n	800253a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e073      	b.n	8002612 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252a:	4b3d      	ldr	r3, [pc, #244]	@ (8002620 <HAL_RCC_ClockConfig+0x1c8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e06b      	b.n	8002612 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800253a:	4b39      	ldr	r3, [pc, #228]	@ (8002620 <HAL_RCC_ClockConfig+0x1c8>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f023 0203 	bic.w	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	4936      	ldr	r1, [pc, #216]	@ (8002620 <HAL_RCC_ClockConfig+0x1c8>)
 8002548:	4313      	orrs	r3, r2
 800254a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800254c:	f7fe fbd6 	bl	8000cfc <HAL_GetTick>
 8002550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002552:	e00a      	b.n	800256a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002554:	f7fe fbd2 	bl	8000cfc <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e053      	b.n	8002612 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	4b2d      	ldr	r3, [pc, #180]	@ (8002620 <HAL_RCC_ClockConfig+0x1c8>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 020c 	and.w	r2, r3, #12
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	429a      	cmp	r2, r3
 800257a:	d1eb      	bne.n	8002554 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800257c:	4b27      	ldr	r3, [pc, #156]	@ (800261c <HAL_RCC_ClockConfig+0x1c4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 030f 	and.w	r3, r3, #15
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d210      	bcs.n	80025ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4b24      	ldr	r3, [pc, #144]	@ (800261c <HAL_RCC_ClockConfig+0x1c4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 020f 	bic.w	r2, r3, #15
 8002592:	4922      	ldr	r1, [pc, #136]	@ (800261c <HAL_RCC_ClockConfig+0x1c4>)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800259a:	4b20      	ldr	r3, [pc, #128]	@ (800261c <HAL_RCC_ClockConfig+0x1c4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e032      	b.n	8002612 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b8:	4b19      	ldr	r3, [pc, #100]	@ (8002620 <HAL_RCC_ClockConfig+0x1c8>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	4916      	ldr	r1, [pc, #88]	@ (8002620 <HAL_RCC_ClockConfig+0x1c8>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d009      	beq.n	80025ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025d6:	4b12      	ldr	r3, [pc, #72]	@ (8002620 <HAL_RCC_ClockConfig+0x1c8>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	490e      	ldr	r1, [pc, #56]	@ (8002620 <HAL_RCC_ClockConfig+0x1c8>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ea:	f000 f821 	bl	8002630 <HAL_RCC_GetSysClockFreq>
 80025ee:	4602      	mov	r2, r0
 80025f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002620 <HAL_RCC_ClockConfig+0x1c8>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	091b      	lsrs	r3, r3, #4
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	490a      	ldr	r1, [pc, #40]	@ (8002624 <HAL_RCC_ClockConfig+0x1cc>)
 80025fc:	5ccb      	ldrb	r3, [r1, r3]
 80025fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002602:	4a09      	ldr	r2, [pc, #36]	@ (8002628 <HAL_RCC_ClockConfig+0x1d0>)
 8002604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002606:	4b09      	ldr	r3, [pc, #36]	@ (800262c <HAL_RCC_ClockConfig+0x1d4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe fb32 	bl	8000c74 <HAL_InitTick>

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40023c00 	.word	0x40023c00
 8002620:	40023800 	.word	0x40023800
 8002624:	080030f8 	.word	0x080030f8
 8002628:	20000000 	.word	0x20000000
 800262c:	20000004 	.word	0x20000004

08002630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002634:	b094      	sub	sp, #80	@ 0x50
 8002636:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002638:	2300      	movs	r3, #0
 800263a:	647b      	str	r3, [r7, #68]	@ 0x44
 800263c:	2300      	movs	r3, #0
 800263e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002640:	2300      	movs	r3, #0
 8002642:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002644:	2300      	movs	r3, #0
 8002646:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002648:	4b79      	ldr	r3, [pc, #484]	@ (8002830 <HAL_RCC_GetSysClockFreq+0x200>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 030c 	and.w	r3, r3, #12
 8002650:	2b08      	cmp	r3, #8
 8002652:	d00d      	beq.n	8002670 <HAL_RCC_GetSysClockFreq+0x40>
 8002654:	2b08      	cmp	r3, #8
 8002656:	f200 80e1 	bhi.w	800281c <HAL_RCC_GetSysClockFreq+0x1ec>
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <HAL_RCC_GetSysClockFreq+0x34>
 800265e:	2b04      	cmp	r3, #4
 8002660:	d003      	beq.n	800266a <HAL_RCC_GetSysClockFreq+0x3a>
 8002662:	e0db      	b.n	800281c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002664:	4b73      	ldr	r3, [pc, #460]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x204>)
 8002666:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002668:	e0db      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800266a:	4b72      	ldr	r3, [pc, #456]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x204>)
 800266c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800266e:	e0d8      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002670:	4b6f      	ldr	r3, [pc, #444]	@ (8002830 <HAL_RCC_GetSysClockFreq+0x200>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002678:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800267a:	4b6d      	ldr	r3, [pc, #436]	@ (8002830 <HAL_RCC_GetSysClockFreq+0x200>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d063      	beq.n	800274e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002686:	4b6a      	ldr	r3, [pc, #424]	@ (8002830 <HAL_RCC_GetSysClockFreq+0x200>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	099b      	lsrs	r3, r3, #6
 800268c:	2200      	movs	r2, #0
 800268e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002690:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002698:	633b      	str	r3, [r7, #48]	@ 0x30
 800269a:	2300      	movs	r3, #0
 800269c:	637b      	str	r3, [r7, #52]	@ 0x34
 800269e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80026a2:	4622      	mov	r2, r4
 80026a4:	462b      	mov	r3, r5
 80026a6:	f04f 0000 	mov.w	r0, #0
 80026aa:	f04f 0100 	mov.w	r1, #0
 80026ae:	0159      	lsls	r1, r3, #5
 80026b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026b4:	0150      	lsls	r0, r2, #5
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4621      	mov	r1, r4
 80026bc:	1a51      	subs	r1, r2, r1
 80026be:	6139      	str	r1, [r7, #16]
 80026c0:	4629      	mov	r1, r5
 80026c2:	eb63 0301 	sbc.w	r3, r3, r1
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026d4:	4659      	mov	r1, fp
 80026d6:	018b      	lsls	r3, r1, #6
 80026d8:	4651      	mov	r1, sl
 80026da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026de:	4651      	mov	r1, sl
 80026e0:	018a      	lsls	r2, r1, #6
 80026e2:	4651      	mov	r1, sl
 80026e4:	ebb2 0801 	subs.w	r8, r2, r1
 80026e8:	4659      	mov	r1, fp
 80026ea:	eb63 0901 	sbc.w	r9, r3, r1
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002702:	4690      	mov	r8, r2
 8002704:	4699      	mov	r9, r3
 8002706:	4623      	mov	r3, r4
 8002708:	eb18 0303 	adds.w	r3, r8, r3
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	462b      	mov	r3, r5
 8002710:	eb49 0303 	adc.w	r3, r9, r3
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002722:	4629      	mov	r1, r5
 8002724:	028b      	lsls	r3, r1, #10
 8002726:	4621      	mov	r1, r4
 8002728:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800272c:	4621      	mov	r1, r4
 800272e:	028a      	lsls	r2, r1, #10
 8002730:	4610      	mov	r0, r2
 8002732:	4619      	mov	r1, r3
 8002734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002736:	2200      	movs	r2, #0
 8002738:	62bb      	str	r3, [r7, #40]	@ 0x28
 800273a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800273c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002740:	f7fd fd7a 	bl	8000238 <__aeabi_uldivmod>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4613      	mov	r3, r2
 800274a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800274c:	e058      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274e:	4b38      	ldr	r3, [pc, #224]	@ (8002830 <HAL_RCC_GetSysClockFreq+0x200>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	099b      	lsrs	r3, r3, #6
 8002754:	2200      	movs	r2, #0
 8002756:	4618      	mov	r0, r3
 8002758:	4611      	mov	r1, r2
 800275a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800275e:	623b      	str	r3, [r7, #32]
 8002760:	2300      	movs	r3, #0
 8002762:	627b      	str	r3, [r7, #36]	@ 0x24
 8002764:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002768:	4642      	mov	r2, r8
 800276a:	464b      	mov	r3, r9
 800276c:	f04f 0000 	mov.w	r0, #0
 8002770:	f04f 0100 	mov.w	r1, #0
 8002774:	0159      	lsls	r1, r3, #5
 8002776:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800277a:	0150      	lsls	r0, r2, #5
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4641      	mov	r1, r8
 8002782:	ebb2 0a01 	subs.w	sl, r2, r1
 8002786:	4649      	mov	r1, r9
 8002788:	eb63 0b01 	sbc.w	fp, r3, r1
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002798:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800279c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027a0:	ebb2 040a 	subs.w	r4, r2, sl
 80027a4:	eb63 050b 	sbc.w	r5, r3, fp
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	00eb      	lsls	r3, r5, #3
 80027b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027b6:	00e2      	lsls	r2, r4, #3
 80027b8:	4614      	mov	r4, r2
 80027ba:	461d      	mov	r5, r3
 80027bc:	4643      	mov	r3, r8
 80027be:	18e3      	adds	r3, r4, r3
 80027c0:	603b      	str	r3, [r7, #0]
 80027c2:	464b      	mov	r3, r9
 80027c4:	eb45 0303 	adc.w	r3, r5, r3
 80027c8:	607b      	str	r3, [r7, #4]
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027d6:	4629      	mov	r1, r5
 80027d8:	028b      	lsls	r3, r1, #10
 80027da:	4621      	mov	r1, r4
 80027dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027e0:	4621      	mov	r1, r4
 80027e2:	028a      	lsls	r2, r1, #10
 80027e4:	4610      	mov	r0, r2
 80027e6:	4619      	mov	r1, r3
 80027e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027ea:	2200      	movs	r2, #0
 80027ec:	61bb      	str	r3, [r7, #24]
 80027ee:	61fa      	str	r2, [r7, #28]
 80027f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027f4:	f7fd fd20 	bl	8000238 <__aeabi_uldivmod>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4613      	mov	r3, r2
 80027fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002800:	4b0b      	ldr	r3, [pc, #44]	@ (8002830 <HAL_RCC_GetSysClockFreq+0x200>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	0c1b      	lsrs	r3, r3, #16
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	3301      	adds	r3, #1
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002810:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002812:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002814:	fbb2 f3f3 	udiv	r3, r2, r3
 8002818:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800281a:	e002      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800281c:	4b05      	ldr	r3, [pc, #20]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x204>)
 800281e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002824:	4618      	mov	r0, r3
 8002826:	3750      	adds	r7, #80	@ 0x50
 8002828:	46bd      	mov	sp, r7
 800282a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800282e:	bf00      	nop
 8002830:	40023800 	.word	0x40023800
 8002834:	00f42400 	.word	0x00f42400

08002838 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d012      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002860:	4b69      	ldr	r3, [pc, #420]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	4a68      	ldr	r2, [pc, #416]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002866:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800286a:	6093      	str	r3, [r2, #8]
 800286c:	4b66      	ldr	r3, [pc, #408]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002874:	4964      	ldr	r1, [pc, #400]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002876:	4313      	orrs	r3, r2
 8002878:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002882:	2301      	movs	r3, #1
 8002884:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d017      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002892:	4b5d      	ldr	r3, [pc, #372]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002894:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002898:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a0:	4959      	ldr	r1, [pc, #356]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028b0:	d101      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80028b2:	2301      	movs	r3, #1
 80028b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80028be:	2301      	movs	r3, #1
 80028c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d017      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028ce:	4b4e      	ldr	r3, [pc, #312]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028d4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028dc:	494a      	ldr	r1, [pc, #296]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028ec:	d101      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80028ee:	2301      	movs	r3, #1
 80028f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80028fa:	2301      	movs	r3, #1
 80028fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800290a:	2301      	movs	r3, #1
 800290c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 808b 	beq.w	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800291c:	4b3a      	ldr	r3, [pc, #232]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800291e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002920:	4a39      	ldr	r2, [pc, #228]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002922:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002926:	6413      	str	r3, [r2, #64]	@ 0x40
 8002928:	4b37      	ldr	r3, [pc, #220]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002934:	4b35      	ldr	r3, [pc, #212]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a34      	ldr	r2, [pc, #208]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800293a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800293e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002940:	f7fe f9dc 	bl	8000cfc <HAL_GetTick>
 8002944:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002946:	e008      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002948:	f7fe f9d8 	bl	8000cfc <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b64      	cmp	r3, #100	@ 0x64
 8002954:	d901      	bls.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e38f      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800295a:	4b2c      	ldr	r3, [pc, #176]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002966:	4b28      	ldr	r3, [pc, #160]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800296e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d035      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	429a      	cmp	r2, r3
 8002982:	d02e      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002984:	4b20      	ldr	r3, [pc, #128]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002988:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800298c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800298e:	4b1e      	ldr	r3, [pc, #120]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002992:	4a1d      	ldr	r2, [pc, #116]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002998:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800299a:	4b1b      	ldr	r3, [pc, #108]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299e:	4a1a      	ldr	r2, [pc, #104]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029a4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80029a6:	4a18      	ldr	r2, [pc, #96]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029ac:	4b16      	ldr	r3, [pc, #88]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d114      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7fe f9a0 	bl	8000cfc <HAL_GetTick>
 80029bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029be:	e00a      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029c0:	f7fe f99c 	bl	8000cfc <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e351      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0ee      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80029ee:	d111      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80029f0:	4b05      	ldr	r3, [pc, #20]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029fc:	4b04      	ldr	r3, [pc, #16]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80029fe:	400b      	ands	r3, r1
 8002a00:	4901      	ldr	r1, [pc, #4]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	608b      	str	r3, [r1, #8]
 8002a06:	e00b      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40007000 	.word	0x40007000
 8002a10:	0ffffcff 	.word	0x0ffffcff
 8002a14:	4bac      	ldr	r3, [pc, #688]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4aab      	ldr	r2, [pc, #684]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a1a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002a1e:	6093      	str	r3, [r2, #8]
 8002a20:	4ba9      	ldr	r3, [pc, #676]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a22:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a2c:	49a6      	ldr	r1, [pc, #664]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d010      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a3e:	4ba2      	ldr	r3, [pc, #648]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a44:	4aa0      	ldr	r2, [pc, #640]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a4a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a4e:	4b9e      	ldr	r3, [pc, #632]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a50:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a58:	499b      	ldr	r1, [pc, #620]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00a      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a6c:	4b96      	ldr	r3, [pc, #600]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a72:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a7a:	4993      	ldr	r1, [pc, #588]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00a      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a8e:	4b8e      	ldr	r3, [pc, #568]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a94:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a9c:	498a      	ldr	r1, [pc, #552]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00a      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ab0:	4b85      	ldr	r3, [pc, #532]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002abe:	4982      	ldr	r1, [pc, #520]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ad2:	4b7d      	ldr	r3, [pc, #500]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae0:	4979      	ldr	r1, [pc, #484]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00a      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002af4:	4b74      	ldr	r3, [pc, #464]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002afa:	f023 0203 	bic.w	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b02:	4971      	ldr	r1, [pc, #452]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b16:	4b6c      	ldr	r3, [pc, #432]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b1c:	f023 020c 	bic.w	r2, r3, #12
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b24:	4968      	ldr	r1, [pc, #416]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00a      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b38:	4b63      	ldr	r3, [pc, #396]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b3e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b46:	4960      	ldr	r1, [pc, #384]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b5a:	4b5b      	ldr	r3, [pc, #364]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b60:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b68:	4957      	ldr	r1, [pc, #348]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b7c:	4b52      	ldr	r3, [pc, #328]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b82:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8a:	494f      	ldr	r1, [pc, #316]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b9e:	4b4a      	ldr	r3, [pc, #296]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bac:	4946      	ldr	r1, [pc, #280]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002bc0:	4b41      	ldr	r3, [pc, #260]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bce:	493e      	ldr	r1, [pc, #248]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002be2:	4b39      	ldr	r3, [pc, #228]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bf0:	4935      	ldr	r1, [pc, #212]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c04:	4b30      	ldr	r3, [pc, #192]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c0a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c12:	492d      	ldr	r1, [pc, #180]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d011      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c26:	4b28      	ldr	r3, [pc, #160]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c2c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c34:	4924      	ldr	r1, [pc, #144]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c44:	d101      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c46:	2301      	movs	r3, #1
 8002c48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c56:	2301      	movs	r3, #1
 8002c58:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00a      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c66:	4b18      	ldr	r3, [pc, #96]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c6c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c74:	4914      	ldr	r1, [pc, #80]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00b      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c88:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c98:	490b      	ldr	r1, [pc, #44]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00f      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002cac:	4b06      	ldr	r3, [pc, #24]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cb2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cbc:	4902      	ldr	r1, [pc, #8]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002cc4:	e002      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002cc6:	bf00      	nop
 8002cc8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00b      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cd8:	4b8a      	ldr	r3, [pc, #552]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cde:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce8:	4986      	ldr	r1, [pc, #536]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00b      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002cfc:	4b81      	ldr	r3, [pc, #516]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d02:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d0c:	497d      	ldr	r1, [pc, #500]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d006      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 80d6 	beq.w	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d28:	4b76      	ldr	r3, [pc, #472]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a75      	ldr	r2, [pc, #468]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002d32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d34:	f7fd ffe2 	bl	8000cfc <HAL_GetTick>
 8002d38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d3c:	f7fd ffde 	bl	8000cfc <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b64      	cmp	r3, #100	@ 0x64
 8002d48:	d901      	bls.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e195      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d4e:	4b6d      	ldr	r3, [pc, #436]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d021      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d11d      	bne.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d6e:	4b65      	ldr	r3, [pc, #404]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d74:	0c1b      	lsrs	r3, r3, #16
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d7c:	4b61      	ldr	r3, [pc, #388]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d82:	0e1b      	lsrs	r3, r3, #24
 8002d84:	f003 030f 	and.w	r3, r3, #15
 8002d88:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	019a      	lsls	r2, r3, #6
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	041b      	lsls	r3, r3, #16
 8002d94:	431a      	orrs	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	061b      	lsls	r3, r3, #24
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	071b      	lsls	r3, r3, #28
 8002da2:	4958      	ldr	r1, [pc, #352]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d004      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d02e      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dd4:	d129      	bne.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002dd6:	4b4b      	ldr	r3, [pc, #300]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ddc:	0c1b      	lsrs	r3, r3, #16
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002de4:	4b47      	ldr	r3, [pc, #284]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dea:	0f1b      	lsrs	r3, r3, #28
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	019a      	lsls	r2, r3, #6
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	041b      	lsls	r3, r3, #16
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	061b      	lsls	r3, r3, #24
 8002e04:	431a      	orrs	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	071b      	lsls	r3, r3, #28
 8002e0a:	493e      	ldr	r1, [pc, #248]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e12:	4b3c      	ldr	r3, [pc, #240]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e18:	f023 021f 	bic.w	r2, r3, #31
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e20:	3b01      	subs	r3, #1
 8002e22:	4938      	ldr	r1, [pc, #224]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d01d      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e36:	4b33      	ldr	r3, [pc, #204]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e3c:	0e1b      	lsrs	r3, r3, #24
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e44:	4b2f      	ldr	r3, [pc, #188]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e4a:	0f1b      	lsrs	r3, r3, #28
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	019a      	lsls	r2, r3, #6
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	041b      	lsls	r3, r3, #16
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	061b      	lsls	r3, r3, #24
 8002e64:	431a      	orrs	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	071b      	lsls	r3, r3, #28
 8002e6a:	4926      	ldr	r1, [pc, #152]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d011      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	019a      	lsls	r2, r3, #6
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	041b      	lsls	r3, r3, #16
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	061b      	lsls	r3, r3, #24
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	071b      	lsls	r3, r3, #28
 8002e9a:	491a      	ldr	r1, [pc, #104]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ea2:	4b18      	ldr	r3, [pc, #96]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a17      	ldr	r2, [pc, #92]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ea8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002eac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eae:	f7fd ff25 	bl	8000cfc <HAL_GetTick>
 8002eb2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002eb6:	f7fd ff21 	bl	8000cfc <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b64      	cmp	r3, #100	@ 0x64
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e0d8      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	f040 80ce 	bne.w	8003078 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002edc:	4b09      	ldr	r3, [pc, #36]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a08      	ldr	r2, [pc, #32]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ee2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ee6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ee8:	f7fd ff08 	bl	8000cfc <HAL_GetTick>
 8002eec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002eee:	e00b      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ef0:	f7fd ff04 	bl	8000cfc <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b64      	cmp	r3, #100	@ 0x64
 8002efc:	d904      	bls.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e0bb      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f08:	4b5e      	ldr	r3, [pc, #376]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f14:	d0ec      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d009      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d02e      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d12a      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f3e:	4b51      	ldr	r3, [pc, #324]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f44:	0c1b      	lsrs	r3, r3, #16
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f4c:	4b4d      	ldr	r3, [pc, #308]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f52:	0f1b      	lsrs	r3, r3, #28
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	019a      	lsls	r2, r3, #6
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	041b      	lsls	r3, r3, #16
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	061b      	lsls	r3, r3, #24
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	071b      	lsls	r3, r3, #28
 8002f72:	4944      	ldr	r1, [pc, #272]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f7a:	4b42      	ldr	r3, [pc, #264]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f80:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	021b      	lsls	r3, r3, #8
 8002f8c:	493d      	ldr	r1, [pc, #244]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d022      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fa4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fa8:	d11d      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002faa:	4b36      	ldr	r3, [pc, #216]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb0:	0e1b      	lsrs	r3, r3, #24
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fb8:	4b32      	ldr	r3, [pc, #200]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fbe:	0f1b      	lsrs	r3, r3, #28
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	019a      	lsls	r2, r3, #6
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	041b      	lsls	r3, r3, #16
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	061b      	lsls	r3, r3, #24
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	071b      	lsls	r3, r3, #28
 8002fde:	4929      	ldr	r1, [pc, #164]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d028      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ff2:	4b24      	ldr	r3, [pc, #144]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff8:	0e1b      	lsrs	r3, r3, #24
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003000:	4b20      	ldr	r3, [pc, #128]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003006:	0c1b      	lsrs	r3, r3, #16
 8003008:	f003 0303 	and.w	r3, r3, #3
 800300c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	019a      	lsls	r2, r3, #6
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	041b      	lsls	r3, r3, #16
 8003018:	431a      	orrs	r2, r3
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	061b      	lsls	r3, r3, #24
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	071b      	lsls	r3, r3, #28
 8003026:	4917      	ldr	r1, [pc, #92]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800302e:	4b15      	ldr	r3, [pc, #84]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003030:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003034:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303c:	4911      	ldr	r1, [pc, #68]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800303e:	4313      	orrs	r3, r2
 8003040:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003044:	4b0f      	ldr	r3, [pc, #60]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a0e      	ldr	r2, [pc, #56]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800304a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800304e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003050:	f7fd fe54 	bl	8000cfc <HAL_GetTick>
 8003054:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003056:	e008      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003058:	f7fd fe50 	bl	8000cfc <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b64      	cmp	r3, #100	@ 0x64
 8003064:	d901      	bls.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e007      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800306a:	4b06      	ldr	r3, [pc, #24]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003072:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003076:	d1ef      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3720      	adds	r7, #32
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40023800 	.word	0x40023800

08003088 <memset>:
 8003088:	4402      	add	r2, r0
 800308a:	4603      	mov	r3, r0
 800308c:	4293      	cmp	r3, r2
 800308e:	d100      	bne.n	8003092 <memset+0xa>
 8003090:	4770      	bx	lr
 8003092:	f803 1b01 	strb.w	r1, [r3], #1
 8003096:	e7f9      	b.n	800308c <memset+0x4>

08003098 <__libc_init_array>:
 8003098:	b570      	push	{r4, r5, r6, lr}
 800309a:	4d0d      	ldr	r5, [pc, #52]	@ (80030d0 <__libc_init_array+0x38>)
 800309c:	4c0d      	ldr	r4, [pc, #52]	@ (80030d4 <__libc_init_array+0x3c>)
 800309e:	1b64      	subs	r4, r4, r5
 80030a0:	10a4      	asrs	r4, r4, #2
 80030a2:	2600      	movs	r6, #0
 80030a4:	42a6      	cmp	r6, r4
 80030a6:	d109      	bne.n	80030bc <__libc_init_array+0x24>
 80030a8:	4d0b      	ldr	r5, [pc, #44]	@ (80030d8 <__libc_init_array+0x40>)
 80030aa:	4c0c      	ldr	r4, [pc, #48]	@ (80030dc <__libc_init_array+0x44>)
 80030ac:	f000 f818 	bl	80030e0 <_init>
 80030b0:	1b64      	subs	r4, r4, r5
 80030b2:	10a4      	asrs	r4, r4, #2
 80030b4:	2600      	movs	r6, #0
 80030b6:	42a6      	cmp	r6, r4
 80030b8:	d105      	bne.n	80030c6 <__libc_init_array+0x2e>
 80030ba:	bd70      	pop	{r4, r5, r6, pc}
 80030bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80030c0:	4798      	blx	r3
 80030c2:	3601      	adds	r6, #1
 80030c4:	e7ee      	b.n	80030a4 <__libc_init_array+0xc>
 80030c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ca:	4798      	blx	r3
 80030cc:	3601      	adds	r6, #1
 80030ce:	e7f2      	b.n	80030b6 <__libc_init_array+0x1e>
 80030d0:	08003110 	.word	0x08003110
 80030d4:	08003110 	.word	0x08003110
 80030d8:	08003110 	.word	0x08003110
 80030dc:	08003114 	.word	0x08003114

080030e0 <_init>:
 80030e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e2:	bf00      	nop
 80030e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030e6:	bc08      	pop	{r3}
 80030e8:	469e      	mov	lr, r3
 80030ea:	4770      	bx	lr

080030ec <_fini>:
 80030ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ee:	bf00      	nop
 80030f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030f2:	bc08      	pop	{r3}
 80030f4:	469e      	mov	lr, r3
 80030f6:	4770      	bx	lr
