
bootloader_application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08040000  08040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017a8  080401f8  080401f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080419a0  080419a0  000029a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080419b0  080419b0  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  080419b0  080419b0  000029b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080419b8  080419b8  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080419b8  080419b8  000029b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080419bc  080419bc  000029bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080419c0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080419cc  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080419cc  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003c58  00000000  00000000  0000303a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e9c  00000000  00000000  00006c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000420  00000000  00000000  00007b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002f7  00000000  00000000  00007f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025392  00000000  00000000  00008247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000050e4  00000000  00000000  0002d5d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7d07  00000000  00000000  000326bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011a3c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ef0  00000000  00000000  0011a408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0011b2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401f8 <__do_global_dtors_aux>:
 80401f8:	b510      	push	{r4, lr}
 80401fa:	4c05      	ldr	r4, [pc, #20]	@ (8040210 <__do_global_dtors_aux+0x18>)
 80401fc:	7823      	ldrb	r3, [r4, #0]
 80401fe:	b933      	cbnz	r3, 804020e <__do_global_dtors_aux+0x16>
 8040200:	4b04      	ldr	r3, [pc, #16]	@ (8040214 <__do_global_dtors_aux+0x1c>)
 8040202:	b113      	cbz	r3, 804020a <__do_global_dtors_aux+0x12>
 8040204:	4804      	ldr	r0, [pc, #16]	@ (8040218 <__do_global_dtors_aux+0x20>)
 8040206:	f3af 8000 	nop.w
 804020a:	2301      	movs	r3, #1
 804020c:	7023      	strb	r3, [r4, #0]
 804020e:	bd10      	pop	{r4, pc}
 8040210:	2000000c 	.word	0x2000000c
 8040214:	00000000 	.word	0x00000000
 8040218:	08041988 	.word	0x08041988

0804021c <frame_dummy>:
 804021c:	b508      	push	{r3, lr}
 804021e:	4b03      	ldr	r3, [pc, #12]	@ (804022c <frame_dummy+0x10>)
 8040220:	b11b      	cbz	r3, 804022a <frame_dummy+0xe>
 8040222:	4903      	ldr	r1, [pc, #12]	@ (8040230 <frame_dummy+0x14>)
 8040224:	4803      	ldr	r0, [pc, #12]	@ (8040234 <frame_dummy+0x18>)
 8040226:	f3af 8000 	nop.w
 804022a:	bd08      	pop	{r3, pc}
 804022c:	00000000 	.word	0x00000000
 8040230:	20000010 	.word	0x20000010
 8040234:	08041988 	.word	0x08041988

08040238 <__aeabi_uldivmod>:
 8040238:	b953      	cbnz	r3, 8040250 <__aeabi_uldivmod+0x18>
 804023a:	b94a      	cbnz	r2, 8040250 <__aeabi_uldivmod+0x18>
 804023c:	2900      	cmp	r1, #0
 804023e:	bf08      	it	eq
 8040240:	2800      	cmpeq	r0, #0
 8040242:	bf1c      	itt	ne
 8040244:	f04f 31ff 	movne.w	r1, #4294967295
 8040248:	f04f 30ff 	movne.w	r0, #4294967295
 804024c:	f000 b96a 	b.w	8040524 <__aeabi_idiv0>
 8040250:	f1ad 0c08 	sub.w	ip, sp, #8
 8040254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040258:	f000 f806 	bl	8040268 <__udivmoddi4>
 804025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040264:	b004      	add	sp, #16
 8040266:	4770      	bx	lr

08040268 <__udivmoddi4>:
 8040268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804026c:	9d08      	ldr	r5, [sp, #32]
 804026e:	460c      	mov	r4, r1
 8040270:	2b00      	cmp	r3, #0
 8040272:	d14e      	bne.n	8040312 <__udivmoddi4+0xaa>
 8040274:	4694      	mov	ip, r2
 8040276:	458c      	cmp	ip, r1
 8040278:	4686      	mov	lr, r0
 804027a:	fab2 f282 	clz	r2, r2
 804027e:	d962      	bls.n	8040346 <__udivmoddi4+0xde>
 8040280:	b14a      	cbz	r2, 8040296 <__udivmoddi4+0x2e>
 8040282:	f1c2 0320 	rsb	r3, r2, #32
 8040286:	4091      	lsls	r1, r2
 8040288:	fa20 f303 	lsr.w	r3, r0, r3
 804028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8040290:	4319      	orrs	r1, r3
 8040292:	fa00 fe02 	lsl.w	lr, r0, r2
 8040296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 804029a:	fa1f f68c 	uxth.w	r6, ip
 804029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80402a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80402a6:	fb07 1114 	mls	r1, r7, r4, r1
 80402aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80402ae:	fb04 f106 	mul.w	r1, r4, r6
 80402b2:	4299      	cmp	r1, r3
 80402b4:	d90a      	bls.n	80402cc <__udivmoddi4+0x64>
 80402b6:	eb1c 0303 	adds.w	r3, ip, r3
 80402ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80402be:	f080 8112 	bcs.w	80404e6 <__udivmoddi4+0x27e>
 80402c2:	4299      	cmp	r1, r3
 80402c4:	f240 810f 	bls.w	80404e6 <__udivmoddi4+0x27e>
 80402c8:	3c02      	subs	r4, #2
 80402ca:	4463      	add	r3, ip
 80402cc:	1a59      	subs	r1, r3, r1
 80402ce:	fa1f f38e 	uxth.w	r3, lr
 80402d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80402d6:	fb07 1110 	mls	r1, r7, r0, r1
 80402da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80402de:	fb00 f606 	mul.w	r6, r0, r6
 80402e2:	429e      	cmp	r6, r3
 80402e4:	d90a      	bls.n	80402fc <__udivmoddi4+0x94>
 80402e6:	eb1c 0303 	adds.w	r3, ip, r3
 80402ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80402ee:	f080 80fc 	bcs.w	80404ea <__udivmoddi4+0x282>
 80402f2:	429e      	cmp	r6, r3
 80402f4:	f240 80f9 	bls.w	80404ea <__udivmoddi4+0x282>
 80402f8:	4463      	add	r3, ip
 80402fa:	3802      	subs	r0, #2
 80402fc:	1b9b      	subs	r3, r3, r6
 80402fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8040302:	2100      	movs	r1, #0
 8040304:	b11d      	cbz	r5, 804030e <__udivmoddi4+0xa6>
 8040306:	40d3      	lsrs	r3, r2
 8040308:	2200      	movs	r2, #0
 804030a:	e9c5 3200 	strd	r3, r2, [r5]
 804030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040312:	428b      	cmp	r3, r1
 8040314:	d905      	bls.n	8040322 <__udivmoddi4+0xba>
 8040316:	b10d      	cbz	r5, 804031c <__udivmoddi4+0xb4>
 8040318:	e9c5 0100 	strd	r0, r1, [r5]
 804031c:	2100      	movs	r1, #0
 804031e:	4608      	mov	r0, r1
 8040320:	e7f5      	b.n	804030e <__udivmoddi4+0xa6>
 8040322:	fab3 f183 	clz	r1, r3
 8040326:	2900      	cmp	r1, #0
 8040328:	d146      	bne.n	80403b8 <__udivmoddi4+0x150>
 804032a:	42a3      	cmp	r3, r4
 804032c:	d302      	bcc.n	8040334 <__udivmoddi4+0xcc>
 804032e:	4290      	cmp	r0, r2
 8040330:	f0c0 80f0 	bcc.w	8040514 <__udivmoddi4+0x2ac>
 8040334:	1a86      	subs	r6, r0, r2
 8040336:	eb64 0303 	sbc.w	r3, r4, r3
 804033a:	2001      	movs	r0, #1
 804033c:	2d00      	cmp	r5, #0
 804033e:	d0e6      	beq.n	804030e <__udivmoddi4+0xa6>
 8040340:	e9c5 6300 	strd	r6, r3, [r5]
 8040344:	e7e3      	b.n	804030e <__udivmoddi4+0xa6>
 8040346:	2a00      	cmp	r2, #0
 8040348:	f040 8090 	bne.w	804046c <__udivmoddi4+0x204>
 804034c:	eba1 040c 	sub.w	r4, r1, ip
 8040350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8040354:	fa1f f78c 	uxth.w	r7, ip
 8040358:	2101      	movs	r1, #1
 804035a:	fbb4 f6f8 	udiv	r6, r4, r8
 804035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8040362:	fb08 4416 	mls	r4, r8, r6, r4
 8040366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 804036a:	fb07 f006 	mul.w	r0, r7, r6
 804036e:	4298      	cmp	r0, r3
 8040370:	d908      	bls.n	8040384 <__udivmoddi4+0x11c>
 8040372:	eb1c 0303 	adds.w	r3, ip, r3
 8040376:	f106 34ff 	add.w	r4, r6, #4294967295
 804037a:	d202      	bcs.n	8040382 <__udivmoddi4+0x11a>
 804037c:	4298      	cmp	r0, r3
 804037e:	f200 80cd 	bhi.w	804051c <__udivmoddi4+0x2b4>
 8040382:	4626      	mov	r6, r4
 8040384:	1a1c      	subs	r4, r3, r0
 8040386:	fa1f f38e 	uxth.w	r3, lr
 804038a:	fbb4 f0f8 	udiv	r0, r4, r8
 804038e:	fb08 4410 	mls	r4, r8, r0, r4
 8040392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8040396:	fb00 f707 	mul.w	r7, r0, r7
 804039a:	429f      	cmp	r7, r3
 804039c:	d908      	bls.n	80403b0 <__udivmoddi4+0x148>
 804039e:	eb1c 0303 	adds.w	r3, ip, r3
 80403a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80403a6:	d202      	bcs.n	80403ae <__udivmoddi4+0x146>
 80403a8:	429f      	cmp	r7, r3
 80403aa:	f200 80b0 	bhi.w	804050e <__udivmoddi4+0x2a6>
 80403ae:	4620      	mov	r0, r4
 80403b0:	1bdb      	subs	r3, r3, r7
 80403b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80403b6:	e7a5      	b.n	8040304 <__udivmoddi4+0x9c>
 80403b8:	f1c1 0620 	rsb	r6, r1, #32
 80403bc:	408b      	lsls	r3, r1
 80403be:	fa22 f706 	lsr.w	r7, r2, r6
 80403c2:	431f      	orrs	r7, r3
 80403c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80403c8:	fa04 f301 	lsl.w	r3, r4, r1
 80403cc:	ea43 030c 	orr.w	r3, r3, ip
 80403d0:	40f4      	lsrs	r4, r6
 80403d2:	fa00 f801 	lsl.w	r8, r0, r1
 80403d6:	0c38      	lsrs	r0, r7, #16
 80403d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80403dc:	fbb4 fef0 	udiv	lr, r4, r0
 80403e0:	fa1f fc87 	uxth.w	ip, r7
 80403e4:	fb00 441e 	mls	r4, r0, lr, r4
 80403e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80403ec:	fb0e f90c 	mul.w	r9, lr, ip
 80403f0:	45a1      	cmp	r9, r4
 80403f2:	fa02 f201 	lsl.w	r2, r2, r1
 80403f6:	d90a      	bls.n	804040e <__udivmoddi4+0x1a6>
 80403f8:	193c      	adds	r4, r7, r4
 80403fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80403fe:	f080 8084 	bcs.w	804050a <__udivmoddi4+0x2a2>
 8040402:	45a1      	cmp	r9, r4
 8040404:	f240 8081 	bls.w	804050a <__udivmoddi4+0x2a2>
 8040408:	f1ae 0e02 	sub.w	lr, lr, #2
 804040c:	443c      	add	r4, r7
 804040e:	eba4 0409 	sub.w	r4, r4, r9
 8040412:	fa1f f983 	uxth.w	r9, r3
 8040416:	fbb4 f3f0 	udiv	r3, r4, r0
 804041a:	fb00 4413 	mls	r4, r0, r3, r4
 804041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8040422:	fb03 fc0c 	mul.w	ip, r3, ip
 8040426:	45a4      	cmp	ip, r4
 8040428:	d907      	bls.n	804043a <__udivmoddi4+0x1d2>
 804042a:	193c      	adds	r4, r7, r4
 804042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8040430:	d267      	bcs.n	8040502 <__udivmoddi4+0x29a>
 8040432:	45a4      	cmp	ip, r4
 8040434:	d965      	bls.n	8040502 <__udivmoddi4+0x29a>
 8040436:	3b02      	subs	r3, #2
 8040438:	443c      	add	r4, r7
 804043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 804043e:	fba0 9302 	umull	r9, r3, r0, r2
 8040442:	eba4 040c 	sub.w	r4, r4, ip
 8040446:	429c      	cmp	r4, r3
 8040448:	46ce      	mov	lr, r9
 804044a:	469c      	mov	ip, r3
 804044c:	d351      	bcc.n	80404f2 <__udivmoddi4+0x28a>
 804044e:	d04e      	beq.n	80404ee <__udivmoddi4+0x286>
 8040450:	b155      	cbz	r5, 8040468 <__udivmoddi4+0x200>
 8040452:	ebb8 030e 	subs.w	r3, r8, lr
 8040456:	eb64 040c 	sbc.w	r4, r4, ip
 804045a:	fa04 f606 	lsl.w	r6, r4, r6
 804045e:	40cb      	lsrs	r3, r1
 8040460:	431e      	orrs	r6, r3
 8040462:	40cc      	lsrs	r4, r1
 8040464:	e9c5 6400 	strd	r6, r4, [r5]
 8040468:	2100      	movs	r1, #0
 804046a:	e750      	b.n	804030e <__udivmoddi4+0xa6>
 804046c:	f1c2 0320 	rsb	r3, r2, #32
 8040470:	fa20 f103 	lsr.w	r1, r0, r3
 8040474:	fa0c fc02 	lsl.w	ip, ip, r2
 8040478:	fa24 f303 	lsr.w	r3, r4, r3
 804047c:	4094      	lsls	r4, r2
 804047e:	430c      	orrs	r4, r1
 8040480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8040484:	fa00 fe02 	lsl.w	lr, r0, r2
 8040488:	fa1f f78c 	uxth.w	r7, ip
 804048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8040490:	fb08 3110 	mls	r1, r8, r0, r3
 8040494:	0c23      	lsrs	r3, r4, #16
 8040496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 804049a:	fb00 f107 	mul.w	r1, r0, r7
 804049e:	4299      	cmp	r1, r3
 80404a0:	d908      	bls.n	80404b4 <__udivmoddi4+0x24c>
 80404a2:	eb1c 0303 	adds.w	r3, ip, r3
 80404a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80404aa:	d22c      	bcs.n	8040506 <__udivmoddi4+0x29e>
 80404ac:	4299      	cmp	r1, r3
 80404ae:	d92a      	bls.n	8040506 <__udivmoddi4+0x29e>
 80404b0:	3802      	subs	r0, #2
 80404b2:	4463      	add	r3, ip
 80404b4:	1a5b      	subs	r3, r3, r1
 80404b6:	b2a4      	uxth	r4, r4
 80404b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80404bc:	fb08 3311 	mls	r3, r8, r1, r3
 80404c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80404c4:	fb01 f307 	mul.w	r3, r1, r7
 80404c8:	42a3      	cmp	r3, r4
 80404ca:	d908      	bls.n	80404de <__udivmoddi4+0x276>
 80404cc:	eb1c 0404 	adds.w	r4, ip, r4
 80404d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80404d4:	d213      	bcs.n	80404fe <__udivmoddi4+0x296>
 80404d6:	42a3      	cmp	r3, r4
 80404d8:	d911      	bls.n	80404fe <__udivmoddi4+0x296>
 80404da:	3902      	subs	r1, #2
 80404dc:	4464      	add	r4, ip
 80404de:	1ae4      	subs	r4, r4, r3
 80404e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80404e4:	e739      	b.n	804035a <__udivmoddi4+0xf2>
 80404e6:	4604      	mov	r4, r0
 80404e8:	e6f0      	b.n	80402cc <__udivmoddi4+0x64>
 80404ea:	4608      	mov	r0, r1
 80404ec:	e706      	b.n	80402fc <__udivmoddi4+0x94>
 80404ee:	45c8      	cmp	r8, r9
 80404f0:	d2ae      	bcs.n	8040450 <__udivmoddi4+0x1e8>
 80404f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80404f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80404fa:	3801      	subs	r0, #1
 80404fc:	e7a8      	b.n	8040450 <__udivmoddi4+0x1e8>
 80404fe:	4631      	mov	r1, r6
 8040500:	e7ed      	b.n	80404de <__udivmoddi4+0x276>
 8040502:	4603      	mov	r3, r0
 8040504:	e799      	b.n	804043a <__udivmoddi4+0x1d2>
 8040506:	4630      	mov	r0, r6
 8040508:	e7d4      	b.n	80404b4 <__udivmoddi4+0x24c>
 804050a:	46d6      	mov	lr, sl
 804050c:	e77f      	b.n	804040e <__udivmoddi4+0x1a6>
 804050e:	4463      	add	r3, ip
 8040510:	3802      	subs	r0, #2
 8040512:	e74d      	b.n	80403b0 <__udivmoddi4+0x148>
 8040514:	4606      	mov	r6, r0
 8040516:	4623      	mov	r3, r4
 8040518:	4608      	mov	r0, r1
 804051a:	e70f      	b.n	804033c <__udivmoddi4+0xd4>
 804051c:	3e02      	subs	r6, #2
 804051e:	4463      	add	r3, ip
 8040520:	e730      	b.n	8040384 <__udivmoddi4+0x11c>
 8040522:	bf00      	nop

08040524 <__aeabi_idiv0>:
 8040524:	4770      	bx	lr
 8040526:	bf00      	nop

08040528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040528:	b580      	push	{r7, lr}
 804052a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 804052c:	f000 fa1b 	bl	8040966 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8040530:	f000 f80e 	bl	8040550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8040534:	f000 f868 	bl	8040608 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(1000);
 8040538:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 804053c:	f000 fa70 	bl	8040a20 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8040540:	2180      	movs	r1, #128	@ 0x80
 8040542:	4802      	ldr	r0, [pc, #8]	@ (804054c <main+0x24>)
 8040544:	f000 fd3b 	bl	8040fbe <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8040548:	bf00      	nop
 804054a:	e7f5      	b.n	8040538 <main+0x10>
 804054c:	40020400 	.word	0x40020400

08040550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8040550:	b580      	push	{r7, lr}
 8040552:	b094      	sub	sp, #80	@ 0x50
 8040554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8040556:	f107 031c 	add.w	r3, r7, #28
 804055a:	2234      	movs	r2, #52	@ 0x34
 804055c:	2100      	movs	r1, #0
 804055e:	4618      	mov	r0, r3
 8040560:	f001 f9e6 	bl	8041930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8040564:	f107 0308 	add.w	r3, r7, #8
 8040568:	2200      	movs	r2, #0
 804056a:	601a      	str	r2, [r3, #0]
 804056c:	605a      	str	r2, [r3, #4]
 804056e:	609a      	str	r2, [r3, #8]
 8040570:	60da      	str	r2, [r3, #12]
 8040572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8040574:	4b22      	ldr	r3, [pc, #136]	@ (8040600 <SystemClock_Config+0xb0>)
 8040576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8040578:	4a21      	ldr	r2, [pc, #132]	@ (8040600 <SystemClock_Config+0xb0>)
 804057a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 804057e:	6413      	str	r3, [r2, #64]	@ 0x40
 8040580:	4b1f      	ldr	r3, [pc, #124]	@ (8040600 <SystemClock_Config+0xb0>)
 8040582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8040584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8040588:	607b      	str	r3, [r7, #4]
 804058a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 804058c:	4b1d      	ldr	r3, [pc, #116]	@ (8040604 <SystemClock_Config+0xb4>)
 804058e:	681b      	ldr	r3, [r3, #0]
 8040590:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8040594:	4a1b      	ldr	r2, [pc, #108]	@ (8040604 <SystemClock_Config+0xb4>)
 8040596:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 804059a:	6013      	str	r3, [r2, #0]
 804059c:	4b19      	ldr	r3, [pc, #100]	@ (8040604 <SystemClock_Config+0xb4>)
 804059e:	681b      	ldr	r3, [r3, #0]
 80405a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80405a4:	603b      	str	r3, [r7, #0]
 80405a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80405a8:	2302      	movs	r3, #2
 80405aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80405ac:	2301      	movs	r3, #1
 80405ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80405b0:	2310      	movs	r3, #16
 80405b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80405b4:	2300      	movs	r3, #0
 80405b6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80405b8:	f107 031c 	add.w	r3, r7, #28
 80405bc:	4618      	mov	r0, r3
 80405be:	f000 fd19 	bl	8040ff4 <HAL_RCC_OscConfig>
 80405c2:	4603      	mov	r3, r0
 80405c4:	2b00      	cmp	r3, #0
 80405c6:	d001      	beq.n	80405cc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80405c8:	f000 f934 	bl	8040834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80405cc:	230f      	movs	r3, #15
 80405ce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80405d0:	2300      	movs	r3, #0
 80405d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80405d4:	2300      	movs	r3, #0
 80405d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80405d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80405dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80405de:	2300      	movs	r3, #0
 80405e0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80405e2:	f107 0308 	add.w	r3, r7, #8
 80405e6:	2100      	movs	r1, #0
 80405e8:	4618      	mov	r0, r3
 80405ea:	f000 ffb1 	bl	8041550 <HAL_RCC_ClockConfig>
 80405ee:	4603      	mov	r3, r0
 80405f0:	2b00      	cmp	r3, #0
 80405f2:	d001      	beq.n	80405f8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80405f4:	f000 f91e 	bl	8040834 <Error_Handler>
  }
}
 80405f8:	bf00      	nop
 80405fa:	3750      	adds	r7, #80	@ 0x50
 80405fc:	46bd      	mov	sp, r7
 80405fe:	bd80      	pop	{r7, pc}
 8040600:	40023800 	.word	0x40023800
 8040604:	40007000 	.word	0x40007000

08040608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040608:	b580      	push	{r7, lr}
 804060a:	b08c      	sub	sp, #48	@ 0x30
 804060c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804060e:	f107 031c 	add.w	r3, r7, #28
 8040612:	2200      	movs	r2, #0
 8040614:	601a      	str	r2, [r3, #0]
 8040616:	605a      	str	r2, [r3, #4]
 8040618:	609a      	str	r2, [r3, #8]
 804061a:	60da      	str	r2, [r3, #12]
 804061c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 804061e:	4b7f      	ldr	r3, [pc, #508]	@ (804081c <MX_GPIO_Init+0x214>)
 8040620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8040622:	4a7e      	ldr	r2, [pc, #504]	@ (804081c <MX_GPIO_Init+0x214>)
 8040624:	f043 0304 	orr.w	r3, r3, #4
 8040628:	6313      	str	r3, [r2, #48]	@ 0x30
 804062a:	4b7c      	ldr	r3, [pc, #496]	@ (804081c <MX_GPIO_Init+0x214>)
 804062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804062e:	f003 0304 	and.w	r3, r3, #4
 8040632:	61bb      	str	r3, [r7, #24]
 8040634:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8040636:	4b79      	ldr	r3, [pc, #484]	@ (804081c <MX_GPIO_Init+0x214>)
 8040638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804063a:	4a78      	ldr	r2, [pc, #480]	@ (804081c <MX_GPIO_Init+0x214>)
 804063c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8040640:	6313      	str	r3, [r2, #48]	@ 0x30
 8040642:	4b76      	ldr	r3, [pc, #472]	@ (804081c <MX_GPIO_Init+0x214>)
 8040644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8040646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 804064a:	617b      	str	r3, [r7, #20]
 804064c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 804064e:	4b73      	ldr	r3, [pc, #460]	@ (804081c <MX_GPIO_Init+0x214>)
 8040650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8040652:	4a72      	ldr	r2, [pc, #456]	@ (804081c <MX_GPIO_Init+0x214>)
 8040654:	f043 0301 	orr.w	r3, r3, #1
 8040658:	6313      	str	r3, [r2, #48]	@ 0x30
 804065a:	4b70      	ldr	r3, [pc, #448]	@ (804081c <MX_GPIO_Init+0x214>)
 804065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804065e:	f003 0301 	and.w	r3, r3, #1
 8040662:	613b      	str	r3, [r7, #16]
 8040664:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8040666:	4b6d      	ldr	r3, [pc, #436]	@ (804081c <MX_GPIO_Init+0x214>)
 8040668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804066a:	4a6c      	ldr	r2, [pc, #432]	@ (804081c <MX_GPIO_Init+0x214>)
 804066c:	f043 0302 	orr.w	r3, r3, #2
 8040670:	6313      	str	r3, [r2, #48]	@ 0x30
 8040672:	4b6a      	ldr	r3, [pc, #424]	@ (804081c <MX_GPIO_Init+0x214>)
 8040674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8040676:	f003 0302 	and.w	r3, r3, #2
 804067a:	60fb      	str	r3, [r7, #12]
 804067c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 804067e:	4b67      	ldr	r3, [pc, #412]	@ (804081c <MX_GPIO_Init+0x214>)
 8040680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8040682:	4a66      	ldr	r2, [pc, #408]	@ (804081c <MX_GPIO_Init+0x214>)
 8040684:	f043 0308 	orr.w	r3, r3, #8
 8040688:	6313      	str	r3, [r2, #48]	@ 0x30
 804068a:	4b64      	ldr	r3, [pc, #400]	@ (804081c <MX_GPIO_Init+0x214>)
 804068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804068e:	f003 0308 	and.w	r3, r3, #8
 8040692:	60bb      	str	r3, [r7, #8]
 8040694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8040696:	4b61      	ldr	r3, [pc, #388]	@ (804081c <MX_GPIO_Init+0x214>)
 8040698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804069a:	4a60      	ldr	r2, [pc, #384]	@ (804081c <MX_GPIO_Init+0x214>)
 804069c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80406a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80406a2:	4b5e      	ldr	r3, [pc, #376]	@ (804081c <MX_GPIO_Init+0x214>)
 80406a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80406a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80406aa:	607b      	str	r3, [r7, #4]
 80406ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80406ae:	2200      	movs	r2, #0
 80406b0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80406b4:	485a      	ldr	r0, [pc, #360]	@ (8040820 <MX_GPIO_Init+0x218>)
 80406b6:	f000 fc69 	bl	8040f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80406ba:	2200      	movs	r2, #0
 80406bc:	2140      	movs	r1, #64	@ 0x40
 80406be:	4859      	ldr	r0, [pc, #356]	@ (8040824 <MX_GPIO_Init+0x21c>)
 80406c0:	f000 fc64 	bl	8040f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80406c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80406c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80406ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80406ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80406d0:	2300      	movs	r3, #0
 80406d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80406d4:	f107 031c 	add.w	r3, r7, #28
 80406d8:	4619      	mov	r1, r3
 80406da:	4853      	ldr	r0, [pc, #332]	@ (8040828 <MX_GPIO_Init+0x220>)
 80406dc:	f000 faaa 	bl	8040c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80406e0:	2332      	movs	r3, #50	@ 0x32
 80406e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80406e4:	2302      	movs	r3, #2
 80406e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80406e8:	2300      	movs	r3, #0
 80406ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80406ec:	2303      	movs	r3, #3
 80406ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80406f0:	230b      	movs	r3, #11
 80406f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80406f4:	f107 031c 	add.w	r3, r7, #28
 80406f8:	4619      	mov	r1, r3
 80406fa:	484b      	ldr	r0, [pc, #300]	@ (8040828 <MX_GPIO_Init+0x220>)
 80406fc:	f000 fa9a 	bl	8040c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8040700:	2386      	movs	r3, #134	@ 0x86
 8040702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040704:	2302      	movs	r3, #2
 8040706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040708:	2300      	movs	r3, #0
 804070a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804070c:	2303      	movs	r3, #3
 804070e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8040710:	230b      	movs	r3, #11
 8040712:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040714:	f107 031c 	add.w	r3, r7, #28
 8040718:	4619      	mov	r1, r3
 804071a:	4844      	ldr	r0, [pc, #272]	@ (804082c <MX_GPIO_Init+0x224>)
 804071c:	f000 fa8a 	bl	8040c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8040720:	f244 0381 	movw	r3, #16513	@ 0x4081
 8040724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040726:	2301      	movs	r3, #1
 8040728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804072a:	2300      	movs	r3, #0
 804072c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804072e:	2300      	movs	r3, #0
 8040730:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8040732:	f107 031c 	add.w	r3, r7, #28
 8040736:	4619      	mov	r1, r3
 8040738:	4839      	ldr	r0, [pc, #228]	@ (8040820 <MX_GPIO_Init+0x218>)
 804073a:	f000 fa7b 	bl	8040c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 804073e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8040742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040744:	2302      	movs	r3, #2
 8040746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040748:	2300      	movs	r3, #0
 804074a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804074c:	2303      	movs	r3, #3
 804074e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8040750:	230b      	movs	r3, #11
 8040752:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8040754:	f107 031c 	add.w	r3, r7, #28
 8040758:	4619      	mov	r1, r3
 804075a:	4831      	ldr	r0, [pc, #196]	@ (8040820 <MX_GPIO_Init+0x218>)
 804075c:	f000 fa6a 	bl	8040c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8040760:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8040764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040766:	2302      	movs	r3, #2
 8040768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804076a:	2300      	movs	r3, #0
 804076c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804076e:	2303      	movs	r3, #3
 8040770:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8040772:	2307      	movs	r3, #7
 8040774:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8040776:	f107 031c 	add.w	r3, r7, #28
 804077a:	4619      	mov	r1, r3
 804077c:	482c      	ldr	r0, [pc, #176]	@ (8040830 <MX_GPIO_Init+0x228>)
 804077e:	f000 fa59 	bl	8040c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8040782:	2340      	movs	r3, #64	@ 0x40
 8040784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040786:	2301      	movs	r3, #1
 8040788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804078a:	2300      	movs	r3, #0
 804078c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804078e:	2300      	movs	r3, #0
 8040790:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8040792:	f107 031c 	add.w	r3, r7, #28
 8040796:	4619      	mov	r1, r3
 8040798:	4822      	ldr	r0, [pc, #136]	@ (8040824 <MX_GPIO_Init+0x21c>)
 804079a:	f000 fa4b 	bl	8040c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 804079e:	2380      	movs	r3, #128	@ 0x80
 80407a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80407a2:	2300      	movs	r3, #0
 80407a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80407a6:	2300      	movs	r3, #0
 80407a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80407aa:	f107 031c 	add.w	r3, r7, #28
 80407ae:	4619      	mov	r1, r3
 80407b0:	481c      	ldr	r0, [pc, #112]	@ (8040824 <MX_GPIO_Init+0x21c>)
 80407b2:	f000 fa3f 	bl	8040c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80407b6:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80407ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80407bc:	2302      	movs	r3, #2
 80407be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80407c0:	2300      	movs	r3, #0
 80407c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80407c4:	2303      	movs	r3, #3
 80407c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80407c8:	230a      	movs	r3, #10
 80407ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80407cc:	f107 031c 	add.w	r3, r7, #28
 80407d0:	4619      	mov	r1, r3
 80407d2:	4816      	ldr	r0, [pc, #88]	@ (804082c <MX_GPIO_Init+0x224>)
 80407d4:	f000 fa2e 	bl	8040c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80407d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80407dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80407de:	2300      	movs	r3, #0
 80407e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80407e2:	2300      	movs	r3, #0
 80407e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80407e6:	f107 031c 	add.w	r3, r7, #28
 80407ea:	4619      	mov	r1, r3
 80407ec:	480f      	ldr	r0, [pc, #60]	@ (804082c <MX_GPIO_Init+0x224>)
 80407ee:	f000 fa21 	bl	8040c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80407f2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80407f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80407f8:	2302      	movs	r3, #2
 80407fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80407fc:	2300      	movs	r3, #0
 80407fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8040800:	2303      	movs	r3, #3
 8040802:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8040804:	230b      	movs	r3, #11
 8040806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8040808:	f107 031c 	add.w	r3, r7, #28
 804080c:	4619      	mov	r1, r3
 804080e:	4805      	ldr	r0, [pc, #20]	@ (8040824 <MX_GPIO_Init+0x21c>)
 8040810:	f000 fa10 	bl	8040c34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8040814:	bf00      	nop
 8040816:	3730      	adds	r7, #48	@ 0x30
 8040818:	46bd      	mov	sp, r7
 804081a:	bd80      	pop	{r7, pc}
 804081c:	40023800 	.word	0x40023800
 8040820:	40020400 	.word	0x40020400
 8040824:	40021800 	.word	0x40021800
 8040828:	40020800 	.word	0x40020800
 804082c:	40020000 	.word	0x40020000
 8040830:	40020c00 	.word	0x40020c00

08040834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040834:	b480      	push	{r7}
 8040836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040838:	b672      	cpsid	i
}
 804083a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 804083c:	bf00      	nop
 804083e:	e7fd      	b.n	804083c <Error_Handler+0x8>

08040840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040840:	b480      	push	{r7}
 8040842:	b083      	sub	sp, #12
 8040844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8040846:	4b0f      	ldr	r3, [pc, #60]	@ (8040884 <HAL_MspInit+0x44>)
 8040848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804084a:	4a0e      	ldr	r2, [pc, #56]	@ (8040884 <HAL_MspInit+0x44>)
 804084c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8040850:	6413      	str	r3, [r2, #64]	@ 0x40
 8040852:	4b0c      	ldr	r3, [pc, #48]	@ (8040884 <HAL_MspInit+0x44>)
 8040854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8040856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 804085a:	607b      	str	r3, [r7, #4]
 804085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 804085e:	4b09      	ldr	r3, [pc, #36]	@ (8040884 <HAL_MspInit+0x44>)
 8040860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8040862:	4a08      	ldr	r2, [pc, #32]	@ (8040884 <HAL_MspInit+0x44>)
 8040864:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8040868:	6453      	str	r3, [r2, #68]	@ 0x44
 804086a:	4b06      	ldr	r3, [pc, #24]	@ (8040884 <HAL_MspInit+0x44>)
 804086c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 804086e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8040872:	603b      	str	r3, [r7, #0]
 8040874:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040876:	bf00      	nop
 8040878:	370c      	adds	r7, #12
 804087a:	46bd      	mov	sp, r7
 804087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040880:	4770      	bx	lr
 8040882:	bf00      	nop
 8040884:	40023800 	.word	0x40023800

08040888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8040888:	b480      	push	{r7}
 804088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 804088c:	bf00      	nop
 804088e:	e7fd      	b.n	804088c <NMI_Handler+0x4>

08040890 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8040890:	b480      	push	{r7}
 8040892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8040894:	bf00      	nop
 8040896:	e7fd      	b.n	8040894 <HardFault_Handler+0x4>

08040898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040898:	b480      	push	{r7}
 804089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 804089c:	bf00      	nop
 804089e:	e7fd      	b.n	804089c <MemManage_Handler+0x4>

080408a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80408a0:	b480      	push	{r7}
 80408a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80408a4:	bf00      	nop
 80408a6:	e7fd      	b.n	80408a4 <BusFault_Handler+0x4>

080408a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80408a8:	b480      	push	{r7}
 80408aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80408ac:	bf00      	nop
 80408ae:	e7fd      	b.n	80408ac <UsageFault_Handler+0x4>

080408b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80408b0:	b480      	push	{r7}
 80408b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80408b4:	bf00      	nop
 80408b6:	46bd      	mov	sp, r7
 80408b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80408bc:	4770      	bx	lr

080408be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80408be:	b480      	push	{r7}
 80408c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80408c2:	bf00      	nop
 80408c4:	46bd      	mov	sp, r7
 80408c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80408ca:	4770      	bx	lr

080408cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80408cc:	b480      	push	{r7}
 80408ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80408d0:	bf00      	nop
 80408d2:	46bd      	mov	sp, r7
 80408d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80408d8:	4770      	bx	lr

080408da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80408da:	b580      	push	{r7, lr}
 80408dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80408de:	f000 f87f 	bl	80409e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80408e2:	bf00      	nop
 80408e4:	bd80      	pop	{r7, pc}
	...

080408e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80408e8:	b480      	push	{r7}
 80408ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80408ec:	4b08      	ldr	r3, [pc, #32]	@ (8040910 <SystemInit+0x28>)
 80408ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80408f2:	4a07      	ldr	r2, [pc, #28]	@ (8040910 <SystemInit+0x28>)
 80408f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80408f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80408fc:	4b04      	ldr	r3, [pc, #16]	@ (8040910 <SystemInit+0x28>)
 80408fe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8040902:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8040904:	bf00      	nop
 8040906:	46bd      	mov	sp, r7
 8040908:	f85d 7b04 	ldr.w	r7, [sp], #4
 804090c:	4770      	bx	lr
 804090e:	bf00      	nop
 8040910:	e000ed00 	.word	0xe000ed00

08040914 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8040914:	f8df d034 	ldr.w	sp, [pc, #52]	@ 804094c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8040918:	f7ff ffe6 	bl	80408e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 804091c:	480c      	ldr	r0, [pc, #48]	@ (8040950 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 804091e:	490d      	ldr	r1, [pc, #52]	@ (8040954 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8040920:	4a0d      	ldr	r2, [pc, #52]	@ (8040958 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8040922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8040924:	e002      	b.n	804092c <LoopCopyDataInit>

08040926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8040926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8040928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 804092a:	3304      	adds	r3, #4

0804092c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 804092c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 804092e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8040930:	d3f9      	bcc.n	8040926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8040932:	4a0a      	ldr	r2, [pc, #40]	@ (804095c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8040934:	4c0a      	ldr	r4, [pc, #40]	@ (8040960 <LoopFillZerobss+0x22>)
  movs r3, #0
 8040936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8040938:	e001      	b.n	804093e <LoopFillZerobss>

0804093a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 804093a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 804093c:	3204      	adds	r2, #4

0804093e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 804093e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8040940:	d3fb      	bcc.n	804093a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8040942:	f000 fffd 	bl	8041940 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8040946:	f7ff fdef 	bl	8040528 <main>
  bx  lr    
 804094a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 804094c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8040950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8040954:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8040958:	080419c0 	.word	0x080419c0
  ldr r2, =_sbss
 804095c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8040960:	2000002c 	.word	0x2000002c

08040964 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8040964:	e7fe      	b.n	8040964 <ADC_IRQHandler>

08040966 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040966:	b580      	push	{r7, lr}
 8040968:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 804096a:	2003      	movs	r0, #3
 804096c:	f000 f92e 	bl	8040bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8040970:	2000      	movs	r0, #0
 8040972:	f000 f805 	bl	8040980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8040976:	f7ff ff63 	bl	8040840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 804097a:	2300      	movs	r3, #0
}
 804097c:	4618      	mov	r0, r3
 804097e:	bd80      	pop	{r7, pc}

08040980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040980:	b580      	push	{r7, lr}
 8040982:	b082      	sub	sp, #8
 8040984:	af00      	add	r7, sp, #0
 8040986:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8040988:	4b12      	ldr	r3, [pc, #72]	@ (80409d4 <HAL_InitTick+0x54>)
 804098a:	681a      	ldr	r2, [r3, #0]
 804098c:	4b12      	ldr	r3, [pc, #72]	@ (80409d8 <HAL_InitTick+0x58>)
 804098e:	781b      	ldrb	r3, [r3, #0]
 8040990:	4619      	mov	r1, r3
 8040992:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8040996:	fbb3 f3f1 	udiv	r3, r3, r1
 804099a:	fbb2 f3f3 	udiv	r3, r2, r3
 804099e:	4618      	mov	r0, r3
 80409a0:	f000 f93b 	bl	8040c1a <HAL_SYSTICK_Config>
 80409a4:	4603      	mov	r3, r0
 80409a6:	2b00      	cmp	r3, #0
 80409a8:	d001      	beq.n	80409ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80409aa:	2301      	movs	r3, #1
 80409ac:	e00e      	b.n	80409cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80409ae:	687b      	ldr	r3, [r7, #4]
 80409b0:	2b0f      	cmp	r3, #15
 80409b2:	d80a      	bhi.n	80409ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80409b4:	2200      	movs	r2, #0
 80409b6:	6879      	ldr	r1, [r7, #4]
 80409b8:	f04f 30ff 	mov.w	r0, #4294967295
 80409bc:	f000 f911 	bl	8040be2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80409c0:	4a06      	ldr	r2, [pc, #24]	@ (80409dc <HAL_InitTick+0x5c>)
 80409c2:	687b      	ldr	r3, [r7, #4]
 80409c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80409c6:	2300      	movs	r3, #0
 80409c8:	e000      	b.n	80409cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80409ca:	2301      	movs	r3, #1
}
 80409cc:	4618      	mov	r0, r3
 80409ce:	3708      	adds	r7, #8
 80409d0:	46bd      	mov	sp, r7
 80409d2:	bd80      	pop	{r7, pc}
 80409d4:	20000000 	.word	0x20000000
 80409d8:	20000008 	.word	0x20000008
 80409dc:	20000004 	.word	0x20000004

080409e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80409e0:	b480      	push	{r7}
 80409e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80409e4:	4b06      	ldr	r3, [pc, #24]	@ (8040a00 <HAL_IncTick+0x20>)
 80409e6:	781b      	ldrb	r3, [r3, #0]
 80409e8:	461a      	mov	r2, r3
 80409ea:	4b06      	ldr	r3, [pc, #24]	@ (8040a04 <HAL_IncTick+0x24>)
 80409ec:	681b      	ldr	r3, [r3, #0]
 80409ee:	4413      	add	r3, r2
 80409f0:	4a04      	ldr	r2, [pc, #16]	@ (8040a04 <HAL_IncTick+0x24>)
 80409f2:	6013      	str	r3, [r2, #0]
}
 80409f4:	bf00      	nop
 80409f6:	46bd      	mov	sp, r7
 80409f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80409fc:	4770      	bx	lr
 80409fe:	bf00      	nop
 8040a00:	20000008 	.word	0x20000008
 8040a04:	20000028 	.word	0x20000028

08040a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040a08:	b480      	push	{r7}
 8040a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8040a0c:	4b03      	ldr	r3, [pc, #12]	@ (8040a1c <HAL_GetTick+0x14>)
 8040a0e:	681b      	ldr	r3, [r3, #0]
}
 8040a10:	4618      	mov	r0, r3
 8040a12:	46bd      	mov	sp, r7
 8040a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a18:	4770      	bx	lr
 8040a1a:	bf00      	nop
 8040a1c:	20000028 	.word	0x20000028

08040a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8040a20:	b580      	push	{r7, lr}
 8040a22:	b084      	sub	sp, #16
 8040a24:	af00      	add	r7, sp, #0
 8040a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8040a28:	f7ff ffee 	bl	8040a08 <HAL_GetTick>
 8040a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8040a2e:	687b      	ldr	r3, [r7, #4]
 8040a30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8040a32:	68fb      	ldr	r3, [r7, #12]
 8040a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8040a38:	d005      	beq.n	8040a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8040a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8040a64 <HAL_Delay+0x44>)
 8040a3c:	781b      	ldrb	r3, [r3, #0]
 8040a3e:	461a      	mov	r2, r3
 8040a40:	68fb      	ldr	r3, [r7, #12]
 8040a42:	4413      	add	r3, r2
 8040a44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8040a46:	bf00      	nop
 8040a48:	f7ff ffde 	bl	8040a08 <HAL_GetTick>
 8040a4c:	4602      	mov	r2, r0
 8040a4e:	68bb      	ldr	r3, [r7, #8]
 8040a50:	1ad3      	subs	r3, r2, r3
 8040a52:	68fa      	ldr	r2, [r7, #12]
 8040a54:	429a      	cmp	r2, r3
 8040a56:	d8f7      	bhi.n	8040a48 <HAL_Delay+0x28>
  {
  }
}
 8040a58:	bf00      	nop
 8040a5a:	bf00      	nop
 8040a5c:	3710      	adds	r7, #16
 8040a5e:	46bd      	mov	sp, r7
 8040a60:	bd80      	pop	{r7, pc}
 8040a62:	bf00      	nop
 8040a64:	20000008 	.word	0x20000008

08040a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040a68:	b480      	push	{r7}
 8040a6a:	b085      	sub	sp, #20
 8040a6c:	af00      	add	r7, sp, #0
 8040a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040a70:	687b      	ldr	r3, [r7, #4]
 8040a72:	f003 0307 	and.w	r3, r3, #7
 8040a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040a78:	4b0b      	ldr	r3, [pc, #44]	@ (8040aa8 <__NVIC_SetPriorityGrouping+0x40>)
 8040a7a:	68db      	ldr	r3, [r3, #12]
 8040a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040a7e:	68ba      	ldr	r2, [r7, #8]
 8040a80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8040a84:	4013      	ands	r3, r2
 8040a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040a88:	68fb      	ldr	r3, [r7, #12]
 8040a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040a8c:	68bb      	ldr	r3, [r7, #8]
 8040a8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8040a90:	4b06      	ldr	r3, [pc, #24]	@ (8040aac <__NVIC_SetPriorityGrouping+0x44>)
 8040a92:	4313      	orrs	r3, r2
 8040a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040a96:	4a04      	ldr	r2, [pc, #16]	@ (8040aa8 <__NVIC_SetPriorityGrouping+0x40>)
 8040a98:	68bb      	ldr	r3, [r7, #8]
 8040a9a:	60d3      	str	r3, [r2, #12]
}
 8040a9c:	bf00      	nop
 8040a9e:	3714      	adds	r7, #20
 8040aa0:	46bd      	mov	sp, r7
 8040aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040aa6:	4770      	bx	lr
 8040aa8:	e000ed00 	.word	0xe000ed00
 8040aac:	05fa0000 	.word	0x05fa0000

08040ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040ab0:	b480      	push	{r7}
 8040ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040ab4:	4b04      	ldr	r3, [pc, #16]	@ (8040ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8040ab6:	68db      	ldr	r3, [r3, #12]
 8040ab8:	0a1b      	lsrs	r3, r3, #8
 8040aba:	f003 0307 	and.w	r3, r3, #7
}
 8040abe:	4618      	mov	r0, r3
 8040ac0:	46bd      	mov	sp, r7
 8040ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ac6:	4770      	bx	lr
 8040ac8:	e000ed00 	.word	0xe000ed00

08040acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040acc:	b480      	push	{r7}
 8040ace:	b083      	sub	sp, #12
 8040ad0:	af00      	add	r7, sp, #0
 8040ad2:	4603      	mov	r3, r0
 8040ad4:	6039      	str	r1, [r7, #0]
 8040ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040adc:	2b00      	cmp	r3, #0
 8040ade:	db0a      	blt.n	8040af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040ae0:	683b      	ldr	r3, [r7, #0]
 8040ae2:	b2da      	uxtb	r2, r3
 8040ae4:	490c      	ldr	r1, [pc, #48]	@ (8040b18 <__NVIC_SetPriority+0x4c>)
 8040ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040aea:	0112      	lsls	r2, r2, #4
 8040aec:	b2d2      	uxtb	r2, r2
 8040aee:	440b      	add	r3, r1
 8040af0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8040af4:	e00a      	b.n	8040b0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040af6:	683b      	ldr	r3, [r7, #0]
 8040af8:	b2da      	uxtb	r2, r3
 8040afa:	4908      	ldr	r1, [pc, #32]	@ (8040b1c <__NVIC_SetPriority+0x50>)
 8040afc:	79fb      	ldrb	r3, [r7, #7]
 8040afe:	f003 030f 	and.w	r3, r3, #15
 8040b02:	3b04      	subs	r3, #4
 8040b04:	0112      	lsls	r2, r2, #4
 8040b06:	b2d2      	uxtb	r2, r2
 8040b08:	440b      	add	r3, r1
 8040b0a:	761a      	strb	r2, [r3, #24]
}
 8040b0c:	bf00      	nop
 8040b0e:	370c      	adds	r7, #12
 8040b10:	46bd      	mov	sp, r7
 8040b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b16:	4770      	bx	lr
 8040b18:	e000e100 	.word	0xe000e100
 8040b1c:	e000ed00 	.word	0xe000ed00

08040b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040b20:	b480      	push	{r7}
 8040b22:	b089      	sub	sp, #36	@ 0x24
 8040b24:	af00      	add	r7, sp, #0
 8040b26:	60f8      	str	r0, [r7, #12]
 8040b28:	60b9      	str	r1, [r7, #8]
 8040b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040b2c:	68fb      	ldr	r3, [r7, #12]
 8040b2e:	f003 0307 	and.w	r3, r3, #7
 8040b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040b34:	69fb      	ldr	r3, [r7, #28]
 8040b36:	f1c3 0307 	rsb	r3, r3, #7
 8040b3a:	2b04      	cmp	r3, #4
 8040b3c:	bf28      	it	cs
 8040b3e:	2304      	movcs	r3, #4
 8040b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040b42:	69fb      	ldr	r3, [r7, #28]
 8040b44:	3304      	adds	r3, #4
 8040b46:	2b06      	cmp	r3, #6
 8040b48:	d902      	bls.n	8040b50 <NVIC_EncodePriority+0x30>
 8040b4a:	69fb      	ldr	r3, [r7, #28]
 8040b4c:	3b03      	subs	r3, #3
 8040b4e:	e000      	b.n	8040b52 <NVIC_EncodePriority+0x32>
 8040b50:	2300      	movs	r3, #0
 8040b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040b54:	f04f 32ff 	mov.w	r2, #4294967295
 8040b58:	69bb      	ldr	r3, [r7, #24]
 8040b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8040b5e:	43da      	mvns	r2, r3
 8040b60:	68bb      	ldr	r3, [r7, #8]
 8040b62:	401a      	ands	r2, r3
 8040b64:	697b      	ldr	r3, [r7, #20]
 8040b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040b68:	f04f 31ff 	mov.w	r1, #4294967295
 8040b6c:	697b      	ldr	r3, [r7, #20]
 8040b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8040b72:	43d9      	mvns	r1, r3
 8040b74:	687b      	ldr	r3, [r7, #4]
 8040b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040b78:	4313      	orrs	r3, r2
         );
}
 8040b7a:	4618      	mov	r0, r3
 8040b7c:	3724      	adds	r7, #36	@ 0x24
 8040b7e:	46bd      	mov	sp, r7
 8040b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b84:	4770      	bx	lr
	...

08040b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8040b88:	b580      	push	{r7, lr}
 8040b8a:	b082      	sub	sp, #8
 8040b8c:	af00      	add	r7, sp, #0
 8040b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040b90:	687b      	ldr	r3, [r7, #4]
 8040b92:	3b01      	subs	r3, #1
 8040b94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8040b98:	d301      	bcc.n	8040b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8040b9a:	2301      	movs	r3, #1
 8040b9c:	e00f      	b.n	8040bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8040bc8 <SysTick_Config+0x40>)
 8040ba0:	687b      	ldr	r3, [r7, #4]
 8040ba2:	3b01      	subs	r3, #1
 8040ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8040ba6:	210f      	movs	r1, #15
 8040ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8040bac:	f7ff ff8e 	bl	8040acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040bb0:	4b05      	ldr	r3, [pc, #20]	@ (8040bc8 <SysTick_Config+0x40>)
 8040bb2:	2200      	movs	r2, #0
 8040bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8040bb6:	4b04      	ldr	r3, [pc, #16]	@ (8040bc8 <SysTick_Config+0x40>)
 8040bb8:	2207      	movs	r2, #7
 8040bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040bbc:	2300      	movs	r3, #0
}
 8040bbe:	4618      	mov	r0, r3
 8040bc0:	3708      	adds	r7, #8
 8040bc2:	46bd      	mov	sp, r7
 8040bc4:	bd80      	pop	{r7, pc}
 8040bc6:	bf00      	nop
 8040bc8:	e000e010 	.word	0xe000e010

08040bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040bcc:	b580      	push	{r7, lr}
 8040bce:	b082      	sub	sp, #8
 8040bd0:	af00      	add	r7, sp, #0
 8040bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040bd4:	6878      	ldr	r0, [r7, #4]
 8040bd6:	f7ff ff47 	bl	8040a68 <__NVIC_SetPriorityGrouping>
}
 8040bda:	bf00      	nop
 8040bdc:	3708      	adds	r7, #8
 8040bde:	46bd      	mov	sp, r7
 8040be0:	bd80      	pop	{r7, pc}

08040be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8040be2:	b580      	push	{r7, lr}
 8040be4:	b086      	sub	sp, #24
 8040be6:	af00      	add	r7, sp, #0
 8040be8:	4603      	mov	r3, r0
 8040bea:	60b9      	str	r1, [r7, #8]
 8040bec:	607a      	str	r2, [r7, #4]
 8040bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8040bf0:	2300      	movs	r3, #0
 8040bf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8040bf4:	f7ff ff5c 	bl	8040ab0 <__NVIC_GetPriorityGrouping>
 8040bf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8040bfa:	687a      	ldr	r2, [r7, #4]
 8040bfc:	68b9      	ldr	r1, [r7, #8]
 8040bfe:	6978      	ldr	r0, [r7, #20]
 8040c00:	f7ff ff8e 	bl	8040b20 <NVIC_EncodePriority>
 8040c04:	4602      	mov	r2, r0
 8040c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8040c0a:	4611      	mov	r1, r2
 8040c0c:	4618      	mov	r0, r3
 8040c0e:	f7ff ff5d 	bl	8040acc <__NVIC_SetPriority>
}
 8040c12:	bf00      	nop
 8040c14:	3718      	adds	r7, #24
 8040c16:	46bd      	mov	sp, r7
 8040c18:	bd80      	pop	{r7, pc}

08040c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8040c1a:	b580      	push	{r7, lr}
 8040c1c:	b082      	sub	sp, #8
 8040c1e:	af00      	add	r7, sp, #0
 8040c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8040c22:	6878      	ldr	r0, [r7, #4]
 8040c24:	f7ff ffb0 	bl	8040b88 <SysTick_Config>
 8040c28:	4603      	mov	r3, r0
}
 8040c2a:	4618      	mov	r0, r3
 8040c2c:	3708      	adds	r7, #8
 8040c2e:	46bd      	mov	sp, r7
 8040c30:	bd80      	pop	{r7, pc}
	...

08040c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8040c34:	b480      	push	{r7}
 8040c36:	b089      	sub	sp, #36	@ 0x24
 8040c38:	af00      	add	r7, sp, #0
 8040c3a:	6078      	str	r0, [r7, #4]
 8040c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8040c3e:	2300      	movs	r3, #0
 8040c40:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8040c42:	2300      	movs	r3, #0
 8040c44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8040c46:	2300      	movs	r3, #0
 8040c48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8040c4a:	2300      	movs	r3, #0
 8040c4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8040c4e:	2300      	movs	r3, #0
 8040c50:	61fb      	str	r3, [r7, #28]
 8040c52:	e175      	b.n	8040f40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8040c54:	2201      	movs	r2, #1
 8040c56:	69fb      	ldr	r3, [r7, #28]
 8040c58:	fa02 f303 	lsl.w	r3, r2, r3
 8040c5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8040c5e:	683b      	ldr	r3, [r7, #0]
 8040c60:	681b      	ldr	r3, [r3, #0]
 8040c62:	697a      	ldr	r2, [r7, #20]
 8040c64:	4013      	ands	r3, r2
 8040c66:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8040c68:	693a      	ldr	r2, [r7, #16]
 8040c6a:	697b      	ldr	r3, [r7, #20]
 8040c6c:	429a      	cmp	r2, r3
 8040c6e:	f040 8164 	bne.w	8040f3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8040c72:	683b      	ldr	r3, [r7, #0]
 8040c74:	685b      	ldr	r3, [r3, #4]
 8040c76:	f003 0303 	and.w	r3, r3, #3
 8040c7a:	2b01      	cmp	r3, #1
 8040c7c:	d005      	beq.n	8040c8a <HAL_GPIO_Init+0x56>
 8040c7e:	683b      	ldr	r3, [r7, #0]
 8040c80:	685b      	ldr	r3, [r3, #4]
 8040c82:	f003 0303 	and.w	r3, r3, #3
 8040c86:	2b02      	cmp	r3, #2
 8040c88:	d130      	bne.n	8040cec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8040c8a:	687b      	ldr	r3, [r7, #4]
 8040c8c:	689b      	ldr	r3, [r3, #8]
 8040c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8040c90:	69fb      	ldr	r3, [r7, #28]
 8040c92:	005b      	lsls	r3, r3, #1
 8040c94:	2203      	movs	r2, #3
 8040c96:	fa02 f303 	lsl.w	r3, r2, r3
 8040c9a:	43db      	mvns	r3, r3
 8040c9c:	69ba      	ldr	r2, [r7, #24]
 8040c9e:	4013      	ands	r3, r2
 8040ca0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8040ca2:	683b      	ldr	r3, [r7, #0]
 8040ca4:	68da      	ldr	r2, [r3, #12]
 8040ca6:	69fb      	ldr	r3, [r7, #28]
 8040ca8:	005b      	lsls	r3, r3, #1
 8040caa:	fa02 f303 	lsl.w	r3, r2, r3
 8040cae:	69ba      	ldr	r2, [r7, #24]
 8040cb0:	4313      	orrs	r3, r2
 8040cb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8040cb4:	687b      	ldr	r3, [r7, #4]
 8040cb6:	69ba      	ldr	r2, [r7, #24]
 8040cb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8040cba:	687b      	ldr	r3, [r7, #4]
 8040cbc:	685b      	ldr	r3, [r3, #4]
 8040cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8040cc0:	2201      	movs	r2, #1
 8040cc2:	69fb      	ldr	r3, [r7, #28]
 8040cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8040cc8:	43db      	mvns	r3, r3
 8040cca:	69ba      	ldr	r2, [r7, #24]
 8040ccc:	4013      	ands	r3, r2
 8040cce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8040cd0:	683b      	ldr	r3, [r7, #0]
 8040cd2:	685b      	ldr	r3, [r3, #4]
 8040cd4:	091b      	lsrs	r3, r3, #4
 8040cd6:	f003 0201 	and.w	r2, r3, #1
 8040cda:	69fb      	ldr	r3, [r7, #28]
 8040cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8040ce0:	69ba      	ldr	r2, [r7, #24]
 8040ce2:	4313      	orrs	r3, r2
 8040ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8040ce6:	687b      	ldr	r3, [r7, #4]
 8040ce8:	69ba      	ldr	r2, [r7, #24]
 8040cea:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8040cec:	683b      	ldr	r3, [r7, #0]
 8040cee:	685b      	ldr	r3, [r3, #4]
 8040cf0:	f003 0303 	and.w	r3, r3, #3
 8040cf4:	2b03      	cmp	r3, #3
 8040cf6:	d017      	beq.n	8040d28 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8040cf8:	687b      	ldr	r3, [r7, #4]
 8040cfa:	68db      	ldr	r3, [r3, #12]
 8040cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8040cfe:	69fb      	ldr	r3, [r7, #28]
 8040d00:	005b      	lsls	r3, r3, #1
 8040d02:	2203      	movs	r2, #3
 8040d04:	fa02 f303 	lsl.w	r3, r2, r3
 8040d08:	43db      	mvns	r3, r3
 8040d0a:	69ba      	ldr	r2, [r7, #24]
 8040d0c:	4013      	ands	r3, r2
 8040d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8040d10:	683b      	ldr	r3, [r7, #0]
 8040d12:	689a      	ldr	r2, [r3, #8]
 8040d14:	69fb      	ldr	r3, [r7, #28]
 8040d16:	005b      	lsls	r3, r3, #1
 8040d18:	fa02 f303 	lsl.w	r3, r2, r3
 8040d1c:	69ba      	ldr	r2, [r7, #24]
 8040d1e:	4313      	orrs	r3, r2
 8040d20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8040d22:	687b      	ldr	r3, [r7, #4]
 8040d24:	69ba      	ldr	r2, [r7, #24]
 8040d26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8040d28:	683b      	ldr	r3, [r7, #0]
 8040d2a:	685b      	ldr	r3, [r3, #4]
 8040d2c:	f003 0303 	and.w	r3, r3, #3
 8040d30:	2b02      	cmp	r3, #2
 8040d32:	d123      	bne.n	8040d7c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8040d34:	69fb      	ldr	r3, [r7, #28]
 8040d36:	08da      	lsrs	r2, r3, #3
 8040d38:	687b      	ldr	r3, [r7, #4]
 8040d3a:	3208      	adds	r2, #8
 8040d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8040d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8040d42:	69fb      	ldr	r3, [r7, #28]
 8040d44:	f003 0307 	and.w	r3, r3, #7
 8040d48:	009b      	lsls	r3, r3, #2
 8040d4a:	220f      	movs	r2, #15
 8040d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8040d50:	43db      	mvns	r3, r3
 8040d52:	69ba      	ldr	r2, [r7, #24]
 8040d54:	4013      	ands	r3, r2
 8040d56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8040d58:	683b      	ldr	r3, [r7, #0]
 8040d5a:	691a      	ldr	r2, [r3, #16]
 8040d5c:	69fb      	ldr	r3, [r7, #28]
 8040d5e:	f003 0307 	and.w	r3, r3, #7
 8040d62:	009b      	lsls	r3, r3, #2
 8040d64:	fa02 f303 	lsl.w	r3, r2, r3
 8040d68:	69ba      	ldr	r2, [r7, #24]
 8040d6a:	4313      	orrs	r3, r2
 8040d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8040d6e:	69fb      	ldr	r3, [r7, #28]
 8040d70:	08da      	lsrs	r2, r3, #3
 8040d72:	687b      	ldr	r3, [r7, #4]
 8040d74:	3208      	adds	r2, #8
 8040d76:	69b9      	ldr	r1, [r7, #24]
 8040d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8040d7c:	687b      	ldr	r3, [r7, #4]
 8040d7e:	681b      	ldr	r3, [r3, #0]
 8040d80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8040d82:	69fb      	ldr	r3, [r7, #28]
 8040d84:	005b      	lsls	r3, r3, #1
 8040d86:	2203      	movs	r2, #3
 8040d88:	fa02 f303 	lsl.w	r3, r2, r3
 8040d8c:	43db      	mvns	r3, r3
 8040d8e:	69ba      	ldr	r2, [r7, #24]
 8040d90:	4013      	ands	r3, r2
 8040d92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8040d94:	683b      	ldr	r3, [r7, #0]
 8040d96:	685b      	ldr	r3, [r3, #4]
 8040d98:	f003 0203 	and.w	r2, r3, #3
 8040d9c:	69fb      	ldr	r3, [r7, #28]
 8040d9e:	005b      	lsls	r3, r3, #1
 8040da0:	fa02 f303 	lsl.w	r3, r2, r3
 8040da4:	69ba      	ldr	r2, [r7, #24]
 8040da6:	4313      	orrs	r3, r2
 8040da8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8040daa:	687b      	ldr	r3, [r7, #4]
 8040dac:	69ba      	ldr	r2, [r7, #24]
 8040dae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8040db0:	683b      	ldr	r3, [r7, #0]
 8040db2:	685b      	ldr	r3, [r3, #4]
 8040db4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8040db8:	2b00      	cmp	r3, #0
 8040dba:	f000 80be 	beq.w	8040f3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040dbe:	4b66      	ldr	r3, [pc, #408]	@ (8040f58 <HAL_GPIO_Init+0x324>)
 8040dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8040dc2:	4a65      	ldr	r2, [pc, #404]	@ (8040f58 <HAL_GPIO_Init+0x324>)
 8040dc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8040dc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8040dca:	4b63      	ldr	r3, [pc, #396]	@ (8040f58 <HAL_GPIO_Init+0x324>)
 8040dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8040dce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8040dd2:	60fb      	str	r3, [r7, #12]
 8040dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8040dd6:	4a61      	ldr	r2, [pc, #388]	@ (8040f5c <HAL_GPIO_Init+0x328>)
 8040dd8:	69fb      	ldr	r3, [r7, #28]
 8040dda:	089b      	lsrs	r3, r3, #2
 8040ddc:	3302      	adds	r3, #2
 8040dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8040de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8040de4:	69fb      	ldr	r3, [r7, #28]
 8040de6:	f003 0303 	and.w	r3, r3, #3
 8040dea:	009b      	lsls	r3, r3, #2
 8040dec:	220f      	movs	r2, #15
 8040dee:	fa02 f303 	lsl.w	r3, r2, r3
 8040df2:	43db      	mvns	r3, r3
 8040df4:	69ba      	ldr	r2, [r7, #24]
 8040df6:	4013      	ands	r3, r2
 8040df8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8040dfa:	687b      	ldr	r3, [r7, #4]
 8040dfc:	4a58      	ldr	r2, [pc, #352]	@ (8040f60 <HAL_GPIO_Init+0x32c>)
 8040dfe:	4293      	cmp	r3, r2
 8040e00:	d037      	beq.n	8040e72 <HAL_GPIO_Init+0x23e>
 8040e02:	687b      	ldr	r3, [r7, #4]
 8040e04:	4a57      	ldr	r2, [pc, #348]	@ (8040f64 <HAL_GPIO_Init+0x330>)
 8040e06:	4293      	cmp	r3, r2
 8040e08:	d031      	beq.n	8040e6e <HAL_GPIO_Init+0x23a>
 8040e0a:	687b      	ldr	r3, [r7, #4]
 8040e0c:	4a56      	ldr	r2, [pc, #344]	@ (8040f68 <HAL_GPIO_Init+0x334>)
 8040e0e:	4293      	cmp	r3, r2
 8040e10:	d02b      	beq.n	8040e6a <HAL_GPIO_Init+0x236>
 8040e12:	687b      	ldr	r3, [r7, #4]
 8040e14:	4a55      	ldr	r2, [pc, #340]	@ (8040f6c <HAL_GPIO_Init+0x338>)
 8040e16:	4293      	cmp	r3, r2
 8040e18:	d025      	beq.n	8040e66 <HAL_GPIO_Init+0x232>
 8040e1a:	687b      	ldr	r3, [r7, #4]
 8040e1c:	4a54      	ldr	r2, [pc, #336]	@ (8040f70 <HAL_GPIO_Init+0x33c>)
 8040e1e:	4293      	cmp	r3, r2
 8040e20:	d01f      	beq.n	8040e62 <HAL_GPIO_Init+0x22e>
 8040e22:	687b      	ldr	r3, [r7, #4]
 8040e24:	4a53      	ldr	r2, [pc, #332]	@ (8040f74 <HAL_GPIO_Init+0x340>)
 8040e26:	4293      	cmp	r3, r2
 8040e28:	d019      	beq.n	8040e5e <HAL_GPIO_Init+0x22a>
 8040e2a:	687b      	ldr	r3, [r7, #4]
 8040e2c:	4a52      	ldr	r2, [pc, #328]	@ (8040f78 <HAL_GPIO_Init+0x344>)
 8040e2e:	4293      	cmp	r3, r2
 8040e30:	d013      	beq.n	8040e5a <HAL_GPIO_Init+0x226>
 8040e32:	687b      	ldr	r3, [r7, #4]
 8040e34:	4a51      	ldr	r2, [pc, #324]	@ (8040f7c <HAL_GPIO_Init+0x348>)
 8040e36:	4293      	cmp	r3, r2
 8040e38:	d00d      	beq.n	8040e56 <HAL_GPIO_Init+0x222>
 8040e3a:	687b      	ldr	r3, [r7, #4]
 8040e3c:	4a50      	ldr	r2, [pc, #320]	@ (8040f80 <HAL_GPIO_Init+0x34c>)
 8040e3e:	4293      	cmp	r3, r2
 8040e40:	d007      	beq.n	8040e52 <HAL_GPIO_Init+0x21e>
 8040e42:	687b      	ldr	r3, [r7, #4]
 8040e44:	4a4f      	ldr	r2, [pc, #316]	@ (8040f84 <HAL_GPIO_Init+0x350>)
 8040e46:	4293      	cmp	r3, r2
 8040e48:	d101      	bne.n	8040e4e <HAL_GPIO_Init+0x21a>
 8040e4a:	2309      	movs	r3, #9
 8040e4c:	e012      	b.n	8040e74 <HAL_GPIO_Init+0x240>
 8040e4e:	230a      	movs	r3, #10
 8040e50:	e010      	b.n	8040e74 <HAL_GPIO_Init+0x240>
 8040e52:	2308      	movs	r3, #8
 8040e54:	e00e      	b.n	8040e74 <HAL_GPIO_Init+0x240>
 8040e56:	2307      	movs	r3, #7
 8040e58:	e00c      	b.n	8040e74 <HAL_GPIO_Init+0x240>
 8040e5a:	2306      	movs	r3, #6
 8040e5c:	e00a      	b.n	8040e74 <HAL_GPIO_Init+0x240>
 8040e5e:	2305      	movs	r3, #5
 8040e60:	e008      	b.n	8040e74 <HAL_GPIO_Init+0x240>
 8040e62:	2304      	movs	r3, #4
 8040e64:	e006      	b.n	8040e74 <HAL_GPIO_Init+0x240>
 8040e66:	2303      	movs	r3, #3
 8040e68:	e004      	b.n	8040e74 <HAL_GPIO_Init+0x240>
 8040e6a:	2302      	movs	r3, #2
 8040e6c:	e002      	b.n	8040e74 <HAL_GPIO_Init+0x240>
 8040e6e:	2301      	movs	r3, #1
 8040e70:	e000      	b.n	8040e74 <HAL_GPIO_Init+0x240>
 8040e72:	2300      	movs	r3, #0
 8040e74:	69fa      	ldr	r2, [r7, #28]
 8040e76:	f002 0203 	and.w	r2, r2, #3
 8040e7a:	0092      	lsls	r2, r2, #2
 8040e7c:	4093      	lsls	r3, r2
 8040e7e:	69ba      	ldr	r2, [r7, #24]
 8040e80:	4313      	orrs	r3, r2
 8040e82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8040e84:	4935      	ldr	r1, [pc, #212]	@ (8040f5c <HAL_GPIO_Init+0x328>)
 8040e86:	69fb      	ldr	r3, [r7, #28]
 8040e88:	089b      	lsrs	r3, r3, #2
 8040e8a:	3302      	adds	r3, #2
 8040e8c:	69ba      	ldr	r2, [r7, #24]
 8040e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8040e92:	4b3d      	ldr	r3, [pc, #244]	@ (8040f88 <HAL_GPIO_Init+0x354>)
 8040e94:	689b      	ldr	r3, [r3, #8]
 8040e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8040e98:	693b      	ldr	r3, [r7, #16]
 8040e9a:	43db      	mvns	r3, r3
 8040e9c:	69ba      	ldr	r2, [r7, #24]
 8040e9e:	4013      	ands	r3, r2
 8040ea0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8040ea2:	683b      	ldr	r3, [r7, #0]
 8040ea4:	685b      	ldr	r3, [r3, #4]
 8040ea6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8040eaa:	2b00      	cmp	r3, #0
 8040eac:	d003      	beq.n	8040eb6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8040eae:	69ba      	ldr	r2, [r7, #24]
 8040eb0:	693b      	ldr	r3, [r7, #16]
 8040eb2:	4313      	orrs	r3, r2
 8040eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8040eb6:	4a34      	ldr	r2, [pc, #208]	@ (8040f88 <HAL_GPIO_Init+0x354>)
 8040eb8:	69bb      	ldr	r3, [r7, #24]
 8040eba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8040ebc:	4b32      	ldr	r3, [pc, #200]	@ (8040f88 <HAL_GPIO_Init+0x354>)
 8040ebe:	68db      	ldr	r3, [r3, #12]
 8040ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8040ec2:	693b      	ldr	r3, [r7, #16]
 8040ec4:	43db      	mvns	r3, r3
 8040ec6:	69ba      	ldr	r2, [r7, #24]
 8040ec8:	4013      	ands	r3, r2
 8040eca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8040ecc:	683b      	ldr	r3, [r7, #0]
 8040ece:	685b      	ldr	r3, [r3, #4]
 8040ed0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8040ed4:	2b00      	cmp	r3, #0
 8040ed6:	d003      	beq.n	8040ee0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8040ed8:	69ba      	ldr	r2, [r7, #24]
 8040eda:	693b      	ldr	r3, [r7, #16]
 8040edc:	4313      	orrs	r3, r2
 8040ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8040ee0:	4a29      	ldr	r2, [pc, #164]	@ (8040f88 <HAL_GPIO_Init+0x354>)
 8040ee2:	69bb      	ldr	r3, [r7, #24]
 8040ee4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8040ee6:	4b28      	ldr	r3, [pc, #160]	@ (8040f88 <HAL_GPIO_Init+0x354>)
 8040ee8:	685b      	ldr	r3, [r3, #4]
 8040eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8040eec:	693b      	ldr	r3, [r7, #16]
 8040eee:	43db      	mvns	r3, r3
 8040ef0:	69ba      	ldr	r2, [r7, #24]
 8040ef2:	4013      	ands	r3, r2
 8040ef4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8040ef6:	683b      	ldr	r3, [r7, #0]
 8040ef8:	685b      	ldr	r3, [r3, #4]
 8040efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8040efe:	2b00      	cmp	r3, #0
 8040f00:	d003      	beq.n	8040f0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8040f02:	69ba      	ldr	r2, [r7, #24]
 8040f04:	693b      	ldr	r3, [r7, #16]
 8040f06:	4313      	orrs	r3, r2
 8040f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8040f0a:	4a1f      	ldr	r2, [pc, #124]	@ (8040f88 <HAL_GPIO_Init+0x354>)
 8040f0c:	69bb      	ldr	r3, [r7, #24]
 8040f0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8040f10:	4b1d      	ldr	r3, [pc, #116]	@ (8040f88 <HAL_GPIO_Init+0x354>)
 8040f12:	681b      	ldr	r3, [r3, #0]
 8040f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8040f16:	693b      	ldr	r3, [r7, #16]
 8040f18:	43db      	mvns	r3, r3
 8040f1a:	69ba      	ldr	r2, [r7, #24]
 8040f1c:	4013      	ands	r3, r2
 8040f1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8040f20:	683b      	ldr	r3, [r7, #0]
 8040f22:	685b      	ldr	r3, [r3, #4]
 8040f24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8040f28:	2b00      	cmp	r3, #0
 8040f2a:	d003      	beq.n	8040f34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8040f2c:	69ba      	ldr	r2, [r7, #24]
 8040f2e:	693b      	ldr	r3, [r7, #16]
 8040f30:	4313      	orrs	r3, r2
 8040f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8040f34:	4a14      	ldr	r2, [pc, #80]	@ (8040f88 <HAL_GPIO_Init+0x354>)
 8040f36:	69bb      	ldr	r3, [r7, #24]
 8040f38:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8040f3a:	69fb      	ldr	r3, [r7, #28]
 8040f3c:	3301      	adds	r3, #1
 8040f3e:	61fb      	str	r3, [r7, #28]
 8040f40:	69fb      	ldr	r3, [r7, #28]
 8040f42:	2b0f      	cmp	r3, #15
 8040f44:	f67f ae86 	bls.w	8040c54 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8040f48:	bf00      	nop
 8040f4a:	bf00      	nop
 8040f4c:	3724      	adds	r7, #36	@ 0x24
 8040f4e:	46bd      	mov	sp, r7
 8040f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f54:	4770      	bx	lr
 8040f56:	bf00      	nop
 8040f58:	40023800 	.word	0x40023800
 8040f5c:	40013800 	.word	0x40013800
 8040f60:	40020000 	.word	0x40020000
 8040f64:	40020400 	.word	0x40020400
 8040f68:	40020800 	.word	0x40020800
 8040f6c:	40020c00 	.word	0x40020c00
 8040f70:	40021000 	.word	0x40021000
 8040f74:	40021400 	.word	0x40021400
 8040f78:	40021800 	.word	0x40021800
 8040f7c:	40021c00 	.word	0x40021c00
 8040f80:	40022000 	.word	0x40022000
 8040f84:	40022400 	.word	0x40022400
 8040f88:	40013c00 	.word	0x40013c00

08040f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8040f8c:	b480      	push	{r7}
 8040f8e:	b083      	sub	sp, #12
 8040f90:	af00      	add	r7, sp, #0
 8040f92:	6078      	str	r0, [r7, #4]
 8040f94:	460b      	mov	r3, r1
 8040f96:	807b      	strh	r3, [r7, #2]
 8040f98:	4613      	mov	r3, r2
 8040f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8040f9c:	787b      	ldrb	r3, [r7, #1]
 8040f9e:	2b00      	cmp	r3, #0
 8040fa0:	d003      	beq.n	8040faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8040fa2:	887a      	ldrh	r2, [r7, #2]
 8040fa4:	687b      	ldr	r3, [r7, #4]
 8040fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8040fa8:	e003      	b.n	8040fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8040faa:	887b      	ldrh	r3, [r7, #2]
 8040fac:	041a      	lsls	r2, r3, #16
 8040fae:	687b      	ldr	r3, [r7, #4]
 8040fb0:	619a      	str	r2, [r3, #24]
}
 8040fb2:	bf00      	nop
 8040fb4:	370c      	adds	r7, #12
 8040fb6:	46bd      	mov	sp, r7
 8040fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040fbc:	4770      	bx	lr

08040fbe <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8040fbe:	b480      	push	{r7}
 8040fc0:	b085      	sub	sp, #20
 8040fc2:	af00      	add	r7, sp, #0
 8040fc4:	6078      	str	r0, [r7, #4]
 8040fc6:	460b      	mov	r3, r1
 8040fc8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8040fca:	687b      	ldr	r3, [r7, #4]
 8040fcc:	695b      	ldr	r3, [r3, #20]
 8040fce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8040fd0:	887a      	ldrh	r2, [r7, #2]
 8040fd2:	68fb      	ldr	r3, [r7, #12]
 8040fd4:	4013      	ands	r3, r2
 8040fd6:	041a      	lsls	r2, r3, #16
 8040fd8:	68fb      	ldr	r3, [r7, #12]
 8040fda:	43d9      	mvns	r1, r3
 8040fdc:	887b      	ldrh	r3, [r7, #2]
 8040fde:	400b      	ands	r3, r1
 8040fe0:	431a      	orrs	r2, r3
 8040fe2:	687b      	ldr	r3, [r7, #4]
 8040fe4:	619a      	str	r2, [r3, #24]
}
 8040fe6:	bf00      	nop
 8040fe8:	3714      	adds	r7, #20
 8040fea:	46bd      	mov	sp, r7
 8040fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ff0:	4770      	bx	lr
	...

08040ff4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8040ff4:	b580      	push	{r7, lr}
 8040ff6:	b086      	sub	sp, #24
 8040ff8:	af00      	add	r7, sp, #0
 8040ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8040ffc:	2300      	movs	r3, #0
 8040ffe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8041000:	687b      	ldr	r3, [r7, #4]
 8041002:	2b00      	cmp	r3, #0
 8041004:	d101      	bne.n	804100a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8041006:	2301      	movs	r3, #1
 8041008:	e29b      	b.n	8041542 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 804100a:	687b      	ldr	r3, [r7, #4]
 804100c:	681b      	ldr	r3, [r3, #0]
 804100e:	f003 0301 	and.w	r3, r3, #1
 8041012:	2b00      	cmp	r3, #0
 8041014:	f000 8087 	beq.w	8041126 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8041018:	4b96      	ldr	r3, [pc, #600]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 804101a:	689b      	ldr	r3, [r3, #8]
 804101c:	f003 030c 	and.w	r3, r3, #12
 8041020:	2b04      	cmp	r3, #4
 8041022:	d00c      	beq.n	804103e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8041024:	4b93      	ldr	r3, [pc, #588]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 8041026:	689b      	ldr	r3, [r3, #8]
 8041028:	f003 030c 	and.w	r3, r3, #12
 804102c:	2b08      	cmp	r3, #8
 804102e:	d112      	bne.n	8041056 <HAL_RCC_OscConfig+0x62>
 8041030:	4b90      	ldr	r3, [pc, #576]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 8041032:	685b      	ldr	r3, [r3, #4]
 8041034:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8041038:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 804103c:	d10b      	bne.n	8041056 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 804103e:	4b8d      	ldr	r3, [pc, #564]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 8041040:	681b      	ldr	r3, [r3, #0]
 8041042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8041046:	2b00      	cmp	r3, #0
 8041048:	d06c      	beq.n	8041124 <HAL_RCC_OscConfig+0x130>
 804104a:	687b      	ldr	r3, [r7, #4]
 804104c:	685b      	ldr	r3, [r3, #4]
 804104e:	2b00      	cmp	r3, #0
 8041050:	d168      	bne.n	8041124 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8041052:	2301      	movs	r3, #1
 8041054:	e275      	b.n	8041542 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8041056:	687b      	ldr	r3, [r7, #4]
 8041058:	685b      	ldr	r3, [r3, #4]
 804105a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 804105e:	d106      	bne.n	804106e <HAL_RCC_OscConfig+0x7a>
 8041060:	4b84      	ldr	r3, [pc, #528]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 8041062:	681b      	ldr	r3, [r3, #0]
 8041064:	4a83      	ldr	r2, [pc, #524]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 8041066:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 804106a:	6013      	str	r3, [r2, #0]
 804106c:	e02e      	b.n	80410cc <HAL_RCC_OscConfig+0xd8>
 804106e:	687b      	ldr	r3, [r7, #4]
 8041070:	685b      	ldr	r3, [r3, #4]
 8041072:	2b00      	cmp	r3, #0
 8041074:	d10c      	bne.n	8041090 <HAL_RCC_OscConfig+0x9c>
 8041076:	4b7f      	ldr	r3, [pc, #508]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 8041078:	681b      	ldr	r3, [r3, #0]
 804107a:	4a7e      	ldr	r2, [pc, #504]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 804107c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8041080:	6013      	str	r3, [r2, #0]
 8041082:	4b7c      	ldr	r3, [pc, #496]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 8041084:	681b      	ldr	r3, [r3, #0]
 8041086:	4a7b      	ldr	r2, [pc, #492]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 8041088:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 804108c:	6013      	str	r3, [r2, #0]
 804108e:	e01d      	b.n	80410cc <HAL_RCC_OscConfig+0xd8>
 8041090:	687b      	ldr	r3, [r7, #4]
 8041092:	685b      	ldr	r3, [r3, #4]
 8041094:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8041098:	d10c      	bne.n	80410b4 <HAL_RCC_OscConfig+0xc0>
 804109a:	4b76      	ldr	r3, [pc, #472]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 804109c:	681b      	ldr	r3, [r3, #0]
 804109e:	4a75      	ldr	r2, [pc, #468]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 80410a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80410a4:	6013      	str	r3, [r2, #0]
 80410a6:	4b73      	ldr	r3, [pc, #460]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 80410a8:	681b      	ldr	r3, [r3, #0]
 80410aa:	4a72      	ldr	r2, [pc, #456]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 80410ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80410b0:	6013      	str	r3, [r2, #0]
 80410b2:	e00b      	b.n	80410cc <HAL_RCC_OscConfig+0xd8>
 80410b4:	4b6f      	ldr	r3, [pc, #444]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 80410b6:	681b      	ldr	r3, [r3, #0]
 80410b8:	4a6e      	ldr	r2, [pc, #440]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 80410ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80410be:	6013      	str	r3, [r2, #0]
 80410c0:	4b6c      	ldr	r3, [pc, #432]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 80410c2:	681b      	ldr	r3, [r3, #0]
 80410c4:	4a6b      	ldr	r2, [pc, #428]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 80410c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80410ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80410cc:	687b      	ldr	r3, [r7, #4]
 80410ce:	685b      	ldr	r3, [r3, #4]
 80410d0:	2b00      	cmp	r3, #0
 80410d2:	d013      	beq.n	80410fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80410d4:	f7ff fc98 	bl	8040a08 <HAL_GetTick>
 80410d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80410da:	e008      	b.n	80410ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80410dc:	f7ff fc94 	bl	8040a08 <HAL_GetTick>
 80410e0:	4602      	mov	r2, r0
 80410e2:	693b      	ldr	r3, [r7, #16]
 80410e4:	1ad3      	subs	r3, r2, r3
 80410e6:	2b64      	cmp	r3, #100	@ 0x64
 80410e8:	d901      	bls.n	80410ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80410ea:	2303      	movs	r3, #3
 80410ec:	e229      	b.n	8041542 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80410ee:	4b61      	ldr	r3, [pc, #388]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 80410f0:	681b      	ldr	r3, [r3, #0]
 80410f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80410f6:	2b00      	cmp	r3, #0
 80410f8:	d0f0      	beq.n	80410dc <HAL_RCC_OscConfig+0xe8>
 80410fa:	e014      	b.n	8041126 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80410fc:	f7ff fc84 	bl	8040a08 <HAL_GetTick>
 8041100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8041102:	e008      	b.n	8041116 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8041104:	f7ff fc80 	bl	8040a08 <HAL_GetTick>
 8041108:	4602      	mov	r2, r0
 804110a:	693b      	ldr	r3, [r7, #16]
 804110c:	1ad3      	subs	r3, r2, r3
 804110e:	2b64      	cmp	r3, #100	@ 0x64
 8041110:	d901      	bls.n	8041116 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8041112:	2303      	movs	r3, #3
 8041114:	e215      	b.n	8041542 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8041116:	4b57      	ldr	r3, [pc, #348]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 8041118:	681b      	ldr	r3, [r3, #0]
 804111a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 804111e:	2b00      	cmp	r3, #0
 8041120:	d1f0      	bne.n	8041104 <HAL_RCC_OscConfig+0x110>
 8041122:	e000      	b.n	8041126 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8041124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8041126:	687b      	ldr	r3, [r7, #4]
 8041128:	681b      	ldr	r3, [r3, #0]
 804112a:	f003 0302 	and.w	r3, r3, #2
 804112e:	2b00      	cmp	r3, #0
 8041130:	d069      	beq.n	8041206 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8041132:	4b50      	ldr	r3, [pc, #320]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 8041134:	689b      	ldr	r3, [r3, #8]
 8041136:	f003 030c 	and.w	r3, r3, #12
 804113a:	2b00      	cmp	r3, #0
 804113c:	d00b      	beq.n	8041156 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 804113e:	4b4d      	ldr	r3, [pc, #308]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 8041140:	689b      	ldr	r3, [r3, #8]
 8041142:	f003 030c 	and.w	r3, r3, #12
 8041146:	2b08      	cmp	r3, #8
 8041148:	d11c      	bne.n	8041184 <HAL_RCC_OscConfig+0x190>
 804114a:	4b4a      	ldr	r3, [pc, #296]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 804114c:	685b      	ldr	r3, [r3, #4]
 804114e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8041152:	2b00      	cmp	r3, #0
 8041154:	d116      	bne.n	8041184 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8041156:	4b47      	ldr	r3, [pc, #284]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 8041158:	681b      	ldr	r3, [r3, #0]
 804115a:	f003 0302 	and.w	r3, r3, #2
 804115e:	2b00      	cmp	r3, #0
 8041160:	d005      	beq.n	804116e <HAL_RCC_OscConfig+0x17a>
 8041162:	687b      	ldr	r3, [r7, #4]
 8041164:	68db      	ldr	r3, [r3, #12]
 8041166:	2b01      	cmp	r3, #1
 8041168:	d001      	beq.n	804116e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 804116a:	2301      	movs	r3, #1
 804116c:	e1e9      	b.n	8041542 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 804116e:	4b41      	ldr	r3, [pc, #260]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 8041170:	681b      	ldr	r3, [r3, #0]
 8041172:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8041176:	687b      	ldr	r3, [r7, #4]
 8041178:	691b      	ldr	r3, [r3, #16]
 804117a:	00db      	lsls	r3, r3, #3
 804117c:	493d      	ldr	r1, [pc, #244]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 804117e:	4313      	orrs	r3, r2
 8041180:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8041182:	e040      	b.n	8041206 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8041184:	687b      	ldr	r3, [r7, #4]
 8041186:	68db      	ldr	r3, [r3, #12]
 8041188:	2b00      	cmp	r3, #0
 804118a:	d023      	beq.n	80411d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 804118c:	4b39      	ldr	r3, [pc, #228]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 804118e:	681b      	ldr	r3, [r3, #0]
 8041190:	4a38      	ldr	r2, [pc, #224]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 8041192:	f043 0301 	orr.w	r3, r3, #1
 8041196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041198:	f7ff fc36 	bl	8040a08 <HAL_GetTick>
 804119c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804119e:	e008      	b.n	80411b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80411a0:	f7ff fc32 	bl	8040a08 <HAL_GetTick>
 80411a4:	4602      	mov	r2, r0
 80411a6:	693b      	ldr	r3, [r7, #16]
 80411a8:	1ad3      	subs	r3, r2, r3
 80411aa:	2b02      	cmp	r3, #2
 80411ac:	d901      	bls.n	80411b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80411ae:	2303      	movs	r3, #3
 80411b0:	e1c7      	b.n	8041542 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80411b2:	4b30      	ldr	r3, [pc, #192]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 80411b4:	681b      	ldr	r3, [r3, #0]
 80411b6:	f003 0302 	and.w	r3, r3, #2
 80411ba:	2b00      	cmp	r3, #0
 80411bc:	d0f0      	beq.n	80411a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80411be:	4b2d      	ldr	r3, [pc, #180]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 80411c0:	681b      	ldr	r3, [r3, #0]
 80411c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80411c6:	687b      	ldr	r3, [r7, #4]
 80411c8:	691b      	ldr	r3, [r3, #16]
 80411ca:	00db      	lsls	r3, r3, #3
 80411cc:	4929      	ldr	r1, [pc, #164]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 80411ce:	4313      	orrs	r3, r2
 80411d0:	600b      	str	r3, [r1, #0]
 80411d2:	e018      	b.n	8041206 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80411d4:	4b27      	ldr	r3, [pc, #156]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 80411d6:	681b      	ldr	r3, [r3, #0]
 80411d8:	4a26      	ldr	r2, [pc, #152]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 80411da:	f023 0301 	bic.w	r3, r3, #1
 80411de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80411e0:	f7ff fc12 	bl	8040a08 <HAL_GetTick>
 80411e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80411e6:	e008      	b.n	80411fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80411e8:	f7ff fc0e 	bl	8040a08 <HAL_GetTick>
 80411ec:	4602      	mov	r2, r0
 80411ee:	693b      	ldr	r3, [r7, #16]
 80411f0:	1ad3      	subs	r3, r2, r3
 80411f2:	2b02      	cmp	r3, #2
 80411f4:	d901      	bls.n	80411fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80411f6:	2303      	movs	r3, #3
 80411f8:	e1a3      	b.n	8041542 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80411fa:	4b1e      	ldr	r3, [pc, #120]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 80411fc:	681b      	ldr	r3, [r3, #0]
 80411fe:	f003 0302 	and.w	r3, r3, #2
 8041202:	2b00      	cmp	r3, #0
 8041204:	d1f0      	bne.n	80411e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8041206:	687b      	ldr	r3, [r7, #4]
 8041208:	681b      	ldr	r3, [r3, #0]
 804120a:	f003 0308 	and.w	r3, r3, #8
 804120e:	2b00      	cmp	r3, #0
 8041210:	d038      	beq.n	8041284 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8041212:	687b      	ldr	r3, [r7, #4]
 8041214:	695b      	ldr	r3, [r3, #20]
 8041216:	2b00      	cmp	r3, #0
 8041218:	d019      	beq.n	804124e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 804121a:	4b16      	ldr	r3, [pc, #88]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 804121c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 804121e:	4a15      	ldr	r2, [pc, #84]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 8041220:	f043 0301 	orr.w	r3, r3, #1
 8041224:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041226:	f7ff fbef 	bl	8040a08 <HAL_GetTick>
 804122a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 804122c:	e008      	b.n	8041240 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 804122e:	f7ff fbeb 	bl	8040a08 <HAL_GetTick>
 8041232:	4602      	mov	r2, r0
 8041234:	693b      	ldr	r3, [r7, #16]
 8041236:	1ad3      	subs	r3, r2, r3
 8041238:	2b02      	cmp	r3, #2
 804123a:	d901      	bls.n	8041240 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 804123c:	2303      	movs	r3, #3
 804123e:	e180      	b.n	8041542 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8041240:	4b0c      	ldr	r3, [pc, #48]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 8041242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8041244:	f003 0302 	and.w	r3, r3, #2
 8041248:	2b00      	cmp	r3, #0
 804124a:	d0f0      	beq.n	804122e <HAL_RCC_OscConfig+0x23a>
 804124c:	e01a      	b.n	8041284 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 804124e:	4b09      	ldr	r3, [pc, #36]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 8041250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8041252:	4a08      	ldr	r2, [pc, #32]	@ (8041274 <HAL_RCC_OscConfig+0x280>)
 8041254:	f023 0301 	bic.w	r3, r3, #1
 8041258:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804125a:	f7ff fbd5 	bl	8040a08 <HAL_GetTick>
 804125e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8041260:	e00a      	b.n	8041278 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8041262:	f7ff fbd1 	bl	8040a08 <HAL_GetTick>
 8041266:	4602      	mov	r2, r0
 8041268:	693b      	ldr	r3, [r7, #16]
 804126a:	1ad3      	subs	r3, r2, r3
 804126c:	2b02      	cmp	r3, #2
 804126e:	d903      	bls.n	8041278 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8041270:	2303      	movs	r3, #3
 8041272:	e166      	b.n	8041542 <HAL_RCC_OscConfig+0x54e>
 8041274:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8041278:	4b92      	ldr	r3, [pc, #584]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 804127a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 804127c:	f003 0302 	and.w	r3, r3, #2
 8041280:	2b00      	cmp	r3, #0
 8041282:	d1ee      	bne.n	8041262 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8041284:	687b      	ldr	r3, [r7, #4]
 8041286:	681b      	ldr	r3, [r3, #0]
 8041288:	f003 0304 	and.w	r3, r3, #4
 804128c:	2b00      	cmp	r3, #0
 804128e:	f000 80a4 	beq.w	80413da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8041292:	4b8c      	ldr	r3, [pc, #560]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 8041294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8041296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 804129a:	2b00      	cmp	r3, #0
 804129c:	d10d      	bne.n	80412ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 804129e:	4b89      	ldr	r3, [pc, #548]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 80412a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80412a2:	4a88      	ldr	r2, [pc, #544]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 80412a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80412a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80412aa:	4b86      	ldr	r3, [pc, #536]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 80412ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80412ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80412b2:	60bb      	str	r3, [r7, #8]
 80412b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80412b6:	2301      	movs	r3, #1
 80412b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80412ba:	4b83      	ldr	r3, [pc, #524]	@ (80414c8 <HAL_RCC_OscConfig+0x4d4>)
 80412bc:	681b      	ldr	r3, [r3, #0]
 80412be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80412c2:	2b00      	cmp	r3, #0
 80412c4:	d118      	bne.n	80412f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80412c6:	4b80      	ldr	r3, [pc, #512]	@ (80414c8 <HAL_RCC_OscConfig+0x4d4>)
 80412c8:	681b      	ldr	r3, [r3, #0]
 80412ca:	4a7f      	ldr	r2, [pc, #508]	@ (80414c8 <HAL_RCC_OscConfig+0x4d4>)
 80412cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80412d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80412d2:	f7ff fb99 	bl	8040a08 <HAL_GetTick>
 80412d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80412d8:	e008      	b.n	80412ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80412da:	f7ff fb95 	bl	8040a08 <HAL_GetTick>
 80412de:	4602      	mov	r2, r0
 80412e0:	693b      	ldr	r3, [r7, #16]
 80412e2:	1ad3      	subs	r3, r2, r3
 80412e4:	2b64      	cmp	r3, #100	@ 0x64
 80412e6:	d901      	bls.n	80412ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80412e8:	2303      	movs	r3, #3
 80412ea:	e12a      	b.n	8041542 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80412ec:	4b76      	ldr	r3, [pc, #472]	@ (80414c8 <HAL_RCC_OscConfig+0x4d4>)
 80412ee:	681b      	ldr	r3, [r3, #0]
 80412f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80412f4:	2b00      	cmp	r3, #0
 80412f6:	d0f0      	beq.n	80412da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80412f8:	687b      	ldr	r3, [r7, #4]
 80412fa:	689b      	ldr	r3, [r3, #8]
 80412fc:	2b01      	cmp	r3, #1
 80412fe:	d106      	bne.n	804130e <HAL_RCC_OscConfig+0x31a>
 8041300:	4b70      	ldr	r3, [pc, #448]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 8041302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041304:	4a6f      	ldr	r2, [pc, #444]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 8041306:	f043 0301 	orr.w	r3, r3, #1
 804130a:	6713      	str	r3, [r2, #112]	@ 0x70
 804130c:	e02d      	b.n	804136a <HAL_RCC_OscConfig+0x376>
 804130e:	687b      	ldr	r3, [r7, #4]
 8041310:	689b      	ldr	r3, [r3, #8]
 8041312:	2b00      	cmp	r3, #0
 8041314:	d10c      	bne.n	8041330 <HAL_RCC_OscConfig+0x33c>
 8041316:	4b6b      	ldr	r3, [pc, #428]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 8041318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 804131a:	4a6a      	ldr	r2, [pc, #424]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 804131c:	f023 0301 	bic.w	r3, r3, #1
 8041320:	6713      	str	r3, [r2, #112]	@ 0x70
 8041322:	4b68      	ldr	r3, [pc, #416]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 8041324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041326:	4a67      	ldr	r2, [pc, #412]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 8041328:	f023 0304 	bic.w	r3, r3, #4
 804132c:	6713      	str	r3, [r2, #112]	@ 0x70
 804132e:	e01c      	b.n	804136a <HAL_RCC_OscConfig+0x376>
 8041330:	687b      	ldr	r3, [r7, #4]
 8041332:	689b      	ldr	r3, [r3, #8]
 8041334:	2b05      	cmp	r3, #5
 8041336:	d10c      	bne.n	8041352 <HAL_RCC_OscConfig+0x35e>
 8041338:	4b62      	ldr	r3, [pc, #392]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 804133a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 804133c:	4a61      	ldr	r2, [pc, #388]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 804133e:	f043 0304 	orr.w	r3, r3, #4
 8041342:	6713      	str	r3, [r2, #112]	@ 0x70
 8041344:	4b5f      	ldr	r3, [pc, #380]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 8041346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041348:	4a5e      	ldr	r2, [pc, #376]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 804134a:	f043 0301 	orr.w	r3, r3, #1
 804134e:	6713      	str	r3, [r2, #112]	@ 0x70
 8041350:	e00b      	b.n	804136a <HAL_RCC_OscConfig+0x376>
 8041352:	4b5c      	ldr	r3, [pc, #368]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 8041354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041356:	4a5b      	ldr	r2, [pc, #364]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 8041358:	f023 0301 	bic.w	r3, r3, #1
 804135c:	6713      	str	r3, [r2, #112]	@ 0x70
 804135e:	4b59      	ldr	r3, [pc, #356]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 8041360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041362:	4a58      	ldr	r2, [pc, #352]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 8041364:	f023 0304 	bic.w	r3, r3, #4
 8041368:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 804136a:	687b      	ldr	r3, [r7, #4]
 804136c:	689b      	ldr	r3, [r3, #8]
 804136e:	2b00      	cmp	r3, #0
 8041370:	d015      	beq.n	804139e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041372:	f7ff fb49 	bl	8040a08 <HAL_GetTick>
 8041376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041378:	e00a      	b.n	8041390 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 804137a:	f7ff fb45 	bl	8040a08 <HAL_GetTick>
 804137e:	4602      	mov	r2, r0
 8041380:	693b      	ldr	r3, [r7, #16]
 8041382:	1ad3      	subs	r3, r2, r3
 8041384:	f241 3288 	movw	r2, #5000	@ 0x1388
 8041388:	4293      	cmp	r3, r2
 804138a:	d901      	bls.n	8041390 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 804138c:	2303      	movs	r3, #3
 804138e:	e0d8      	b.n	8041542 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041390:	4b4c      	ldr	r3, [pc, #304]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 8041392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041394:	f003 0302 	and.w	r3, r3, #2
 8041398:	2b00      	cmp	r3, #0
 804139a:	d0ee      	beq.n	804137a <HAL_RCC_OscConfig+0x386>
 804139c:	e014      	b.n	80413c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804139e:	f7ff fb33 	bl	8040a08 <HAL_GetTick>
 80413a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80413a4:	e00a      	b.n	80413bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80413a6:	f7ff fb2f 	bl	8040a08 <HAL_GetTick>
 80413aa:	4602      	mov	r2, r0
 80413ac:	693b      	ldr	r3, [r7, #16]
 80413ae:	1ad3      	subs	r3, r2, r3
 80413b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80413b4:	4293      	cmp	r3, r2
 80413b6:	d901      	bls.n	80413bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80413b8:	2303      	movs	r3, #3
 80413ba:	e0c2      	b.n	8041542 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80413bc:	4b41      	ldr	r3, [pc, #260]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 80413be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80413c0:	f003 0302 	and.w	r3, r3, #2
 80413c4:	2b00      	cmp	r3, #0
 80413c6:	d1ee      	bne.n	80413a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80413c8:	7dfb      	ldrb	r3, [r7, #23]
 80413ca:	2b01      	cmp	r3, #1
 80413cc:	d105      	bne.n	80413da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80413ce:	4b3d      	ldr	r3, [pc, #244]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 80413d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80413d2:	4a3c      	ldr	r2, [pc, #240]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 80413d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80413d8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80413da:	687b      	ldr	r3, [r7, #4]
 80413dc:	699b      	ldr	r3, [r3, #24]
 80413de:	2b00      	cmp	r3, #0
 80413e0:	f000 80ae 	beq.w	8041540 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80413e4:	4b37      	ldr	r3, [pc, #220]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 80413e6:	689b      	ldr	r3, [r3, #8]
 80413e8:	f003 030c 	and.w	r3, r3, #12
 80413ec:	2b08      	cmp	r3, #8
 80413ee:	d06d      	beq.n	80414cc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80413f0:	687b      	ldr	r3, [r7, #4]
 80413f2:	699b      	ldr	r3, [r3, #24]
 80413f4:	2b02      	cmp	r3, #2
 80413f6:	d14b      	bne.n	8041490 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80413f8:	4b32      	ldr	r3, [pc, #200]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 80413fa:	681b      	ldr	r3, [r3, #0]
 80413fc:	4a31      	ldr	r2, [pc, #196]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 80413fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8041402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041404:	f7ff fb00 	bl	8040a08 <HAL_GetTick>
 8041408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804140a:	e008      	b.n	804141e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 804140c:	f7ff fafc 	bl	8040a08 <HAL_GetTick>
 8041410:	4602      	mov	r2, r0
 8041412:	693b      	ldr	r3, [r7, #16]
 8041414:	1ad3      	subs	r3, r2, r3
 8041416:	2b02      	cmp	r3, #2
 8041418:	d901      	bls.n	804141e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 804141a:	2303      	movs	r3, #3
 804141c:	e091      	b.n	8041542 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804141e:	4b29      	ldr	r3, [pc, #164]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 8041420:	681b      	ldr	r3, [r3, #0]
 8041422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8041426:	2b00      	cmp	r3, #0
 8041428:	d1f0      	bne.n	804140c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 804142a:	687b      	ldr	r3, [r7, #4]
 804142c:	69da      	ldr	r2, [r3, #28]
 804142e:	687b      	ldr	r3, [r7, #4]
 8041430:	6a1b      	ldr	r3, [r3, #32]
 8041432:	431a      	orrs	r2, r3
 8041434:	687b      	ldr	r3, [r7, #4]
 8041436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8041438:	019b      	lsls	r3, r3, #6
 804143a:	431a      	orrs	r2, r3
 804143c:	687b      	ldr	r3, [r7, #4]
 804143e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8041440:	085b      	lsrs	r3, r3, #1
 8041442:	3b01      	subs	r3, #1
 8041444:	041b      	lsls	r3, r3, #16
 8041446:	431a      	orrs	r2, r3
 8041448:	687b      	ldr	r3, [r7, #4]
 804144a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804144c:	061b      	lsls	r3, r3, #24
 804144e:	431a      	orrs	r2, r3
 8041450:	687b      	ldr	r3, [r7, #4]
 8041452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8041454:	071b      	lsls	r3, r3, #28
 8041456:	491b      	ldr	r1, [pc, #108]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 8041458:	4313      	orrs	r3, r2
 804145a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 804145c:	4b19      	ldr	r3, [pc, #100]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 804145e:	681b      	ldr	r3, [r3, #0]
 8041460:	4a18      	ldr	r2, [pc, #96]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 8041462:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8041466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041468:	f7ff face 	bl	8040a08 <HAL_GetTick>
 804146c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 804146e:	e008      	b.n	8041482 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041470:	f7ff faca 	bl	8040a08 <HAL_GetTick>
 8041474:	4602      	mov	r2, r0
 8041476:	693b      	ldr	r3, [r7, #16]
 8041478:	1ad3      	subs	r3, r2, r3
 804147a:	2b02      	cmp	r3, #2
 804147c:	d901      	bls.n	8041482 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 804147e:	2303      	movs	r3, #3
 8041480:	e05f      	b.n	8041542 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8041482:	4b10      	ldr	r3, [pc, #64]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 8041484:	681b      	ldr	r3, [r3, #0]
 8041486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 804148a:	2b00      	cmp	r3, #0
 804148c:	d0f0      	beq.n	8041470 <HAL_RCC_OscConfig+0x47c>
 804148e:	e057      	b.n	8041540 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041490:	4b0c      	ldr	r3, [pc, #48]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 8041492:	681b      	ldr	r3, [r3, #0]
 8041494:	4a0b      	ldr	r2, [pc, #44]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 8041496:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 804149a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804149c:	f7ff fab4 	bl	8040a08 <HAL_GetTick>
 80414a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80414a2:	e008      	b.n	80414b6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80414a4:	f7ff fab0 	bl	8040a08 <HAL_GetTick>
 80414a8:	4602      	mov	r2, r0
 80414aa:	693b      	ldr	r3, [r7, #16]
 80414ac:	1ad3      	subs	r3, r2, r3
 80414ae:	2b02      	cmp	r3, #2
 80414b0:	d901      	bls.n	80414b6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80414b2:	2303      	movs	r3, #3
 80414b4:	e045      	b.n	8041542 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80414b6:	4b03      	ldr	r3, [pc, #12]	@ (80414c4 <HAL_RCC_OscConfig+0x4d0>)
 80414b8:	681b      	ldr	r3, [r3, #0]
 80414ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80414be:	2b00      	cmp	r3, #0
 80414c0:	d1f0      	bne.n	80414a4 <HAL_RCC_OscConfig+0x4b0>
 80414c2:	e03d      	b.n	8041540 <HAL_RCC_OscConfig+0x54c>
 80414c4:	40023800 	.word	0x40023800
 80414c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80414cc:	4b1f      	ldr	r3, [pc, #124]	@ (804154c <HAL_RCC_OscConfig+0x558>)
 80414ce:	685b      	ldr	r3, [r3, #4]
 80414d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80414d2:	687b      	ldr	r3, [r7, #4]
 80414d4:	699b      	ldr	r3, [r3, #24]
 80414d6:	2b01      	cmp	r3, #1
 80414d8:	d030      	beq.n	804153c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80414da:	68fb      	ldr	r3, [r7, #12]
 80414dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80414e0:	687b      	ldr	r3, [r7, #4]
 80414e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80414e4:	429a      	cmp	r2, r3
 80414e6:	d129      	bne.n	804153c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80414e8:	68fb      	ldr	r3, [r7, #12]
 80414ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80414ee:	687b      	ldr	r3, [r7, #4]
 80414f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80414f2:	429a      	cmp	r2, r3
 80414f4:	d122      	bne.n	804153c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80414f6:	68fa      	ldr	r2, [r7, #12]
 80414f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80414fc:	4013      	ands	r3, r2
 80414fe:	687a      	ldr	r2, [r7, #4]
 8041500:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8041502:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8041504:	4293      	cmp	r3, r2
 8041506:	d119      	bne.n	804153c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8041508:	68fb      	ldr	r3, [r7, #12]
 804150a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 804150e:	687b      	ldr	r3, [r7, #4]
 8041510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8041512:	085b      	lsrs	r3, r3, #1
 8041514:	3b01      	subs	r3, #1
 8041516:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8041518:	429a      	cmp	r2, r3
 804151a:	d10f      	bne.n	804153c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 804151c:	68fb      	ldr	r3, [r7, #12]
 804151e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8041522:	687b      	ldr	r3, [r7, #4]
 8041524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8041526:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8041528:	429a      	cmp	r2, r3
 804152a:	d107      	bne.n	804153c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 804152c:	68fb      	ldr	r3, [r7, #12]
 804152e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8041532:	687b      	ldr	r3, [r7, #4]
 8041534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8041536:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8041538:	429a      	cmp	r2, r3
 804153a:	d001      	beq.n	8041540 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 804153c:	2301      	movs	r3, #1
 804153e:	e000      	b.n	8041542 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8041540:	2300      	movs	r3, #0
}
 8041542:	4618      	mov	r0, r3
 8041544:	3718      	adds	r7, #24
 8041546:	46bd      	mov	sp, r7
 8041548:	bd80      	pop	{r7, pc}
 804154a:	bf00      	nop
 804154c:	40023800 	.word	0x40023800

08041550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8041550:	b580      	push	{r7, lr}
 8041552:	b084      	sub	sp, #16
 8041554:	af00      	add	r7, sp, #0
 8041556:	6078      	str	r0, [r7, #4]
 8041558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 804155a:	2300      	movs	r3, #0
 804155c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 804155e:	687b      	ldr	r3, [r7, #4]
 8041560:	2b00      	cmp	r3, #0
 8041562:	d101      	bne.n	8041568 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8041564:	2301      	movs	r3, #1
 8041566:	e0d0      	b.n	804170a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8041568:	4b6a      	ldr	r3, [pc, #424]	@ (8041714 <HAL_RCC_ClockConfig+0x1c4>)
 804156a:	681b      	ldr	r3, [r3, #0]
 804156c:	f003 030f 	and.w	r3, r3, #15
 8041570:	683a      	ldr	r2, [r7, #0]
 8041572:	429a      	cmp	r2, r3
 8041574:	d910      	bls.n	8041598 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041576:	4b67      	ldr	r3, [pc, #412]	@ (8041714 <HAL_RCC_ClockConfig+0x1c4>)
 8041578:	681b      	ldr	r3, [r3, #0]
 804157a:	f023 020f 	bic.w	r2, r3, #15
 804157e:	4965      	ldr	r1, [pc, #404]	@ (8041714 <HAL_RCC_ClockConfig+0x1c4>)
 8041580:	683b      	ldr	r3, [r7, #0]
 8041582:	4313      	orrs	r3, r2
 8041584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8041586:	4b63      	ldr	r3, [pc, #396]	@ (8041714 <HAL_RCC_ClockConfig+0x1c4>)
 8041588:	681b      	ldr	r3, [r3, #0]
 804158a:	f003 030f 	and.w	r3, r3, #15
 804158e:	683a      	ldr	r2, [r7, #0]
 8041590:	429a      	cmp	r2, r3
 8041592:	d001      	beq.n	8041598 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8041594:	2301      	movs	r3, #1
 8041596:	e0b8      	b.n	804170a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8041598:	687b      	ldr	r3, [r7, #4]
 804159a:	681b      	ldr	r3, [r3, #0]
 804159c:	f003 0302 	and.w	r3, r3, #2
 80415a0:	2b00      	cmp	r3, #0
 80415a2:	d020      	beq.n	80415e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80415a4:	687b      	ldr	r3, [r7, #4]
 80415a6:	681b      	ldr	r3, [r3, #0]
 80415a8:	f003 0304 	and.w	r3, r3, #4
 80415ac:	2b00      	cmp	r3, #0
 80415ae:	d005      	beq.n	80415bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80415b0:	4b59      	ldr	r3, [pc, #356]	@ (8041718 <HAL_RCC_ClockConfig+0x1c8>)
 80415b2:	689b      	ldr	r3, [r3, #8]
 80415b4:	4a58      	ldr	r2, [pc, #352]	@ (8041718 <HAL_RCC_ClockConfig+0x1c8>)
 80415b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80415ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80415bc:	687b      	ldr	r3, [r7, #4]
 80415be:	681b      	ldr	r3, [r3, #0]
 80415c0:	f003 0308 	and.w	r3, r3, #8
 80415c4:	2b00      	cmp	r3, #0
 80415c6:	d005      	beq.n	80415d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80415c8:	4b53      	ldr	r3, [pc, #332]	@ (8041718 <HAL_RCC_ClockConfig+0x1c8>)
 80415ca:	689b      	ldr	r3, [r3, #8]
 80415cc:	4a52      	ldr	r2, [pc, #328]	@ (8041718 <HAL_RCC_ClockConfig+0x1c8>)
 80415ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80415d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80415d4:	4b50      	ldr	r3, [pc, #320]	@ (8041718 <HAL_RCC_ClockConfig+0x1c8>)
 80415d6:	689b      	ldr	r3, [r3, #8]
 80415d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80415dc:	687b      	ldr	r3, [r7, #4]
 80415de:	689b      	ldr	r3, [r3, #8]
 80415e0:	494d      	ldr	r1, [pc, #308]	@ (8041718 <HAL_RCC_ClockConfig+0x1c8>)
 80415e2:	4313      	orrs	r3, r2
 80415e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80415e6:	687b      	ldr	r3, [r7, #4]
 80415e8:	681b      	ldr	r3, [r3, #0]
 80415ea:	f003 0301 	and.w	r3, r3, #1
 80415ee:	2b00      	cmp	r3, #0
 80415f0:	d040      	beq.n	8041674 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80415f2:	687b      	ldr	r3, [r7, #4]
 80415f4:	685b      	ldr	r3, [r3, #4]
 80415f6:	2b01      	cmp	r3, #1
 80415f8:	d107      	bne.n	804160a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80415fa:	4b47      	ldr	r3, [pc, #284]	@ (8041718 <HAL_RCC_ClockConfig+0x1c8>)
 80415fc:	681b      	ldr	r3, [r3, #0]
 80415fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8041602:	2b00      	cmp	r3, #0
 8041604:	d115      	bne.n	8041632 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8041606:	2301      	movs	r3, #1
 8041608:	e07f      	b.n	804170a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 804160a:	687b      	ldr	r3, [r7, #4]
 804160c:	685b      	ldr	r3, [r3, #4]
 804160e:	2b02      	cmp	r3, #2
 8041610:	d107      	bne.n	8041622 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8041612:	4b41      	ldr	r3, [pc, #260]	@ (8041718 <HAL_RCC_ClockConfig+0x1c8>)
 8041614:	681b      	ldr	r3, [r3, #0]
 8041616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 804161a:	2b00      	cmp	r3, #0
 804161c:	d109      	bne.n	8041632 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 804161e:	2301      	movs	r3, #1
 8041620:	e073      	b.n	804170a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8041622:	4b3d      	ldr	r3, [pc, #244]	@ (8041718 <HAL_RCC_ClockConfig+0x1c8>)
 8041624:	681b      	ldr	r3, [r3, #0]
 8041626:	f003 0302 	and.w	r3, r3, #2
 804162a:	2b00      	cmp	r3, #0
 804162c:	d101      	bne.n	8041632 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 804162e:	2301      	movs	r3, #1
 8041630:	e06b      	b.n	804170a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8041632:	4b39      	ldr	r3, [pc, #228]	@ (8041718 <HAL_RCC_ClockConfig+0x1c8>)
 8041634:	689b      	ldr	r3, [r3, #8]
 8041636:	f023 0203 	bic.w	r2, r3, #3
 804163a:	687b      	ldr	r3, [r7, #4]
 804163c:	685b      	ldr	r3, [r3, #4]
 804163e:	4936      	ldr	r1, [pc, #216]	@ (8041718 <HAL_RCC_ClockConfig+0x1c8>)
 8041640:	4313      	orrs	r3, r2
 8041642:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8041644:	f7ff f9e0 	bl	8040a08 <HAL_GetTick>
 8041648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 804164a:	e00a      	b.n	8041662 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 804164c:	f7ff f9dc 	bl	8040a08 <HAL_GetTick>
 8041650:	4602      	mov	r2, r0
 8041652:	68fb      	ldr	r3, [r7, #12]
 8041654:	1ad3      	subs	r3, r2, r3
 8041656:	f241 3288 	movw	r2, #5000	@ 0x1388
 804165a:	4293      	cmp	r3, r2
 804165c:	d901      	bls.n	8041662 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 804165e:	2303      	movs	r3, #3
 8041660:	e053      	b.n	804170a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8041662:	4b2d      	ldr	r3, [pc, #180]	@ (8041718 <HAL_RCC_ClockConfig+0x1c8>)
 8041664:	689b      	ldr	r3, [r3, #8]
 8041666:	f003 020c 	and.w	r2, r3, #12
 804166a:	687b      	ldr	r3, [r7, #4]
 804166c:	685b      	ldr	r3, [r3, #4]
 804166e:	009b      	lsls	r3, r3, #2
 8041670:	429a      	cmp	r2, r3
 8041672:	d1eb      	bne.n	804164c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8041674:	4b27      	ldr	r3, [pc, #156]	@ (8041714 <HAL_RCC_ClockConfig+0x1c4>)
 8041676:	681b      	ldr	r3, [r3, #0]
 8041678:	f003 030f 	and.w	r3, r3, #15
 804167c:	683a      	ldr	r2, [r7, #0]
 804167e:	429a      	cmp	r2, r3
 8041680:	d210      	bcs.n	80416a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041682:	4b24      	ldr	r3, [pc, #144]	@ (8041714 <HAL_RCC_ClockConfig+0x1c4>)
 8041684:	681b      	ldr	r3, [r3, #0]
 8041686:	f023 020f 	bic.w	r2, r3, #15
 804168a:	4922      	ldr	r1, [pc, #136]	@ (8041714 <HAL_RCC_ClockConfig+0x1c4>)
 804168c:	683b      	ldr	r3, [r7, #0]
 804168e:	4313      	orrs	r3, r2
 8041690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8041692:	4b20      	ldr	r3, [pc, #128]	@ (8041714 <HAL_RCC_ClockConfig+0x1c4>)
 8041694:	681b      	ldr	r3, [r3, #0]
 8041696:	f003 030f 	and.w	r3, r3, #15
 804169a:	683a      	ldr	r2, [r7, #0]
 804169c:	429a      	cmp	r2, r3
 804169e:	d001      	beq.n	80416a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80416a0:	2301      	movs	r3, #1
 80416a2:	e032      	b.n	804170a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80416a4:	687b      	ldr	r3, [r7, #4]
 80416a6:	681b      	ldr	r3, [r3, #0]
 80416a8:	f003 0304 	and.w	r3, r3, #4
 80416ac:	2b00      	cmp	r3, #0
 80416ae:	d008      	beq.n	80416c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80416b0:	4b19      	ldr	r3, [pc, #100]	@ (8041718 <HAL_RCC_ClockConfig+0x1c8>)
 80416b2:	689b      	ldr	r3, [r3, #8]
 80416b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80416b8:	687b      	ldr	r3, [r7, #4]
 80416ba:	68db      	ldr	r3, [r3, #12]
 80416bc:	4916      	ldr	r1, [pc, #88]	@ (8041718 <HAL_RCC_ClockConfig+0x1c8>)
 80416be:	4313      	orrs	r3, r2
 80416c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80416c2:	687b      	ldr	r3, [r7, #4]
 80416c4:	681b      	ldr	r3, [r3, #0]
 80416c6:	f003 0308 	and.w	r3, r3, #8
 80416ca:	2b00      	cmp	r3, #0
 80416cc:	d009      	beq.n	80416e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80416ce:	4b12      	ldr	r3, [pc, #72]	@ (8041718 <HAL_RCC_ClockConfig+0x1c8>)
 80416d0:	689b      	ldr	r3, [r3, #8]
 80416d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80416d6:	687b      	ldr	r3, [r7, #4]
 80416d8:	691b      	ldr	r3, [r3, #16]
 80416da:	00db      	lsls	r3, r3, #3
 80416dc:	490e      	ldr	r1, [pc, #56]	@ (8041718 <HAL_RCC_ClockConfig+0x1c8>)
 80416de:	4313      	orrs	r3, r2
 80416e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80416e2:	f000 f821 	bl	8041728 <HAL_RCC_GetSysClockFreq>
 80416e6:	4602      	mov	r2, r0
 80416e8:	4b0b      	ldr	r3, [pc, #44]	@ (8041718 <HAL_RCC_ClockConfig+0x1c8>)
 80416ea:	689b      	ldr	r3, [r3, #8]
 80416ec:	091b      	lsrs	r3, r3, #4
 80416ee:	f003 030f 	and.w	r3, r3, #15
 80416f2:	490a      	ldr	r1, [pc, #40]	@ (804171c <HAL_RCC_ClockConfig+0x1cc>)
 80416f4:	5ccb      	ldrb	r3, [r1, r3]
 80416f6:	fa22 f303 	lsr.w	r3, r2, r3
 80416fa:	4a09      	ldr	r2, [pc, #36]	@ (8041720 <HAL_RCC_ClockConfig+0x1d0>)
 80416fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80416fe:	4b09      	ldr	r3, [pc, #36]	@ (8041724 <HAL_RCC_ClockConfig+0x1d4>)
 8041700:	681b      	ldr	r3, [r3, #0]
 8041702:	4618      	mov	r0, r3
 8041704:	f7ff f93c 	bl	8040980 <HAL_InitTick>

  return HAL_OK;
 8041708:	2300      	movs	r3, #0
}
 804170a:	4618      	mov	r0, r3
 804170c:	3710      	adds	r7, #16
 804170e:	46bd      	mov	sp, r7
 8041710:	bd80      	pop	{r7, pc}
 8041712:	bf00      	nop
 8041714:	40023c00 	.word	0x40023c00
 8041718:	40023800 	.word	0x40023800
 804171c:	080419a0 	.word	0x080419a0
 8041720:	20000000 	.word	0x20000000
 8041724:	20000004 	.word	0x20000004

08041728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8041728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 804172c:	b094      	sub	sp, #80	@ 0x50
 804172e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8041730:	2300      	movs	r3, #0
 8041732:	647b      	str	r3, [r7, #68]	@ 0x44
 8041734:	2300      	movs	r3, #0
 8041736:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8041738:	2300      	movs	r3, #0
 804173a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 804173c:	2300      	movs	r3, #0
 804173e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8041740:	4b79      	ldr	r3, [pc, #484]	@ (8041928 <HAL_RCC_GetSysClockFreq+0x200>)
 8041742:	689b      	ldr	r3, [r3, #8]
 8041744:	f003 030c 	and.w	r3, r3, #12
 8041748:	2b08      	cmp	r3, #8
 804174a:	d00d      	beq.n	8041768 <HAL_RCC_GetSysClockFreq+0x40>
 804174c:	2b08      	cmp	r3, #8
 804174e:	f200 80e1 	bhi.w	8041914 <HAL_RCC_GetSysClockFreq+0x1ec>
 8041752:	2b00      	cmp	r3, #0
 8041754:	d002      	beq.n	804175c <HAL_RCC_GetSysClockFreq+0x34>
 8041756:	2b04      	cmp	r3, #4
 8041758:	d003      	beq.n	8041762 <HAL_RCC_GetSysClockFreq+0x3a>
 804175a:	e0db      	b.n	8041914 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 804175c:	4b73      	ldr	r3, [pc, #460]	@ (804192c <HAL_RCC_GetSysClockFreq+0x204>)
 804175e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8041760:	e0db      	b.n	804191a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8041762:	4b72      	ldr	r3, [pc, #456]	@ (804192c <HAL_RCC_GetSysClockFreq+0x204>)
 8041764:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8041766:	e0d8      	b.n	804191a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8041768:	4b6f      	ldr	r3, [pc, #444]	@ (8041928 <HAL_RCC_GetSysClockFreq+0x200>)
 804176a:	685b      	ldr	r3, [r3, #4]
 804176c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8041770:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8041772:	4b6d      	ldr	r3, [pc, #436]	@ (8041928 <HAL_RCC_GetSysClockFreq+0x200>)
 8041774:	685b      	ldr	r3, [r3, #4]
 8041776:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 804177a:	2b00      	cmp	r3, #0
 804177c:	d063      	beq.n	8041846 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 804177e:	4b6a      	ldr	r3, [pc, #424]	@ (8041928 <HAL_RCC_GetSysClockFreq+0x200>)
 8041780:	685b      	ldr	r3, [r3, #4]
 8041782:	099b      	lsrs	r3, r3, #6
 8041784:	2200      	movs	r2, #0
 8041786:	63bb      	str	r3, [r7, #56]	@ 0x38
 8041788:	63fa      	str	r2, [r7, #60]	@ 0x3c
 804178a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 804178c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8041790:	633b      	str	r3, [r7, #48]	@ 0x30
 8041792:	2300      	movs	r3, #0
 8041794:	637b      	str	r3, [r7, #52]	@ 0x34
 8041796:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 804179a:	4622      	mov	r2, r4
 804179c:	462b      	mov	r3, r5
 804179e:	f04f 0000 	mov.w	r0, #0
 80417a2:	f04f 0100 	mov.w	r1, #0
 80417a6:	0159      	lsls	r1, r3, #5
 80417a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80417ac:	0150      	lsls	r0, r2, #5
 80417ae:	4602      	mov	r2, r0
 80417b0:	460b      	mov	r3, r1
 80417b2:	4621      	mov	r1, r4
 80417b4:	1a51      	subs	r1, r2, r1
 80417b6:	6139      	str	r1, [r7, #16]
 80417b8:	4629      	mov	r1, r5
 80417ba:	eb63 0301 	sbc.w	r3, r3, r1
 80417be:	617b      	str	r3, [r7, #20]
 80417c0:	f04f 0200 	mov.w	r2, #0
 80417c4:	f04f 0300 	mov.w	r3, #0
 80417c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80417cc:	4659      	mov	r1, fp
 80417ce:	018b      	lsls	r3, r1, #6
 80417d0:	4651      	mov	r1, sl
 80417d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80417d6:	4651      	mov	r1, sl
 80417d8:	018a      	lsls	r2, r1, #6
 80417da:	4651      	mov	r1, sl
 80417dc:	ebb2 0801 	subs.w	r8, r2, r1
 80417e0:	4659      	mov	r1, fp
 80417e2:	eb63 0901 	sbc.w	r9, r3, r1
 80417e6:	f04f 0200 	mov.w	r2, #0
 80417ea:	f04f 0300 	mov.w	r3, #0
 80417ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80417f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80417f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80417fa:	4690      	mov	r8, r2
 80417fc:	4699      	mov	r9, r3
 80417fe:	4623      	mov	r3, r4
 8041800:	eb18 0303 	adds.w	r3, r8, r3
 8041804:	60bb      	str	r3, [r7, #8]
 8041806:	462b      	mov	r3, r5
 8041808:	eb49 0303 	adc.w	r3, r9, r3
 804180c:	60fb      	str	r3, [r7, #12]
 804180e:	f04f 0200 	mov.w	r2, #0
 8041812:	f04f 0300 	mov.w	r3, #0
 8041816:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 804181a:	4629      	mov	r1, r5
 804181c:	028b      	lsls	r3, r1, #10
 804181e:	4621      	mov	r1, r4
 8041820:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8041824:	4621      	mov	r1, r4
 8041826:	028a      	lsls	r2, r1, #10
 8041828:	4610      	mov	r0, r2
 804182a:	4619      	mov	r1, r3
 804182c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 804182e:	2200      	movs	r2, #0
 8041830:	62bb      	str	r3, [r7, #40]	@ 0x28
 8041832:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8041834:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8041838:	f7fe fcfe 	bl	8040238 <__aeabi_uldivmod>
 804183c:	4602      	mov	r2, r0
 804183e:	460b      	mov	r3, r1
 8041840:	4613      	mov	r3, r2
 8041842:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8041844:	e058      	b.n	80418f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8041846:	4b38      	ldr	r3, [pc, #224]	@ (8041928 <HAL_RCC_GetSysClockFreq+0x200>)
 8041848:	685b      	ldr	r3, [r3, #4]
 804184a:	099b      	lsrs	r3, r3, #6
 804184c:	2200      	movs	r2, #0
 804184e:	4618      	mov	r0, r3
 8041850:	4611      	mov	r1, r2
 8041852:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8041856:	623b      	str	r3, [r7, #32]
 8041858:	2300      	movs	r3, #0
 804185a:	627b      	str	r3, [r7, #36]	@ 0x24
 804185c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8041860:	4642      	mov	r2, r8
 8041862:	464b      	mov	r3, r9
 8041864:	f04f 0000 	mov.w	r0, #0
 8041868:	f04f 0100 	mov.w	r1, #0
 804186c:	0159      	lsls	r1, r3, #5
 804186e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8041872:	0150      	lsls	r0, r2, #5
 8041874:	4602      	mov	r2, r0
 8041876:	460b      	mov	r3, r1
 8041878:	4641      	mov	r1, r8
 804187a:	ebb2 0a01 	subs.w	sl, r2, r1
 804187e:	4649      	mov	r1, r9
 8041880:	eb63 0b01 	sbc.w	fp, r3, r1
 8041884:	f04f 0200 	mov.w	r2, #0
 8041888:	f04f 0300 	mov.w	r3, #0
 804188c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8041890:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8041894:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8041898:	ebb2 040a 	subs.w	r4, r2, sl
 804189c:	eb63 050b 	sbc.w	r5, r3, fp
 80418a0:	f04f 0200 	mov.w	r2, #0
 80418a4:	f04f 0300 	mov.w	r3, #0
 80418a8:	00eb      	lsls	r3, r5, #3
 80418aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80418ae:	00e2      	lsls	r2, r4, #3
 80418b0:	4614      	mov	r4, r2
 80418b2:	461d      	mov	r5, r3
 80418b4:	4643      	mov	r3, r8
 80418b6:	18e3      	adds	r3, r4, r3
 80418b8:	603b      	str	r3, [r7, #0]
 80418ba:	464b      	mov	r3, r9
 80418bc:	eb45 0303 	adc.w	r3, r5, r3
 80418c0:	607b      	str	r3, [r7, #4]
 80418c2:	f04f 0200 	mov.w	r2, #0
 80418c6:	f04f 0300 	mov.w	r3, #0
 80418ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80418ce:	4629      	mov	r1, r5
 80418d0:	028b      	lsls	r3, r1, #10
 80418d2:	4621      	mov	r1, r4
 80418d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80418d8:	4621      	mov	r1, r4
 80418da:	028a      	lsls	r2, r1, #10
 80418dc:	4610      	mov	r0, r2
 80418de:	4619      	mov	r1, r3
 80418e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80418e2:	2200      	movs	r2, #0
 80418e4:	61bb      	str	r3, [r7, #24]
 80418e6:	61fa      	str	r2, [r7, #28]
 80418e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80418ec:	f7fe fca4 	bl	8040238 <__aeabi_uldivmod>
 80418f0:	4602      	mov	r2, r0
 80418f2:	460b      	mov	r3, r1
 80418f4:	4613      	mov	r3, r2
 80418f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80418f8:	4b0b      	ldr	r3, [pc, #44]	@ (8041928 <HAL_RCC_GetSysClockFreq+0x200>)
 80418fa:	685b      	ldr	r3, [r3, #4]
 80418fc:	0c1b      	lsrs	r3, r3, #16
 80418fe:	f003 0303 	and.w	r3, r3, #3
 8041902:	3301      	adds	r3, #1
 8041904:	005b      	lsls	r3, r3, #1
 8041906:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8041908:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 804190a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 804190c:	fbb2 f3f3 	udiv	r3, r2, r3
 8041910:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8041912:	e002      	b.n	804191a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8041914:	4b05      	ldr	r3, [pc, #20]	@ (804192c <HAL_RCC_GetSysClockFreq+0x204>)
 8041916:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8041918:	bf00      	nop
    }
  }
  return sysclockfreq;
 804191a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 804191c:	4618      	mov	r0, r3
 804191e:	3750      	adds	r7, #80	@ 0x50
 8041920:	46bd      	mov	sp, r7
 8041922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8041926:	bf00      	nop
 8041928:	40023800 	.word	0x40023800
 804192c:	00f42400 	.word	0x00f42400

08041930 <memset>:
 8041930:	4402      	add	r2, r0
 8041932:	4603      	mov	r3, r0
 8041934:	4293      	cmp	r3, r2
 8041936:	d100      	bne.n	804193a <memset+0xa>
 8041938:	4770      	bx	lr
 804193a:	f803 1b01 	strb.w	r1, [r3], #1
 804193e:	e7f9      	b.n	8041934 <memset+0x4>

08041940 <__libc_init_array>:
 8041940:	b570      	push	{r4, r5, r6, lr}
 8041942:	4d0d      	ldr	r5, [pc, #52]	@ (8041978 <__libc_init_array+0x38>)
 8041944:	4c0d      	ldr	r4, [pc, #52]	@ (804197c <__libc_init_array+0x3c>)
 8041946:	1b64      	subs	r4, r4, r5
 8041948:	10a4      	asrs	r4, r4, #2
 804194a:	2600      	movs	r6, #0
 804194c:	42a6      	cmp	r6, r4
 804194e:	d109      	bne.n	8041964 <__libc_init_array+0x24>
 8041950:	4d0b      	ldr	r5, [pc, #44]	@ (8041980 <__libc_init_array+0x40>)
 8041952:	4c0c      	ldr	r4, [pc, #48]	@ (8041984 <__libc_init_array+0x44>)
 8041954:	f000 f818 	bl	8041988 <_init>
 8041958:	1b64      	subs	r4, r4, r5
 804195a:	10a4      	asrs	r4, r4, #2
 804195c:	2600      	movs	r6, #0
 804195e:	42a6      	cmp	r6, r4
 8041960:	d105      	bne.n	804196e <__libc_init_array+0x2e>
 8041962:	bd70      	pop	{r4, r5, r6, pc}
 8041964:	f855 3b04 	ldr.w	r3, [r5], #4
 8041968:	4798      	blx	r3
 804196a:	3601      	adds	r6, #1
 804196c:	e7ee      	b.n	804194c <__libc_init_array+0xc>
 804196e:	f855 3b04 	ldr.w	r3, [r5], #4
 8041972:	4798      	blx	r3
 8041974:	3601      	adds	r6, #1
 8041976:	e7f2      	b.n	804195e <__libc_init_array+0x1e>
 8041978:	080419b8 	.word	0x080419b8
 804197c:	080419b8 	.word	0x080419b8
 8041980:	080419b8 	.word	0x080419b8
 8041984:	080419bc 	.word	0x080419bc

08041988 <_init>:
 8041988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804198a:	bf00      	nop
 804198c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804198e:	bc08      	pop	{r3}
 8041990:	469e      	mov	lr, r3
 8041992:	4770      	bx	lr

08041994 <_fini>:
 8041994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8041996:	bf00      	nop
 8041998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804199a:	bc08      	pop	{r3}
 804199c:	469e      	mov	lr, r3
 804199e:	4770      	bx	lr
